var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"Foc_model_Matlab","ref":false,"files":[{"name":"Foc_model_Matlab.c","type":"source","group":"model","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Foc_model_Matlab.c\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Foc_model_Matlab.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"Foc_model_Matlab_private.h\"\r\n#include <math.h>\r\n#include \"rt_nonfinite.h\"\r\n\r\n/* Named constants for Chart: '<S4>/Enable PDB and start FTM' */\r\n#define Foc_model_Matlab_IN_A          ((uint8_T)1U)\r\n#define Foc_model_Matlab_IN_END        ((uint8_T)2U)\r\n\r\nlpspi_state_t lpspiMasterState0;\r\nvoid lpspi_master_transfer_callback0(void *driverState, spi_event_t event, void *\r\n  userData) __attribute__((weak));\r\n\r\n/* Exported data definition */\r\n\r\n/* Volatile memory section */\r\n/* Definition for custom storage class: Volatile */\r\nvolatile real32_T ADC_A;               /* '<Root>/Data Store Memory11' */\r\nvolatile real32_T ADC_B;               /* '<Root>/Data Store Memory12' */\r\nvolatile uint32_T ADC_IA;              /* '<S139>/ADC_AD4_IA' */\r\nvolatile uint32_T ADC_IB;              /* '<S139>/ADC_IB' */\r\nvolatile uint32_T ADC_IDC;             /* '<S139>/ADC_AD6_IDC' */\r\nvolatile uint32_T ADC_VDC;             /* '<S139>/ADC_AD7_VDC' */\r\nvolatile uint32_T CH0S_ERR;            /* '<S138>/PDB1_ISR' */\r\nvolatile uint32_T CH1S_ERR;            /* '<S138>/PDB1_ISR' */\r\nvolatile uint16_T CntHall;             /* '<S3>/FTM_Hall_Sensor' */\r\nvolatile uint16_T CntHallValidityIn;\r\n                                /* '<S2>/SigConvForSigProp_Variant_Source2_0' */\r\nvolatile real32_T DesiredSpeed;        /* '<Root>/Data Store Memory7' */\r\nvolatile boolean_T Enable;             /* '<Root>/Data Store Memory29' */\r\nvolatile real32_T Epsilon_d;           /* '<Root>/Data Store Memory16' */\r\nvolatile real32_T Epsilon_q;           /* '<Root>/Data Store Memory14' */\r\nvolatile real32_T Epsilon_w;           /* '<Root>/Data Store Memory13' */\r\nvolatile boolean_T FAULT;              /* '<Root>/I_MAX Scalling3' */\r\nvolatile int16_T GlobalDirection;      /* '<Root>/Data Store Memory3' */\r\nvolatile uint32_T GlobalHallState;     /* '<Root>/Data Store Memory4' */\r\nvolatile uint16_T GlobalSpeedCount;    /* '<Root>/Data Store Memory1' */\r\nvolatile uint16_T GlobalSpeedValidity; /* '<Root>/Data Store Memory2' */\r\nvolatile uint32_T HALL_A;              /* '<S121>/bit_shift' */\r\nvolatile uint32_T HALL_A_controller;   /* '<S70>/Data Type Conversion6' */\r\nvolatile uint32_T HALL_B;              /* '<S122>/bit_shift' */\r\nvolatile uint32_T HALL_B_controller;   /* '<S72>/bit_shift' */\r\nvolatile uint32_T HALL_C;              /* '<S119>/Data Type Conversion6' */\r\nvolatile uint32_T HALL_C_controller;   /* '<S71>/bit_shift' */\r\nvolatile uint16_T HallCntActual;       /* '<Root>/Data Store Memory25' */\r\nvolatile uint16_T HallCntPrev;         /* '<Root>/Data Store Memory24' */\r\nvolatile uint16_T HallStateChangeFlag; /* '<Root>/Data Store Memory' */\r\nvolatile uint16_T HallValididyInvalid; /* '<S125>/Merge' */\r\nvolatile real32_T I_ab_afterOffset[2]; /* '<S66>/Add' */\r\nvolatile real32_T IaOffset;            /* '<Root>/Data Store Memory5' */\r\nvolatile real32_T IbOffset;            /* '<Root>/Data Store Memory6' */\r\nvolatile real32_T Id_err;              /* '<S23>/Sum1' */\r\nvolatile real32_T Id_fb;               /* '<S15>/Signal Copy1' */\r\nvolatile real32_T Idc_afterOffset;     /* '<S141>/Sum' */\r\nvolatile real32_T Iq_fb;               /* '<S15>/Signal Copy' */\r\nvolatile real32_T Iq_ref_PU;           /* '<Root>/RT11' */\r\nvolatile real32_T Lambda_d;            /* '<Root>/Data Store Memory17' */\r\nvolatile real32_T Lambda_q;            /* '<Root>/Data Store Memory15' */\r\nvolatile real32_T Lambda_w;            /* '<Root>/Data Store Memory9' */\r\nvolatile real32_T PWM[3];              /* '<S11>/Switch1' */\r\nvolatile real32_T PWM_Duty_Cycles[3];  /* '<S12>/Gain' */\r\nvolatile real32_T PWM_Enable;          /* '<S12>/Data Type Conversion' */\r\nvolatile real32_T Rho_d;               /* '<Root>/Data Store Memory18' */\r\nvolatile real32_T Rho_q;               /* '<Root>/Data Store Memory8' */\r\nvolatile real32_T Rho_w;               /* '<Root>/Data Store Memory10' */\r\nvolatile uint32_T SC_PDBIF;            /* '<S138>/PDB1_ISR' */\r\nvolatile real32_T SpeedError;          /* '<S154>/Sum' */\r\nvolatile real32_T SpeedMeasured;       /* '<S1>/Input Scaling' */\r\nvolatile real32_T Speed_Ref;           /* '<S152>/Switch' */\r\nvolatile real32_T Speed_Ref_PU;        /* '<Root>/RT2' */\r\nvolatile real32_T Speed_fb;            /* '<Root>/RT1' */\r\nvolatile real32_T ThetaHalls;          /* '<S68>/Merge1' */\r\n\r\n/* Block signals (default storage) */\r\nB_Foc_model_Matlab_T Foc_model_Matlab_B;\r\n\r\n/* Block states (default storage) */\r\nDW_Foc_model_Matlab_T Foc_model_Matlab_DW;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_Foc_model_Matlab_T Foc_model_Matlab_M_;\r\nRT_MODEL_Foc_model_Matlab_T *const Foc_model_Matlab_M = &Foc_model_Matlab_M_;\r\nstatic void rate_monotonic_scheduler(void);\r\ntrgmux_inout_mapping_config_t trgmuxAllMappingConfig[2];\r\nconst trgmux_user_config_t pdbTrgmuxUserConfig = {\r\n  .numInOutMappingConfigs = 2,\r\n  .inOutMappingConfig = trgmuxAllMappingConfig\r\n};\r\n\r\nvoid pdb0_isr(void)\r\n{\r\n  uint32_t fPDBIF = (uint32_t)PDB_DRV_GetTimerIntFlag(0);\r\n  uint32_t errCh0 = PDB_DRV_GetAdcPreTriggerSeqErrFlags(0, 0, 0xFF);\r\n  uint32_t errCh1 = PDB_DRV_GetAdcPreTriggerSeqErrFlags(0, 1, 0xFF);\r\n  SC_PDBIF = fPDBIF;\r\n  CH0S_ERR = errCh0;\r\n  CH1S_ERR = errCh1;\r\n\r\n  /* Output and update for function-call system: '<S138>/PDB1_IRQHandler' */\r\n\r\n  /* S-Function (ftm_s32k_init_disen): '<S140>/FTM_Init_Trigger_Enable' */\r\n\r\n  /* FTM PWM Initialization Trigger Enable Disable*/\r\n  FTM_DRV_SetInitTriggerCmd(FTM3, true);\r\n  if (fPDBIF) {\r\n    PDB_DRV_ClearTimerIntFlag(0);\r\n  }\r\n\r\n  if (errCh0) {\r\n    PDB_DRV_ClearAdcPreTriggerSeqErrFlags(0, 0, errCh0);\r\n  }\r\n\r\n  if (errCh1) {\r\n    PDB_DRV_ClearAdcPreTriggerSeqErrFlags(0, 1, errCh1);\r\n  }\r\n}\r\n\r\nvoid ADC1_SC1reg2U_callback(void)\r\n{\r\n  adc_chan_config_t config;\r\n  uint16_t result;\r\n  ADC_DRV_GetChanResult(1, 2U, &result);\r\n  Foc_model_Matlab_B.ADC1_ISR_o2 = result;\r\n  ADC_DRV_GetChanConfig(1, 2U, &config);\r\n  Foc_model_Matlab_B.ADC1_ISR_o3 = config.channel;\r\n\r\n  /* Output and update for function-call system: '<S138>/ADC1_IRQHandler' */\r\n\r\n  /* user code (Output function Body) */\r\n  {\r\n    /* Start of Profile Code */\r\n    uint32_t tmp1;\r\n    uint32_t tmp2;\r\n    tmp1 = profiler_get_cnt();\r\n\r\n    /* Start Profiling This Function.*/\r\n\r\n    /* S-Function (ftm_s32k_init_disen): '<S139>/FTM_Init_Trigger_Disable' */\r\n\r\n    /* FTM PWM Initialization Trigger Enable Disable*/\r\n    FTM_DRV_SetInitTriggerCmd(FTM3, false);\r\n\r\n    /* S-Function (adc_s32k_start): '<S139>/ADC_AD4_IA' */\r\n    {\r\n      uint16_t result;\r\n\r\n      /* Get conversion result of ADC0 */\r\n      ADC_DRV_WaitConvDone(0);\r\n      ADC_DRV_GetChanResult(0, 0, &result);\r\n      ADC_IA = result;\r\n    }\r\n\r\n    /* SignalConversion generated from: '<S139>/ADC_IB' */\r\n    ADC_IB = Foc_model_Matlab_B.ADC1_ISR_o2;\r\n\r\n    /* S-Function (adc_s32k_start): '<S139>/ADC_AD7_VDC' */\r\n    {\r\n      uint16_t result;\r\n\r\n      /* Get conversion result of ADC1 */\r\n      ADC_DRV_WaitConvDone(1);\r\n      ADC_DRV_GetChanResult(1, 0, &result);\r\n      ADC_VDC = result;\r\n    }\r\n\r\n    /* S-Function (adc_s32k_start): '<S139>/ADC_AD6_IDC' */\r\n    {\r\n      uint16_t result;\r\n\r\n      /* Get conversion result of ADC1 */\r\n      ADC_DRV_WaitConvDone(1);\r\n      ADC_DRV_GetChanResult(1, 1, &result);\r\n      ADC_IDC = result;\r\n    }\r\n\r\n    /* Outputs for Atomic SubSystem: '<S139>/FaultDetection' */\r\n    Foc_model_Ma_FaultDetection(ADC_VDC, ADC_IDC);\r\n\r\n    /* End of Outputs for SubSystem: '<S139>/FaultDetection' */\r\n\r\n    /* S-Function (fcgen): '<S139>/Function-Call Generator' incorporates:\r\n     *  SubSystem: '<Root>/CurrentControl'\r\n     */\r\n    Foc_model_Ma_CurrentControl();\r\n\r\n    /* End of Outputs for S-Function (fcgen): '<S139>/Function-Call Generator' */\r\n\r\n    /* user code (Output function Trailer) */\r\n\r\n    /* Profile Code : Compute function execution time in us. */\r\n    tmp2 = profiler_get_cnt();\r\n    profile_buffer[2] = gt_pf(tmp1, tmp2);\r\n\r\n    /* End of Profile Code */\r\n  }\r\n}\r\n\r\nvoid GPIPORTE10_callback (void)\r\n{\r\n  /* Output and update for function-call system: '<S4>/GD3000_interrupt' */\r\n\r\n  /* DataStoreWrite: '<S146>/FAULT_write' incorporates:\r\n   *  Constant: '<S146>/NOK'\r\n   */\r\n  FAULT = true;\r\n\r\n  /* S-Function (ftm_s32k_pwm_disen): '<S146>/FTM_PWM_Disable_Enable' */\r\n  FTM_DRV_DeinitPwm(FTM_PWM3);\r\n\r\n  /* S-Function (tpp_s32k_func_mode): '<S146>/TPP_Functional_Mode' */\r\n  TPP_SetOperationalMode(&tppDrvConfig, tppModeSleep);\r\n\r\n  /* Clear interrupt flag */\r\n  PINS_DRV_ClearPinIntFlagCmd(PORTE, 10);\r\n}\r\n\r\n/*\r\n * Set which subrates need to run this base step (base rate always runs).\r\n * This function must be called prior to calling the model step function\r\n * in order to remember which rates need to run this base step.  The\r\n * buffering of events allows for overlapping preemption.\r\n */\r\nvoid Foc_model_Matlab_SetEventsForThisBaseStep(boolean_T *eventFlags)\r\n{\r\n  /* Task runs when its counter is zero, computed via rtmStepTask macro */\r\n  eventFlags[1] = ((boolean_T)rtmStepTask(Foc_model_Matlab_M, 1));\r\n  eventFlags[2] = ((boolean_T)rtmStepTask(Foc_model_Matlab_M, 2));\r\n  eventFlags[3] = ((boolean_T)rtmStepTask(Foc_model_Matlab_M, 3));\r\n}\r\n\r\n/*\r\n *         This function updates active task flag for each subrate\r\n *         and rate transition flags for tasks that exchange data.\r\n *         The function assumes rate-monotonic multitasking scheduler.\r\n *         The function must be called at model base rate so that\r\n *         the generated code self-manages all its subrates and rate\r\n *         transition flags.\r\n */\r\nstatic void rate_monotonic_scheduler(void)\r\n{\r\n  /* Compute which subrates run during the next base time step.  Subrates\r\n   * are an integer multiple of the base rate counter.  Therefore, the subtask\r\n   * counter is reset when it reaches its limit (zero means run).\r\n   */\r\n  (Foc_model_Matlab_M->Timing.TaskCounters.TID[1])++;\r\n  if ((Foc_model_Matlab_M->Timing.TaskCounters.TID[1]) > 1) {/* Sample time: [0.0001s, 0.0s] */\r\n    Foc_model_Matlab_M->Timing.TaskCounters.TID[1] = 0;\r\n  }\r\n\r\n  (Foc_model_Matlab_M->Timing.TaskCounters.TID[2])++;\r\n  if ((Foc_model_Matlab_M->Timing.TaskCounters.TID[2]) > 19) {/* Sample time: [0.001s, 0.0s] */\r\n    Foc_model_Matlab_M->Timing.TaskCounters.TID[2] = 0;\r\n  }\r\n\r\n  (Foc_model_Matlab_M->Timing.TaskCounters.TID[3])++;\r\n  if ((Foc_model_Matlab_M->Timing.TaskCounters.TID[3]) > 1999) {/* Sample time: [0.1s, 0.0s] */\r\n    Foc_model_Matlab_M->Timing.TaskCounters.TID[3] = 0;\r\n  }\r\n}\r\n\r\n/* Output and update for atomic system: '<S139>/FaultDetection' */\r\nvoid Foc_model_Ma_FaultDetection(uint32_T rtu_Vdc, uint32_T rtu_Idc)\r\n{\r\n  real32_T rtb_Product1_f;\r\n\r\n  /* Product: '<S141>/Product1' incorporates:\r\n   *  Constant: '<S141>/ADC1_AD7_Offset'\r\n   *  Constant: '<S141>/bits2volts'\r\n   *  DataTypeConversion: '<S141>/Data Type Conversion1'\r\n   *  Sum: '<S141>/Add'\r\n   */\r\n  rtb_Product1_f = ((real32_T)rtu_Vdc - 17.0F) * 0.0109890113F;\r\n\r\n  /* Sum: '<S141>/Sum' incorporates:\r\n   *  Constant: '<S141>/ADC_AD6 offset  and  Logic power supply compensation'\r\n   *  DataTypeConversion: '<S141>/Data Type Conversion'\r\n   */\r\n  Idc_afterOffset = (real32_T)rtu_Idc - 2090.0F;\r\n\r\n  /* If: '<S141>/Check_Voltage_Current_Limits' incorporates:\r\n   *  Constant: '<S141>/bits2amps'\r\n   *  Product: '<S141>/Product'\r\n   */\r\n  if ((rtb_Product1_f < 8.0F) || (rtb_Product1_f > 16.0F) || (Idc_afterOffset *\r\n       0.00805664062F > 2.3F)) {\r\n    /* Outputs for IfAction SubSystem: '<S141>/FAILURE' incorporates:\r\n     *  ActionPort: '<S142>/Action Port'\r\n     */\r\n    /* If: '<S142>/If' incorporates:\r\n     *  DataStoreRead: '<S142>/FAULT_read'\r\n     */\r\n    if (!FAULT) {\r\n      /* Outputs for IfAction SubSystem: '<S142>/Failed Subsystem' incorporates:\r\n       *  ActionPort: '<S143>/Action Port'\r\n       */\r\n      /* S-Function (ftm_s32k_pwm_disen): '<S143>/FTM_PWM_Disable_Enable' */\r\n      FTM_DRV_DeinitPwm(FTM_PWM3);\r\n\r\n      /* DataStoreWrite: '<S143>/FAULT_write' incorporates:\r\n       *  Constant: '<S143>/NOK'\r\n       */\r\n      FAULT = true;\r\n\r\n      /* S-Function (tpp_s32k_func_mode): '<S143>/TPP_Functional_Mode' */\r\n      TPP_SetOperationalMode(&tppDrvConfig, tppModeSleep);\r\n\r\n      /* End of Outputs for SubSystem: '<S142>/Failed Subsystem' */\r\n    }\r\n\r\n    /* End of If: '<S142>/If' */\r\n    /* End of Outputs for SubSystem: '<S141>/FAILURE' */\r\n  }\r\n\r\n  /* End of If: '<S141>/Check_Voltage_Current_Limits' */\r\n}\r\n\r\n/*\r\n * Output and update for action system:\r\n *    '<S93>/Hall Value of 1'\r\n *    '<S92>/Hall Value of 2'\r\n */\r\nvoid Foc_model_Matl_HallValueof1(real32_T *rty_position)\r\n{\r\n  /* SignalConversion generated from: '<S103>/position' incorporates:\r\n   *  Constant: '<S103>/Constant'\r\n   */\r\n  *rty_position = 0.16667F;\r\n}\r\n\r\n/*\r\n * Output and update for action system:\r\n *    '<S93>/Hall Value of 2'\r\n *    '<S92>/Hall Value of 3'\r\n */\r\nvoid Foc_model_Matl_HallValueof2(real32_T *rty_position)\r\n{\r\n  /* SignalConversion generated from: '<S104>/position' incorporates:\r\n   *  Constant: '<S104>/Constant'\r\n   */\r\n  *rty_position = 0.33333F;\r\n}\r\n\r\n/*\r\n * Output and update for action system:\r\n *    '<S93>/Hall Value of 3'\r\n *    '<S92>/Hall Value of 4'\r\n */\r\nvoid Foc_model_Matl_HallValueof3(real32_T *rty_position)\r\n{\r\n  /* SignalConversion generated from: '<S105>/position' incorporates:\r\n   *  Constant: '<S105>/Constant'\r\n   */\r\n  *rty_position = 0.5F;\r\n}\r\n\r\n/*\r\n * Output and update for action system:\r\n *    '<S93>/Hall Value of 4'\r\n *    '<S92>/Hall Value of 5'\r\n */\r\nvoid Foc_model_Matl_HallValueof4(real32_T *rty_position)\r\n{\r\n  /* SignalConversion generated from: '<S106>/position' incorporates:\r\n   *  Constant: '<S106>/Constant'\r\n   */\r\n  *rty_position = 0.66667F;\r\n}\r\n\r\n/*\r\n * Output and update for action system:\r\n *    '<S93>/Hall Value of 5'\r\n *    '<S92>/Hall Value of 6'\r\n */\r\nvoid Foc_model_Matl_HallValueof5(real32_T *rty_position)\r\n{\r\n  /* SignalConversion generated from: '<S107>/position' incorporates:\r\n   *  Constant: '<S107>/Constant'\r\n   */\r\n  *rty_position = 0.83333F;\r\n}\r\n\r\n/*\r\n * Output and update for action system:\r\n *    '<S93>/Hall Value of 7'\r\n *    '<S92>/Hall Value of 1'\r\n *    '<S92>/Hall Value of 7'\r\n *    '<S81>/Hall Value of 7'\r\n */\r\nvoid Foc_model_Matl_HallValueof7(real32_T *rty_position)\r\n{\r\n  /* SignalConversion generated from: '<S109>/position' incorporates:\r\n   *  Constant: '<S109>/Constant'\r\n   */\r\n  *rty_position = 0.0F;\r\n}\r\n\r\n/* System initialize for function-call system: '<Root>/CurrentControl' */\r\nvoid Foc_mod_CurrentControl_Init(void)\r\n{\r\n  /* Start for S-Function (ftm_s32k_pwm_config): '<S11>/FTM_PWM_Config' */\r\n\r\n  /* Enable clock for PORTB */\r\n  PCC_SetClockMode (PCC, PCC_PORTB_CLOCK, true);\r\n\r\n  /* Pin is configured for FTM function */\r\n  PINS_SetMuxModeSel (PORTB, 8, PORT_MUX_ALT2);\r\n\r\n  /* Enable clock for PORTB */\r\n  PCC_SetClockMode (PCC, PCC_PORTB_CLOCK, true);\r\n\r\n  /* Pin is configured for FTM function */\r\n  PINS_SetMuxModeSel (PORTB, 9, PORT_MUX_ALT2);\r\n\r\n  /* Enable clock for PORTB */\r\n  PCC_SetClockMode (PCC, PCC_PORTB_CLOCK, true);\r\n\r\n  /* Pin is configured for FTM function */\r\n  PINS_SetMuxModeSel (PORTB, 10, PORT_MUX_ALT2);\r\n\r\n  /* Enable clock for PORTB */\r\n  PCC_SetClockMode (PCC, PCC_PORTB_CLOCK, true);\r\n\r\n  /* Pin is configured for FTM function */\r\n  PINS_SetMuxModeSel (PORTB, 11, PORT_MUX_ALT2);\r\n\r\n  /* Enable clock for PORTC */\r\n  PCC_SetClockMode (PCC, PCC_PORTC_CLOCK, true);\r\n\r\n  /* Pin is configured for FTM function */\r\n  PINS_SetMuxModeSel (PORTC, 10, PORT_MUX_ALT2);\r\n\r\n  /* Enable clock for PORTC */\r\n  PCC_SetClockMode (PCC, PCC_PORTC_CLOCK, true);\r\n\r\n  /* Pin is configured for FTM function */\r\n  PINS_SetMuxModeSel (PORTC, 11, PORT_MUX_ALT2);\r\n\r\n  /* Set FTM_3 clock source */\r\n  PCC_SetPeripheralClockControl (PCC, FTM3_CLK, true, CLK_SRC_SPLL, 0, 0);\r\n\r\n  /* Enable clock for FTM_3 */\r\n  PCC_SetClockMode (PCC, FTM3_CLK, true);\r\n\r\n  /* PWM3 initialization */\r\n  FTM_DRV_Init (FTM_PWM3, &flexTimer_pwm3_InitConfig, &ftmStateStruct3);\r\n  FTM_DRV_SetChnTriggerCmd(FTM3, 1, false);\r\n  FTM_DRV_SetChnTriggerCmd(FTM3, 3, false);\r\n  FTM_DRV_SetChnTriggerCmd(FTM3, 5, false);\r\n\r\n  /* Start for S-Function (profiler_s32k_fcn): '<S1>/FOCProfiler' */\r\n  {\r\n    /* Un-gate pit clock*/\r\n    PCC_SetPeripheralClockControl(PCC, LPIT0_CLK, true, CLK_SRC_SPLL, 0, 0);\r\n  }\r\n\r\n  profiler_init();\r\n\r\n  /* InitializeConditions for Delay: '<S76>/Delay One Step1' */\r\n  Foc_model_Matlab_DW.DelayOneStep1_DSTATE = true;\r\n\r\n  /* InitializeConditions for Delay: '<S76>/Delay One Step' */\r\n  Foc_model_Matlab_DW.DelayOneStep_DSTATE = 500U;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S22>/Discrete-Time Integrator' */\r\n  Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_l = 2;\r\n\r\n  /* SystemInitialize for Atomic SubSystem: '<S65>/Atomic Hall Reading' */\r\n\r\n  /* Start for S-Function (register_s32k_read): '<S67>/Read_Register' */\r\n  PCC_SetClockMode(PCC, ADC0_CLK, true);\r\n\r\n  /* End of SystemInitialize for SubSystem: '<S65>/Atomic Hall Reading' */\r\n}\r\n\r\n/* System reset for function-call system: '<Root>/CurrentControl' */\r\nvoid Foc_mo_CurrentControl_Reset(void)\r\n{\r\n  /* InitializeConditions for Delay: '<S76>/Delay One Step1' */\r\n  Foc_model_Matlab_DW.DelayOneStep1_DSTATE = true;\r\n\r\n  /* InitializeConditions for Delay: '<S76>/Delay One Step' */\r\n  Foc_model_Matlab_DW.DelayOneStep_DSTATE = 500U;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S22>/Discrete-Time Integrator' */\r\n  Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_l = 2;\r\n  Foc_model_Matlab_DW.DiscreteTimeIntegrator_PREV_U = 0.0F;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S23>/Discrete-Time Integrator' */\r\n  Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_m = 0;\r\n  Foc_model_Matlab_DW.DiscreteTimeIntegrator_PREV_U_e = 0.0F;\r\n}\r\n\r\n/* Enable for function-call system: '<Root>/CurrentControl' */\r\nvoid Foc_m_CurrentControl_Enable(void)\r\n{\r\n  Foc_model_Matlab_DW.CurrentControl_RESET_ELAPS_T = true;\r\n\r\n  /* Enable for DiscreteIntegrator: '<S22>/Discrete-Time Integrator' */\r\n  Foc_model_Matlab_DW.DiscreteTimeIntegrator_SYSTEM_E = 1U;\r\n\r\n  /* Enable for DiscreteIntegrator: '<S23>/Discrete-Time Integrator' */\r\n  Foc_model_Matlab_DW.DiscreteTimeIntegrator_SYSTEM_n = 1U;\r\n}\r\n\r\n/* Output and update for function-call system: '<Root>/CurrentControl' */\r\nvoid Foc_model_Ma_CurrentControl(void)\r\n{\r\n  int32_T rtb_reset;\r\n  int32_T rtb_reset_bp;\r\n  real32_T DiscreteTimeIntegrator_d;\r\n  real32_T V_ref_unsat;\r\n  real32_T V_ref_unsat_0;\r\n  real32_T rtb_Add;\r\n  real32_T rtb_Add1_f;\r\n  real32_T rtb_Add2;\r\n  real32_T rtb_Add3;\r\n  real32_T rtb_Merge1;\r\n  real32_T rtb_Merge1_p;\r\n  real32_T rtb_Merge_a;\r\n  real32_T rtb_Sum4;\r\n  real32_T rtb_UnitDelay_f;\r\n  uint32_T CurrentControl_ELAPS_T;\r\n  uint32_T rtb_Add1;\r\n  uint16_T rtb_DataStoreRead5;\r\n  boolean_T OR;\r\n  boolean_T rtb_Compare;\r\n  boolean_T tmp;\r\n\r\n  /* user code (Output function Body) */\r\n  {\r\n    /* Start of Profile Code */\r\n    uint32_t tmp1;\r\n    uint32_t tmp2;\r\n    tmp1 = profiler_get_cnt();\r\n\r\n    /* Start Profiling This Function.*/\r\n    if (Foc_model_Matlab_DW.CurrentControl_RESET_ELAPS_T) {\r\n      CurrentControl_ELAPS_T = 0U;\r\n    } else {\r\n      CurrentControl_ELAPS_T = Foc_model_Matlab_M->Timing.clockTick1 -\r\n        Foc_model_Matlab_DW.CurrentControl_PREV_T;\r\n    }\r\n\r\n    Foc_model_Matlab_DW.CurrentControl_PREV_T =\r\n      Foc_model_Matlab_M->Timing.clockTick1;\r\n    Foc_model_Matlab_DW.CurrentControl_RESET_ELAPS_T = false;\r\n\r\n    /* Outputs for Atomic SubSystem: '<S65>/Atomic Hall Reading' */\r\n    /* S-Function (register_s32k_read): '<S67>/Read_Register' */\r\n\r\n    /* read from ADC0_SC1A register */\r\n    Foc_model_Matlab_B.Read_Register = *((uint32_t *) 0x4003B000);\r\n\r\n    /* DataStoreRead: '<S67>/Data Store Read5' */\r\n    rtb_DataStoreRead5 = HallStateChangeFlag;\r\n\r\n    /* S-Function (gpio_s32k_input): '<S70>/Digital_Input_HALL_C' */\r\n\r\n    /* GPIPORTA1 signal update */\r\n    Foc_model_Matlab_B.Digital_Input_HALL_C = (PINS_DRV_ReadPins(PTA) >> 1) &\r\n      0x01;\r\n\r\n    /* Outputs for Atomic SubSystem: '<S70>/Bit Shift' */\r\n    /* MATLAB Function: '<S71>/bit_shift' incorporates:\r\n     *  DataTypeConversion: '<S70>/Data Type Conversion3'\r\n     */\r\n    /* MATLAB Function 'Logic and Bit Operations/Bit Shift/bit_shift': '<S73>:1' */\r\n    /* '<S73>:1:6' */\r\n    HALL_C_controller = (uint32_T)Foc_model_Matlab_B.Digital_Input_HALL_C << 2;\r\n\r\n    /* End of Outputs for SubSystem: '<S70>/Bit Shift' */\r\n\r\n    /* S-Function (gpio_s32k_input): '<S70>/Digital_Input_HALL_B' */\r\n\r\n    /* GPIPORTD10 signal update */\r\n    Foc_model_Matlab_B.Digital_Input_HALL_B = (PINS_DRV_ReadPins(PTD) >> 10) &\r\n      0x01;\r\n\r\n    /* Outputs for Atomic SubSystem: '<S70>/Bit Shift1' */\r\n    /* MATLAB Function: '<S72>/bit_shift' incorporates:\r\n     *  DataTypeConversion: '<S70>/Data Type Conversion2'\r\n     */\r\n    /* MATLAB Function 'Logic and Bit Operations/Bit Shift/bit_shift': '<S74>:1' */\r\n    /* '<S74>:1:6' */\r\n    HALL_B_controller = (uint32_T)Foc_model_Matlab_B.Digital_Input_HALL_B << 1;\r\n\r\n    /* End of Outputs for SubSystem: '<S70>/Bit Shift1' */\r\n\r\n    /* S-Function (gpio_s32k_input): '<S70>/Digital_Input_HALL_A' */\r\n\r\n    /* GPIPORTD11 signal update */\r\n    Foc_model_Matlab_B.Digital_Input_HALL_A = (PINS_DRV_ReadPins(PTD) >> 11) &\r\n      0x01;\r\n\r\n    /* DataTypeConversion: '<S70>/Data Type Conversion6' */\r\n    HALL_A_controller = (uint32_T)Foc_model_Matlab_B.Digital_Input_HALL_A;\r\n\r\n    /* Sum: '<S70>/Add1' */\r\n    rtb_Add1 = (HALL_C_controller + HALL_B_controller) + HALL_A_controller;\r\n\r\n    /* Switch: '<S68>/Switch' incorporates:\r\n     *  Constant: '<S68>/WatchDog'\r\n     *  DataStoreRead: '<S67>/Data Store Read5'\r\n     *  DataStoreWrite: '<S65>/Data Store Write2'\r\n     */\r\n    if (HallStateChangeFlag != 0) {\r\n      HallStateChangeFlag = 0U;\r\n    }\r\n\r\n    /* End of Switch: '<S68>/Switch' */\r\n    /* End of Outputs for SubSystem: '<S65>/Atomic Hall Reading' */\r\n\r\n    /* Logic: '<S76>/OR' incorporates:\r\n     *  DataTypeConversion: '<S68>/Data Type Conversion4'\r\n     *  Delay: '<S76>/Delay One Step1'\r\n     */\r\n    OR = (Foc_model_Matlab_DW.DelayOneStep1_DSTATE || (rtb_DataStoreRead5 != 0));\r\n\r\n    /* Delay: '<S76>/Delay One Step' incorporates:\r\n     *  DataTypeConversion: '<S68>/Data Type Conversion4'\r\n     */\r\n    if (OR) {\r\n      if (rtb_DataStoreRead5 != 0) {\r\n        Foc_model_Matlab_DW.DelayOneStep_DSTATE = 500U;\r\n      }\r\n\r\n      /* Delay: '<S76>/Delay One Step' incorporates:\r\n       *  DataTypeConversion: '<S68>/Data Type Conversion4'\r\n       */\r\n      Foc_model_Matlab_B.DelayOneStep = Foc_model_Matlab_DW.DelayOneStep_DSTATE;\r\n    }\r\n\r\n    /* End of Delay: '<S76>/Delay One Step' */\r\n\r\n    /* RelationalOperator: '<S80>/Compare' incorporates:\r\n     *  Constant: '<S80>/Constant'\r\n     */\r\n    rtb_Compare = (Foc_model_Matlab_B.DelayOneStep > 0);\r\n\r\n    /* Switch: '<S79>/watchdog check' incorporates:\r\n     *  Constant: '<S79>/Constant'\r\n     */\r\n    if (rtb_Compare) {\r\n      /* MinMax: '<S79>/Max' incorporates:\r\n       *  DataStoreRead: '<S67>/Data Store Read2'\r\n       *  DataTypeConversion: '<S68>/counterSize1'\r\n       */\r\n      if (GlobalSpeedCount >= (uint16_T)Foc_model_Matlab_B.Read_Register) {\r\n        rtb_DataStoreRead5 = GlobalSpeedCount;\r\n      } else {\r\n        rtb_DataStoreRead5 = (uint16_T)Foc_model_Matlab_B.Read_Register;\r\n      }\r\n\r\n      /* Switch: '<S79>/speed check' incorporates:\r\n       *  Constant: '<S79>/Constant'\r\n       *  DataStoreRead: '<S67>/Data Store Read4'\r\n       *  DataTypeConversion: '<S75>/Data Type Conversion'\r\n       *  Logic: '<S75>/Logical Operator'\r\n       *  MinMax: '<S79>/Max'\r\n       */\r\n      if (rtb_DataStoreRead5 >= 31250) {\r\n        rtb_DataStoreRead5 = 0U;\r\n      } else {\r\n        rtb_DataStoreRead5 = (uint16_T)((GlobalSpeedValidity != 0) ||\r\n          Foc_model_Matlab_B.validityDelay);\r\n      }\r\n\r\n      /* End of Switch: '<S79>/speed check' */\r\n    } else {\r\n      rtb_DataStoreRead5 = 0U;\r\n    }\r\n\r\n    /* End of Switch: '<S79>/watchdog check' */\r\n\r\n    /* If: '<S68>/If' */\r\n    if (rtb_DataStoreRead5 != 0) {\r\n      /* Outputs for IfAction SubSystem: '<S68>/Speed and direction are valid Use speed to extrapolate position' incorporates:\r\n       *  ActionPort: '<S78>/Action Port'\r\n       */\r\n      /* If: '<S78>/If' incorporates:\r\n       *  DataStoreRead: '<S67>/Data Store Read3'\r\n       */\r\n      if (GlobalDirection > 0) {\r\n        /* Outputs for IfAction SubSystem: '<S78>/If Action Subsystem' incorporates:\r\n         *  ActionPort: '<S89>/Action Port'\r\n         */\r\n        /* SignalConversion generated from: '<S89>/In1' incorporates:\r\n         *  DataStoreRead: '<S67>/Data Store Read2'\r\n         *  DataTypeConversion: '<S78>/currentSpeedData'\r\n         *  Gain: '<S78>/SpeedGain'\r\n         *  Product: '<S78>/Divide'\r\n         */\r\n        rtb_Merge_a = Foc_model_Matlab_ConstB.SpeedConstData / (real32_T)\r\n          GlobalSpeedCount * 0.05F;\r\n\r\n        /* End of Outputs for SubSystem: '<S78>/If Action Subsystem' */\r\n      } else {\r\n        /* Outputs for IfAction SubSystem: '<S78>/If Action Subsystem1' incorporates:\r\n         *  ActionPort: '<S90>/Action Port'\r\n         */\r\n        /* UnaryMinus: '<S90>/Unary Minus' incorporates:\r\n         *  DataStoreRead: '<S67>/Data Store Read2'\r\n         *  DataTypeConversion: '<S78>/currentSpeedData'\r\n         *  Gain: '<S78>/SpeedGain'\r\n         *  Product: '<S78>/Divide'\r\n         */\r\n        rtb_Merge_a = -(Foc_model_Matlab_ConstB.SpeedConstData / (real32_T)\r\n                        GlobalSpeedCount * 0.05F);\r\n\r\n        /* End of Outputs for SubSystem: '<S78>/If Action Subsystem1' */\r\n      }\r\n\r\n      /* End of If: '<S78>/If' */\r\n\r\n      /* Outputs for Enabled SubSystem: '<S78>/Subsystem1' incorporates:\r\n       *  EnablePort: '<S91>/Enable'\r\n       */\r\n      /* Outputs for IfAction SubSystem: '<S91>/first_order' incorporates:\r\n       *  ActionPort: '<S94>/Action Port'\r\n       */\r\n      /* If: '<S91>/If1' incorporates:\r\n       *  DataStoreRead: '<S67>/Data Store Read2'\r\n       *  DataTypeConversion: '<S68>/counterSize1'\r\n       *  DataTypeConversion: '<S94>/countData'\r\n       *  DataTypeConversion: '<S94>/currentSpeedData'\r\n       *  Gain: '<S94>/Gain'\r\n       *  Product: '<S94>/Divide'\r\n       */\r\n      rtb_Merge1 = (real32_T)(uint16_T)Foc_model_Matlab_B.Read_Register /\r\n        (real32_T)GlobalSpeedCount * 0.166666672F;\r\n\r\n      /* End of Outputs for SubSystem: '<S91>/first_order' */\r\n\r\n      /* Saturate: '<S91>/Saturation' */\r\n      if (rtb_Merge1 > 0.16667F) {\r\n        rtb_Merge1 = 0.16667F;\r\n      }\r\n\r\n      /* End of Saturate: '<S91>/Saturation' */\r\n\r\n      /* If: '<S91>/If' incorporates:\r\n       *  DataStoreRead: '<S67>/Data Store Read3'\r\n       */\r\n      if (GlobalDirection != 1) {\r\n        /* Outputs for IfAction SubSystem: '<S91>/-ve Direction' incorporates:\r\n         *  ActionPort: '<S93>/Action Port'\r\n         */\r\n        /* SwitchCase: '<S93>/Switch Case' */\r\n        switch ((int32_T)rtb_Add1) {\r\n         case 6:\r\n          /* Outputs for IfAction SubSystem: '<S93>/Hall Value of 1' incorporates:\r\n           *  ActionPort: '<S103>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof1(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S93>/Hall Value of 1' */\r\n          break;\r\n\r\n         case 4:\r\n          /* Outputs for IfAction SubSystem: '<S93>/Hall Value of 2' incorporates:\r\n           *  ActionPort: '<S104>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof2(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S93>/Hall Value of 2' */\r\n          break;\r\n\r\n         case 5:\r\n          /* Outputs for IfAction SubSystem: '<S93>/Hall Value of 3' incorporates:\r\n           *  ActionPort: '<S105>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof3(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S93>/Hall Value of 3' */\r\n          break;\r\n\r\n         case 1:\r\n          /* Outputs for IfAction SubSystem: '<S93>/Hall Value of 4' incorporates:\r\n           *  ActionPort: '<S106>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof4(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S93>/Hall Value of 4' */\r\n          break;\r\n\r\n         case 3:\r\n          /* Outputs for IfAction SubSystem: '<S93>/Hall Value of 5' incorporates:\r\n           *  ActionPort: '<S107>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof5(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S93>/Hall Value of 5' */\r\n          break;\r\n\r\n         case 2:\r\n          /* Outputs for IfAction SubSystem: '<S93>/Hall Value of 6' incorporates:\r\n           *  ActionPort: '<S108>/Action Port'\r\n           */\r\n          /* SignalConversion generated from: '<S108>/position' incorporates:\r\n           *  Constant: '<S108>/Constant'\r\n           */\r\n          rtb_Merge1_p = 1.0F;\r\n\r\n          /* End of Outputs for SubSystem: '<S93>/Hall Value of 6' */\r\n          break;\r\n\r\n         default:\r\n          /* Outputs for IfAction SubSystem: '<S93>/Hall Value of 7' incorporates:\r\n           *  ActionPort: '<S109>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof7(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S93>/Hall Value of 7' */\r\n          break;\r\n        }\r\n\r\n        /* End of SwitchCase: '<S93>/Switch Case' */\r\n\r\n        /* Merge: '<S91>/Merge' incorporates:\r\n         *  Sum: '<S93>/Sum'\r\n         */\r\n        Foc_model_Matlab_B.Merge = rtb_Merge1_p - rtb_Merge1;\r\n\r\n        /* End of Outputs for SubSystem: '<S91>/-ve Direction' */\r\n      } else {\r\n        /* Outputs for IfAction SubSystem: '<S91>/+ve Direction' incorporates:\r\n         *  ActionPort: '<S92>/Action Port'\r\n         */\r\n        /* SwitchCase: '<S92>/Switch Case' */\r\n        switch ((int32_T)rtb_Add1) {\r\n         case 6:\r\n          /* Outputs for IfAction SubSystem: '<S92>/Hall Value of 1' incorporates:\r\n           *  ActionPort: '<S96>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof7(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S92>/Hall Value of 1' */\r\n          break;\r\n\r\n         case 4:\r\n          /* Outputs for IfAction SubSystem: '<S92>/Hall Value of 2' incorporates:\r\n           *  ActionPort: '<S97>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof1(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S92>/Hall Value of 2' */\r\n          break;\r\n\r\n         case 5:\r\n          /* Outputs for IfAction SubSystem: '<S92>/Hall Value of 3' incorporates:\r\n           *  ActionPort: '<S98>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof2(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S92>/Hall Value of 3' */\r\n          break;\r\n\r\n         case 1:\r\n          /* Outputs for IfAction SubSystem: '<S92>/Hall Value of 4' incorporates:\r\n           *  ActionPort: '<S99>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof3(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S92>/Hall Value of 4' */\r\n          break;\r\n\r\n         case 3:\r\n          /* Outputs for IfAction SubSystem: '<S92>/Hall Value of 5' incorporates:\r\n           *  ActionPort: '<S100>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof4(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S92>/Hall Value of 5' */\r\n          break;\r\n\r\n         case 2:\r\n          /* Outputs for IfAction SubSystem: '<S92>/Hall Value of 6' incorporates:\r\n           *  ActionPort: '<S101>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof5(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S92>/Hall Value of 6' */\r\n          break;\r\n\r\n         default:\r\n          /* Outputs for IfAction SubSystem: '<S92>/Hall Value of 7' incorporates:\r\n           *  ActionPort: '<S102>/Action Port'\r\n           */\r\n          Foc_model_Matl_HallValueof7(&rtb_Merge1_p);\r\n\r\n          /* End of Outputs for SubSystem: '<S92>/Hall Value of 7' */\r\n          break;\r\n        }\r\n\r\n        /* End of SwitchCase: '<S92>/Switch Case' */\r\n\r\n        /* Merge: '<S91>/Merge' incorporates:\r\n         *  Sum: '<S92>/Sum'\r\n         */\r\n        Foc_model_Matlab_B.Merge = rtb_Merge1_p + rtb_Merge1;\r\n\r\n        /* End of Outputs for SubSystem: '<S91>/+ve Direction' */\r\n      }\r\n\r\n      /* End of If: '<S91>/If' */\r\n      /* End of Outputs for SubSystem: '<S78>/Subsystem1' */\r\n\r\n      /* Merge: '<S68>/Merge1' incorporates:\r\n       *  SignalConversion generated from: '<S78>/rawPosition'\r\n       */\r\n      ThetaHalls = Foc_model_Matlab_B.Merge;\r\n\r\n      /* End of Outputs for SubSystem: '<S68>/Speed and direction are valid Use speed to extrapolate position' */\r\n    } else {\r\n      /* Outputs for IfAction SubSystem: '<S68>/Speed and direction are not valid Position will be set to the middle of the Hall quadrant' incorporates:\r\n       *  ActionPort: '<S77>/Action Port'\r\n       */\r\n      /* SwitchCase: '<S81>/Switch Case' */\r\n      switch ((int32_T)rtb_Add1) {\r\n       case 6:\r\n        /* Outputs for IfAction SubSystem: '<S81>/Hall Value of 1' incorporates:\r\n         *  ActionPort: '<S82>/Action Port'\r\n         */\r\n        /* Merge: '<S68>/Merge1' incorporates:\r\n         *  Constant: '<S82>/Constant'\r\n         *  SignalConversion generated from: '<S82>/position'\r\n         */\r\n        ThetaHalls = 0.083333F;\r\n\r\n        /* End of Outputs for SubSystem: '<S81>/Hall Value of 1' */\r\n        break;\r\n\r\n       case 4:\r\n        /* Outputs for IfAction SubSystem: '<S81>/Hall Value of 2' incorporates:\r\n         *  ActionPort: '<S83>/Action Port'\r\n         */\r\n        /* Merge: '<S68>/Merge1' incorporates:\r\n         *  Constant: '<S83>/Constant'\r\n         *  SignalConversion generated from: '<S83>/position'\r\n         */\r\n        ThetaHalls = 0.25F;\r\n\r\n        /* End of Outputs for SubSystem: '<S81>/Hall Value of 2' */\r\n        break;\r\n\r\n       case 5:\r\n        /* Outputs for IfAction SubSystem: '<S81>/Hall Value of 3' incorporates:\r\n         *  ActionPort: '<S84>/Action Port'\r\n         */\r\n        /* Merge: '<S68>/Merge1' incorporates:\r\n         *  Constant: '<S84>/Constant'\r\n         *  SignalConversion generated from: '<S84>/position'\r\n         */\r\n        ThetaHalls = 0.41667F;\r\n\r\n        /* End of Outputs for SubSystem: '<S81>/Hall Value of 3' */\r\n        break;\r\n\r\n       case 1:\r\n        /* Outputs for IfAction SubSystem: '<S81>/Hall Value of 4' incorporates:\r\n         *  ActionPort: '<S85>/Action Port'\r\n         */\r\n        /* Merge: '<S68>/Merge1' incorporates:\r\n         *  Constant: '<S85>/Constant'\r\n         *  SignalConversion generated from: '<S85>/position'\r\n         */\r\n        ThetaHalls = 0.58333F;\r\n\r\n        /* End of Outputs for SubSystem: '<S81>/Hall Value of 4' */\r\n        break;\r\n\r\n       case 3:\r\n        /* Outputs for IfAction SubSystem: '<S81>/Hall Value of 5' incorporates:\r\n         *  ActionPort: '<S86>/Action Port'\r\n         */\r\n        /* Merge: '<S68>/Merge1' incorporates:\r\n         *  Constant: '<S86>/Constant'\r\n         *  SignalConversion generated from: '<S86>/position'\r\n         */\r\n        ThetaHalls = 0.75F;\r\n\r\n        /* End of Outputs for SubSystem: '<S81>/Hall Value of 5' */\r\n        break;\r\n\r\n       case 2:\r\n        /* Outputs for IfAction SubSystem: '<S81>/Hall Value of 6' incorporates:\r\n         *  ActionPort: '<S87>/Action Port'\r\n         */\r\n        /* Merge: '<S68>/Merge1' incorporates:\r\n         *  Constant: '<S87>/Constant'\r\n         *  SignalConversion generated from: '<S87>/position'\r\n         */\r\n        ThetaHalls = 0.91667F;\r\n\r\n        /* End of Outputs for SubSystem: '<S81>/Hall Value of 6' */\r\n        break;\r\n\r\n       default:\r\n        /* Outputs for IfAction SubSystem: '<S81>/Hall Value of 7' incorporates:\r\n         *  ActionPort: '<S88>/Action Port'\r\n         */\r\n        Foc_model_Matl_HallValueof7((real32_T *)&ThetaHalls);\r\n\r\n        /* End of Outputs for SubSystem: '<S81>/Hall Value of 7' */\r\n        break;\r\n      }\r\n\r\n      /* End of SwitchCase: '<S81>/Switch Case' */\r\n\r\n      /* SignalConversion generated from: '<S77>/Speed(r.p.m)' incorporates:\r\n       *  Constant: '<S77>/Constant'\r\n       */\r\n      rtb_Merge_a = 0.0F;\r\n\r\n      /* End of Outputs for SubSystem: '<S68>/Speed and direction are not valid Position will be set to the middle of the Hall quadrant' */\r\n    }\r\n\r\n    /* End of If: '<S68>/If' */\r\n\r\n    /* Sum: '<S76>/Sum' */\r\n    rtb_DataStoreRead5 = Foc_model_Matlab_B.DelayOneStep;\r\n\r\n    /* If: '<S112>/If' incorporates:\r\n     *  Constant: '<S111>/Constant1'\r\n     *  Switch: '<S111>/Switch'\r\n     */\r\n    if (ThetaHalls <= 0.7061F) {\r\n      /* Outputs for IfAction SubSystem: '<S112>/If Action Subsystem' incorporates:\r\n       *  ActionPort: '<S114>/Action Port'\r\n       */\r\n      /* Sum: '<S114>/Add' incorporates:\r\n       *  Constant: '<S114>/Constant'\r\n       */\r\n      rtb_Add1_f = (ThetaHalls + 1.0F) - 0.7061F;\r\n\r\n      /* End of Outputs for SubSystem: '<S112>/If Action Subsystem' */\r\n    } else {\r\n      /* Outputs for IfAction SubSystem: '<S112>/If Action Subsystem1' incorporates:\r\n       *  ActionPort: '<S115>/Action Port'\r\n       */\r\n      /* Sum: '<S115>/Add' */\r\n      rtb_Add1_f = ThetaHalls - 0.7061F;\r\n\r\n      /* End of Outputs for SubSystem: '<S112>/If Action Subsystem1' */\r\n    }\r\n\r\n    /* End of If: '<S112>/If' */\r\n\r\n    /* Sum: '<S113>/Add' incorporates:\r\n     *  Rounding: '<S113>/Floor'\r\n     */\r\n    rtb_Add = rtb_Add1_f - (real32_T)floor(rtb_Add1_f);\r\n\r\n    /* Sum: '<S66>/Add' incorporates:\r\n     *  DataStoreRead: '<S118>/Data Store Read'\r\n     *  DataStoreRead: '<S118>/Data Store Read1'\r\n     *  DataStoreRead: '<S66>/Data Store Read'\r\n     *  DataStoreRead: '<S66>/Data Store Read1'\r\n     */\r\n    I_ab_afterOffset[0] = IaOffset - ADC_A;\r\n    I_ab_afterOffset[1] = IbOffset - ADC_B;\r\n\r\n    /* Gain: '<S66>/Multiply' */\r\n    V_ref_unsat = 0.00048828125F * I_ab_afterOffset[0];\r\n    rtb_Add3 = 0.00048828125F * I_ab_afterOffset[1];\r\n\r\n    /* Outputs for Atomic SubSystem: '<S20>/Two phase CRL wrap' */\r\n    /* Gain: '<S21>/one_by_sqrt3' incorporates:\r\n     *  Sum: '<S21>/a_plus_2b'\r\n     */\r\n    rtb_Add3 = ((V_ref_unsat + rtb_Add3) + rtb_Add3) * 0.577350259F;\r\n\r\n    /* End of Outputs for SubSystem: '<S20>/Two phase CRL wrap' */\r\n\r\n    /* UnitDelay: '<S22>/Unit Delay' */\r\n    rtb_Merge1 = Foc_model_Matlab_DW.UnitDelay_DSTATE_j;\r\n\r\n    /* DiscreteIntegrator: '<S22>/Discrete-Time Integrator' incorporates:\r\n     *  UnitDelay: '<S22>/Unit Delay'\r\n     */\r\n    if (Foc_model_Matlab_DW.DiscreteTimeIntegrator_SYSTEM_E != 0) {\r\n      /* DiscreteIntegrator: '<S22>/Discrete-Time Integrator' */\r\n      rtb_Merge1_p = Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTATE_d;\r\n    } else if ((Foc_model_Matlab_DW.UnitDelay_DSTATE_j > 0.0F) &&\r\n               (Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_l <= 0)) {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTATE_d = 0.0F;\r\n\r\n      /* DiscreteIntegrator: '<S22>/Discrete-Time Integrator' */\r\n      rtb_Merge1_p = Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTATE_d;\r\n    } else {\r\n      /* DiscreteIntegrator: '<S22>/Discrete-Time Integrator' */\r\n      rtb_Merge1_p = 0.0001F * (real32_T)CurrentControl_ELAPS_T\r\n        * Foc_model_Matlab_DW.DiscreteTimeIntegrator_PREV_U +\r\n        Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTATE_d;\r\n    }\r\n\r\n    /* End of DiscreteIntegrator: '<S22>/Discrete-Time Integrator' */\r\n\r\n    /* If: '<S51>/If' incorporates:\r\n     *  Constant: '<S53>/Constant'\r\n     *  DataTypeConversion: '<S54>/Convert_back'\r\n     *  DataTypeConversion: '<S54>/Convert_uint16'\r\n     *  DataTypeConversion: '<S55>/Convert_back'\r\n     *  DataTypeConversion: '<S55>/Convert_uint16'\r\n     *  Gain: '<S49>/indexing'\r\n     *  RelationalOperator: '<S53>/Compare'\r\n     *  Sum: '<S54>/Sum'\r\n     *  Sum: '<S55>/Sum'\r\n     */\r\n    if (rtb_Add < 0.0F) {\r\n      /* Outputs for IfAction SubSystem: '<S51>/If Action Subsystem' incorporates:\r\n       *  ActionPort: '<S54>/Action Port'\r\n       */\r\n      rtb_Add2 = rtb_Add - (real32_T)(int16_T)(real32_T)floor(rtb_Add);\r\n\r\n      /* End of Outputs for SubSystem: '<S51>/If Action Subsystem' */\r\n    } else {\r\n      /* Outputs for IfAction SubSystem: '<S51>/If Action Subsystem1' incorporates:\r\n       *  ActionPort: '<S55>/Action Port'\r\n       */\r\n      rtb_Add2 = rtb_Add - (real32_T)(int16_T)rtb_Add;\r\n\r\n      /* End of Outputs for SubSystem: '<S51>/If Action Subsystem1' */\r\n    }\r\n\r\n    rtb_Add1_f = 800.0F * rtb_Add2;\r\n\r\n    /* End of If: '<S51>/If' */\r\n\r\n    /* Sum: '<S49>/Sum2' incorporates:\r\n     *  DataTypeConversion: '<S49>/Data Type Conversion1'\r\n     *  DataTypeConversion: '<S49>/Get_Integer'\r\n     */\r\n    rtb_Add2 = rtb_Add1_f - (real32_T)(uint16_T)rtb_Add1_f;\r\n\r\n    /* Selector: '<S49>/Lookup' incorporates:\r\n     *  Constant: '<S49>/sine_table_values'\r\n     *  DataTypeConversion: '<S49>/Get_Integer'\r\n     */\r\n    rtb_Add = Foc_model_Matlab_ConstP.sine_table_values_Value[(uint16_T)\r\n      rtb_Add1_f];\r\n\r\n    /* Sum: '<S50>/Sum4' incorporates:\r\n     *  Constant: '<S49>/offset'\r\n     *  Constant: '<S49>/sine_table_values'\r\n     *  DataTypeConversion: '<S49>/Get_Integer'\r\n     *  Product: '<S50>/Product'\r\n     *  Selector: '<S49>/Lookup'\r\n     *  Sum: '<S49>/Sum'\r\n     *  Sum: '<S50>/Sum3'\r\n     */\r\n    rtb_Sum4 = (Foc_model_Matlab_ConstP.sine_table_values_Value[(int32_T)\r\n                ((uint16_T)rtb_Add1_f + 1U)] - rtb_Add) * rtb_Add2 + rtb_Add;\r\n\r\n    /* Selector: '<S49>/Lookup' incorporates:\r\n     *  Constant: '<S49>/offset'\r\n     *  Constant: '<S49>/sine_table_values'\r\n     *  DataTypeConversion: '<S49>/Get_Integer'\r\n     *  Sum: '<S49>/Sum'\r\n     *  Sum: '<S50>/Sum5'\r\n     */\r\n    rtb_Add = Foc_model_Matlab_ConstP.sine_table_values_Value[(int32_T)\r\n      ((uint16_T)rtb_Add1_f + 200U)];\r\n\r\n    /* Sum: '<S50>/Sum6' incorporates:\r\n     *  Constant: '<S49>/offset'\r\n     *  Constant: '<S49>/sine_table_values'\r\n     *  DataTypeConversion: '<S49>/Get_Integer'\r\n     *  Product: '<S50>/Product1'\r\n     *  Selector: '<S49>/Lookup'\r\n     *  Sum: '<S49>/Sum'\r\n     *  Sum: '<S50>/Sum5'\r\n     */\r\n    rtb_Add1_f = (Foc_model_Matlab_ConstP.sine_table_values_Value[(int32_T)\r\n                  ((uint16_T)rtb_Add1_f + 201U)] - rtb_Add) * rtb_Add2 + rtb_Add;\r\n\r\n    /* Outputs for Atomic SubSystem: '<S17>/Two inputs CRL' */\r\n    /* Outputs for Atomic SubSystem: '<S20>/Two phase CRL wrap' */\r\n    /* SignalConversion: '<S15>/Signal Copy' incorporates:\r\n     *  AlgorithmDescriptorDelegate generated from: '<S21>/a16'\r\n     *  Product: '<S47>/asin'\r\n     *  Product: '<S47>/bcos'\r\n     *  Sum: '<S47>/sum_Qs'\r\n     */\r\n    Iq_fb = rtb_Add3 * rtb_Add1_f - V_ref_unsat * rtb_Sum4;\r\n\r\n    /* SignalConversion: '<S15>/Signal Copy1' incorporates:\r\n     *  AlgorithmDescriptorDelegate generated from: '<S21>/a16'\r\n     *  Product: '<S47>/acos'\r\n     *  Product: '<S47>/bsin'\r\n     *  Sum: '<S47>/sum_Ds'\r\n     */\r\n    Id_fb = V_ref_unsat * rtb_Add1_f + rtb_Add3 * rtb_Sum4;\r\n\r\n    /* End of Outputs for SubSystem: '<S20>/Two phase CRL wrap' */\r\n    /* End of Outputs for SubSystem: '<S17>/Two inputs CRL' */\r\n\r\n    /* Gain: '<S22>/Gain2' */\r\n    rtb_Add = 31.25F * Id_fb;\r\n\r\n    /* MATLAB Function: '<S22>/MATLAB Function2' incorporates:\r\n     *  DataStoreRead: '<S28>/Data Store Read2'\r\n     *  DataStoreRead: '<S28>/Data Store Read3'\r\n     *  DataStoreRead: '<S28>/Data Store Read4'\r\n     *  SignalConversion generated from: '<S27>/ SFunction '\r\n     */\r\n    /* MATLAB Function 'CurrentControl/Control_System/Current_Controllers/Controller_Id/MATLAB Function2': '<S27>:1' */\r\n    /* '<S27>:1:4' */\r\n    /* '<S27>:1:5' */\r\n    /* '<S27>:1:6' */\r\n    /* '<S27>:1:10' */\r\n    rtb_Add2 = Lambda_d * rtb_Merge1_p + rtb_Add;\r\n\r\n    /* '<S27>:1:13' */\r\n    if ((real32_T)fabs(rtb_Add2) > Epsilon_d) {\r\n      /* '<S27>:1:15' */\r\n      /* '<S27>:1:16' */\r\n      if (rtIsNaNF(rtb_Add2)) {\r\n        rtb_Add2 = (rtNaNF);\r\n      } else if (rtb_Add2 < 0.0F) {\r\n        rtb_Add2 = -1.0F;\r\n      } else {\r\n        rtb_Add2 = (real32_T)(rtb_Add2 > 0.0F);\r\n      }\r\n\r\n      rtb_Add2 *= -Rho_d;\r\n    } else {\r\n      /* '<S27>:1:18' */\r\n      rtb_Add2 = rtb_Add2 / Epsilon_d * -Rho_d;\r\n    }\r\n\r\n    /* Gain: '<S22>/Gain' incorporates:\r\n     *  Gain: '<S22>/Gain3'\r\n     *  Gain: '<S22>/Gain6'\r\n     *  Gain: '<S23>/Gain'\r\n     */\r\n    /* '<S27>:1:21' */\r\n    V_ref_unsat_0 = 3295.0F * rtb_Merge_a * 0.104719758F * 2.0F;\r\n\r\n    /* MATLAB Function: '<S22>/MATLAB Function2' incorporates:\r\n     *  Constant: '<S22>/Constant8'\r\n     *  Constant: '<S22>/Constant9'\r\n     *  Constant: '<S22>/Ki2'\r\n     *  DataStoreRead: '<S28>/Data Store Read2'\r\n     *  Gain: '<S22>/Gain'\r\n     *  Gain: '<S22>/Gain1'\r\n     *  SignalConversion generated from: '<S27>/ SFunction '\r\n     */\r\n    V_ref_unsat = (0.598333359F * rtb_Add - (31.25F * Iq_fb * V_ref_unsat_0 +\r\n      Lambda_d * rtb_Add) * 0.000435F) + rtb_Add2;\r\n    if (V_ref_unsat >= 6.92820311F) {\r\n      /* '<S27>:1:26' */\r\n      /* '<S27>:1:27' */\r\n      V_ref_unsat = 6.92820311F;\r\n\r\n      /* '<S27>:1:28' */\r\n      rtb_reset_bp = 1;\r\n    } else if (V_ref_unsat <= -6.92820311F) {\r\n      /* '<S27>:1:29' */\r\n      /* '<S27>:1:30' */\r\n      V_ref_unsat = -6.92820311F;\r\n\r\n      /* '<S27>:1:31' */\r\n      rtb_reset_bp = 1;\r\n    } else {\r\n      /* '<S27>:1:33' */\r\n      rtb_reset_bp = 0;\r\n    }\r\n\r\n    /* UnitDelay: '<S23>/Unit Delay' */\r\n    /* '<S27>:1:36' */\r\n    /* '<S27>:1:38' */\r\n    rtb_UnitDelay_f = Foc_model_Matlab_DW.UnitDelay_DSTATE_f;\r\n\r\n    /* DiscreteIntegrator: '<S23>/Discrete-Time Integrator' incorporates:\r\n     *  UnitDelay: '<S23>/Unit Delay'\r\n     */\r\n    if (Foc_model_Matlab_DW.DiscreteTimeIntegrator_SYSTEM_n != 0) {\r\n      /* DiscreteIntegrator: '<S23>/Discrete-Time Integrator' */\r\n      DiscreteTimeIntegrator_d =\r\n        Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTAT_dm;\r\n    } else if ((Foc_model_Matlab_DW.UnitDelay_DSTATE_f != 0.0F) ||\r\n               (Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_m != 0)) {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTAT_dm = 0.0F;\r\n\r\n      /* DiscreteIntegrator: '<S23>/Discrete-Time Integrator' */\r\n      DiscreteTimeIntegrator_d =\r\n        Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTAT_dm;\r\n    } else {\r\n      /* DiscreteIntegrator: '<S23>/Discrete-Time Integrator' */\r\n      DiscreteTimeIntegrator_d = 0.0001F * (real32_T)CurrentControl_ELAPS_T\r\n        * Foc_model_Matlab_DW.DiscreteTimeIntegrator_PREV_U_e +\r\n        Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTAT_dm;\r\n    }\r\n\r\n    /* End of DiscreteIntegrator: '<S23>/Discrete-Time Integrator' */\r\n\r\n    /* Gain: '<S23>/Gain3' */\r\n    rtb_Add3 = 31.25F * Iq_fb;\r\n\r\n    /* Sum: '<S23>/Sum1' incorporates:\r\n     *  Gain: '<S23>/Gain2'\r\n     */\r\n    Id_err = rtb_Add3 - 31.25F * Iq_ref_PU;\r\n\r\n    /* MATLAB Function: '<S23>/MATLAB Function2' incorporates:\r\n     *  Constant: '<S23>/Constant10'\r\n     *  Constant: '<S23>/Constant8'\r\n     *  Constant: '<S23>/Constant9'\r\n     *  Constant: '<S23>/Ki2'\r\n     *  DataStoreRead: '<S30>/Data Store Read2'\r\n     *  DataStoreRead: '<S30>/Data Store Read3'\r\n     *  DataStoreRead: '<S30>/Data Store Read4'\r\n     *  Gain: '<S23>/Gain1'\r\n     *  SignalConversion generated from: '<S29>/ SFunction '\r\n     */\r\n    /* MATLAB Function 'CurrentControl/Control_System/Current_Controllers/Controller_Iq/MATLAB Function2': '<S29>:1' */\r\n    /* '<S29>:1:2' */\r\n    /* '<S29>:1:3' */\r\n    /* '<S29>:1:4' */\r\n    /* '<S29>:1:10' */\r\n    rtb_Add2 = Lambda_q * DiscreteTimeIntegrator_d + Id_err;\r\n    if ((real32_T)fabs(rtb_Add2) > Epsilon_q) {\r\n      /* '<S29>:1:13' */\r\n      /* '<S29>:1:14' */\r\n      if (rtIsNaNF(rtb_Add2)) {\r\n        rtb_Add2 = (rtNaNF);\r\n      } else if (rtb_Add2 < 0.0F) {\r\n        rtb_Add2 = -1.0F;\r\n      } else {\r\n        rtb_Add2 = (real32_T)(rtb_Add2 > 0.0F);\r\n      }\r\n\r\n      rtb_Add2 *= -Rho_q;\r\n    } else {\r\n      /* '<S29>:1:16' */\r\n      rtb_Add2 = rtb_Add2 / Epsilon_q * -Rho_q;\r\n    }\r\n\r\n    /* '<S29>:1:20' */\r\n    /* '<S29>:1:21' */\r\n    V_ref_unsat_0 = ((31.25F * Id_fb * V_ref_unsat_0 - Lambda_q * Id_err) *\r\n                     0.000375F + (0.598333359F * rtb_Add3 + 0.00799426902F *\r\n      V_ref_unsat_0)) + rtb_Add2;\r\n    if (V_ref_unsat_0 >= 6.92820311F) {\r\n      /* '<S29>:1:26' */\r\n      /* '<S29>:1:27' */\r\n      V_ref_unsat_0 = 6.92820311F;\r\n\r\n      /* '<S29>:1:28' */\r\n      rtb_reset = 1;\r\n    } else if (V_ref_unsat_0 <= -6.92820311F) {\r\n      /* '<S29>:1:29' */\r\n      /* '<S29>:1:30' */\r\n      V_ref_unsat_0 = -6.92820311F;\r\n\r\n      /* '<S29>:1:31' */\r\n      rtb_reset = 1;\r\n    } else {\r\n      /* '<S29>:1:33' */\r\n      rtb_reset = 0;\r\n    }\r\n\r\n    /* Gain: '<S26>/Gain1' */\r\n    /* '<S29>:1:36' */\r\n    /* '<S29>:1:38' */\r\n    rtb_Add2 = 2.0F * rtb_Merge_a;\r\n\r\n    /* Sum: '<S15>/Sum1' incorporates:\r\n     *  Constant: '<S26>/Constant4'\r\n     *  DataTypeConversion: '<S26>/Cast To Single'\r\n     *  Gain: '<S23>/Gain5'\r\n     *  Gain: '<S26>/Gain'\r\n     *  MATLAB Function: '<S23>/MATLAB Function2'\r\n     *  Product: '<S26>/Product'\r\n     *  Product: '<S26>/Product1'\r\n     */\r\n    rtb_Add3 = (0.144337565F * V_ref_unsat_0 + (real32_T)(0.0079942689836159844 *\r\n      rtb_Add2)) + rtb_Add2 * Id_fb * 0.000375F;\r\n\r\n    /* Sum: '<S15>/Sum' incorporates:\r\n     *  Gain: '<S22>/Gain4'\r\n     *  Gain: '<S25>/Gain'\r\n     *  Gain: '<S25>/Gain1'\r\n     *  MATLAB Function: '<S22>/MATLAB Function2'\r\n     *  Product: '<S25>/Product'\r\n     */\r\n    V_ref_unsat = 0.144337565F * V_ref_unsat - 2.0F * rtb_Merge_a * Iq_fb *\r\n      0.000435F;\r\n\r\n    /* Sum: '<S34>/Sum1' incorporates:\r\n     *  Product: '<S34>/Product'\r\n     *  Product: '<S34>/Product1'\r\n     */\r\n    rtb_Add2 = V_ref_unsat * V_ref_unsat + rtb_Add3 * rtb_Add3;\r\n\r\n    /* Outputs for IfAction SubSystem: '<S24>/D-Q Equivalence' incorporates:\r\n     *  ActionPort: '<S31>/Action Port'\r\n     */\r\n    /* If: '<S31>/If' incorporates:\r\n     *  If: '<S24>/If'\r\n     *  RelationalOperator: '<S31>/Relational Operator'\r\n     */\r\n    if (rtb_Add2 > 0.9025F) {\r\n      /* Outputs for IfAction SubSystem: '<S31>/Limiter' incorporates:\r\n       *  ActionPort: '<S35>/Action Port'\r\n       */\r\n      /* Sqrt: '<S35>/Square Root' */\r\n      rtb_Add2 = (real32_T)sqrt(rtb_Add2);\r\n\r\n      /* Product: '<S35>/Divide' incorporates:\r\n       *  Constant: '<S33>/Constant3'\r\n       *  Product: '<S35>/Product'\r\n       *  Switch: '<S33>/Switch'\r\n       *  Switch: '<S35>/Switch'\r\n       */\r\n      V_ref_unsat = V_ref_unsat * 0.95F / rtb_Add2;\r\n      rtb_Add3 = rtb_Add3 * 0.95F / rtb_Add2;\r\n\r\n      /* End of Outputs for SubSystem: '<S31>/Limiter' */\r\n    }\r\n\r\n    /* End of If: '<S31>/If' */\r\n    /* End of Outputs for SubSystem: '<S24>/D-Q Equivalence' */\r\n\r\n    /* Outputs for Atomic SubSystem: '<S16>/Two inputs CRL' */\r\n    /* Switch: '<S46>/Switch' incorporates:\r\n     *  Product: '<S45>/dcos'\r\n     *  Product: '<S45>/qsin'\r\n     *  Sum: '<S45>/sum_alpha'\r\n     */\r\n    V_ref_unsat_0 = V_ref_unsat * rtb_Add1_f - rtb_Add3 * rtb_Sum4;\r\n\r\n    /* Gain: '<S63>/one_by_two' incorporates:\r\n     *  AlgorithmDescriptorDelegate generated from: '<S45>/a16'\r\n     */\r\n    rtb_Add2 = 0.5F * V_ref_unsat_0;\r\n\r\n    /* Gain: '<S63>/sqrt3_by_two' incorporates:\r\n     *  Product: '<S45>/dsin'\r\n     *  Product: '<S45>/qcos'\r\n     *  Sum: '<S45>/sum_beta'\r\n     */\r\n    rtb_Sum4 = (rtb_Add3 * rtb_Add1_f + V_ref_unsat * rtb_Sum4) * 0.866025388F;\r\n\r\n    /* End of Outputs for SubSystem: '<S16>/Two inputs CRL' */\r\n\r\n    /* Sum: '<S63>/add_b' */\r\n    rtb_Add1_f = rtb_Sum4 - rtb_Add2;\r\n\r\n    /* Sum: '<S63>/add_c' */\r\n    rtb_Add2 = (0.0F - rtb_Add2) - rtb_Sum4;\r\n\r\n    /* MinMax: '<S60>/Max' incorporates:\r\n     *  AlgorithmDescriptorDelegate generated from: '<S45>/a16'\r\n     *  MinMax: '<S60>/Min'\r\n     */\r\n    tmp = rtIsNaNF(rtb_Add1_f);\r\n\r\n    /* Outputs for Atomic SubSystem: '<S16>/Two inputs CRL' */\r\n    if ((V_ref_unsat_0 >= rtb_Add1_f) || tmp) {\r\n      rtb_Sum4 = V_ref_unsat_0;\r\n    } else {\r\n      rtb_Sum4 = rtb_Add1_f;\r\n    }\r\n\r\n    /* MinMax: '<S60>/Min' incorporates:\r\n     *  AlgorithmDescriptorDelegate generated from: '<S45>/a16'\r\n     */\r\n    if ((V_ref_unsat_0 <= rtb_Add1_f) || tmp) {\r\n      V_ref_unsat = V_ref_unsat_0;\r\n    } else {\r\n      V_ref_unsat = rtb_Add1_f;\r\n    }\r\n\r\n    /* End of Outputs for SubSystem: '<S16>/Two inputs CRL' */\r\n\r\n    /* MinMax: '<S60>/Max' incorporates:\r\n     *  MinMax: '<S60>/Min'\r\n     */\r\n    tmp = !rtIsNaNF(rtb_Add2);\r\n    if ((!(rtb_Sum4 >= rtb_Add2)) && tmp) {\r\n      rtb_Sum4 = rtb_Add2;\r\n    }\r\n\r\n    /* MinMax: '<S60>/Min' */\r\n    if ((!(V_ref_unsat <= rtb_Add2)) && tmp) {\r\n      V_ref_unsat = rtb_Add2;\r\n    }\r\n\r\n    /* Gain: '<S60>/one_by_two' incorporates:\r\n     *  MinMax: '<S60>/Max'\r\n     *  MinMax: '<S60>/Min'\r\n     *  Sum: '<S60>/Add'\r\n     */\r\n    rtb_Add3 = (rtb_Sum4 + V_ref_unsat) * -0.5F;\r\n\r\n    /* Outputs for Atomic SubSystem: '<S16>/Two inputs CRL' */\r\n    /* Gain: '<S12>/Gain' incorporates:\r\n     *  AlgorithmDescriptorDelegate generated from: '<S45>/a16'\r\n     *  Constant: '<S12>/Constant1'\r\n     *  Gain: '<S59>/Gain'\r\n     *  Sum: '<S12>/Sum1'\r\n     *  Sum: '<S59>/Add1'\r\n     *  Sum: '<S59>/Add2'\r\n     *  Sum: '<S59>/Add3'\r\n     */\r\n    PWM_Duty_Cycles[0] = ((V_ref_unsat_0 + rtb_Add3) * 1.15470052F + 1.0F) *\r\n      0.5F;\r\n\r\n    /* End of Outputs for SubSystem: '<S16>/Two inputs CRL' */\r\n    PWM_Duty_Cycles[1] = ((rtb_Add1_f + rtb_Add3) * 1.15470052F + 1.0F) * 0.5F;\r\n    PWM_Duty_Cycles[2] = ((rtb_Add3 + rtb_Add2) * 1.15470052F + 1.0F) * 0.5F;\r\n\r\n    /* DataTypeConversion: '<S12>/Data Type Conversion' incorporates:\r\n     *  DataStoreRead: '<S12>/Enable'\r\n     */\r\n    PWM_Enable = (real32_T)Enable;\r\n\r\n    /* Switch: '<S11>/Switch1' */\r\n    if (PWM_Enable >= 0.5F) {\r\n      /* Switch: '<S11>/Switch1' */\r\n      PWM[0] = PWM_Duty_Cycles[0];\r\n      PWM[1] = PWM_Duty_Cycles[1];\r\n      PWM[2] = PWM_Duty_Cycles[2];\r\n    } else {\r\n      /* Switch: '<S11>/Switch1' incorporates:\r\n       *  Constant: '<S11>/stop'\r\n       */\r\n      PWM[0] = 0.0F;\r\n      PWM[1] = 0.0F;\r\n      PWM[2] = 0.0F;\r\n    }\r\n\r\n    /* End of Switch: '<S11>/Switch1' */\r\n\r\n    /* S-Function (ftm_s32k_pwm_config): '<S11>/FTM_PWM_Config' */\r\n    {\r\n      uint16_t dutyA = FTM_MAX_DUTY_CYCLE * PWM[0];\r\n      FTM_DRV_UpdatePwmChannel(FTM_PWM3, 0U, FTM_PWM_UPDATE_IN_DUTY_CYCLE, dutyA,\r\n        0, true);\r\n    }\r\n\r\n    {\r\n      uint16_t dutyA = FTM_MAX_DUTY_CYCLE * PWM[1];\r\n      FTM_DRV_UpdatePwmChannel(FTM_PWM3, 2U, FTM_PWM_UPDATE_IN_DUTY_CYCLE, dutyA,\r\n        0, true);\r\n    }\r\n\r\n    {\r\n      uint16_t dutyA = FTM_MAX_DUTY_CYCLE * PWM[2];\r\n      FTM_DRV_UpdatePwmChannel(FTM_PWM3, 4U, FTM_PWM_UPDATE_IN_DUTY_CYCLE, dutyA,\r\n        0, true);\r\n    }\r\n\r\n    /* S-Function (fm_s32k_recorder_call): '<S11>/FreeMaster_Recorder_Call' */\r\n    FMSTR_Recorder();\r\n\r\n    /* SignalConversion generated from: '<S1>/Speed_fb' */\r\n    SpeedMeasured = rtb_Merge_a;\r\n\r\n    /* Update for Delay: '<S76>/Delay One Step1' */\r\n    Foc_model_Matlab_DW.DelayOneStep1_DSTATE = rtb_Compare;\r\n\r\n    /* Update for Delay: '<S76>/Delay One Step' incorporates:\r\n     *  Constant: '<S76>/Constant2'\r\n     *  Sum: '<S76>/Sum'\r\n     */\r\n    if (OR) {\r\n      Foc_model_Matlab_DW.DelayOneStep_DSTATE = (uint16_T)(rtb_DataStoreRead5 -\r\n        1);\r\n    }\r\n\r\n    /* End of Update for Delay: '<S76>/Delay One Step' */\r\n\r\n    /* Update for UnitDelay: '<S22>/Unit Delay' */\r\n    Foc_model_Matlab_DW.UnitDelay_DSTATE_j = (real32_T)rtb_reset_bp;\r\n\r\n    /* Update for DiscreteIntegrator: '<S22>/Discrete-Time Integrator' */\r\n    Foc_model_Matlab_DW.DiscreteTimeIntegrator_SYSTEM_E = 0U;\r\n    Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTATE_d = rtb_Merge1_p;\r\n    if (rtb_Merge1 > 0.0F) {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_l = 1;\r\n    } else if (rtb_Merge1 < 0.0F) {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_l = -1;\r\n    } else if (rtb_Merge1 == 0.0F) {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_l = 0;\r\n    } else {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_l = 2;\r\n    }\r\n\r\n    Foc_model_Matlab_DW.DiscreteTimeIntegrator_PREV_U = rtb_Add;\r\n\r\n    /* End of Update for DiscreteIntegrator: '<S22>/Discrete-Time Integrator' */\r\n\r\n    /* Update for UnitDelay: '<S23>/Unit Delay' */\r\n    Foc_model_Matlab_DW.UnitDelay_DSTATE_f = (real32_T)rtb_reset;\r\n\r\n    /* Update for DiscreteIntegrator: '<S23>/Discrete-Time Integrator' */\r\n    Foc_model_Matlab_DW.DiscreteTimeIntegrator_SYSTEM_n = 0U;\r\n    Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTAT_dm =\r\n      DiscreteTimeIntegrator_d;\r\n    if (rtb_UnitDelay_f > 0.0F) {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_m = 1;\r\n    } else if (rtb_UnitDelay_f < 0.0F) {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_m = -1;\r\n    } else if (rtb_UnitDelay_f == 0.0F) {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_m = 0;\r\n    } else {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRe_m = 2;\r\n    }\r\n\r\n    Foc_model_Matlab_DW.DiscreteTimeIntegrator_PREV_U_e = Id_err;\r\n\r\n    /* End of Update for DiscreteIntegrator: '<S23>/Discrete-Time Integrator' */\r\n\r\n    /* user code (Output function Trailer) */\r\n\r\n    /* Profile Code : Compute function execution time in us. */\r\n    tmp2 = profiler_get_cnt();\r\n    profile_buffer[0] = gt_pf(tmp1, tmp2);\r\n\r\n    /* End of Profile Code */\r\n  }\r\n}\r\n\r\n/* Output and update for atomic system: '<Root>/SpeedControl' */\r\nvoid Foc_model_Matl_SpeedControl(void)\r\n{\r\n  real32_T rtb_Gain1_n;\r\n  real32_T rtb_Uk1;\r\n  real32_T rtb_UnitDelay_a;\r\n  real32_T s;\r\n\r\n  /* user code (Output function Body) */\r\n  {\r\n    /* Start of Profile Code */\r\n    uint32_t tmp1;\r\n    uint32_t tmp2;\r\n    tmp1 = profiler_get_cnt();\r\n\r\n    /* Start Profiling This Function.*/\r\n\r\n    /* Outputs for Atomic SubSystem: '<S8>/Speed_Ref_Selector' */\r\n    /* Switch: '<S152>/Switch' incorporates:\r\n     *  DataStoreRead: '<S152>/Data Store Read1'\r\n     *  DataTypeConversion: '<S152>/Data Type Conversion'\r\n     */\r\n    if ((real32_T)Enable > 0.5F) {\r\n      /* Switch: '<S152>/Switch' */\r\n      Speed_Ref = Speed_Ref_PU;\r\n    } else {\r\n      /* Switch: '<S152>/Switch' */\r\n      Speed_Ref = Speed_fb;\r\n    }\r\n\r\n    /* End of Switch: '<S152>/Switch' */\r\n    /* End of Outputs for SubSystem: '<S8>/Speed_Ref_Selector' */\r\n\r\n    /* Outputs for Atomic SubSystem: '<S8>/Contrloller_wr' */\r\n    /* Gain: '<S154>/Gain' incorporates:\r\n     *  Gain: '<S151>/Gain'\r\n     *  Gain: '<S151>/Gain6'\r\n     */\r\n    rtb_Uk1 = 0.104719758F * Speed_Ref * 3295.0F * 2.0F;\r\n\r\n    /* Gain: '<S154>/Gain1' incorporates:\r\n     *  Gain: '<S151>/Gain1'\r\n     *  Gain: '<S151>/Gain3'\r\n     */\r\n    rtb_Gain1_n = 0.104719758F * Speed_fb * 3295.0F * 2.0F;\r\n\r\n    /* Sum: '<S154>/Sum' */\r\n    SpeedError = rtb_Gain1_n - rtb_Uk1;\r\n\r\n    /* UnitDelay: '<S151>/Unit Delay' */\r\n    rtb_UnitDelay_a = Foc_model_Matlab_DW.UnitDelay_DSTATE;\r\n\r\n    /* DiscreteIntegrator: '<S154>/Discrete-Time Integrator' incorporates:\r\n     *  UnitDelay: '<S151>/Unit Delay'\r\n     */\r\n    if ((Foc_model_Matlab_DW.UnitDelay_DSTATE != 0.0F) ||\r\n        (Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRese != 0)) {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTATE = 0.0F;\r\n    }\r\n\r\n    /* SampleTimeMath: '<S156>/TSamp'\r\n     *\r\n     * About '<S156>/TSamp':\r\n     *  y = u * K where K = 1 / ( w * Ts )\r\n     *   */\r\n    rtb_Uk1 *= 1000.0F;\r\n\r\n    /* MATLAB Function: '<S151>/MATLAB Function' incorporates:\r\n     *  DataStoreRead: '<S155>/Data Store Read2'\r\n     *  DataStoreRead: '<S155>/Data Store Read3'\r\n     *  DataStoreRead: '<S155>/Data Store Read4'\r\n     *  DiscreteIntegrator: '<S154>/Discrete-Time Integrator'\r\n     *  SignalConversion generated from: '<S153>/ SFunction '\r\n     *  Sum: '<S156>/Diff'\r\n     *  UnitDelay: '<S156>/UD'\r\n     *\r\n     * Block description for '<S156>/Diff':\r\n     *\r\n     *  Add in CPU\r\n     *\r\n     * Block description for '<S156>/UD':\r\n     *\r\n     *  Store in Global RAM\r\n     */\r\n    /* MATLAB Function 'SpeedControl/Contrloller_wr/MATLAB Function': '<S153>:1' */\r\n    /* '<S153>:1:6' */\r\n    /* '<S153>:1:7' */\r\n    /* '<S153>:1:8' */\r\n    /* '<S153>:1:11' */\r\n    s = Lambda_w * Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTATE +\r\n      SpeedError;\r\n    if ((real32_T)fabs(s) > Epsilon_w) {\r\n      /* '<S153>:1:14' */\r\n      /* '<S153>:1:15' */\r\n      if (rtIsNaNF(s)) {\r\n        s = (rtNaNF);\r\n      } else if (s < 0.0F) {\r\n        s = -1.0F;\r\n      } else {\r\n        s = (real32_T)(s > 0.0F);\r\n      }\r\n\r\n      s *= -Rho_w;\r\n    } else {\r\n      /* '<S153>:1:17' */\r\n      s = s / Epsilon_w * -Rho_w;\r\n    }\r\n\r\n    /* '<S153>:1:21' */\r\n    /* '<S153>:1:24' */\r\n    /* '<S153>:1:26' */\r\n    rtb_Gain1_n = ((((rtb_Uk1 - Foc_model_Matlab_DW.UD_DSTATE) - Lambda_w *\r\n                     SpeedError) * Foc_model_Matlab_ConstB.CastToSingle +\r\n                    Foc_model_Matlab_ConstB.CastToSingle1 * rtb_Gain1_n) + s) /\r\n      Foc_model_Matlab_ConstB.CastToSingle2;\r\n    if (rtb_Gain1_n >= Foc_model_Matlab_ConstB.CastToSingle3) {\r\n      /* '<S153>:1:29' */\r\n      /* '<S153>:1:30' */\r\n      rtb_Gain1_n = Foc_model_Matlab_ConstB.CastToSingle3;\r\n\r\n      /* Update for UnitDelay: '<S151>/Unit Delay' */\r\n      /* '<S153>:1:31' */\r\n      Foc_model_Matlab_DW.UnitDelay_DSTATE = 1.0F;\r\n    } else if (rtb_Gain1_n <= -Foc_model_Matlab_ConstB.CastToSingle3) {\r\n      /* '<S153>:1:32' */\r\n      /* '<S153>:1:33' */\r\n      rtb_Gain1_n = -Foc_model_Matlab_ConstB.CastToSingle3;\r\n\r\n      /* Update for UnitDelay: '<S151>/Unit Delay' */\r\n      /* '<S153>:1:34' */\r\n      Foc_model_Matlab_DW.UnitDelay_DSTATE = 1.0F;\r\n    } else {\r\n      /* Update for UnitDelay: '<S151>/Unit Delay' */\r\n      /* '<S153>:1:36' */\r\n      Foc_model_Matlab_DW.UnitDelay_DSTATE = 0.0F;\r\n    }\r\n\r\n    /* Gain: '<S151>/Gain2' incorporates:\r\n     *  MATLAB Function: '<S151>/MATLAB Function'\r\n     */\r\n    /* '<S153>:1:39' */\r\n    /* '<S153>:1:41' */\r\n    Foc_model_Matlab_B.Gain2 = 0.032F * rtb_Gain1_n;\r\n\r\n    /* Update for DiscreteIntegrator: '<S154>/Discrete-Time Integrator' */\r\n    Foc_model_Matlab_DW.DiscreteTimeIntegrator_DSTATE += 0.001F * SpeedError;\r\n    if (rtb_UnitDelay_a > 0.0F) {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRese = 1;\r\n    } else if (rtb_UnitDelay_a < 0.0F) {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRese = -1;\r\n    } else if (rtb_UnitDelay_a == 0.0F) {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRese = 0;\r\n    } else {\r\n      Foc_model_Matlab_DW.DiscreteTimeIntegrator_PrevRese = 2;\r\n    }\r\n\r\n    /* End of Update for DiscreteIntegrator: '<S154>/Discrete-Time Integrator' */\r\n\r\n    /* Update for UnitDelay: '<S156>/UD'\r\n     *\r\n     * Block description for '<S156>/UD':\r\n     *\r\n     *  Store in Global RAM\r\n     */\r\n    Foc_model_Matlab_DW.UD_DSTATE = rtb_Uk1;\r\n\r\n    /* End of Outputs for SubSystem: '<S8>/Contrloller_wr' */\r\n\r\n    /* user code (Output function Trailer) */\r\n\r\n    /* Profile Code : Compute function execution time in us. */\r\n    tmp2 = profiler_get_cnt();\r\n    profile_buffer[1] = gt_pf(tmp1, tmp2);\r\n\r\n    /* End of Profile Code */\r\n  }\r\n}\r\n\r\n/* Model step function for TID0 */\r\nvoid Foc_model_Matlab_step0(void)      /* Sample time: [5.0E-5s, 0.0s] */\r\n{\r\n  {                                    /* Sample time: [5.0E-5s, 0.0s] */\r\n    rate_monotonic_scheduler();\r\n  }\r\n}\r\n\r\n/* Model step function for TID1 */\r\nvoid Foc_model_Matlab_step1(void)      /* Sample time: [0.0001s, 0.0s] */\r\n{\r\n  /* End of Outputs for S-Function (ftm_s32k_hall_sensor): '<S3>/FTM_Hall_Sensor' */\r\n\r\n  /* DataStoreWrite: '<S3>/Data Store Write1' */\r\n  HallCntActual = CntHall;\r\n\r\n  /* RateTransition: '<Root>/RT11' */\r\n  Iq_ref_PU = Foc_model_Matlab_DW.RT11_Buffer0;\r\n\r\n  /* End of Outputs for S-Function (pdb_s32k_isr): '<S138>/PDB1_ISR' */\r\n  /* End of Outputs for S-Function (adc_s32k_isr): '<S138>/ADC1_ISR' */\r\n\r\n  /* DataStoreWrite: '<S138>/Data Store Write' incorporates:\r\n   *  DataTypeConversion: '<S138>/Data Type Conversion'\r\n   */\r\n  ADC_A = (real32_T)ADC_IA;\r\n\r\n  /* DataStoreWrite: '<S138>/Data Store Write1' incorporates:\r\n   *  DataTypeConversion: '<S138>/Data Type Conversion'\r\n   */\r\n  ADC_B = (real32_T)ADC_IB;\r\n\r\n  /* End of Outputs for SubSystem: '<S3>/Subsystem2' */\r\n  /* S-Function (adc_s32k_start): '<S4>/ADC1_IRQ' */\r\n  {\r\n  }\r\n\r\n  /* If: '<S4>/If' incorporates:\r\n   *  DataStoreRead: '<S4>/Data Store Read'\r\n   */\r\n  if (!FAULT) {\r\n    /* Outputs for IfAction SubSystem: '<S4>/If Action Subsystem' incorporates:\r\n     *  ActionPort: '<S147>/Action Port'\r\n     */\r\n    /* S-Function (gpio_s32k_output): '<S147>/LED_GREEN_ON' incorporates:\r\n     *  Constant: '<S147>/LED_GREEN'\r\n     */\r\n\r\n    /* GPOPORTD16 Data Signal Update */\r\n    if (false) {\r\n      PINS_DRV_SetPins(PTD, 1UL<<16);\r\n    } else {\r\n      PINS_DRV_ClearPins(PTD, 1UL<<16);\r\n    }\r\n\r\n    /* S-Function (gpio_s32k_output): '<S147>/LED_RED_OFF' incorporates:\r\n     *  Constant: '<S147>/LED_RED'\r\n     */\r\n\r\n    /* GPOPORTD15 Data Signal Update */\r\n    if (true) {\r\n      PINS_DRV_SetPins(PTD, 1UL<<15);\r\n    } else {\r\n      PINS_DRV_ClearPins(PTD, 1UL<<15);\r\n    }\r\n\r\n    /* End of Outputs for SubSystem: '<S4>/If Action Subsystem' */\r\n  } else {\r\n    /* Outputs for IfAction SubSystem: '<S4>/FAULT' incorporates:\r\n     *  ActionPort: '<S145>/Action Port'\r\n     */\r\n    /* S-Function (gpio_s32k_output): '<S145>/LED_GREEN' incorporates:\r\n     *  Constant: '<S145>/OFF'\r\n     */\r\n\r\n    /* GPOPORTD16 Data Signal Update */\r\n    if (true) {\r\n      PINS_DRV_SetPins(PTD, 1UL<<16);\r\n    } else {\r\n      PINS_DRV_ClearPins(PTD, 1UL<<16);\r\n    }\r\n\r\n    /* S-Function (gpio_s32k_output): '<S145>/LED_RED' incorporates:\r\n     *  Constant: '<S145>/ON'\r\n     */\r\n\r\n    /* GPOPORTD15 Data Signal Update */\r\n    if (false) {\r\n      PINS_DRV_SetPins(PTD, 1UL<<15);\r\n    } else {\r\n      PINS_DRV_ClearPins(PTD, 1UL<<15);\r\n    }\r\n\r\n    /* End of Outputs for SubSystem: '<S4>/FAULT' */\r\n  }\r\n\r\n  /* End of If: '<S4>/If' */\r\n\r\n  /* Chart: '<S4>/Enable PDB and start FTM' */\r\n  /* Gateway: Hardware Initialization/Enable PDB and start FTM */\r\n  /* During: Hardware Initialization/Enable PDB and start FTM */\r\n  if (Foc_model_Matlab_DW.is_active_c1_Foc_model_Matlab == 0) {\r\n    /* Entry: Hardware Initialization/Enable PDB and start FTM */\r\n    Foc_model_Matlab_DW.is_active_c1_Foc_model_Matlab = 1U;\r\n\r\n    /* Entry Internal: Hardware Initialization/Enable PDB and start FTM */\r\n    /* Transition: '<S144>:10' */\r\n    Foc_model_Matlab_DW.is_c1_Foc_model_Matlab = Foc_model_Matlab_IN_A;\r\n  } else if (Foc_model_Matlab_DW.is_c1_Foc_model_Matlab == Foc_model_Matlab_IN_A)\r\n  {\r\n    /* Outputs for Function Call SubSystem: '<S4>/enable_FTM_PDB_ADC_triggering' */\r\n    /* During 'A': '<S144>:5' */\r\n    /* Transition: '<S144>:103' */\r\n    /* Event: '<S144>:104' */\r\n\r\n    /* S-Function (ftm_s32k_pwm_disen): '<S148>/FTM_PWM_Disable_Enable' */\r\n    FTM_DRV_InitPwm(FTM_PWM3, &flexTimer_pwm3_PwmConfig);\r\n\r\n    /* S-Function (ftm_s32k_init_disen): '<S148>/FTM_Init_Trigger_Disable_Enable' */\r\n\r\n    /* FTM PWM Initialization Trigger Enable Disable*/\r\n    FTM_DRV_SetInitTriggerCmd(FTM3, true);\r\n\r\n    /* S-Function (pdb_s32k_enable): '<S148>/PDB0_Enable' */\r\n\r\n    /* Enable PDB Module0 */\r\n    PDB_DRV_Enable(0);\r\n\r\n    /* S-Function (pdb_s32k_enable): '<S148>/PDB1_Enable' */\r\n\r\n    /* Enable PDB Module1 */\r\n    PDB_DRV_Enable(1);\r\n\r\n    /* S-Function (tpp_s32k_isr_enable): '<S148>/TPP_ISR_Enable_Disable' */\r\n    tpp_interrupt_enable(15);\r\n\r\n    /* user code (Output function Trailer) */\r\n\r\n    /* System '<S4>/enable_FTM_PDB_ADC_triggering' */\r\n    PDB_DRV_LoadValuesCmd(0);\r\n    PDB_DRV_LoadValuesCmd(1);\r\n\r\n    /* End of Outputs for SubSystem: '<S4>/enable_FTM_PDB_ADC_triggering' */\r\n    Foc_model_Matlab_DW.is_c1_Foc_model_Matlab = Foc_model_Matlab_IN_END;\r\n  } else {\r\n    /* During 'END': '<S144>:39' */\r\n    /* Transition: '<S144>:41' */\r\n    /* Event: '<S144>:36' */\r\n    Foc_model_Matlab_DW.is_c1_Foc_model_Matlab = Foc_model_Matlab_IN_END;\r\n  }\r\n\r\n  /* End of Chart: '<S4>/Enable PDB and start FTM' */\r\n  /* End of Outputs for S-Function (tpp_s32k_isr): '<S4>/GD300_ISR_Callback ' */\r\n\r\n  /* Update absolute time */\r\n  /* The \"clockTick1\" counts the number of times the code of this task has\r\n   * been executed. The resolution of this integer timer is 0.0001, which is the step size\r\n   * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n   * application lifespan selected.\r\n   */\r\n  Foc_model_Matlab_M->Timing.clockTick1++;\r\n}\r\n\r\n/* Model step function for TID2 */\r\nvoid Foc_model_Matlab_step2(void)      /* Sample time: [0.001s, 0.0s] */\r\n{\r\n  /* RateTransition: '<Root>/RT2' */\r\n  Speed_Ref_PU = Foc_model_Matlab_DW.RT2_Buffer0;\r\n\r\n  /* RateTransition: '<Root>/RT1' */\r\n  Speed_fb = SpeedMeasured;\r\n\r\n  /* Outputs for Atomic SubSystem: '<Root>/SpeedControl' */\r\n  Foc_model_Matl_SpeedControl();\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/SpeedControl' */\r\n\r\n  /* RateTransition: '<Root>/RT11' */\r\n  Foc_model_Matlab_DW.RT11_Buffer0 = Foc_model_Matlab_B.Gain2;\r\n}\r\n\r\n/* Model step function for TID3 */\r\nvoid Foc_model_Matlab_step3(void)      /* Sample time: [0.1s, 0.0s] */\r\n{\r\n  /* S-Function (fcgen): '<S3>/SCI_Rx_INT' incorporates:\r\n   *  SubSystem: '<Root>/Serial Receive'\r\n   */\r\n  /* RateTransition: '<Root>/RT2' incorporates:\r\n   *  DataStoreRead: '<S150>/Data Store Read2'\r\n   *  Gain: '<S150>/rpm2PU'\r\n   */\r\n  Foc_model_Matlab_DW.RT2_Buffer0 = 0.0005F * DesiredSpeed;\r\n\r\n  /* End of Outputs for S-Function (fcgen): '<S3>/SCI_Rx_INT' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid Foc_model_Matlab_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  /* Start for S-Function (pdb_s32k_config): '<S4>/PDB0_Init' */\r\n  trgmuxAllMappingConfig[0] = pdb0MappingConfig;\r\n  trgmuxAllMappingConfig[1] = pdb1MappingConfig;\r\n\r\n  /* Initializes TRGMUX instance for operation. */\r\n  TRGMUX_DRV_Init(0, &pdbTrgmuxUserConfig);\r\n\r\n  /* Set PDB0 clock source */\r\n  PCC_SetPeripheralClockControl(PCC, PDB0_CLK, true, CLK_SRC_SPLL, 0, 0);\r\n\r\n  /* Enable clock for PDB0 */\r\n  PCC_SetClockMode(PCC, PDB0_CLK, true);\r\n\r\n  /* Initialize PDB0 driver. */\r\n  PDB_DRV_Init(0, &pdb0TimerConfig);\r\n\r\n  /* Set the value to PDB modulus register */\r\n  PDB_DRV_SetTimerModulusValue(0, 5000U);\r\n\r\n  /* Configure the ADC pre_trigger 0U in the PDB0 module */\r\n  PDB_DRV_ConfigAdcPreTrigger(0, 0U, &pdb0Ch0UPreTrigConfig0U);\r\n\r\n  /* Set the ADC pre_trigger 0U delay value in the PDB0 module */\r\n  PDB_DRV_SetAdcPreTriggerDelayValue(0, 0U, 0U, 2000U);\r\n\r\n  /* Command the PDB instance to load the fresh values */\r\n  PDB_DRV_LoadValuesCmd(0);\r\n\r\n  /* Start for S-Function (pdb_s32k_config): '<S4>/PDB1_Init' */\r\n  trgmuxAllMappingConfig[0] = pdb0MappingConfig;\r\n  trgmuxAllMappingConfig[1] = pdb1MappingConfig;\r\n\r\n  /* Initializes TRGMUX instance for operation. */\r\n  TRGMUX_DRV_Init(0, &pdbTrgmuxUserConfig);\r\n\r\n  /* Set PDB1 clock source */\r\n  PCC_SetPeripheralClockControl(PCC, PDB1_CLK, true, CLK_SRC_SPLL, 0, 0);\r\n\r\n  /* Enable clock for PDB1 */\r\n  PCC_SetClockMode(PCC, PDB1_CLK, true);\r\n\r\n  /* Initialize PDB1 driver. */\r\n  PDB_DRV_Init(1, &pdb1TimerConfig);\r\n\r\n  /* Set the value to PDB modulus register */\r\n  PDB_DRV_SetTimerModulusValue(1, 5000U);\r\n\r\n  /* Configure the ADC pre_trigger 0U in the PDB1 module */\r\n  PDB_DRV_ConfigAdcPreTrigger(1, 0U, &pdb1Ch0UPreTrigConfig0U);\r\n\r\n  /* Set the ADC pre_trigger 0U delay value in the PDB1 module */\r\n  PDB_DRV_SetAdcPreTriggerDelayValue(1, 0U, 0U, 0U);\r\n\r\n  /* Configure the ADC pre_trigger 1U in the PDB1 module */\r\n  PDB_DRV_ConfigAdcPreTrigger(1, 0U, &pdb1Ch0UPreTrigConfig1U);\r\n\r\n  /* Set the ADC pre_trigger 1U delay value in the PDB1 module */\r\n  PDB_DRV_SetAdcPreTriggerDelayValue(1, 0U, 1U, 1000U);\r\n\r\n  /* Configure the ADC pre_trigger 2U in the PDB1 module */\r\n  PDB_DRV_ConfigAdcPreTrigger(1, 0U, &pdb1Ch0UPreTrigConfig2U);\r\n\r\n  /* Set the ADC pre_trigger 2U delay value in the PDB1 module */\r\n  PDB_DRV_SetAdcPreTriggerDelayValue(1, 0U, 2U, 2000U);\r\n\r\n  /* Command the PDB instance to load the fresh values */\r\n  PDB_DRV_LoadValuesCmd(1);\r\n\r\n  /* Start for S-Function (adc_s32k_config): '<S4>/ADC0_Init' */\r\n  {\r\n    const adc_converter_config_t adc0_cfg = {\r\n      .clockDivide = ADC_CLK_DIVIDE_1,\r\n      .sampleTime = 1.0,\r\n      .resolution = ADC_RESOLUTION_12BIT,\r\n      .inputClock = ADC_CLK_ALT_1,\r\n      .trigger = ADC_TRIGGER_HARDWARE,\r\n      .pretriggerSel = ADC_PRETRIGGER_SEL_PDB,\r\n      .triggerSel = ADC_TRIGGER_SEL_PDB,\r\n      .dmaEnable = false,\r\n      .voltageRef = ADC_VOLTAGEREF_VREF,\r\n      .continuousConvEnable = false,\r\n      .supplyMonitoringEnable = false\r\n    };\r\n\r\n    const adc_compare_config_t adc0_cmp_cfg = {\r\n      .compareEnable = false,\r\n      .compareGreaterThanEnable = false,\r\n      .compareRangeFuncEnable = false,\r\n      .compVal1 = 0,\r\n      .compVal2 = 0\r\n    };\r\n\r\n    const adc_average_config_t adc0_avrg_cfg = {\r\n      .hwAvgEnable = false,\r\n      .hwAverage = ADC_AVERAGE_4\r\n    };\r\n\r\n    /* Enable ADC0 clock */\r\n    PCC_SetClockMode(PCC, PCC_ADC0_CLOCK, false);\r\n\r\n    /* Set ADC0 clock source */\r\n    PCC_SetPeripheralClockControl(PCC, PCC_ADC0_CLOCK, true, CLK_SRC_SPLL, 0, 0);\r\n\r\n    /* Enable ADC0 clock */\r\n    PCC_SetClockMode(PCC, PCC_ADC0_CLOCK, true);\r\n    ADC_DRV_Reset(0);\r\n\r\n    /* Configure ADC0 */\r\n    ADC_DRV_ConfigConverter(0, &adc0_cfg);\r\n    ADC_DRV_SetSwPretrigger(0,ADC_SW_PRETRIGGER_DISABLED);\r\n    ADC_DRV_ConfigHwCompare(0, &adc0_cmp_cfg);\r\n    ADC_DRV_ConfigHwAverage(0, &adc0_avrg_cfg);\r\n\r\n    /* Do calibration before initialize the ADC0. */\r\n    ADC_DRV_AutoCalibration(0);\r\n  }\r\n\r\n  /* Start for S-Function (adc_s32k_config): '<S4>/ADC1_Init' */\r\n  {\r\n    const adc_converter_config_t adc1_cfg = {\r\n      .clockDivide = ADC_CLK_DIVIDE_1,\r\n      .sampleTime = 1.0,\r\n      .resolution = ADC_RESOLUTION_12BIT,\r\n      .inputClock = ADC_CLK_ALT_1,\r\n      .trigger = ADC_TRIGGER_HARDWARE,\r\n      .pretriggerSel = ADC_PRETRIGGER_SEL_PDB,\r\n      .triggerSel = ADC_TRIGGER_SEL_PDB,\r\n      .dmaEnable = false,\r\n      .voltageRef = ADC_VOLTAGEREF_VREF,\r\n      .continuousConvEnable = false,\r\n      .supplyMonitoringEnable = false\r\n    };\r\n\r\n    const adc_compare_config_t adc1_cmp_cfg = {\r\n      .compareEnable = false,\r\n      .compareGreaterThanEnable = false,\r\n      .compareRangeFuncEnable = false,\r\n      .compVal1 = 0,\r\n      .compVal2 = 0\r\n    };\r\n\r\n    const adc_average_config_t adc1_avrg_cfg = {\r\n      .hwAvgEnable = false,\r\n      .hwAverage = ADC_AVERAGE_4\r\n    };\r\n\r\n    /* Enable ADC1 clock */\r\n    PCC_SetClockMode(PCC, PCC_ADC1_CLOCK, false);\r\n\r\n    /* Set ADC1 clock source */\r\n    PCC_SetPeripheralClockControl(PCC, PCC_ADC1_CLOCK, true, CLK_SRC_SPLL, 0, 0);\r\n\r\n    /* Enable ADC1 clock */\r\n    PCC_SetClockMode(PCC, PCC_ADC1_CLOCK, true);\r\n    ADC_DRV_Reset(1);\r\n\r\n    /* Configure ADC1 */\r\n    ADC_DRV_ConfigConverter(1, &adc1_cfg);\r\n    ADC_DRV_SetSwPretrigger(1,ADC_SW_PRETRIGGER_DISABLED);\r\n    ADC_DRV_ConfigHwCompare(1, &adc1_cmp_cfg);\r\n    ADC_DRV_ConfigHwAverage(1, &adc1_avrg_cfg);\r\n\r\n    /* Do calibration before initialize the ADC1. */\r\n    ADC_DRV_AutoCalibration(1);\r\n  }\r\n\r\n  /* Start for S-Function (adc_s32k_start): '<S4>/ADC1_IRQ' */\r\n  {\r\n    adc_chan_config_t adc1_chan_cfg = {\r\n      .interruptEnable = true,\r\n      .channel = ADC_INPUTCHAN_EXT15\r\n    };\r\n\r\n    /* Initialize channel configuration of ADC1. */\r\n    ADC_DRV_ConfigChan(1, 2, &adc1_chan_cfg);\r\n  }\r\n\r\n  /* Start for S-Function (adc_s32k_interleave): '<S4>/ADC_Interleave' */\r\n  SIM_HAL_SetAdcInterleaveSel(SIM, 2U);\r\n\r\n  /* Start for S-Function (fm_s32k_config): '<S4>/FreeMaster_Config' */\r\n\r\n  /* Initialize FreeMaster. */\r\n  freemaster_interface_init();\r\n  freemaster_interface_isr_init();\r\n  FMSTR_Init();\r\n\r\n  /* Start for S-Function (lpspi_s32k_config): '<S4>/LPSPI_Config ' */\r\n  {\r\n    /* Enable LPSPI clock */\r\n    PCC_SetPeripheralClockControl(PCC, LPSPI0_CLK, true, CLK_SRC_FIRC_DIV2,\r\n      DIVIDE_BY_ONE, MULTIPLY_BY_ONE);\r\n\r\n    /* Enable clock for PORTB */\r\n    PCC_SetPeripheralClockControl(PCC, PORTB_CLK, true, CLK_SRC_OFF,\r\n      DIVIDE_BY_ONE, MULTIPLY_BY_ONE);\r\n\r\n    /* Enable clock for PORTB */\r\n    PCC_SetPeripheralClockControl(PCC, PORTB_CLK, true, CLK_SRC_OFF,\r\n      DIVIDE_BY_ONE, MULTIPLY_BY_ONE);\r\n\r\n    /* Enable clock for PORTB */\r\n    PCC_SetPeripheralClockControl(PCC, PORTB_CLK, true, CLK_SRC_OFF,\r\n      DIVIDE_BY_ONE, MULTIPLY_BY_ONE);\r\n\r\n    /* PCS1! Enable clock for PORTB */\r\n    PCC_SetPeripheralClockControl(PCC, PORTB_CLK, true, CLK_SRC_OFF,\r\n      DIVIDE_BY_ONE, MULTIPLY_BY_ONE);\r\n\r\n    /* Setup SPI pins */\r\n    pin_settings_config_t spi_pin_mux[4U]= {\r\n      {\r\n        /* SIN pin */\r\n        .base = PORTB,\r\n        .pinPortIdx = 3,\r\n        .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n        .passiveFilter = false,\r\n        .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n        .mux = PORT_MUX_ALT3,\r\n        .pinLock = false,\r\n        .intConfig = PORT_DMA_INT_DISABLED,\r\n        .clearIntFlag = false,\r\n      },\r\n\r\n      {\r\n        /* SOUT pin */\r\n        .base = PORTB,\r\n        .pinPortIdx = 4,\r\n        .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n        .passiveFilter = false,\r\n        .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n        .mux = PORT_MUX_ALT3,\r\n        .pinLock = false,\r\n        .intConfig = PORT_DMA_INT_DISABLED,\r\n        .clearIntFlag = false,\r\n      },\r\n\r\n      {\r\n        /* SCK pin */\r\n        .base = PORTB,\r\n        .pinPortIdx = 2,\r\n        .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n        .passiveFilter = false,\r\n        .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n        .mux = PORT_MUX_ALT3,\r\n        .pinLock = false,\r\n        .intConfig = PORT_DMA_INT_DISABLED,\r\n        .clearIntFlag = false,\r\n      },\r\n\r\n      {\r\n        /* PCS1 pin */\r\n        .base = PORTB,\r\n        .pinPortIdx = 5,\r\n        .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n        .passiveFilter = false,\r\n        .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n        .mux = PORT_MUX_ALT3,\r\n        .pinLock = false,\r\n        .intConfig = PORT_DMA_INT_DISABLED,\r\n        .clearIntFlag = false,\r\n      },\r\n    };\r\n\r\n    PINS_DRV_Init(4U, spi_pin_mux);\r\n  }\r\n\r\n  {\r\n    /* Configure the SPI init structure. */\r\n    lpspi_master_config_t spiConfig0 = {\r\n      .bitsPerSec = 1000000U,\r\n      .whichPcs = LPSPI_PCS0,\r\n      .pcsPolarity = LPSPI_ACTIVE_LOW,\r\n      .isPcsContinuous = false,\r\n      .bitcount = 8U,\r\n      .clkPhase = LPSPI_CLOCK_PHASE_2ND_EDGE,\r\n      .clkPolarity = LPSPI_SCK_ACTIVE_HIGH,\r\n      .lsbFirst = false,\r\n      .transferType = LPSPI_USING_INTERRUPTS,\r\n      .callback = (spi_callback_t)lpspi_master_transfer_callback0,\r\n    };\r\n\r\n    /* Module source clock */\r\n    uint32_t frequency;\r\n    CLOCK_SYS_GetFreq(LPSPI0_CLK, &frequency);\r\n    spiConfig0.lpspiSrcClk = frequency;\r\n\r\n    /* Initializes a LPSPI instance for interrupt driven master mode operation */\r\n    LPSPI_DRV_MasterInit(0, &lpspiMasterState0, &spiConfig0);\r\n  }\r\n\r\n  /* Start for DataStoreMemory: '<Root>/Data Store Memory14' */\r\n  Epsilon_q = 18.0F;\r\n\r\n  /* Start for DataStoreMemory: '<Root>/Data Store Memory15' */\r\n  Lambda_q = 40.0F;\r\n\r\n  /* Start for DataStoreMemory: '<Root>/Data Store Memory16' */\r\n  Epsilon_d = 2.0F;\r\n\r\n  /* Start for DataStoreMemory: '<Root>/Data Store Memory17' */\r\n  Lambda_d = 35.0F;\r\n\r\n  /* Start for DataStoreMemory: '<Root>/Data Store Memory18' */\r\n  Rho_d = 0.5F;\r\n\r\n  /* Start for DataStoreMemory: '<Root>/Data Store Memory5' */\r\n  IaOffset = 2040.0F;\r\n\r\n  /* Start for DataStoreMemory: '<Root>/Data Store Memory6' */\r\n  IbOffset = 2040.0F;\r\n\r\n  /* Start for DataStoreMemory: '<Root>/Data Store Memory8' */\r\n  Rho_q = 2.0F;\r\n\r\n  /* Start for DataStoreMemory: '<Root>/Data Store Memory10' */\r\n  Rho_w = 0.3F;\r\n\r\n  /* Start for DataStoreMemory: '<Root>/Data Store Memory13' */\r\n  Epsilon_w = 50.0F;\r\n\r\n  /* Start for DataStoreMemory: '<Root>/Data Store Memory9' */\r\n  Lambda_w = 35.0F;\r\n\r\n  /* SystemInitialize for S-Function (ftm_s32k_hall_sensor): '<S3>/FTM_Hall_Sensor' incorporates:\r\n   *  SubSystem: '<Root>/Hall Sensor'\r\n   */\r\n  /* System initialize for function-call system: '<Root>/Hall Sensor' */\r\n\r\n  /* Start for S-Function (gpio_s32k_input): '<S119>/Digital_Input_HALL_A' */\r\n  {\r\n    /* Enable clock for PORTA */\r\n    PCC_SetClockMode(PCC, PCC_PORTA_CLOCK, true);\r\n\r\n    /* Configure the input port init structure. */\r\n    const pin_settings_config_t gpioPORTAPin1 = {\r\n      .base = PORTA,\r\n      .pinPortIdx = 1,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTA,\r\n      .direction = GPIO_INPUT_DIRECTION,\r\n    };\r\n\r\n    /* Initialize GPIPORTA1. */\r\n    PINS_DRV_Init(1, &gpioPORTAPin1);\r\n  }\r\n\r\n  /* Start for S-Function (gpio_s32k_input): '<S119>/Digital_Input_HALL_B' */\r\n  {\r\n    /* Enable clock for PORTD */\r\n    PCC_SetClockMode(PCC, PCC_PORTD_CLOCK, true);\r\n\r\n    /* Configure the input port init structure. */\r\n    const pin_settings_config_t gpioPORTDPin10 = {\r\n      .base = PORTD,\r\n      .pinPortIdx = 10,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTD,\r\n      .direction = GPIO_INPUT_DIRECTION,\r\n    };\r\n\r\n    /* Initialize GPIPORTD10. */\r\n    PINS_DRV_Init(1, &gpioPORTDPin10);\r\n  }\r\n\r\n  /* Start for S-Function (gpio_s32k_input): '<S119>/Digital_Input_HALL_C' */\r\n  {\r\n    /* Enable clock for PORTD */\r\n    PCC_SetClockMode(PCC, PCC_PORTD_CLOCK, true);\r\n\r\n    /* Configure the input port init structure. */\r\n    const pin_settings_config_t gpioPORTDPin11 = {\r\n      .base = PORTD,\r\n      .pinPortIdx = 11,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTD,\r\n      .direction = GPIO_INPUT_DIRECTION,\r\n    };\r\n\r\n    /* Initialize GPIPORTD11. */\r\n    PINS_DRV_Init(1, &gpioPORTDPin11);\r\n  }\r\n\r\n  /* Set FTM_2 clock source */\r\n  PCC_SetPeripheralClockControl (PCC, FTM2_CLK, true, CLK_SRC_SPLL, 0, 0);\r\n\r\n  /* Enable clock for FTM_2 */\r\n  PCC_SetClockMode (PCC, FTM2_CLK, true);\r\n\r\n  /* Initialize FTM instances, PWM and Input capture */\r\n  static ftm_state_t ftm2StateStruct;\r\n  FTM_DRV_Init(2, &flexTimer_ic2_InitConfig, &ftm2StateStruct);\r\n\r\n  /* Setup input capture for FMT2*/\r\n  FTM_DRV_InitInputCapture(2, &flexTimer_ic2_InputCaptureConfig);\r\n\r\n  /* Enable clock for PORTA */\r\n  PCC_SetClockMode (PCC, PCC_PORTA_CLOCK, true);\r\n\r\n  /* Pin is configured for FTM function */\r\n  PINS_SetMuxModeSel(PORTA, 1, PORT_MUX_ALT2);\r\n\r\n  /* Enable clock for PORTD */\r\n  PCC_SetClockMode (PCC, PCC_PORTD_CLOCK, true);\r\n\r\n  /* Pin is configured for FTM function */\r\n  PINS_SetMuxModeSel(PORTD, 10, PORT_MUX_ALT2);\r\n\r\n  /* Enable clock for PORTD */\r\n  PCC_SetClockMode (PCC, PCC_PORTD_CLOCK, true);\r\n\r\n  /* Pin is configured for FTM function */\r\n  PINS_SetMuxModeSel(PORTD, 11, PORT_MUX_ALT2);\r\n\r\n  /* FTM2: channel 1 counter reset */\r\n  FTM_RMW_CnSCV_REG(FTM2, 1, FTM_CnSC_ICRST_MASK , FTM_CnSC_ICRST(true));\r\n\r\n  /* FTM2: channel 1 ISR enable */\r\n  FTM_DRV_EnableChnInt(FTM2, 1);\r\n\r\n  /* Select as the input of FTM2: XOR of FTM2_CH0, FTM2_CH1 and FTM1_CH1 */\r\n  SIM->FTMOPT1 |= SIM_FTMOPT1_FTM2CH1SEL(1);\r\n\r\n  /* FTM2: ISR level */\r\n  INT_SYS_SetPriority(FTM2_Ch0_Ch1_IRQn, 5.0);\r\n\r\n  /* FTM2: enable ISR */\r\n  INT_SYS_EnableIRQ(FTM2_Ch0_Ch1_IRQn);\r\n\r\n  /* FTM2:installing ISR Handler */\r\n  INT_SYS_InstallHandler(FTM2_Ch0_Ch1_IRQn, FTM2_Ch0_1_IRQHandler, (isr_t *)0);\r\n\r\n  /* Adding interrupt handler in the vector from ftm_chn_irq.c file */\r\n  FTM_CHR_DRV_InstallCallback(2, 1, FTM2_Ch1_Hall_Sensor_isr);\r\n\r\n  /* SystemInitialize for Atomic SubSystem: '<S3>/Subsystem2' */\r\n  /* SystemInitialize for S-Function (pdb_s32k_isr): '<S138>/PDB1_ISR' */\r\n\r\n  /* Table of base addresses for PDB instances. */\r\n  static PDB_Type * const s_pdbBase[PDB_INSTANCE_COUNT] = PDB_BASE_PTRS;\r\n\r\n  /* Set value for PDB0_IDLY register (interrupt delay) */\r\n  PDB_DRV_SetValueForTimerInterrupt(0, 4999U);\r\n\r\n  /* Load and lock interrupt delay value */\r\n  PDB_DRV_LoadValuesCmd(0);\r\n\r\n  {\r\n    uint32_t sc = 0;\r\n    PDB_Type * base = s_pdbBase[0];\r\n    sc = base->SC;\r\n    sc &= ~((uint32_t) PDB_SC_PDBEIE_MASK |\r\n            (uint32_t)PDB_SC_PDBIE_MASK);\r\n\r\n    /* Enable PDB interrupt */\r\n    sc |= PDB_SC_PDBIE_MASK;\r\n    base->SC = sc;\r\n\r\n    /* Enable PDB0 interrupt and set priority for it */\r\n    INT_SYS_InstallHandler(PDB0_IRQn, pdb0_isr, (isr_t *)0);\r\n    INT_SYS_SetPriority(PDB0_IRQn, 6);\r\n    INT_SYS_EnableIRQ(PDB0_IRQn);\r\n  }\r\n\r\n  /* SystemInitialize for S-Function (adc_s32k_isr): '<S138>/ADC1_ISR' incorporates:\r\n   *  SubSystem: '<S138>/ADC1_IRQHandler'\r\n   */\r\n  /* System initialize for function-call system: '<S138>/ADC1_IRQHandler' */\r\n\r\n  /* Start for S-Function (adc_s32k_start): '<S139>/ADC_AD4_IA' */\r\n  {\r\n    adc_chan_config_t adc0_chan_cfg = {\r\n      .interruptEnable = false,\r\n      .channel = ADC_INPUTCHAN_EXT4\r\n    };\r\n\r\n    /* Initialize channel configuration of ADC0. */\r\n    ADC_DRV_ConfigChan(0, 0, &adc0_chan_cfg);\r\n  }\r\n\r\n  /* Start for S-Function (adc_s32k_start): '<S139>/ADC_AD7_VDC' */\r\n  {\r\n    adc_chan_config_t adc1_chan_cfg = {\r\n      .interruptEnable = false,\r\n      .channel = ADC_INPUTCHAN_EXT7\r\n    };\r\n\r\n    /* Initialize channel configuration of ADC1. */\r\n    ADC_DRV_ConfigChan(1, 0, &adc1_chan_cfg);\r\n  }\r\n\r\n  /* Start for S-Function (adc_s32k_start): '<S139>/ADC_AD6_IDC' */\r\n  {\r\n    adc_chan_config_t adc1_chan_cfg = {\r\n      .interruptEnable = false,\r\n      .channel = ADC_INPUTCHAN_EXT6\r\n    };\r\n\r\n    /* Initialize channel configuration of ADC1. */\r\n    ADC_DRV_ConfigChan(1, 1, &adc1_chan_cfg);\r\n  }\r\n\r\n  /* SystemInitialize for S-Function (fcgen): '<S139>/Function-Call Generator' incorporates:\r\n   *  SubSystem: '<Root>/CurrentControl'\r\n   */\r\n  Foc_mod_CurrentControl_Init();\r\n\r\n  /* End of SystemInitialize for S-Function (fcgen): '<S139>/Function-Call Generator' */\r\n  ADC_InstallCallback(1, 2U, ADC1_SC1reg2U_callback);\r\n\r\n  /* Set ADC1 interrupt priority */\r\n  INT_SYS_SetPriority(ADC1_IRQn, 5);\r\n\r\n  /* Enable ADC1 interrupt */\r\n  INT_SYS_EnableIRQ(ADC1_IRQn);\r\n\r\n  /* SystemInitialize for IfAction SubSystem: '<S4>/FAULT' */\r\n  /* Start for S-Function (gpio_s32k_output): '<S145>/LED_GREEN' incorporates:\r\n   *  Constant: '<S145>/OFF'\r\n   */\r\n  {\r\n    /* Enable clock for PORTD */\r\n    PCC_SetClockMode(PCC, PCC_PORTD_CLOCK, true);\r\n\r\n    /* Configure the output port init structure. */\r\n    const pin_settings_config_t gpioPORTDPin16 = {\r\n      .base = PORTD,\r\n      .pinPortIdx = 16,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTD,\r\n      .direction = GPIO_OUTPUT_DIRECTION,\r\n      .initValue = 0U\r\n    };\r\n\r\n    /* Initialize GPIPORTD16. */\r\n    PINS_DRV_Init(1, &gpioPORTDPin16);\r\n  }\r\n\r\n  /* Start for S-Function (gpio_s32k_output): '<S145>/LED_RED' incorporates:\r\n   *  Constant: '<S145>/ON'\r\n   */\r\n  {\r\n    /* Enable clock for PORTD */\r\n    PCC_SetClockMode(PCC, PCC_PORTD_CLOCK, true);\r\n\r\n    /* Configure the output port init structure. */\r\n    const pin_settings_config_t gpioPORTDPin15 = {\r\n      .base = PORTD,\r\n      .pinPortIdx = 15,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTD,\r\n      .direction = GPIO_OUTPUT_DIRECTION,\r\n      .initValue = 0U\r\n    };\r\n\r\n    /* Initialize GPIPORTD15. */\r\n    PINS_DRV_Init(1, &gpioPORTDPin15);\r\n  }\r\n\r\n  /* End of SystemInitialize for SubSystem: '<S4>/FAULT' */\r\n  /* SystemInitialize for Chart: '<S4>/Enable PDB and start FTM' incorporates:\r\n   *  SubSystem: '<S4>/enable_FTM_PDB_ADC_triggering'\r\n   */\r\n\r\n  /* SystemInitialize for S-Function (tpp_s32k_isr): '<S4>/GD300_ISR_Callback ' */\r\n  {\r\n  }\r\n\r\n  /* End of Enable for S-Function (adc_s32k_isr): '<S138>/ADC1_ISR' */\r\n\r\n  /* Enable for S-Function (adc_s32k_isr): '<S138>/ADC1_ISR' incorporates:\r\n   *  SubSystem: '<S138>/ADC1_IRQHandler'\r\n   */\r\n  /* Enable for function-call system: '<S138>/ADC1_IRQHandler' */\r\n\r\n  /* Enable for S-Function (fcgen): '<S139>/Function-Call Generator' incorporates:\r\n   *  SubSystem: '<Root>/CurrentControl'\r\n   */\r\n  Foc_m_CurrentControl_Enable();\r\n\r\n  /* End of Enable for S-Function (fcgen): '<S139>/Function-Call Generator' */\r\n\r\n  /* End of Enable for S-Function (adc_s32k_isr): '<S138>/ADC1_ISR' */\r\n  /* End of Enable for SubSystem: '<S3>/Subsystem2' */\r\n}\r\n\r\n/* Model terminate function */\r\nvoid Foc_model_Matlab_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Foc_model_Matlab.h","type":"header","group":"model","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Foc_model_Matlab.h\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef Foc_model_Matlab_h_\r\n#define Foc_model_Matlab_h_\r\n#ifndef Foc_model_Matlab_COMMON_INCLUDES_\r\n#define Foc_model_Matlab_COMMON_INCLUDES_\r\n#include <string.h>\r\n#include \"rtwtypes.h\"\r\n#include \"pcc_hw_access.h\"\r\n#include \"pins_driver.h\"\r\n#include \"ftm_hw_access.h\"\r\n#include \"ftm_pwm_driver.h\"\r\n#include \"stdint.h\"\r\n#include \"clock_manager.h\"\r\n#include \"pins_port_hw_access.h\"\r\n#include \"ftm3_pwm_params.h\"\r\n#include \"freemaster.h\"\r\n#include \"adc_driver.h\"\r\n#include \"interrupt_manager.h\"\r\n#include \"pdb_driver.h\"\r\n#include \"mbd_adc_irq.h\"\r\n#include \"trgmux_driver.h\"\r\n#include \"ftm_chn_irq.h\"\r\n#include \"ftm_ic_driver.h\"\r\n#include \"device_registers.h\"\r\n#include \"tpp_ic_init.h\"\r\n#include \"common_aml.h\"\r\n#include \"gpio_irq.h\"\r\n#include \"adc_interleave.h\"\r\n#include \"freemaster_interface_init.h\"\r\n#include \"lpspi_master_driver.h\"\r\n#include \"lpspi_slave_driver.h\"\r\n#include \"pdb0_params.h\"\r\n#include \"pdb1_params.h\"\r\n#include \"ftm2_input_params_config.h\"\r\n#include \"ftm2_ch1_hall_sensor_isr.h\"\r\n#endif                                 /* Foc_model_Matlab_COMMON_INCLUDES_ */\r\n\r\n#include \"Foc_model_Matlab_types.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtGetNaN.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmStepTask\r\n#define rtmStepTask(rtm, idx)          ((rtm)->Timing.TaskCounters.TID[(idx)] == 0)\r\n#endif\r\n\r\n#ifndef rtmTaskCounter\r\n#define rtmTaskCounter(rtm, idx)       ((rtm)->Timing.TaskCounters.TID[(idx)])\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  uint32_T ADC1_ISR_o2;                /* '<S138>/ADC1_ISR' */\r\n  uint32_T Read_Register;              /* '<S67>/Read_Register' */\r\n  real32_T Gain2;                      /* '<S151>/Gain2' */\r\n  real32_T Merge;                      /* '<S91>/Merge' */\r\n  uint16_T speedCountDelay;            /* '<S75>/speedCountDelay' */\r\n  uint16_T DelayOneStep;               /* '<S76>/Delay One Step' */\r\n  uint16_T Merge_m;                    /* '<S127>/Merge' */\r\n  uint16_T Merge1;                     /* '<S127>/Merge1' */\r\n  int16_T Merge2;                      /* '<S127>/Merge2' */\r\n  uint8_T ADC1_ISR_o3;                 /* '<S138>/ADC1_ISR' */\r\n  boolean_T validityDelay;             /* '<S75>/validityDelay' */\r\n  boolean_T Digital_Input_HALL_C;      /* '<S70>/Digital_Input_HALL_C' */\r\n  boolean_T Digital_Input_HALL_B;      /* '<S70>/Digital_Input_HALL_B' */\r\n  boolean_T Digital_Input_HALL_A;      /* '<S70>/Digital_Input_HALL_A' */\r\n  boolean_T Digital_Input_HALL_A_b;    /* '<S119>/Digital_Input_HALL_A' */\r\n  boolean_T Digital_Input_HALL_B_l;    /* '<S119>/Digital_Input_HALL_B' */\r\n  boolean_T Digital_Input_HALL_C_h;    /* '<S119>/Digital_Input_HALL_C' */\r\n} B_Foc_model_Matlab_T;\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real32_T UnitDelay_DSTATE;           /* '<S151>/Unit Delay' */\r\n  real32_T DiscreteTimeIntegrator_DSTATE;/* '<S154>/Discrete-Time Integrator' */\r\n  real32_T UD_DSTATE;                  /* '<S156>/UD' */\r\n  real32_T UnitDelay_DSTATE_j;         /* '<S22>/Unit Delay' */\r\n  real32_T DiscreteTimeIntegrator_DSTATE_d;/* '<S22>/Discrete-Time Integrator' */\r\n  real32_T UnitDelay_DSTATE_f;         /* '<S23>/Unit Delay' */\r\n  real32_T DiscreteTimeIntegrator_DSTAT_dm;/* '<S23>/Discrete-Time Integrator' */\r\n  volatile real32_T RT11_Buffer0;      /* '<Root>/RT11' */\r\n  volatile real32_T RT2_Buffer0;       /* '<Root>/RT2' */\r\n  real32_T DiscreteTimeIntegrator_PREV_U;/* '<S22>/Discrete-Time Integrator' */\r\n  real32_T DiscreteTimeIntegrator_PREV_U_e;/* '<S23>/Discrete-Time Integrator' */\r\n  uint32_T CurrentControl_PREV_T;      /* '<Root>/CurrentControl' */\r\n  uint16_T DelayOneStep_DSTATE;        /* '<S76>/Delay One Step' */\r\n  boolean_T DelayOneStep1_DSTATE;      /* '<S76>/Delay One Step1' */\r\n  int8_T DiscreteTimeIntegrator_PrevRese;/* '<S154>/Discrete-Time Integrator' */\r\n  int8_T DiscreteTimeIntegrator_PrevRe_l;/* '<S22>/Discrete-Time Integrator' */\r\n  int8_T DiscreteTimeIntegrator_PrevRe_m;/* '<S23>/Discrete-Time Integrator' */\r\n  uint8_T is_active_c1_Foc_model_Matlab;/* '<S4>/Enable PDB and start FTM' */\r\n  uint8_T is_c1_Foc_model_Matlab;      /* '<S4>/Enable PDB and start FTM' */\r\n  uint8_T DiscreteTimeIntegrator_SYSTEM_E;/* '<S22>/Discrete-Time Integrator' */\r\n  uint8_T DiscreteTimeIntegrator_SYSTEM_n;/* '<S23>/Discrete-Time Integrator' */\r\n  boolean_T CurrentControl_RESET_ELAPS_T;/* '<Root>/CurrentControl' */\r\n} DW_Foc_model_Matlab_T;\r\n\r\n/* Invariant block signals (default storage) */\r\ntypedef struct {\r\n  const real_T Gain4;                  /* '<S151>/Gain4' */\r\n  const real32_T CastToSingle;         /* '<S151>/Cast To Single' */\r\n  const real32_T CastToSingle1;        /* '<S151>/Cast To Single1' */\r\n  const real32_T CastToSingle2;        /* '<S151>/Cast To Single2' */\r\n  const real32_T CastToSingle3;        /* '<S151>/Cast To Single3' */\r\n  const real32_T SpeedConstData;       /* '<S78>/SpeedConstData' */\r\n} ConstB_Foc_model_Matlab_T;\r\n\r\n/* Constant parameters (default storage) */\r\ntypedef struct {\r\n  /* Computed Parameter: sine_table_values_Value\r\n   * Referenced by: '<S49>/sine_table_values'\r\n   */\r\n  real32_T sine_table_values_Value[1002];\r\n} ConstP_Foc_model_Matlab_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_Foc_model_Matlab_T {\r\n  const char_T * volatile errorStatus;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick1;\r\n    struct {\r\n      uint16_T TID[4];\r\n    } TaskCounters;\r\n  } Timing;\r\n};\r\n\r\n/* Block signals (default storage) */\r\nextern B_Foc_model_Matlab_T Foc_model_Matlab_B;\r\n\r\n/* Block states (default storage) */\r\nextern DW_Foc_model_Matlab_T Foc_model_Matlab_DW;\r\nextern const ConstB_Foc_model_Matlab_T Foc_model_Matlab_ConstB;/* constant block i/o */\r\n\r\n/* Constant parameters (default storage) */\r\nextern const ConstP_Foc_model_Matlab_T Foc_model_Matlab_ConstP;\r\n\r\n/* External function called from main */\r\nextern void Foc_model_Matlab_SetEventsForThisBaseStep(boolean_T *eventFlags);\r\n\r\n/* Model entry point functions */\r\nextern void Foc_model_Matlab_initialize(void);\r\nextern void Foc_model_Matlab_step0(void);/* Sample time: [5.0E-5s, 0.0s] */\r\nextern void Foc_model_Matlab_step1(void);/* Sample time: [0.0001s, 0.0s] */\r\nextern void Foc_model_Matlab_step2(void);/* Sample time: [0.001s, 0.0s] */\r\nextern void Foc_model_Matlab_step3(void);/* Sample time: [0.1s, 0.0s] */\r\nextern void Foc_model_Matlab_terminate(void);\r\n\r\n/* Exported data declaration */\r\n\r\n/* Volatile memory section */\r\n/* Declaration for custom storage class: Volatile */\r\nextern volatile real32_T ADC_A;        /* '<Root>/Data Store Memory11' */\r\nextern volatile real32_T ADC_B;        /* '<Root>/Data Store Memory12' */\r\nextern volatile uint32_T ADC_IA;       /* '<S139>/ADC_AD4_IA' */\r\nextern volatile uint32_T ADC_IB;       /* '<S139>/ADC_IB' */\r\nextern volatile uint32_T ADC_IDC;      /* '<S139>/ADC_AD6_IDC' */\r\nextern volatile uint32_T ADC_VDC;      /* '<S139>/ADC_AD7_VDC' */\r\nextern volatile uint32_T CH0S_ERR;     /* '<S138>/PDB1_ISR' */\r\nextern volatile uint32_T CH1S_ERR;     /* '<S138>/PDB1_ISR' */\r\nextern volatile uint16_T CntHall;      /* '<S3>/FTM_Hall_Sensor' */\r\nextern volatile uint16_T CntHallValidityIn;\r\n                                /* '<S2>/SigConvForSigProp_Variant_Source2_0' */\r\nextern volatile real32_T DesiredSpeed; /* '<Root>/Data Store Memory7' */\r\nextern volatile boolean_T Enable;      /* '<Root>/Data Store Memory29' */\r\nextern volatile real32_T Epsilon_d;    /* '<Root>/Data Store Memory16' */\r\nextern volatile real32_T Epsilon_q;    /* '<Root>/Data Store Memory14' */\r\nextern volatile real32_T Epsilon_w;    /* '<Root>/Data Store Memory13' */\r\nextern volatile boolean_T FAULT;       /* '<Root>/I_MAX Scalling3' */\r\nextern volatile int16_T GlobalDirection;/* '<Root>/Data Store Memory3' */\r\nextern volatile uint32_T GlobalHallState;/* '<Root>/Data Store Memory4' */\r\nextern volatile uint16_T GlobalSpeedCount;/* '<Root>/Data Store Memory1' */\r\nextern volatile uint16_T GlobalSpeedValidity;/* '<Root>/Data Store Memory2' */\r\nextern volatile uint32_T HALL_A;       /* '<S121>/bit_shift' */\r\nextern volatile uint32_T HALL_A_controller;/* '<S70>/Data Type Conversion6' */\r\nextern volatile uint32_T HALL_B;       /* '<S122>/bit_shift' */\r\nextern volatile uint32_T HALL_B_controller;/* '<S72>/bit_shift' */\r\nextern volatile uint32_T HALL_C;       /* '<S119>/Data Type Conversion6' */\r\nextern volatile uint32_T HALL_C_controller;/* '<S71>/bit_shift' */\r\nextern volatile uint16_T HallCntActual;/* '<Root>/Data Store Memory25' */\r\nextern volatile uint16_T HallCntPrev;  /* '<Root>/Data Store Memory24' */\r\nextern volatile uint16_T HallStateChangeFlag;/* '<Root>/Data Store Memory' */\r\nextern volatile uint16_T HallValididyInvalid;/* '<S125>/Merge' */\r\nextern volatile real32_T I_ab_afterOffset[2];/* '<S66>/Add' */\r\nextern volatile real32_T IaOffset;     /* '<Root>/Data Store Memory5' */\r\nextern volatile real32_T IbOffset;     /* '<Root>/Data Store Memory6' */\r\nextern volatile real32_T Id_err;       /* '<S23>/Sum1' */\r\nextern volatile real32_T Id_fb;        /* '<S15>/Signal Copy1' */\r\nextern volatile real32_T Idc_afterOffset;/* '<S141>/Sum' */\r\nextern volatile real32_T Iq_fb;        /* '<S15>/Signal Copy' */\r\nextern volatile real32_T Iq_ref_PU;    /* '<Root>/RT11' */\r\nextern volatile real32_T Lambda_d;     /* '<Root>/Data Store Memory17' */\r\nextern volatile real32_T Lambda_q;     /* '<Root>/Data Store Memory15' */\r\nextern volatile real32_T Lambda_w;     /* '<Root>/Data Store Memory9' */\r\nextern volatile real32_T PWM[3];       /* '<S11>/Switch1' */\r\nextern volatile real32_T PWM_Duty_Cycles[3];/* '<S12>/Gain' */\r\nextern volatile real32_T PWM_Enable;   /* '<S12>/Data Type Conversion' */\r\nextern volatile real32_T Rho_d;        /* '<Root>/Data Store Memory18' */\r\nextern volatile real32_T Rho_q;        /* '<Root>/Data Store Memory8' */\r\nextern volatile real32_T Rho_w;        /* '<Root>/Data Store Memory10' */\r\nextern volatile uint32_T SC_PDBIF;     /* '<S138>/PDB1_ISR' */\r\nextern volatile real32_T SpeedError;   /* '<S154>/Sum' */\r\nextern volatile real32_T SpeedMeasured;/* '<S1>/Input Scaling' */\r\nextern volatile real32_T Speed_Ref;    /* '<S152>/Switch' */\r\nextern volatile real32_T Speed_Ref_PU; /* '<Root>/RT2' */\r\nextern volatile real32_T Speed_fb;     /* '<Root>/RT1' */\r\nextern volatile real32_T ThetaHalls;   /* '<S68>/Merge1' */\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_Foc_model_Matlab_T *const Foc_model_Matlab_M;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S21>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S22>/Scope' : Unused code path elimination\r\n * Block '<S23>/Scope' : Unused code path elimination\r\n * Block '<S35>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S42>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S42>/Data Type Propagation' : Unused code path elimination\r\n * Block '<S43>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S24>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S33>/Data Type Duplicate1' : Unused code path elimination\r\n * Block '<S33>/Data Type Duplicate2' : Unused code path elimination\r\n * Block '<S34>/Sqrt' : Unused code path elimination\r\n * Block '<S15>/Id_ref_PU' : Unused code path elimination\r\n * Block '<S45>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S45>/Data Type Duplicate1' : Unused code path elimination\r\n * Block '<S47>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S47>/Data Type Duplicate1' : Unused code path elimination\r\n * Block '<S49>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S49>/Data Type Propagation' : Unused code path elimination\r\n * Block '<S54>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S55>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S19>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S19>/Vc' : Unused code path elimination\r\n * Block '<S63>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S111>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S69>/ReplaceInport_Npp' : Unused code path elimination\r\n * Block '<Root>/RT10' : Unused code path elimination\r\n * Block '<Root>/RT8' : Unused code path elimination\r\n * Block '<Root>/RT9' : Unused code path elimination\r\n * Block '<Root>/Scope' : Unused code path elimination\r\n * Block '<Root>/Scope1' : Unused code path elimination\r\n * Block '<Root>/Scope3' : Unused code path elimination\r\n * Block '<S156>/Data Type Duplicate' : Unused code path elimination\r\n * Block '<S154>/To Workspace' : Unused code path elimination\r\n * Block '<S151>/Scope' : Unused code path elimination\r\n * Block '<S20>/Kalpha' : Eliminated nontunable gain of 1\r\n * Block '<S20>/Kbeta' : Eliminated nontunable gain of 1\r\n * Block '<S49>/Get_FractionVal' : Eliminate redundant data type conversion\r\n * Block '<S51>/convert_pu' : Eliminated nontunable gain of 1\r\n * Block '<S63>/Ka' : Eliminated nontunable gain of 1\r\n * Block '<S63>/Kb' : Eliminated nontunable gain of 1\r\n * Block '<S63>/Kc' : Eliminated nontunable gain of 1\r\n * Block '<S68>/Data Type Conversion1' : Eliminate redundant data type conversion\r\n * Block '<S68>/Data Type Conversion2' : Eliminate redundant data type conversion\r\n * Block '<S68>/Data Type Conversion3' : Eliminate redundant data type conversion\r\n * Block '<S68>/PositionUnit' : Eliminated nontunable gain of 1\r\n * Block '<S68>/counterSize2' : Eliminate redundant data type conversion\r\n * Block '<S113>/Multiply' : Eliminated nontunable gain of 1\r\n * Block '<S113>/Multiply1' : Eliminated nontunable gain of 1\r\n * Block '<S117>/Number of pole pairs' : Eliminated nontunable gain of 1\r\n * Block '<S66>/Data Type Conversion2' : Eliminate redundant data type conversion\r\n * Block '<S120>/Data Type Conversion' : Eliminate redundant data type conversion\r\n * Block '<S120>/counterSize' : Eliminate redundant data type conversion\r\n * Block '<S33>/enableInportSatLim' : Unused code path elimination\r\n * Block '<S33>/enableInportSatMethod' : Unused code path elimination\r\n * Block '<S24>/ReplaceInport_satLim' : Unused code path elimination\r\n * Block '<S24>/ReplaceInport_satMethod' : Unused code path elimination\r\n * Block '<S46>/Offset' : Unused code path elimination\r\n * Block '<S46>/Unary_Minus' : Unused code path elimination\r\n * Block '<S48>/Offset' : Unused code path elimination\r\n * Block '<S48>/Unary_Minus' : Unused code path elimination\r\n * Block '<S111>/Constant' : Unused code path elimination\r\n * Block '<S69>/ReplaceInport_Offset' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'Foc_model_Matlab'\r\n * '<S1>'   : 'Foc_model_Matlab/CurrentControl'\r\n * '<S2>'   : 'Foc_model_Matlab/Hall Sensor'\r\n * '<S3>'   : 'Foc_model_Matlab/HallCodeGen'\r\n * '<S4>'   : 'Foc_model_Matlab/Hardware Initialization'\r\n * '<S5>'   : 'Foc_model_Matlab/Inverter and Motor - Plant Model'\r\n * '<S6>'   : 'Foc_model_Matlab/Model Info'\r\n * '<S7>'   : 'Foc_model_Matlab/Serial Receive'\r\n * '<S8>'   : 'Foc_model_Matlab/SpeedControl'\r\n * '<S9>'   : 'Foc_model_Matlab/CurrentControl/Control_System'\r\n * '<S10>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling'\r\n * '<S11>'  : 'Foc_model_Matlab/CurrentControl/Inverter (Code Generation)'\r\n * '<S12>'  : 'Foc_model_Matlab/CurrentControl/Output Scaling'\r\n * '<S13>'  : 'Foc_model_Matlab/CurrentControl/Sensor Driver Blocks'\r\n * '<S14>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Clarke Transform'\r\n * '<S15>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers'\r\n * '<S16>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Inverse Park Transform'\r\n * '<S17>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Park Transform'\r\n * '<S18>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Sine-Cosine Lookup'\r\n * '<S19>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Space Vector Generator'\r\n * '<S20>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Clarke Transform/Two phase input'\r\n * '<S21>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Clarke Transform/Two phase input/Two phase CRL wrap'\r\n * '<S22>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/Controller_Id'\r\n * '<S23>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/Controller_Iq'\r\n * '<S24>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter'\r\n * '<S25>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/Nonlinear feedforwar compensation'\r\n * '<S26>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/Nonlinear feedforwar compensation1'\r\n * '<S27>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/Controller_Id/MATLAB Function2'\r\n * '<S28>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/Controller_Id/Parametri_design'\r\n * '<S29>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/Controller_Iq/MATLAB Function2'\r\n * '<S30>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/Controller_Iq/Parametri_design'\r\n * '<S31>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/D-Q Equivalence'\r\n * '<S32>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/D//Q Axis Priority'\r\n * '<S33>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/Inport//Dialog Selection'\r\n * '<S34>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/Magnitude_calc'\r\n * '<S35>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/D-Q Equivalence/Limiter'\r\n * '<S36>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/D-Q Equivalence/Passthrough'\r\n * '<S37>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/D//Q Axis Priority/Compare To Constant'\r\n * '<S38>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/D//Q Axis Priority/Compare To Constant1'\r\n * '<S39>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/D//Q Axis Priority/flipInputs'\r\n * '<S40>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/D//Q Axis Priority/flipInputs1'\r\n * '<S41>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/D//Q Axis Priority/limiter'\r\n * '<S42>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/D//Q Axis Priority/limiter/limitRef1'\r\n * '<S43>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/D//Q Axis Priority/limiter/limitRef2'\r\n * '<S44>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Current_Controllers/DQ Limiter/D//Q Axis Priority/limiter/passThrough'\r\n * '<S45>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Inverse Park Transform/Two inputs CRL'\r\n * '<S46>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Inverse Park Transform/Two inputs CRL/Switch_Axis'\r\n * '<S47>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Park Transform/Two inputs CRL'\r\n * '<S48>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Park Transform/Two inputs CRL/Switch_Axis'\r\n * '<S49>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup'\r\n * '<S50>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/Interpolation'\r\n * '<S51>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/WrapUp'\r\n * '<S52>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/datatype'\r\n * '<S53>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/WrapUp/Compare To Zero'\r\n * '<S54>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/WrapUp/If Action Subsystem'\r\n * '<S55>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/WrapUp/If Action Subsystem1'\r\n * '<S56>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/datatype/datatype no change'\r\n * '<S57>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Space Vector Generator/Modulation method'\r\n * '<S58>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Space Vector Generator/Voltage Input'\r\n * '<S59>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Space Vector Generator/Modulation method/SVPWM'\r\n * '<S60>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Space Vector Generator/Modulation method/SVPWM/Half(Vmin+Vmax)'\r\n * '<S61>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Space Vector Generator/Voltage Input/Valphabeta'\r\n * '<S62>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Space Vector Generator/Voltage Input/Valphabeta/Inverse Clarke Transform'\r\n * '<S63>'  : 'Foc_model_Matlab/CurrentControl/Control_System/Space Vector Generator/Voltage Input/Valphabeta/Inverse Clarke Transform/Two phase input'\r\n * '<S64>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)'\r\n * '<S65>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall'\r\n * '<S66>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Convert ADC value to PU'\r\n * '<S67>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Atomic Hall Reading'\r\n * '<S68>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position'\r\n * '<S69>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Mechanical to Electrical Position'\r\n * '<S70>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Atomic Hall Reading/Hall Read'\r\n * '<S71>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Atomic Hall Reading/Hall Read/Bit Shift'\r\n * '<S72>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Atomic Hall Reading/Hall Read/Bit Shift1'\r\n * '<S73>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Atomic Hall Reading/Hall Read/Bit Shift/bit_shift'\r\n * '<S74>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Atomic Hall Reading/Hall Read/Bit Shift1/bit_shift'\r\n * '<S75>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/ExtrapolationOrder'\r\n * '<S76>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Software Watchdog Timer'\r\n * '<S77>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are not valid Position will be set to the middle of the Hall quadrant'\r\n * '<S78>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position'\r\n * '<S79>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/VaidityCheck'\r\n * '<S80>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Software Watchdog Timer/Compare To Zero'\r\n * '<S81>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are not valid Position will be set to the middle of the Hall quadrant/independent Direction'\r\n * '<S82>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are not valid Position will be set to the middle of the Hall quadrant/independent Direction/Hall Value of 1'\r\n * '<S83>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are not valid Position will be set to the middle of the Hall quadrant/independent Direction/Hall Value of 2'\r\n * '<S84>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are not valid Position will be set to the middle of the Hall quadrant/independent Direction/Hall Value of 3'\r\n * '<S85>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are not valid Position will be set to the middle of the Hall quadrant/independent Direction/Hall Value of 4'\r\n * '<S86>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are not valid Position will be set to the middle of the Hall quadrant/independent Direction/Hall Value of 5'\r\n * '<S87>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are not valid Position will be set to the middle of the Hall quadrant/independent Direction/Hall Value of 6'\r\n * '<S88>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are not valid Position will be set to the middle of the Hall quadrant/independent Direction/Hall Value of 7'\r\n * '<S89>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/If Action Subsystem'\r\n * '<S90>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/If Action Subsystem1'\r\n * '<S91>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1'\r\n * '<S92>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/+ve Direction'\r\n * '<S93>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/-ve Direction'\r\n * '<S94>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/first_order'\r\n * '<S95>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/second_order'\r\n * '<S96>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/+ve Direction/Hall Value of 1'\r\n * '<S97>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/+ve Direction/Hall Value of 2'\r\n * '<S98>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/+ve Direction/Hall Value of 3'\r\n * '<S99>'  : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/+ve Direction/Hall Value of 4'\r\n * '<S100>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/+ve Direction/Hall Value of 5'\r\n * '<S101>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/+ve Direction/Hall Value of 6'\r\n * '<S102>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/+ve Direction/Hall Value of 7'\r\n * '<S103>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/-ve Direction/Hall Value of 1'\r\n * '<S104>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/-ve Direction/Hall Value of 2'\r\n * '<S105>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/-ve Direction/Hall Value of 3'\r\n * '<S106>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/-ve Direction/Hall Value of 4'\r\n * '<S107>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/-ve Direction/Hall Value of 5'\r\n * '<S108>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/-ve Direction/Hall Value of 6'\r\n * '<S109>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Hall Speed and Position/Speed and direction are valid Use speed to extrapolate position/Subsystem1/-ve Direction/Hall Value of 7'\r\n * '<S110>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Mechanical to Electrical Position/MechToElec'\r\n * '<S111>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Mechanical to Electrical Position/MechToElec/floating-point'\r\n * '<S112>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Mechanical to Electrical Position/MechToElec/floating-point/Compensate Offset'\r\n * '<S113>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Mechanical to Electrical Position/MechToElec/floating-point/Mech To Elec'\r\n * '<S114>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Mechanical to Electrical Position/MechToElec/floating-point/Compensate Offset/If Action Subsystem'\r\n * '<S115>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Mechanical to Electrical Position/MechToElec/floating-point/Compensate Offset/If Action Subsystem1'\r\n * '<S116>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Mechanical to Electrical Position/MechToElec/floating-point/Mech To Elec/Variant Subsystem'\r\n * '<S117>' : 'Foc_model_Matlab/CurrentControl/Input Scaling/Read_Sensor (codegen)/Calculate Position from Hall/Mechanical to Electrical Position/MechToElec/floating-point/Mech To Elec/Variant Subsystem/Dialog'\r\n * '<S118>' : 'Foc_model_Matlab/CurrentControl/Sensor Driver Blocks/Sensor Driver Blocks (codegen)'\r\n * '<S119>' : 'Foc_model_Matlab/Hall Sensor/CodeGen'\r\n * '<S120>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity'\r\n * '<S121>' : 'Foc_model_Matlab/Hall Sensor/CodeGen/Bit Shift'\r\n * '<S122>' : 'Foc_model_Matlab/Hall Sensor/CodeGen/Bit Shift1'\r\n * '<S123>' : 'Foc_model_Matlab/Hall Sensor/CodeGen/Bit Shift/bit_shift'\r\n * '<S124>' : 'Foc_model_Matlab/Hall Sensor/CodeGen/Bit Shift1/bit_shift'\r\n * '<S125>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem'\r\n * '<S126>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem/Bad hall (glitch or wrong connection)'\r\n * '<S127>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem/Valid Halls'\r\n * '<S128>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem/Valid Halls/If Action Subsystem'\r\n * '<S129>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem/Valid Halls/If Action Subsystem1'\r\n * '<S130>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem/Valid Halls/If Action Subsystem2'\r\n * '<S131>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem/Valid Halls/If Action Subsystem3'\r\n * '<S132>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem/Valid Halls/If Action Subsystem4'\r\n * '<S133>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem/Valid Halls/If Action Subsystem5'\r\n * '<S134>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem/Valid Halls/If Action Subsystem6'\r\n * '<S135>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem/Valid Halls/If Action Subsystem7'\r\n * '<S136>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem/Valid Halls/If Action Subsystem8'\r\n * '<S137>' : 'Foc_model_Matlab/Hall Sensor/Hall Validity/Subsystem/Valid Halls/Switch Case Action Subsystem'\r\n * '<S138>' : 'Foc_model_Matlab/HallCodeGen/Subsystem2'\r\n * '<S139>' : 'Foc_model_Matlab/HallCodeGen/Subsystem2/ADC1_IRQHandler'\r\n * '<S140>' : 'Foc_model_Matlab/HallCodeGen/Subsystem2/PDB1_IRQHandler'\r\n * '<S141>' : 'Foc_model_Matlab/HallCodeGen/Subsystem2/ADC1_IRQHandler/FaultDetection'\r\n * '<S142>' : 'Foc_model_Matlab/HallCodeGen/Subsystem2/ADC1_IRQHandler/FaultDetection/FAILURE'\r\n * '<S143>' : 'Foc_model_Matlab/HallCodeGen/Subsystem2/ADC1_IRQHandler/FaultDetection/FAILURE/Failed Subsystem'\r\n * '<S144>' : 'Foc_model_Matlab/Hardware Initialization/Enable PDB and start FTM'\r\n * '<S145>' : 'Foc_model_Matlab/Hardware Initialization/FAULT'\r\n * '<S146>' : 'Foc_model_Matlab/Hardware Initialization/GD3000_interrupt'\r\n * '<S147>' : 'Foc_model_Matlab/Hardware Initialization/If Action Subsystem'\r\n * '<S148>' : 'Foc_model_Matlab/Hardware Initialization/enable_FTM_PDB_ADC_triggering'\r\n * '<S149>' : 'Foc_model_Matlab/Inverter and Motor - Plant Model/Codegeneration'\r\n * '<S150>' : 'Foc_model_Matlab/Serial Receive/Code Generation'\r\n * '<S151>' : 'Foc_model_Matlab/SpeedControl/Contrloller_wr'\r\n * '<S152>' : 'Foc_model_Matlab/SpeedControl/Speed_Ref_Selector'\r\n * '<S153>' : 'Foc_model_Matlab/SpeedControl/Contrloller_wr/MATLAB Function'\r\n * '<S154>' : 'Foc_model_Matlab/SpeedControl/Contrloller_wr/Operazioni matematiche'\r\n * '<S155>' : 'Foc_model_Matlab/SpeedControl/Contrloller_wr/Parametri_design'\r\n * '<S156>' : 'Foc_model_Matlab/SpeedControl/Contrloller_wr/Operazioni matematiche/Discrete Derivative'\r\n */\r\n#endif                                 /* Foc_model_Matlab_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Foc_model_Matlab_private.h","type":"header","group":"model","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Foc_model_Matlab_private.h\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef Foc_model_Matlab_private_h_\r\n#define Foc_model_Matlab_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"Foc_model_Matlab_types.h\"\r\n#include \"Foc_model_Matlab.h\"\r\n#include \"gt_pf.h\"\r\n#include \"profile_buffer.h\"\r\n#include \"clock_manager.h\"\r\n#include \"lpit_hw_access.h\"\r\n#include \"pcc_hw_access.h\"\r\n#if defined(__MWERKS__)\r\n\r\ndouble fmod (double x, double y);\r\ndouble fabs (double);\r\n\r\n#endif\r\n\r\nextern void Foc_model_Ma_FaultDetection(uint32_T rtu_Vdc, uint32_T rtu_Idc);\r\nextern void Foc_model_Matl_HallValueof1(real32_T *rty_position);\r\nextern void Foc_model_Matl_HallValueof2(real32_T *rty_position);\r\nextern void Foc_model_Matl_HallValueof3(real32_T *rty_position);\r\nextern void Foc_model_Matl_HallValueof4(real32_T *rty_position);\r\nextern void Foc_model_Matl_HallValueof5(real32_T *rty_position);\r\nextern void Foc_model_Matl_HallValueof7(real32_T *rty_position);\r\nextern void Foc_mod_CurrentControl_Init(void);\r\nextern void Foc_mo_CurrentControl_Reset(void);\r\nextern void Foc_m_CurrentControl_Enable(void);\r\nextern void Foc_model_Ma_CurrentControl(void);\r\nextern void Foc_model_Matl_SpeedControl(void);\r\n\r\n#endif                                 /* Foc_model_Matlab_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Foc_model_Matlab_types.h","type":"header","group":"model","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Foc_model_Matlab_types.h\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef Foc_model_Matlab_types_h_\r\n#define Foc_model_Matlab_types_h_\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_Foc_model_Matlab_T RT_MODEL_Foc_model_Matlab_T;\r\n\r\n#endif                                 /* Foc_model_Matlab_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Foc_model_Matlab_data.c","type":"source","group":"data","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Data files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Foc_model_Matlab_data.c\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Foc_model_Matlab.h\"\r\n\r\n/* Invariant block signals (default storage) */\r\nconst ConstB_Foc_model_Matlab_T Foc_model_Matlab_ConstB = {\r\n  3.125,                               /* '<S151>/Gain4' */\r\n  1.2E-5F,                             /* '<S151>/Cast To Single' */\r\n  1.0E-7F,                             /* '<S151>/Cast To Single1' */\r\n  0.097F,                              /* '<S151>/Cast To Single2' */\r\n  3.125F,                              /* '<S151>/Cast To Single3' */\r\n  31250.0F                             /* '<S78>/SpeedConstData' */\r\n};\r\n\r\n/* Constant parameters (default storage) */\r\nconst ConstP_Foc_model_Matlab_T Foc_model_Matlab_ConstP = {\r\n  /* Computed Parameter: sine_table_values_Value\r\n   * Referenced by: '<S49>/sine_table_values'\r\n   */\r\n  { 0.0F, 0.00785390101F, 0.0157073177F, 0.023559764F, 0.0314107575F,\r\n    0.0392598175F, 0.0471064523F, 0.0549501814F, 0.0627905205F, 0.070626989F,\r\n    0.0784591F, 0.086286366F, 0.0941083133F, 0.101924457F, 0.109734312F,\r\n    0.117537394F, 0.125333235F, 0.133121341F, 0.140901238F, 0.148672432F,\r\n    0.156434461F, 0.16418685F, 0.171929106F, 0.179660752F, 0.187381312F,\r\n    0.195090324F, 0.202787295F, 0.210471764F, 0.21814324F, 0.225801274F,\r\n    0.233445361F, 0.241075054F, 0.24868989F, 0.256289363F, 0.263873041F,\r\n    0.271440446F, 0.278991103F, 0.286524564F, 0.294040322F, 0.301537961F,\r\n    0.309017F, 0.316476971F, 0.323917419F, 0.331337899F, 0.338737935F,\r\n    0.346117049F, 0.353474855F, 0.360810816F, 0.368124545F, 0.375415564F,\r\n    0.382683426F, 0.389927685F, 0.397147894F, 0.404343605F, 0.411514372F,\r\n    0.418659747F, 0.425779283F, 0.432872593F, 0.439939171F, 0.446978629F,\r\n    0.453990489F, 0.460974365F, 0.46792981F, 0.474856377F, 0.481753677F,\r\n    0.488621235F, 0.495458663F, 0.502265513F, 0.509041429F, 0.515785873F,\r\n    0.522498548F, 0.529179F, 0.535826802F, 0.542441547F, 0.549022794F,\r\n    0.555570245F, 0.562083364F, 0.568561852F, 0.575005233F, 0.581413209F,\r\n    0.587785244F, 0.594121039F, 0.600420237F, 0.60668236F, 0.612907052F,\r\n    0.619093955F, 0.625242651F, 0.631352782F, 0.637424F, 0.643455863F,\r\n    0.649448037F, 0.655400157F, 0.661311865F, 0.667182744F, 0.673012495F,\r\n    0.678800762F, 0.684547126F, 0.690251231F, 0.695912778F, 0.70153141F,\r\n    0.707106769F, 0.712638497F, 0.718126297F, 0.723569751F, 0.72896862F,\r\n    0.734322488F, 0.739631116F, 0.744894F, 0.750111043F, 0.755281806F,\r\n    0.760405958F, 0.765483201F, 0.770513237F, 0.775495768F, 0.780430436F,\r\n    0.785316944F, 0.790155F, 0.794944346F, 0.799684644F, 0.804375648F, 0.809017F,\r\n    0.813608468F, 0.818149745F, 0.822640538F, 0.827080548F, 0.831469595F,\r\n    0.835807383F, 0.840093553F, 0.844327927F, 0.848510206F, 0.852640152F,\r\n    0.856717527F, 0.860742033F, 0.86471343F, 0.868631542F, 0.872496F,\r\n    0.876306653F, 0.880063295F, 0.883765638F, 0.887413442F, 0.891006529F,\r\n    0.894544661F, 0.898027599F, 0.901455104F, 0.904827058F, 0.908143163F,\r\n    0.911403298F, 0.914607167F, 0.91775465F, 0.920845509F, 0.923879504F,\r\n    0.926856577F, 0.92977649F, 0.932639F, 0.935444057F, 0.938191354F,\r\n    0.940880775F, 0.943512142F, 0.946085334F, 0.948600173F, 0.95105654F,\r\n    0.953454196F, 0.955793F, 0.958072901F, 0.96029371F, 0.962455213F,\r\n    0.964557409F, 0.96660012F, 0.968583167F, 0.970506489F, 0.972369909F,\r\n    0.974173367F, 0.975916743F, 0.977599919F, 0.979222834F, 0.980785251F,\r\n    0.982287228F, 0.983728647F, 0.985109329F, 0.986429274F, 0.987688363F,\r\n    0.988886476F, 0.990023673F, 0.991099775F, 0.992114723F, 0.993068457F,\r\n    0.993961F, 0.994792163F, 0.995561957F, 0.996270359F, 0.996917307F,\r\n    0.997502804F, 0.998026729F, 0.998489082F, 0.998889863F, 0.999229F,\r\n    0.999506533F, 0.999722421F, 0.999876618F, 0.999969184F, 1.0F, 0.999969184F,\r\n    0.999876618F, 0.999722421F, 0.999506533F, 0.999229F, 0.998889863F,\r\n    0.998489082F, 0.998026729F, 0.997502804F, 0.996917307F, 0.996270359F,\r\n    0.995561957F, 0.994792163F, 0.993961F, 0.993068457F, 0.992114723F,\r\n    0.991099775F, 0.990023673F, 0.988886476F, 0.987688363F, 0.986429274F,\r\n    0.985109329F, 0.983728647F, 0.982287228F, 0.980785251F, 0.979222834F,\r\n    0.977599919F, 0.975916743F, 0.974173367F, 0.972369909F, 0.970506489F,\r\n    0.968583167F, 0.96660012F, 0.964557409F, 0.962455213F, 0.96029371F,\r\n    0.958072901F, 0.955793F, 0.953454196F, 0.95105654F, 0.948600173F,\r\n    0.946085334F, 0.943512142F, 0.940880775F, 0.938191354F, 0.935444057F,\r\n    0.932639F, 0.92977649F, 0.926856577F, 0.923879504F, 0.920845509F,\r\n    0.91775465F, 0.914607167F, 0.911403298F, 0.908143163F, 0.904827058F,\r\n    0.901455104F, 0.898027599F, 0.894544661F, 0.891006529F, 0.887413442F,\r\n    0.883765638F, 0.880063295F, 0.876306653F, 0.872496F, 0.868631542F,\r\n    0.86471343F, 0.860742033F, 0.856717527F, 0.852640152F, 0.848510206F,\r\n    0.844327927F, 0.840093553F, 0.835807383F, 0.831469595F, 0.827080548F,\r\n    0.822640538F, 0.818149745F, 0.813608468F, 0.809017F, 0.804375648F,\r\n    0.799684644F, 0.794944346F, 0.790155F, 0.785316944F, 0.780430436F,\r\n    0.775495768F, 0.770513237F, 0.765483201F, 0.760405958F, 0.755281806F,\r\n    0.750111043F, 0.744894F, 0.739631116F, 0.734322488F, 0.72896862F,\r\n    0.723569751F, 0.718126297F, 0.712638497F, 0.707106769F, 0.70153141F,\r\n    0.695912778F, 0.690251231F, 0.684547126F, 0.678800762F, 0.673012495F,\r\n    0.667182744F, 0.661311865F, 0.655400157F, 0.649448037F, 0.643455863F,\r\n    0.637424F, 0.631352782F, 0.625242651F, 0.619093955F, 0.612907052F,\r\n    0.60668236F, 0.600420237F, 0.594121039F, 0.587785244F, 0.581413209F,\r\n    0.575005233F, 0.568561852F, 0.562083364F, 0.555570245F, 0.549022794F,\r\n    0.542441547F, 0.535826802F, 0.529179F, 0.522498548F, 0.515785873F,\r\n    0.509041429F, 0.502265513F, 0.495458663F, 0.488621235F, 0.481753677F,\r\n    0.474856377F, 0.46792981F, 0.460974365F, 0.453990489F, 0.446978629F,\r\n    0.439939171F, 0.432872593F, 0.425779283F, 0.418659747F, 0.411514372F,\r\n    0.404343605F, 0.397147894F, 0.389927685F, 0.382683426F, 0.375415564F,\r\n    0.368124545F, 0.360810816F, 0.353474855F, 0.346117049F, 0.338737935F,\r\n    0.331337899F, 0.323917419F, 0.316476971F, 0.309017F, 0.301537961F,\r\n    0.294040322F, 0.286524564F, 0.278991103F, 0.271440446F, 0.263873041F,\r\n    0.256289363F, 0.24868989F, 0.241075054F, 0.233445361F, 0.225801274F,\r\n    0.21814324F, 0.210471764F, 0.202787295F, 0.195090324F, 0.187381312F,\r\n    0.179660752F, 0.171929106F, 0.16418685F, 0.156434461F, 0.148672432F,\r\n    0.140901238F, 0.133121341F, 0.125333235F, 0.117537394F, 0.109734312F,\r\n    0.101924457F, 0.0941083133F, 0.086286366F, 0.0784591F, 0.070626989F,\r\n    0.0627905205F, 0.0549501814F, 0.0471064523F, 0.0392598175F, 0.0314107575F,\r\n    0.023559764F, 0.0157073177F, 0.00785390101F, 1.22464685E-16F,\r\n    -0.00785390101F, -0.0157073177F, -0.023559764F, -0.0314107575F,\r\n    -0.0392598175F, -0.0471064523F, -0.0549501814F, -0.0627905205F,\r\n    -0.070626989F, -0.0784591F, -0.086286366F, -0.0941083133F, -0.101924457F,\r\n    -0.109734312F, -0.117537394F, -0.125333235F, -0.133121341F, -0.140901238F,\r\n    -0.148672432F, -0.156434461F, -0.16418685F, -0.171929106F, -0.179660752F,\r\n    -0.187381312F, -0.195090324F, -0.202787295F, -0.210471764F, -0.21814324F,\r\n    -0.225801274F, -0.233445361F, -0.241075054F, -0.24868989F, -0.256289363F,\r\n    -0.263873041F, -0.271440446F, -0.278991103F, -0.286524564F, -0.294040322F,\r\n    -0.301537961F, -0.309017F, -0.316476971F, -0.323917419F, -0.331337899F,\r\n    -0.338737935F, -0.346117049F, -0.353474855F, -0.360810816F, -0.368124545F,\r\n    -0.375415564F, -0.382683426F, -0.389927685F, -0.397147894F, -0.404343605F,\r\n    -0.411514372F, -0.418659747F, -0.425779283F, -0.432872593F, -0.439939171F,\r\n    -0.446978629F, -0.453990489F, -0.460974365F, -0.46792981F, -0.474856377F,\r\n    -0.481753677F, -0.488621235F, -0.495458663F, -0.502265513F, -0.509041429F,\r\n    -0.515785873F, -0.522498548F, -0.529179F, -0.535826802F, -0.542441547F,\r\n    -0.549022794F, -0.555570245F, -0.562083364F, -0.568561852F, -0.575005233F,\r\n    -0.581413209F, -0.587785244F, -0.594121039F, -0.600420237F, -0.60668236F,\r\n    -0.612907052F, -0.619093955F, -0.625242651F, -0.631352782F, -0.637424F,\r\n    -0.643455863F, -0.649448037F, -0.655400157F, -0.661311865F, -0.667182744F,\r\n    -0.673012495F, -0.678800762F, -0.684547126F, -0.690251231F, -0.695912778F,\r\n    -0.70153141F, -0.707106769F, -0.712638497F, -0.718126297F, -0.723569751F,\r\n    -0.72896862F, -0.734322488F, -0.739631116F, -0.744894F, -0.750111043F,\r\n    -0.755281806F, -0.760405958F, -0.765483201F, -0.770513237F, -0.775495768F,\r\n    -0.780430436F, -0.785316944F, -0.790155F, -0.794944346F, -0.799684644F,\r\n    -0.804375648F, -0.809017F, -0.813608468F, -0.818149745F, -0.822640538F,\r\n    -0.827080548F, -0.831469595F, -0.835807383F, -0.840093553F, -0.844327927F,\r\n    -0.848510206F, -0.852640152F, -0.856717527F, -0.860742033F, -0.86471343F,\r\n    -0.868631542F, -0.872496F, -0.876306653F, -0.880063295F, -0.883765638F,\r\n    -0.887413442F, -0.891006529F, -0.894544661F, -0.898027599F, -0.901455104F,\r\n    -0.904827058F, -0.908143163F, -0.911403298F, -0.914607167F, -0.91775465F,\r\n    -0.920845509F, -0.923879504F, -0.926856577F, -0.92977649F, -0.932639F,\r\n    -0.935444057F, -0.938191354F, -0.940880775F, -0.943512142F, -0.946085334F,\r\n    -0.948600173F, -0.95105654F, -0.953454196F, -0.955793F, -0.958072901F,\r\n    -0.96029371F, -0.962455213F, -0.964557409F, -0.96660012F, -0.968583167F,\r\n    -0.970506489F, -0.972369909F, -0.974173367F, -0.975916743F, -0.977599919F,\r\n    -0.979222834F, -0.980785251F, -0.982287228F, -0.983728647F, -0.985109329F,\r\n    -0.986429274F, -0.987688363F, -0.988886476F, -0.990023673F, -0.991099775F,\r\n    -0.992114723F, -0.993068457F, -0.993961F, -0.994792163F, -0.995561957F,\r\n    -0.996270359F, -0.996917307F, -0.997502804F, -0.998026729F, -0.998489082F,\r\n    -0.998889863F, -0.999229F, -0.999506533F, -0.999722421F, -0.999876618F,\r\n    -0.999969184F, -1.0F, -0.999969184F, -0.999876618F, -0.999722421F,\r\n    -0.999506533F, -0.999229F, -0.998889863F, -0.998489082F, -0.998026729F,\r\n    -0.997502804F, -0.996917307F, -0.996270359F, -0.995561957F, -0.994792163F,\r\n    -0.993961F, -0.993068457F, -0.992114723F, -0.991099775F, -0.990023673F,\r\n    -0.988886476F, -0.987688363F, -0.986429274F, -0.985109329F, -0.983728647F,\r\n    -0.982287228F, -0.980785251F, -0.979222834F, -0.977599919F, -0.975916743F,\r\n    -0.974173367F, -0.972369909F, -0.970506489F, -0.968583167F, -0.96660012F,\r\n    -0.964557409F, -0.962455213F, -0.96029371F, -0.958072901F, -0.955793F,\r\n    -0.953454196F, -0.95105654F, -0.948600173F, -0.946085334F, -0.943512142F,\r\n    -0.940880775F, -0.938191354F, -0.935444057F, -0.932639F, -0.92977649F,\r\n    -0.926856577F, -0.923879504F, -0.920845509F, -0.91775465F, -0.914607167F,\r\n    -0.911403298F, -0.908143163F, -0.904827058F, -0.901455104F, -0.898027599F,\r\n    -0.894544661F, -0.891006529F, -0.887413442F, -0.883765638F, -0.880063295F,\r\n    -0.876306653F, -0.872496F, -0.868631542F, -0.86471343F, -0.860742033F,\r\n    -0.856717527F, -0.852640152F, -0.848510206F, -0.844327927F, -0.840093553F,\r\n    -0.835807383F, -0.831469595F, -0.827080548F, -0.822640538F, -0.818149745F,\r\n    -0.813608468F, -0.809017F, -0.804375648F, -0.799684644F, -0.794944346F,\r\n    -0.790155F, -0.785316944F, -0.780430436F, -0.775495768F, -0.770513237F,\r\n    -0.765483201F, -0.760405958F, -0.755281806F, -0.750111043F, -0.744894F,\r\n    -0.739631116F, -0.734322488F, -0.72896862F, -0.723569751F, -0.718126297F,\r\n    -0.712638497F, -0.707106769F, -0.70153141F, -0.695912778F, -0.690251231F,\r\n    -0.684547126F, -0.678800762F, -0.673012495F, -0.667182744F, -0.661311865F,\r\n    -0.655400157F, -0.649448037F, -0.643455863F, -0.637424F, -0.631352782F,\r\n    -0.625242651F, -0.619093955F, -0.612907052F, -0.60668236F, -0.600420237F,\r\n    -0.594121039F, -0.587785244F, -0.581413209F, -0.575005233F, -0.568561852F,\r\n    -0.562083364F, -0.555570245F, -0.549022794F, -0.542441547F, -0.535826802F,\r\n    -0.529179F, -0.522498548F, -0.515785873F, -0.509041429F, -0.502265513F,\r\n    -0.495458663F, -0.488621235F, -0.481753677F, -0.474856377F, -0.46792981F,\r\n    -0.460974365F, -0.453990489F, -0.446978629F, -0.439939171F, -0.432872593F,\r\n    -0.425779283F, -0.418659747F, -0.411514372F, -0.404343605F, -0.397147894F,\r\n    -0.389927685F, -0.382683426F, -0.375415564F, -0.368124545F, -0.360810816F,\r\n    -0.353474855F, -0.346117049F, -0.338737935F, -0.331337899F, -0.323917419F,\r\n    -0.316476971F, -0.309017F, -0.301537961F, -0.294040322F, -0.286524564F,\r\n    -0.278991103F, -0.271440446F, -0.263873041F, -0.256289363F, -0.24868989F,\r\n    -0.241075054F, -0.233445361F, -0.225801274F, -0.21814324F, -0.210471764F,\r\n    -0.202787295F, -0.195090324F, -0.187381312F, -0.179660752F, -0.171929106F,\r\n    -0.16418685F, -0.156434461F, -0.148672432F, -0.140901238F, -0.133121341F,\r\n    -0.125333235F, -0.117537394F, -0.109734312F, -0.101924457F, -0.0941083133F,\r\n    -0.086286366F, -0.0784591F, -0.070626989F, -0.0627905205F, -0.0549501814F,\r\n    -0.0471064523F, -0.0392598175F, -0.0314107575F, -0.023559764F,\r\n    -0.0157073177F, -0.00785390101F, -2.44929371E-16F, 0.00785390101F,\r\n    0.0157073177F, 0.023559764F, 0.0314107575F, 0.0392598175F, 0.0471064523F,\r\n    0.0549501814F, 0.0627905205F, 0.070626989F, 0.0784591F, 0.086286366F,\r\n    0.0941083133F, 0.101924457F, 0.109734312F, 0.117537394F, 0.125333235F,\r\n    0.133121341F, 0.140901238F, 0.148672432F, 0.156434461F, 0.16418685F,\r\n    0.171929106F, 0.179660752F, 0.187381312F, 0.195090324F, 0.202787295F,\r\n    0.210471764F, 0.21814324F, 0.225801274F, 0.233445361F, 0.241075054F,\r\n    0.24868989F, 0.256289363F, 0.263873041F, 0.271440446F, 0.278991103F,\r\n    0.286524564F, 0.294040322F, 0.301537961F, 0.309017F, 0.316476971F,\r\n    0.323917419F, 0.331337899F, 0.338737935F, 0.346117049F, 0.353474855F,\r\n    0.360810816F, 0.368124545F, 0.375415564F, 0.382683426F, 0.389927685F,\r\n    0.397147894F, 0.404343605F, 0.411514372F, 0.418659747F, 0.425779283F,\r\n    0.432872593F, 0.439939171F, 0.446978629F, 0.453990489F, 0.460974365F,\r\n    0.46792981F, 0.474856377F, 0.481753677F, 0.488621235F, 0.495458663F,\r\n    0.502265513F, 0.509041429F, 0.515785873F, 0.522498548F, 0.529179F,\r\n    0.535826802F, 0.542441547F, 0.549022794F, 0.555570245F, 0.562083364F,\r\n    0.568561852F, 0.575005233F, 0.581413209F, 0.587785244F, 0.594121039F,\r\n    0.600420237F, 0.60668236F, 0.612907052F, 0.619093955F, 0.625242651F,\r\n    0.631352782F, 0.637424F, 0.643455863F, 0.649448037F, 0.655400157F,\r\n    0.661311865F, 0.667182744F, 0.673012495F, 0.678800762F, 0.684547126F,\r\n    0.690251231F, 0.695912778F, 0.70153141F, 0.707106769F, 0.712638497F,\r\n    0.718126297F, 0.723569751F, 0.72896862F, 0.734322488F, 0.739631116F,\r\n    0.744894F, 0.750111043F, 0.755281806F, 0.760405958F, 0.765483201F,\r\n    0.770513237F, 0.775495768F, 0.780430436F, 0.785316944F, 0.790155F,\r\n    0.794944346F, 0.799684644F, 0.804375648F, 0.809017F, 0.813608468F,\r\n    0.818149745F, 0.822640538F, 0.827080548F, 0.831469595F, 0.835807383F,\r\n    0.840093553F, 0.844327927F, 0.848510206F, 0.852640152F, 0.856717527F,\r\n    0.860742033F, 0.86471343F, 0.868631542F, 0.872496F, 0.876306653F,\r\n    0.880063295F, 0.883765638F, 0.887413442F, 0.891006529F, 0.894544661F,\r\n    0.898027599F, 0.901455104F, 0.904827058F, 0.908143163F, 0.911403298F,\r\n    0.914607167F, 0.91775465F, 0.920845509F, 0.923879504F, 0.926856577F,\r\n    0.92977649F, 0.932639F, 0.935444057F, 0.938191354F, 0.940880775F,\r\n    0.943512142F, 0.946085334F, 0.948600173F, 0.95105654F, 0.953454196F,\r\n    0.955793F, 0.958072901F, 0.96029371F, 0.962455213F, 0.964557409F,\r\n    0.96660012F, 0.968583167F, 0.970506489F, 0.972369909F, 0.974173367F,\r\n    0.975916743F, 0.977599919F, 0.979222834F, 0.980785251F, 0.982287228F,\r\n    0.983728647F, 0.985109329F, 0.986429274F, 0.987688363F, 0.988886476F,\r\n    0.990023673F, 0.991099775F, 0.992114723F, 0.993068457F, 0.993961F,\r\n    0.994792163F, 0.995561957F, 0.996270359F, 0.996917307F, 0.997502804F,\r\n    0.998026729F, 0.998489082F, 0.998889863F, 0.999229F, 0.999506533F,\r\n    0.999722421F, 0.999876618F, 0.999969184F, 1.0F, 0.999969184F }\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetInf.c","type":"source","group":"utility","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtGetInf.c\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetInf.h\"\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    inf = tmpVal.fltVal;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    minf = tmpVal.fltVal;\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetInf.h","type":"header","group":"utility","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtGetInf.h\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtGetInf_h_\r\n#define rtGetInf_h_\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetInf(void);\r\nextern real32_T rtGetInfF(void);\r\nextern real_T rtGetMinusInf(void);\r\nextern real32_T rtGetMinusInfF(void);\r\n\r\n#endif                                 /* rtGetInf_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetNaN.c","type":"source","group":"utility","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtGetNaN.c\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetNaN.h\"\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    nan = tmpVal.fltVal;\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  nanF.wordL.wordLuint = 0xFFC00000U;\r\n  return nanF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetNaN.h","type":"header","group":"utility","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtGetNaN.h\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtGetNaN_h_\r\n#define rtGetNaN_h_\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetNaN(void);\r\nextern real32_T rtGetNaNF(void);\r\n\r\n#endif                                 /* rtGetNaN_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_nonfinite.c","type":"source","group":"utility","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rt_nonfinite.c\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtGetNaN.h\"\r\n#include \"rtGetInf.h\"\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nvoid rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nboolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nboolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nboolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nboolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_nonfinite.h","type":"header","group":"utility","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rt_nonfinite.h\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rt_nonfinite_h_\r\n#define rt_nonfinite_h_\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#define NOT_USING_NONFINITE_LITERALS   1\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nextern void rt_InitInfAndNaN(size_t realSize);\r\nextern boolean_T rtIsInf(real_T value);\r\nextern boolean_T rtIsInfF(real32_T value);\r\nextern boolean_T rtIsNaN(real_T value);\r\nextern boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\n#endif                                 /* rt_nonfinite_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtmodel.c","type":"source","group":"interface","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtmodel.c\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtmodel.h\"\r\n\r\n/* Use this function only if you need to maintain compatibility with an existing static main program. */\r\nvoid Foc_model_Matlab_step(int_T tid)\r\n{\r\n  switch (tid) {\r\n   case 0 :\r\n    Foc_model_Matlab_step0();\r\n    break;\r\n\r\n   case 1 :\r\n    Foc_model_Matlab_step1();\r\n    break;\r\n\r\n   case 2 :\r\n    Foc_model_Matlab_step2();\r\n    break;\r\n\r\n   case 3 :\r\n    Foc_model_Matlab_step3();\r\n    break;\r\n\r\n   default :\r\n    /* do nothing */\r\n    break;\r\n  }\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtmodel.h\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtmodel_h_\r\n#define rtmodel_h_\r\n#include \"Foc_model_Matlab.h\"\r\n#define GRTINTERFACE                   0\r\n\r\n/* Macros generated for backwards compatibility  */\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n\r\n/* Model wrapper function */\r\n/* Use this function only if you need to maintain compatibility with an existing static main program. */\r\nextern void Foc_model_Matlab_step(int_T tid);\r\n\r\n#endif                                 /* rtmodel_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"S32K144.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\S32K144\\include","tag":"","groupDisplay":"Other files","code":"/*\n** ###################################################################\n**     Processor:           S32K144\n**     Reference manual:    S32K1XXRM Rev. 12.1, 02/2020\n**     Version:             rev. 4.3, 2020-05-14\n**     Build:               b200514\n**\n**     Abstract:\n**         Peripheral Access Layer for S32K144\n**\n**     Copyright (c) 1997 - 2016 Freescale Semiconductor, Inc.\n**     Copyright 2016-2020 NXP\n**     All rights reserved.\n**\n**     NXP Confidential. This software is owned or controlled by NXP and may only be\n**     used strictly in accordance with the applicable license terms. By expressly\n**     accepting such terms or by downloading, installing, activating and/or otherwise\n**     using the software, you are agreeing that you have read, and that you agree to\n**     comply with and are bound by, such license terms. If you do not agree to be\n**     bound by the applicable license terms, then you may not retain, install,\n**     activate or otherwise use the software. The production use license in\n**     Section 2.3 is expressly granted for this software.\n**\n**     http:                 www.nxp.com\n**     mail:                 support@nxp.com\n**\n**     Revisions:\n**     - rev. 1.0 (2015-04-09) - Iulian Talpiga\n**         Initial version.\n**     - rev. 1.1 (2015-05-19) - Bogdan Nitu\n**         Updated interrupts table\n**         Removed SIM_CHIPCTL_DAC2CMP\n**         Compacted PORT_PCR registers\n**         Compacted PCC registers\n**     - rev. 1.2 (2015-06-02) - Bogdan Nitu\n**         Added 'U' suffix to all integer constants\n**         Use \"\" instead of <> for Platform type inclusion\n**         CNT register from WDOG module is RW\n**     - rev. 1.3 (2015-08-05) - Iulian Talpiga\n**         Synchronized with latest RDP\n**         Removed OSC32 module\n**         Removed reserved registers\n**         Incorporated bit band acces macros\n**         Switched to standard C99 data types\n**         Added 'u' to constants\n**         Added size defines for register arrays\n**         Define peripheral instance count\n**     - rev. 1.4 (2015-08-10) - Iulian Talpiga\n**         Compacted TRGMUX registers\n**         Defined array index offsets for PCC and TRGMUX\n**         Added FPU registers\n**         Group FTM channel registers\n**         Added interrupt information to peripherals\n**         Renamed CAN interrupts according  to the reference manual\n**         Added author information to revisions\n**     - rev. 1.5 (2015-09-16) - Iulian Talpiga\n**         Renamed NVIC and SCB to avoid conflict\n**         Compacted CAN Wake-up Message buffers\n**         Added CAN embedded RAM\n**         Updated interrupts: LPIT, FTFE, LPUART,ACMP\n**         Corrected ADC_SC1_ADCH_WIDTH\n**         Compacted PDB registers\n**         Corrected CAN, FTM, and PDB count defines\n**         Guarding register acces macro against redefintion\n**     - rev. 1.6 (2015-09-29) - Iulian Talpiga\n**         Added WATER and FIFO registers to LPUART.\n**     - rev. 1.7 (2015-10-21) - Iulian Talpiga\n**         Updated ADC, AIPS, CMP, LMEM, LPTMR, PMC, PORT, RCM, RTC, SCG, SIM\n**         Compacted MPU and LPIT\n**         Added FSL_SysTick\n**         Updated doxygen documentation grouping\n**         Updated interrupts: RCM\n**     - rev. 1.8 (2016-01-06) - Iulian Talpiga\n**         Updated DMA, compacted TCD registers\n**         Updated SCG, removed SC2P - SC16P\n**         Added 8 and 16 bit access to DATA register, CRC module\n**     - rev. 1.9 (2016-02-15) - Iulian Talpiga\n**         Updated CRC, renamed DATA union\n**         Updated PMC, added CLKBIASDIS bitfield\n**         Added FSL_NVIC registers to SVD\n**     - rev. 2.0 (2016-04-07) - Iulian Talpiga\n**         Updated support for Rev2.0 silicon (0N47T)\n**         Updated ADC, AIPS, DMA, FlexIO, FTM, GPIO, LPI2C, LPIT, LPSPI, MCM, MPU, MSCM, PMC, RTC, RCM, PCC, RTC, SCG, SIM, TRGMUX and WDOG  module\n**         Updated interrupts\n**         Added EIM and ERM modules\n**         Added EIM and ERM modules\n**     - rev. 2.1 (2016-06-10) - Iulian Talpiga\n**         Updated to latest RM\n**         Minor changes to: CAN, EIM, LPI2C, MPU, PCC, PMC, RTC, SIM and TRGMUX\n**     - rev. 2.2 (2016-08-02) - Iulian Talpiga\n**         Updated to latest RM\n**         Minor changes to: ADC, CAN, CRC, FTFC, LMEM, LPI2C, MCM, MSCM, PCC, RTC, SIM\n**         Added CSE_PRAM\n**     - rev. 2.3 (2016-09-09) - Iulian Talpiga\n**         Updated to latest RM\n**         Minor changes to: PCC, FSL_NVIC and FTM\n**     - rev. 2.4 (2016-09-28) - Iulian Talpiga\n**         Fix RAMn array size in FlexCAN\n**         Fix FCSESTAT bit order\n**         Added CP0CFG0, CP0CFG1,CP0CFG2 and CP0CFG3 in MSCM\n**         Fixed STIR register in FSL_NVIC\n**         Fixed SHPR3 and ACTLR registers in FSL_SCB\n**     - rev. 2.5 (2016-11-25) - Iulian Talpiga\n**         Fix FRAC bit-field in PCC module\n**         Removed BITBAND_ACCESS macros\n**         Added MISRA declarations\n**         Updated copyright\n**         Changed prefix of NVIC, SCB and SysTick to S32_\n**     - rev. 2.6 (2017-01-09) - Iulian Talpiga\n**         Fix interrupts for CAN, LPUART, FTFC\n**     - rev. 2.7 (2017-02-22) - Iulian Talpiga\n**         Update header as per rev S32K14XRM Rev. 2, 02/2017\n**         Updated modules AIPS, CAN, LPI2C, LPSPI, MCM, MPU, SCG and SIM\n**     - rev. 2.8 (2017-03-27) - Iulian Talpiga\n**         Synchronized PCC_FlexIO on S32K Family\n**     - rev. 3.0 (2017-08-04) - Mihai Volmer\n**         Update header as per rev S32K1XXRM Rev. 4, 06/2017\n**         Updated modules CAN, MCM and PORTn\n**     - rev. 3.1 (2017-09-25) - Andrei Bolojan\n**         Update NVIC Size of Registers Arrays\n**     - rev. 4.0 (2018-02-28) - Mihai Volmer\n**         Updated header as per rev S32K1XXRM Rev. 6, 12/2017\n**         Updated modules ERM, I2C, MSCM and SIM\n**     - rev. 4.1 (2018-07-19) - Dan Nastasa\n**         Updated the header based on S32K1XXRM Rev. 8, 06/2018.\n**     - rev. 4.2 (2019-02-19) - Ionut Pavel\n**         Updated the header based on S32K1XXRM Rev. 9, 09/2018.\n**     - rev. 4.3 (2020-05-14) - Van Nguyen Nam\n**         Updated the header based on S32K1XXRM Rev. 12.1, 02/2020.\n**\n** ###################################################################\n*/\n\n/*!\n * @file S32K144.h\n * @version 4.3\n * @date 2020-05-14\n * @brief Peripheral Access Layer for S32K144\n *\n * This file contains register definitions and macros for easy access to their\n * bit fields.\n *\n * This file assumes LITTLE endian system.\n */\n\n/**\n* @page misra_violations MISRA-C:2012 violations\n*\n* @section [global]\n* Violates MISRA 2012 Advisory Rule 2.3, local typedef not referenced\n* The SoC header defines typedef for all modules.\n*\n* @section [global]\n* Violates MISRA 2012 Advisory Rule 2.5, local macro not referenced\n* The SoC header defines macros for all modules and registers.\n*\n* @section [global]\n* Violates MISRA 2012 Advisory Directive 4.9, Function-like macro\n* These are generated macros used for accessing the bit-fields from registers.\n*\n* @section [global]\n* Violates MISRA 2012 Required Rule 5.1, identifier clash\n* The supported compilers use more than 31 significant characters for identifiers.\n*\n* @section [global]\n* Violates MISRA 2012 Required Rule 5.2, identifier clash\n* The supported compilers use more than 31 significant characters for identifiers.\n*\n* @section [global]\n* Violates MISRA 2012 Required Rule 5.4, identifier clash\n* The supported compilers use more than 31 significant characters for identifiers.\n*\n* @section [global]\n* Violates MISRA 2012 Required Rule 5.5, identifier clash\n* The supported compilers use more than 31 significant characters for identifiers.\n*\n* @section [global]\n* Violates MISRA 2012 Required Rule 21.1, defined macro '__I' is reserved to the compiler\n* This type qualifier is needed to ensure correct I/O access and addressing.\n*/\n\n/* ----------------------------------------------------------------------------\n   -- MCU activation\n   ---------------------------------------------------------------------------- */\n\n/* Prevention from multiple including the same memory map */\n#if !defined(S32K144_H_)  /* Check if memory map has not been already included */\n#define S32K144_H_\n#define MCU_S32K144\n\n/* Check if another memory map has not been also included */\n#if (defined(MCU_ACTIVE))\n  #error S32K144 memory map: There is already included another memory map. Only one memory map can be included.\n#endif /* (defined(MCU_ACTIVE)) */\n#define MCU_ACTIVE\n\n#include <stdint.h>\n\n/** Memory map major version (memory maps with equal major version number are\n * compatible) */\n#define MCU_MEM_MAP_VERSION 0x0400u\n/** Memory map minor version */\n#define MCU_MEM_MAP_VERSION_MINOR 0x0002u\n\n/* ----------------------------------------------------------------------------\n   -- Generic macros\n   ---------------------------------------------------------------------------- */\n\n/* IO definitions (access restrictions to peripheral registers) */\n/**\n*   IO Type Qualifiers are used\n*   \\li to specify the access to peripheral variables.\n*   \\li for automatic generation of peripheral register debug information.\n*/\n#ifndef __IO\n#ifdef __cplusplus\n  #define   __I     volatile             /*!< Defines 'read only' permissions                 */\n#else\n  #define   __I     volatile const       /*!< Defines 'read only' permissions                 */\n#endif\n#define     __O     volatile             /*!< Defines 'write only' permissions                */\n#define     __IO    volatile             /*!< Defines 'read / write' permissions              */\n#endif\n\n\n/**\n* @brief 32 bits memory read macro.\n*/\n#if !defined(REG_READ32)\n  #define REG_READ32(address)               (*(volatile uint32_t*)(address))\n#endif\n\n/**\n* @brief 32 bits memory write macro.\n*/\n#if !defined(REG_WRITE32)\n  #define REG_WRITE32(address, value)       ((*(volatile uint32_t*)(address))= (uint32_t)(value))\n#endif\n\n/**\n* @brief 32 bits bits setting macro.\n*/\n#if !defined(REG_BIT_SET32)\n  #define REG_BIT_SET32(address, mask)      ((*(volatile uint32_t*)(address))|= (uint32_t)(mask))\n#endif\n\n/**\n* @brief 32 bits bits clearing macro.\n*/\n#if !defined(REG_BIT_CLEAR32)\n  #define REG_BIT_CLEAR32(address, mask)    ((*(volatile uint32_t*)(address))&= ((uint32_t)~((uint32_t)(mask))))\n#endif\n\n/**\n* @brief 32 bit clear bits and set with new value\n* @note It is user's responsability to make sure that value has only \"mask\" bits set - (value&~mask)==0\n*/\n#if !defined(REG_RMW32)\n  #define REG_RMW32(address, mask, value)   (REG_WRITE32((address), ((REG_READ32(address)& ((uint32_t)~((uint32_t)(mask))))| ((uint32_t)(value)))))\n#endif\n\n\n/* ----------------------------------------------------------------------------\n   -- Interrupt vector numbers for S32K144\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup Interrupt_vector_numbers_S32K144 Interrupt vector numbers for S32K144\n * @{\n */\n\n/** Interrupt Number Definitions */\n#define NUMBER_OF_INT_VECTORS 139u               /**< Number of interrupts in the Vector table */\n\n/**\n * @brief Defines the Interrupt Numbers definitions\n *\n * This enumeration is used to configure the interrupts.\n *\n * Implements : IRQn_Type_Class\n */\ntypedef enum\n{\n  /* Auxiliary constants */\n  NotAvail_IRQn                = -128,             /**< Not available device specific interrupt */\n\n  /* Core interrupts */\n  NonMaskableInt_IRQn          = -14,              /**< Non Maskable Interrupt */\n  HardFault_IRQn               = -13,              /**< Cortex-M4 SV Hard Fault Interrupt */\n  MemoryManagement_IRQn        = -12,              /**< Cortex-M4 Memory Management Interrupt */\n  BusFault_IRQn                = -11,              /**< Cortex-M4 Bus Fault Interrupt */\n  UsageFault_IRQn              = -10,              /**< Cortex-M4 Usage Fault Interrupt */\n  SVCall_IRQn                  = -5,               /**< Cortex-M4 SV Call Interrupt */\n  DebugMonitor_IRQn            = -4,               /**< Cortex-M4 Debug Monitor Interrupt */\n  PendSV_IRQn                  = -2,               /**< Cortex-M4 Pend SV Interrupt */\n  SysTick_IRQn                 = -1,               /**< Cortex-M4 System Tick Interrupt */\n\n  /* Device specific interrupts */\n  DMA0_IRQn                    = 0u,               /**< DMA channel 0 transfer complete */\n  DMA1_IRQn                    = 1u,               /**< DMA channel 1 transfer complete */\n  DMA2_IRQn                    = 2u,               /**< DMA channel 2 transfer complete */\n  DMA3_IRQn                    = 3u,               /**< DMA channel 3 transfer complete */\n  DMA4_IRQn                    = 4u,               /**< DMA channel 4 transfer complete */\n  DMA5_IRQn                    = 5u,               /**< DMA channel 5 transfer complete */\n  DMA6_IRQn                    = 6u,               /**< DMA channel 6 transfer complete */\n  DMA7_IRQn                    = 7u,               /**< DMA channel 7 transfer complete */\n  DMA8_IRQn                    = 8u,               /**< DMA channel 8 transfer complete */\n  DMA9_IRQn                    = 9u,               /**< DMA channel 9 transfer complete */\n  DMA10_IRQn                   = 10u,              /**< DMA channel 10 transfer complete */\n  DMA11_IRQn                   = 11u,              /**< DMA channel 11 transfer complete */\n  DMA12_IRQn                   = 12u,              /**< DMA channel 12 transfer complete */\n  DMA13_IRQn                   = 13u,              /**< DMA channel 13 transfer complete */\n  DMA14_IRQn                   = 14u,              /**< DMA channel 14 transfer complete */\n  DMA15_IRQn                   = 15u,              /**< DMA channel 15 transfer complete */\n  DMA_Error_IRQn               = 16u,              /**< DMA error interrupt channels 0-15 */\n  MCM_IRQn                     = 17u,              /**< FPU sources */\n  FTFC_IRQn                    = 18u,              /**< FTFC Command complete */\n  Read_Collision_IRQn          = 19u,              /**< FTFC Read collision */\n  LVD_LVW_IRQn                 = 20u,              /**< PMC Low voltage detect interrupt */\n  FTFC_Fault_IRQn              = 21u,              /**< FTFC Double bit fault detect */\n  WDOG_EWM_IRQn                = 22u,              /**< Single interrupt vector for WDOG and EWM */\n  RCM_IRQn                     = 23u,              /**< RCM Asynchronous Interrupt */\n  LPI2C0_Master_IRQn           = 24u,              /**< LPI2C0 Master Interrupt */\n  LPI2C0_Slave_IRQn            = 25u,              /**< LPI2C0 Slave Interrupt */\n  LPSPI0_IRQn                  = 26u,              /**< LPSPI0 Interrupt */\n  LPSPI1_IRQn                  = 27u,              /**< LPSPI1 Interrupt */\n  LPSPI2_IRQn                  = 28u,              /**< LPSPI2 Interrupt */\n  LPUART0_RxTx_IRQn            = 31u,              /**< LPUART0 Transmit / Receive Interrupt */\n  LPUART1_RxTx_IRQn            = 33u,              /**< LPUART1 Transmit / Receive  Interrupt */\n  LPUART2_RxTx_IRQn            = 35u,              /**< LPUART2 Transmit / Receive  Interrupt */\n  ADC0_IRQn                    = 39u,              /**< ADC0 interrupt request. */\n  ADC1_IRQn                    = 40u,              /**< ADC1 interrupt request. */\n  CMP0_IRQn                    = 41u,              /**< CMP0 interrupt request */\n  ERM_single_fault_IRQn        = 44u,              /**< ERM single bit error correction */\n  ERM_double_fault_IRQn        = 45u,              /**< ERM double bit error non-correctable */\n  RTC_IRQn                     = 46u,              /**< RTC alarm interrupt */\n  RTC_Seconds_IRQn             = 47u,              /**< RTC seconds interrupt */\n  LPIT0_Ch0_IRQn               = 48u,              /**< LPIT0 channel 0 overflow interrupt */\n  LPIT0_Ch1_IRQn               = 49u,              /**< LPIT0 channel 1 overflow interrupt */\n  LPIT0_Ch2_IRQn               = 50u,              /**< LPIT0 channel 2 overflow interrupt */\n  LPIT0_Ch3_IRQn               = 51u,              /**< LPIT0 channel 3 overflow interrupt */\n  PDB0_IRQn                    = 52u,              /**< PDB0 interrupt */\n  SCG_IRQn                     = 57u,              /**< SCG bus interrupt request */\n  LPTMR0_IRQn                  = 58u,              /**< LPTIMER interrupt request */\n  PORTA_IRQn                   = 59u,              /**< Port A pin detect interrupt */\n  PORTB_IRQn                   = 60u,              /**< Port B pin detect interrupt */\n  PORTC_IRQn                   = 61u,              /**< Port C pin detect interrupt */\n  PORTD_IRQn                   = 62u,              /**< Port D pin detect interrupt */\n  PORTE_IRQn                   = 63u,              /**< Port E pin detect interrupt */\n  SWI_IRQn                     = 64u,              /**< Software interrupt */\n  PDB1_IRQn                    = 68u,              /**< PDB1 interrupt */\n  FLEXIO_IRQn                  = 69u,              /**< FlexIO Interrupt */\n  CAN0_ORed_IRQn               = 78u,              /**< CAN0 OR'ed [Bus Off OR Transmit Warning OR Receive Warning] */\n  CAN0_Error_IRQn              = 79u,              /**< CAN0 Interrupt indicating that errors were detected on the CAN bus */\n  CAN0_Wake_Up_IRQn            = 80u,              /**< CAN0 Interrupt asserted when Pretended Networking operation is enabled, and a valid message matches the selected filter criteria during Low Power mode */\n  CAN0_ORed_0_15_MB_IRQn       = 81u,              /**< CAN0 OR'ed Message buffer (0-15) */\n  CAN0_ORed_16_31_MB_IRQn      = 82u,              /**< CAN0 OR'ed Message buffer (16-31) */\n  CAN1_ORed_IRQn               = 85u,              /**< CAN1 OR'ed [Bus Off OR Transmit Warning OR Receive Warning] */\n  CAN1_Error_IRQn              = 86u,              /**< CAN1 Interrupt indicating that errors were detected on the CAN bus */\n  CAN1_ORed_0_15_MB_IRQn       = 88u,              /**< CAN1 OR'ed Interrupt for Message buffer (0-15) */\n  CAN2_ORed_IRQn               = 92u,              /**< CAN2 OR'ed [Bus Off OR Transmit Warning OR Receive Warning] */\n  CAN2_Error_IRQn              = 93u,              /**< CAN2 Interrupt indicating that errors were detected on the CAN bus */\n  CAN2_ORed_0_15_MB_IRQn       = 95u,              /**< CAN2 OR'ed Message buffer (0-15) */\n  FTM0_Ch0_Ch1_IRQn            = 99u,              /**< FTM0 Channel 0 and 1 interrupt */\n  FTM0_Ch2_Ch3_IRQn            = 100u,             /**< FTM0 Channel 2 and 3 interrupt */\n  FTM0_Ch4_Ch5_IRQn            = 101u,             /**< FTM0 Channel 4 and 5 interrupt */\n  FTM0_Ch6_Ch7_IRQn            = 102u,             /**< FTM0 Channel 6 and 7 interrupt */\n  FTM0_Fault_IRQn              = 103u,             /**< FTM0 Fault interrupt */\n  FTM0_Ovf_Reload_IRQn         = 104u,             /**< FTM0 Counter overflow and Reload interrupt */\n  FTM1_Ch0_Ch1_IRQn            = 105u,             /**< FTM1 Channel 0 and 1 interrupt */\n  FTM1_Ch2_Ch3_IRQn            = 106u,             /**< FTM1 Channel 2 and 3 interrupt */\n  FTM1_Ch4_Ch5_IRQn            = 107u,             /**< FTM1 Channel 4 and 5 interrupt */\n  FTM1_Ch6_Ch7_IRQn            = 108u,             /**< FTM1 Channel 6 and 7 interrupt */\n  FTM1_Fault_IRQn              = 109u,             /**< FTM1 Fault interrupt */\n  FTM1_Ovf_Reload_IRQn         = 110u,             /**< FTM1 Counter overflow and Reload interrupt */\n  FTM2_Ch0_Ch1_IRQn            = 111u,             /**< FTM2 Channel 0 and 1 interrupt */\n  FTM2_Ch2_Ch3_IRQn            = 112u,             /**< FTM2 Channel 2 and 3 interrupt */\n  FTM2_Ch4_Ch5_IRQn            = 113u,             /**< FTM2 Channel 4 and 5 interrupt */\n  FTM2_Ch6_Ch7_IRQn            = 114u,             /**< FTM2 Channel 6 and 7 interrupt */\n  FTM2_Fault_IRQn              = 115u,             /**< FTM2 Fault interrupt */\n  FTM2_Ovf_Reload_IRQn         = 116u,             /**< FTM2 Counter overflow and Reload interrupt */\n  FTM3_Ch0_Ch1_IRQn            = 117u,             /**< FTM3 Channel 0 and 1 interrupt */\n  FTM3_Ch2_Ch3_IRQn            = 118u,             /**< FTM3 Channel 2 and 3 interrupt */\n  FTM3_Ch4_Ch5_IRQn            = 119u,             /**< FTM3 Channel 4 and 5 interrupt */\n  FTM3_Ch6_Ch7_IRQn            = 120u,             /**< FTM3 Channel 6 and 7 interrupt */\n  FTM3_Fault_IRQn              = 121u,             /**< FTM3 Fault interrupt */\n  FTM3_Ovf_Reload_IRQn         = 122u              /**< FTM3 Counter overflow and Reload interrupt */\n} IRQn_Type;\n\n/*!\n * @}\n */ /* end of group Interrupt_vector_numbers_S32K144 */\n\n\n/* ----------------------------------------------------------------------------\n   -- Device Peripheral Access Layer for S32K144\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup Peripheral_access_layer_S32K144 Device Peripheral Access Layer for S32K144\n * @{\n */\n\n/* @brief This module covers memory mapped registers available on SoC */\n\n/* ----------------------------------------------------------------------------\n   -- ADC Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup ADC_Peripheral_Access_Layer ADC Peripheral Access Layer\n * @{\n */\n\n\n/** ADC - Size of Registers Arrays */\n#define ADC_SC1_COUNT                            16u\n#define ADC_R_COUNT                              16u\n#define ADC_CV_COUNT                             2u\n\n/** ADC - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t SC1[ADC_SC1_COUNT];                /**< ADC Status and Control Register 1, array offset: 0x0, array step: 0x4 */\n  __IO uint32_t CFG1;                              /**< ADC Configuration Register 1, offset: 0x40 */\n  __IO uint32_t CFG2;                              /**< ADC Configuration Register 2, offset: 0x44 */\n  __I  uint32_t R[ADC_R_COUNT];                    /**< ADC Data Result Registers, array offset: 0x48, array step: 0x4 */\n  __IO uint32_t CV[ADC_CV_COUNT];                  /**< Compare Value Registers, array offset: 0x88, array step: 0x4 */\n  __IO uint32_t SC2;                               /**< Status and Control Register 2, offset: 0x90 */\n  __IO uint32_t SC3;                               /**< Status and Control Register 3, offset: 0x94 */\n  __IO uint32_t BASE_OFS;                          /**< BASE Offset Register, offset: 0x98 */\n  __IO uint32_t OFS;                               /**< ADC Offset Correction Register, offset: 0x9C */\n  __IO uint32_t USR_OFS;                           /**< USER Offset Correction Register, offset: 0xA0 */\n  __IO uint32_t XOFS;                              /**< ADC X Offset Correction Register, offset: 0xA4 */\n  __IO uint32_t YOFS;                              /**< ADC Y Offset Correction Register, offset: 0xA8 */\n  __IO uint32_t G;                                 /**< ADC Gain Register, offset: 0xAC */\n  __IO uint32_t UG;                                /**< ADC User Gain Register, offset: 0xB0 */\n  __IO uint32_t CLPS;                              /**< ADC General Calibration Value Register S, offset: 0xB4 */\n  __IO uint32_t CLP3;                              /**< ADC Plus-Side General Calibration Value Register 3, offset: 0xB8 */\n  __IO uint32_t CLP2;                              /**< ADC Plus-Side General Calibration Value Register 2, offset: 0xBC */\n  __IO uint32_t CLP1;                              /**< ADC Plus-Side General Calibration Value Register 1, offset: 0xC0 */\n  __IO uint32_t CLP0;                              /**< ADC Plus-Side General Calibration Value Register 0, offset: 0xC4 */\n  __IO uint32_t CLPX;                              /**< ADC Plus-Side General Calibration Value Register X, offset: 0xC8 */\n  __IO uint32_t CLP9;                              /**< ADC Plus-Side General Calibration Value Register 9, offset: 0xCC */\n  __IO uint32_t CLPS_OFS;                          /**< ADC General Calibration Offset Value Register S, offset: 0xD0 */\n  __IO uint32_t CLP3_OFS;                          /**< ADC Plus-Side General Calibration Offset Value Register 3, offset: 0xD4 */\n  __IO uint32_t CLP2_OFS;                          /**< ADC Plus-Side General Calibration Offset Value Register 2, offset: 0xD8 */\n  __IO uint32_t CLP1_OFS;                          /**< ADC Plus-Side General Calibration Offset Value Register 1, offset: 0xDC */\n  __IO uint32_t CLP0_OFS;                          /**< ADC Plus-Side General Calibration Offset Value Register 0, offset: 0xE0 */\n  __IO uint32_t CLPX_OFS;                          /**< ADC Plus-Side General Calibration Offset Value Register X, offset: 0xE4 */\n  __IO uint32_t CLP9_OFS;                          /**< ADC Plus-Side General Calibration Offset Value Register 9, offset: 0xE8 */\n} ADC_Type, *ADC_MemMapPtr;\n\n /** Number of instances of the ADC module. */\n#define ADC_INSTANCE_COUNT                       (2u)\n\n\n/* ADC - Peripheral instance base addresses */\n/** Peripheral ADC0 base address */\n#define ADC0_BASE                                (0x4003B000u)\n/** Peripheral ADC0 base pointer */\n#define ADC0                                     ((ADC_Type *)ADC0_BASE)\n/** Peripheral ADC1 base address */\n#define ADC1_BASE                                (0x40027000u)\n/** Peripheral ADC1 base pointer */\n#define ADC1                                     ((ADC_Type *)ADC1_BASE)\n/** Array initializer of ADC peripheral base addresses */\n#define ADC_BASE_ADDRS                           { ADC0_BASE, ADC1_BASE }\n/** Array initializer of ADC peripheral base pointers */\n#define ADC_BASE_PTRS                            { ADC0, ADC1 }\n /** Number of interrupt vector arrays for the ADC module. */\n#define ADC_IRQS_ARR_COUNT                       (1u)\n /** Number of interrupt channels for the ADC module. */\n#define ADC_IRQS_CH_COUNT                        (1u)\n/** Interrupt vectors for the ADC peripheral type */\n#define ADC_IRQS                                 { ADC0_IRQn, ADC1_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- ADC Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup ADC_Register_Masks ADC Register Masks\n * @{\n */\n\n/* SC1 Bit Fields */\n#define ADC_SC1_ADCH_MASK                        0x1Fu\n#define ADC_SC1_ADCH_SHIFT                       0u\n#define ADC_SC1_ADCH_WIDTH                       5u\n#define ADC_SC1_ADCH(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC1_ADCH_SHIFT))&ADC_SC1_ADCH_MASK)\n#define ADC_SC1_AIEN_MASK                        0x40u\n#define ADC_SC1_AIEN_SHIFT                       6u\n#define ADC_SC1_AIEN_WIDTH                       1u\n#define ADC_SC1_AIEN(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC1_AIEN_SHIFT))&ADC_SC1_AIEN_MASK)\n#define ADC_SC1_COCO_MASK                        0x80u\n#define ADC_SC1_COCO_SHIFT                       7u\n#define ADC_SC1_COCO_WIDTH                       1u\n#define ADC_SC1_COCO(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC1_COCO_SHIFT))&ADC_SC1_COCO_MASK)\n/* CFG1 Bit Fields */\n#define ADC_CFG1_ADICLK_MASK                     0x3u\n#define ADC_CFG1_ADICLK_SHIFT                    0u\n#define ADC_CFG1_ADICLK_WIDTH                    2u\n#define ADC_CFG1_ADICLK(x)                       (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_ADICLK_SHIFT))&ADC_CFG1_ADICLK_MASK)\n#define ADC_CFG1_MODE_MASK                       0xCu\n#define ADC_CFG1_MODE_SHIFT                      2u\n#define ADC_CFG1_MODE_WIDTH                      2u\n#define ADC_CFG1_MODE(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_MODE_SHIFT))&ADC_CFG1_MODE_MASK)\n#define ADC_CFG1_ADIV_MASK                       0x60u\n#define ADC_CFG1_ADIV_SHIFT                      5u\n#define ADC_CFG1_ADIV_WIDTH                      2u\n#define ADC_CFG1_ADIV(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_ADIV_SHIFT))&ADC_CFG1_ADIV_MASK)\n#define ADC_CFG1_CLRLTRG_MASK                    0x100u\n#define ADC_CFG1_CLRLTRG_SHIFT                   8u\n#define ADC_CFG1_CLRLTRG_WIDTH                   1u\n#define ADC_CFG1_CLRLTRG(x)                      (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_CLRLTRG_SHIFT))&ADC_CFG1_CLRLTRG_MASK)\n/* CFG2 Bit Fields */\n#define ADC_CFG2_SMPLTS_MASK                     0xFFu\n#define ADC_CFG2_SMPLTS_SHIFT                    0u\n#define ADC_CFG2_SMPLTS_WIDTH                    8u\n#define ADC_CFG2_SMPLTS(x)                       (((uint32_t)(((uint32_t)(x))<<ADC_CFG2_SMPLTS_SHIFT))&ADC_CFG2_SMPLTS_MASK)\n/* R Bit Fields */\n#define ADC_R_D_MASK                             0xFFFu\n#define ADC_R_D_SHIFT                            0u\n#define ADC_R_D_WIDTH                            12u\n#define ADC_R_D(x)                               (((uint32_t)(((uint32_t)(x))<<ADC_R_D_SHIFT))&ADC_R_D_MASK)\n/* CV Bit Fields */\n#define ADC_CV_CV_MASK                           0xFFFFu\n#define ADC_CV_CV_SHIFT                          0u\n#define ADC_CV_CV_WIDTH                          16u\n#define ADC_CV_CV(x)                             (((uint32_t)(((uint32_t)(x))<<ADC_CV_CV_SHIFT))&ADC_CV_CV_MASK)\n/* SC2 Bit Fields */\n#define ADC_SC2_REFSEL_MASK                      0x3u\n#define ADC_SC2_REFSEL_SHIFT                     0u\n#define ADC_SC2_REFSEL_WIDTH                     2u\n#define ADC_SC2_REFSEL(x)                        (((uint32_t)(((uint32_t)(x))<<ADC_SC2_REFSEL_SHIFT))&ADC_SC2_REFSEL_MASK)\n#define ADC_SC2_DMAEN_MASK                       0x4u\n#define ADC_SC2_DMAEN_SHIFT                      2u\n#define ADC_SC2_DMAEN_WIDTH                      1u\n#define ADC_SC2_DMAEN(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_DMAEN_SHIFT))&ADC_SC2_DMAEN_MASK)\n#define ADC_SC2_ACREN_MASK                       0x8u\n#define ADC_SC2_ACREN_SHIFT                      3u\n#define ADC_SC2_ACREN_WIDTH                      1u\n#define ADC_SC2_ACREN(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ACREN_SHIFT))&ADC_SC2_ACREN_MASK)\n#define ADC_SC2_ACFGT_MASK                       0x10u\n#define ADC_SC2_ACFGT_SHIFT                      4u\n#define ADC_SC2_ACFGT_WIDTH                      1u\n#define ADC_SC2_ACFGT(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ACFGT_SHIFT))&ADC_SC2_ACFGT_MASK)\n#define ADC_SC2_ACFE_MASK                        0x20u\n#define ADC_SC2_ACFE_SHIFT                       5u\n#define ADC_SC2_ACFE_WIDTH                       1u\n#define ADC_SC2_ACFE(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ACFE_SHIFT))&ADC_SC2_ACFE_MASK)\n#define ADC_SC2_ADTRG_MASK                       0x40u\n#define ADC_SC2_ADTRG_SHIFT                      6u\n#define ADC_SC2_ADTRG_WIDTH                      1u\n#define ADC_SC2_ADTRG(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ADTRG_SHIFT))&ADC_SC2_ADTRG_MASK)\n#define ADC_SC2_ADACT_MASK                       0x80u\n#define ADC_SC2_ADACT_SHIFT                      7u\n#define ADC_SC2_ADACT_WIDTH                      1u\n#define ADC_SC2_ADACT(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ADACT_SHIFT))&ADC_SC2_ADACT_MASK)\n#define ADC_SC2_TRGPRNUM_MASK                    0x6000u\n#define ADC_SC2_TRGPRNUM_SHIFT                   13u\n#define ADC_SC2_TRGPRNUM_WIDTH                   2u\n#define ADC_SC2_TRGPRNUM(x)                      (((uint32_t)(((uint32_t)(x))<<ADC_SC2_TRGPRNUM_SHIFT))&ADC_SC2_TRGPRNUM_MASK)\n#define ADC_SC2_TRGSTLAT_MASK                    0xF0000u\n#define ADC_SC2_TRGSTLAT_SHIFT                   16u\n#define ADC_SC2_TRGSTLAT_WIDTH                   4u\n#define ADC_SC2_TRGSTLAT(x)                      (((uint32_t)(((uint32_t)(x))<<ADC_SC2_TRGSTLAT_SHIFT))&ADC_SC2_TRGSTLAT_MASK)\n#define ADC_SC2_TRGSTERR_MASK                    0xF000000u\n#define ADC_SC2_TRGSTERR_SHIFT                   24u\n#define ADC_SC2_TRGSTERR_WIDTH                   4u\n#define ADC_SC2_TRGSTERR(x)                      (((uint32_t)(((uint32_t)(x))<<ADC_SC2_TRGSTERR_SHIFT))&ADC_SC2_TRGSTERR_MASK)\n/* SC3 Bit Fields */\n#define ADC_SC3_AVGS_MASK                        0x3u\n#define ADC_SC3_AVGS_SHIFT                       0u\n#define ADC_SC3_AVGS_WIDTH                       2u\n#define ADC_SC3_AVGS(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC3_AVGS_SHIFT))&ADC_SC3_AVGS_MASK)\n#define ADC_SC3_AVGE_MASK                        0x4u\n#define ADC_SC3_AVGE_SHIFT                       2u\n#define ADC_SC3_AVGE_WIDTH                       1u\n#define ADC_SC3_AVGE(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC3_AVGE_SHIFT))&ADC_SC3_AVGE_MASK)\n#define ADC_SC3_ADCO_MASK                        0x8u\n#define ADC_SC3_ADCO_SHIFT                       3u\n#define ADC_SC3_ADCO_WIDTH                       1u\n#define ADC_SC3_ADCO(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC3_ADCO_SHIFT))&ADC_SC3_ADCO_MASK)\n#define ADC_SC3_CAL_MASK                         0x80u\n#define ADC_SC3_CAL_SHIFT                        7u\n#define ADC_SC3_CAL_WIDTH                        1u\n#define ADC_SC3_CAL(x)                           (((uint32_t)(((uint32_t)(x))<<ADC_SC3_CAL_SHIFT))&ADC_SC3_CAL_MASK)\n/* BASE_OFS Bit Fields */\n#define ADC_BASE_OFS_BA_OFS_MASK                 0xFFu\n#define ADC_BASE_OFS_BA_OFS_SHIFT                0u\n#define ADC_BASE_OFS_BA_OFS_WIDTH                8u\n#define ADC_BASE_OFS_BA_OFS(x)                   (((uint32_t)(((uint32_t)(x))<<ADC_BASE_OFS_BA_OFS_SHIFT))&ADC_BASE_OFS_BA_OFS_MASK)\n/* OFS Bit Fields */\n#define ADC_OFS_OFS_MASK                         0xFFFFu\n#define ADC_OFS_OFS_SHIFT                        0u\n#define ADC_OFS_OFS_WIDTH                        16u\n#define ADC_OFS_OFS(x)                           (((uint32_t)(((uint32_t)(x))<<ADC_OFS_OFS_SHIFT))&ADC_OFS_OFS_MASK)\n/* USR_OFS Bit Fields */\n#define ADC_USR_OFS_USR_OFS_MASK                 0xFFu\n#define ADC_USR_OFS_USR_OFS_SHIFT                0u\n#define ADC_USR_OFS_USR_OFS_WIDTH                8u\n#define ADC_USR_OFS_USR_OFS(x)                   (((uint32_t)(((uint32_t)(x))<<ADC_USR_OFS_USR_OFS_SHIFT))&ADC_USR_OFS_USR_OFS_MASK)\n/* XOFS Bit Fields */\n#define ADC_XOFS_XOFS_MASK                       0x3Fu\n#define ADC_XOFS_XOFS_SHIFT                      0u\n#define ADC_XOFS_XOFS_WIDTH                      6u\n#define ADC_XOFS_XOFS(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_XOFS_XOFS_SHIFT))&ADC_XOFS_XOFS_MASK)\n/* YOFS Bit Fields */\n#define ADC_YOFS_YOFS_MASK                       0xFFu\n#define ADC_YOFS_YOFS_SHIFT                      0u\n#define ADC_YOFS_YOFS_WIDTH                      8u\n#define ADC_YOFS_YOFS(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_YOFS_YOFS_SHIFT))&ADC_YOFS_YOFS_MASK)\n/* G Bit Fields */\n#define ADC_G_G_MASK                             0x7FFu\n#define ADC_G_G_SHIFT                            0u\n#define ADC_G_G_WIDTH                            11u\n#define ADC_G_G(x)                               (((uint32_t)(((uint32_t)(x))<<ADC_G_G_SHIFT))&ADC_G_G_MASK)\n/* UG Bit Fields */\n#define ADC_UG_UG_MASK                           0x3FFu\n#define ADC_UG_UG_SHIFT                          0u\n#define ADC_UG_UG_WIDTH                          10u\n#define ADC_UG_UG(x)                             (((uint32_t)(((uint32_t)(x))<<ADC_UG_UG_SHIFT))&ADC_UG_UG_MASK)\n/* CLPS Bit Fields */\n#define ADC_CLPS_CLPS_MASK                       0x7Fu\n#define ADC_CLPS_CLPS_SHIFT                      0u\n#define ADC_CLPS_CLPS_WIDTH                      7u\n#define ADC_CLPS_CLPS(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLPS_CLPS_SHIFT))&ADC_CLPS_CLPS_MASK)\n/* CLP3 Bit Fields */\n#define ADC_CLP3_CLP3_MASK                       0x3FFu\n#define ADC_CLP3_CLP3_SHIFT                      0u\n#define ADC_CLP3_CLP3_WIDTH                      10u\n#define ADC_CLP3_CLP3(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP3_CLP3_SHIFT))&ADC_CLP3_CLP3_MASK)\n/* CLP2 Bit Fields */\n#define ADC_CLP2_CLP2_MASK                       0x3FFu\n#define ADC_CLP2_CLP2_SHIFT                      0u\n#define ADC_CLP2_CLP2_WIDTH                      10u\n#define ADC_CLP2_CLP2(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP2_CLP2_SHIFT))&ADC_CLP2_CLP2_MASK)\n/* CLP1 Bit Fields */\n#define ADC_CLP1_CLP1_MASK                       0x1FFu\n#define ADC_CLP1_CLP1_SHIFT                      0u\n#define ADC_CLP1_CLP1_WIDTH                      9u\n#define ADC_CLP1_CLP1(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP1_CLP1_SHIFT))&ADC_CLP1_CLP1_MASK)\n/* CLP0 Bit Fields */\n#define ADC_CLP0_CLP0_MASK                       0xFFu\n#define ADC_CLP0_CLP0_SHIFT                      0u\n#define ADC_CLP0_CLP0_WIDTH                      8u\n#define ADC_CLP0_CLP0(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP0_CLP0_SHIFT))&ADC_CLP0_CLP0_MASK)\n/* CLPX Bit Fields */\n#define ADC_CLPX_CLPX_MASK                       0x7Fu\n#define ADC_CLPX_CLPX_SHIFT                      0u\n#define ADC_CLPX_CLPX_WIDTH                      7u\n#define ADC_CLPX_CLPX(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLPX_CLPX_SHIFT))&ADC_CLPX_CLPX_MASK)\n/* CLP9 Bit Fields */\n#define ADC_CLP9_CLP9_MASK                       0x7Fu\n#define ADC_CLP9_CLP9_SHIFT                      0u\n#define ADC_CLP9_CLP9_WIDTH                      7u\n#define ADC_CLP9_CLP9(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP9_CLP9_SHIFT))&ADC_CLP9_CLP9_MASK)\n/* CLPS_OFS Bit Fields */\n#define ADC_CLPS_OFS_CLPS_OFS_MASK               0xFu\n#define ADC_CLPS_OFS_CLPS_OFS_SHIFT              0u\n#define ADC_CLPS_OFS_CLPS_OFS_WIDTH              4u\n#define ADC_CLPS_OFS_CLPS_OFS(x)                 (((uint32_t)(((uint32_t)(x))<<ADC_CLPS_OFS_CLPS_OFS_SHIFT))&ADC_CLPS_OFS_CLPS_OFS_MASK)\n/* CLP3_OFS Bit Fields */\n#define ADC_CLP3_OFS_CLP3_OFS_MASK               0xFu\n#define ADC_CLP3_OFS_CLP3_OFS_SHIFT              0u\n#define ADC_CLP3_OFS_CLP3_OFS_WIDTH              4u\n#define ADC_CLP3_OFS_CLP3_OFS(x)                 (((uint32_t)(((uint32_t)(x))<<ADC_CLP3_OFS_CLP3_OFS_SHIFT))&ADC_CLP3_OFS_CLP3_OFS_MASK)\n/* CLP2_OFS Bit Fields */\n#define ADC_CLP2_OFS_CLP2_OFS_MASK               0xFu\n#define ADC_CLP2_OFS_CLP2_OFS_SHIFT              0u\n#define ADC_CLP2_OFS_CLP2_OFS_WIDTH              4u\n#define ADC_CLP2_OFS_CLP2_OFS(x)                 (((uint32_t)(((uint32_t)(x))<<ADC_CLP2_OFS_CLP2_OFS_SHIFT))&ADC_CLP2_OFS_CLP2_OFS_MASK)\n/* CLP1_OFS Bit Fields */\n#define ADC_CLP1_OFS_CLP1_OFS_MASK               0xFu\n#define ADC_CLP1_OFS_CLP1_OFS_SHIFT              0u\n#define ADC_CLP1_OFS_CLP1_OFS_WIDTH              4u\n#define ADC_CLP1_OFS_CLP1_OFS(x)                 (((uint32_t)(((uint32_t)(x))<<ADC_CLP1_OFS_CLP1_OFS_SHIFT))&ADC_CLP1_OFS_CLP1_OFS_MASK)\n/* CLP0_OFS Bit Fields */\n#define ADC_CLP0_OFS_CLP0_OFS_MASK               0xFu\n#define ADC_CLP0_OFS_CLP0_OFS_SHIFT              0u\n#define ADC_CLP0_OFS_CLP0_OFS_WIDTH              4u\n#define ADC_CLP0_OFS_CLP0_OFS(x)                 (((uint32_t)(((uint32_t)(x))<<ADC_CLP0_OFS_CLP0_OFS_SHIFT))&ADC_CLP0_OFS_CLP0_OFS_MASK)\n/* CLPX_OFS Bit Fields */\n#define ADC_CLPX_OFS_CLPX_OFS_MASK               0xFFFu\n#define ADC_CLPX_OFS_CLPX_OFS_SHIFT              0u\n#define ADC_CLPX_OFS_CLPX_OFS_WIDTH              12u\n#define ADC_CLPX_OFS_CLPX_OFS(x)                 (((uint32_t)(((uint32_t)(x))<<ADC_CLPX_OFS_CLPX_OFS_SHIFT))&ADC_CLPX_OFS_CLPX_OFS_MASK)\n/* CLP9_OFS Bit Fields */\n#define ADC_CLP9_OFS_CLP9_OFS_MASK               0xFFFu\n#define ADC_CLP9_OFS_CLP9_OFS_SHIFT              0u\n#define ADC_CLP9_OFS_CLP9_OFS_WIDTH              12u\n#define ADC_CLP9_OFS_CLP9_OFS(x)                 (((uint32_t)(((uint32_t)(x))<<ADC_CLP9_OFS_CLP9_OFS_SHIFT))&ADC_CLP9_OFS_CLP9_OFS_MASK)\n\n/*!\n * @}\n */ /* end of group ADC_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group ADC_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- AIPS Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup AIPS_Peripheral_Access_Layer AIPS Peripheral Access Layer\n * @{\n */\n\n\n/** AIPS - Size of Registers Arrays */\n#define AIPS_PACR_COUNT                          4u\n#define AIPS_OPACR_COUNT                         12u\n\n/** AIPS - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t MPRA;                              /**< Master Privilege Register A, offset: 0x0 */\n       uint8_t RESERVED_0[28];\n  __IO uint32_t PACR[AIPS_PACR_COUNT];             /**< Peripheral Access Control Register, array offset: 0x20, array step: 0x4 */\n       uint8_t RESERVED_1[16];\n  __IO uint32_t OPACR[AIPS_OPACR_COUNT];           /**< Off-Platform Peripheral Access Control Register, array offset: 0x40, array step: 0x4 */\n} AIPS_Type, *AIPS_MemMapPtr;\n\n /** Number of instances of the AIPS module. */\n#define AIPS_INSTANCE_COUNT                      (1u)\n\n\n/* AIPS - Peripheral instance base addresses */\n/** Peripheral AIPS base address */\n#define AIPS_BASE                                (0x40000000u)\n/** Peripheral AIPS base pointer */\n#define AIPS                                     ((AIPS_Type *)AIPS_BASE)\n/** Array initializer of AIPS peripheral base addresses */\n#define AIPS_BASE_ADDRS                          { AIPS_BASE }\n/** Array initializer of AIPS peripheral base pointers */\n#define AIPS_BASE_PTRS                           { AIPS }\n\n/* ----------------------------------------------------------------------------\n   -- AIPS Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup AIPS_Register_Masks AIPS Register Masks\n * @{\n */\n\n/* MPRA Bit Fields */\n#define AIPS_MPRA_MPL2_MASK                      0x100000u\n#define AIPS_MPRA_MPL2_SHIFT                     20u\n#define AIPS_MPRA_MPL2_WIDTH                     1u\n#define AIPS_MPRA_MPL2(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_MPRA_MPL2_SHIFT))&AIPS_MPRA_MPL2_MASK)\n#define AIPS_MPRA_MTW2_MASK                      0x200000u\n#define AIPS_MPRA_MTW2_SHIFT                     21u\n#define AIPS_MPRA_MTW2_WIDTH                     1u\n#define AIPS_MPRA_MTW2(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_MPRA_MTW2_SHIFT))&AIPS_MPRA_MTW2_MASK)\n#define AIPS_MPRA_MTR2_MASK                      0x400000u\n#define AIPS_MPRA_MTR2_SHIFT                     22u\n#define AIPS_MPRA_MTR2_WIDTH                     1u\n#define AIPS_MPRA_MTR2(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_MPRA_MTR2_SHIFT))&AIPS_MPRA_MTR2_MASK)\n#define AIPS_MPRA_MPL1_MASK                      0x1000000u\n#define AIPS_MPRA_MPL1_SHIFT                     24u\n#define AIPS_MPRA_MPL1_WIDTH                     1u\n#define AIPS_MPRA_MPL1(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_MPRA_MPL1_SHIFT))&AIPS_MPRA_MPL1_MASK)\n#define AIPS_MPRA_MTW1_MASK                      0x2000000u\n#define AIPS_MPRA_MTW1_SHIFT                     25u\n#define AIPS_MPRA_MTW1_WIDTH                     1u\n#define AIPS_MPRA_MTW1(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_MPRA_MTW1_SHIFT))&AIPS_MPRA_MTW1_MASK)\n#define AIPS_MPRA_MTR1_MASK                      0x4000000u\n#define AIPS_MPRA_MTR1_SHIFT                     26u\n#define AIPS_MPRA_MTR1_WIDTH                     1u\n#define AIPS_MPRA_MTR1(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_MPRA_MTR1_SHIFT))&AIPS_MPRA_MTR1_MASK)\n#define AIPS_MPRA_MPL0_MASK                      0x10000000u\n#define AIPS_MPRA_MPL0_SHIFT                     28u\n#define AIPS_MPRA_MPL0_WIDTH                     1u\n#define AIPS_MPRA_MPL0(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_MPRA_MPL0_SHIFT))&AIPS_MPRA_MPL0_MASK)\n#define AIPS_MPRA_MTW0_MASK                      0x20000000u\n#define AIPS_MPRA_MTW0_SHIFT                     29u\n#define AIPS_MPRA_MTW0_WIDTH                     1u\n#define AIPS_MPRA_MTW0(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_MPRA_MTW0_SHIFT))&AIPS_MPRA_MTW0_MASK)\n#define AIPS_MPRA_MTR0_MASK                      0x40000000u\n#define AIPS_MPRA_MTR0_SHIFT                     30u\n#define AIPS_MPRA_MTR0_WIDTH                     1u\n#define AIPS_MPRA_MTR0(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_MPRA_MTR0_SHIFT))&AIPS_MPRA_MTR0_MASK)\n/* PACR Bit Fields */\n#define AIPS_PACR_TP5_MASK                       0x100u\n#define AIPS_PACR_TP5_SHIFT                      8u\n#define AIPS_PACR_TP5_WIDTH                      1u\n#define AIPS_PACR_TP5(x)                         (((uint32_t)(((uint32_t)(x))<<AIPS_PACR_TP5_SHIFT))&AIPS_PACR_TP5_MASK)\n#define AIPS_PACR_WP5_MASK                       0x200u\n#define AIPS_PACR_WP5_SHIFT                      9u\n#define AIPS_PACR_WP5_WIDTH                      1u\n#define AIPS_PACR_WP5(x)                         (((uint32_t)(((uint32_t)(x))<<AIPS_PACR_WP5_SHIFT))&AIPS_PACR_WP5_MASK)\n#define AIPS_PACR_SP5_MASK                       0x400u\n#define AIPS_PACR_SP5_SHIFT                      10u\n#define AIPS_PACR_SP5_WIDTH                      1u\n#define AIPS_PACR_SP5(x)                         (((uint32_t)(((uint32_t)(x))<<AIPS_PACR_SP5_SHIFT))&AIPS_PACR_SP5_MASK)\n#define AIPS_PACR_TP1_MASK                       0x1000000u\n#define AIPS_PACR_TP1_SHIFT                      24u\n#define AIPS_PACR_TP1_WIDTH                      1u\n#define AIPS_PACR_TP1(x)                         (((uint32_t)(((uint32_t)(x))<<AIPS_PACR_TP1_SHIFT))&AIPS_PACR_TP1_MASK)\n#define AIPS_PACR_WP1_MASK                       0x2000000u\n#define AIPS_PACR_WP1_SHIFT                      25u\n#define AIPS_PACR_WP1_WIDTH                      1u\n#define AIPS_PACR_WP1(x)                         (((uint32_t)(((uint32_t)(x))<<AIPS_PACR_WP1_SHIFT))&AIPS_PACR_WP1_MASK)\n#define AIPS_PACR_SP1_MASK                       0x4000000u\n#define AIPS_PACR_SP1_SHIFT                      26u\n#define AIPS_PACR_SP1_WIDTH                      1u\n#define AIPS_PACR_SP1(x)                         (((uint32_t)(((uint32_t)(x))<<AIPS_PACR_SP1_SHIFT))&AIPS_PACR_SP1_MASK)\n#define AIPS_PACR_TP0_MASK                       0x10000000u\n#define AIPS_PACR_TP0_SHIFT                      28u\n#define AIPS_PACR_TP0_WIDTH                      1u\n#define AIPS_PACR_TP0(x)                         (((uint32_t)(((uint32_t)(x))<<AIPS_PACR_TP0_SHIFT))&AIPS_PACR_TP0_MASK)\n#define AIPS_PACR_WP0_MASK                       0x20000000u\n#define AIPS_PACR_WP0_SHIFT                      29u\n#define AIPS_PACR_WP0_WIDTH                      1u\n#define AIPS_PACR_WP0(x)                         (((uint32_t)(((uint32_t)(x))<<AIPS_PACR_WP0_SHIFT))&AIPS_PACR_WP0_MASK)\n#define AIPS_PACR_SP0_MASK                       0x40000000u\n#define AIPS_PACR_SP0_SHIFT                      30u\n#define AIPS_PACR_SP0_WIDTH                      1u\n#define AIPS_PACR_SP0(x)                         (((uint32_t)(((uint32_t)(x))<<AIPS_PACR_SP0_SHIFT))&AIPS_PACR_SP0_MASK)\n/* OPACR Bit Fields */\n#define AIPS_OPACR_TP7_MASK                      0x1u\n#define AIPS_OPACR_TP7_SHIFT                     0u\n#define AIPS_OPACR_TP7_WIDTH                     1u\n#define AIPS_OPACR_TP7(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_TP7_SHIFT))&AIPS_OPACR_TP7_MASK)\n#define AIPS_OPACR_WP7_MASK                      0x2u\n#define AIPS_OPACR_WP7_SHIFT                     1u\n#define AIPS_OPACR_WP7_WIDTH                     1u\n#define AIPS_OPACR_WP7(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_WP7_SHIFT))&AIPS_OPACR_WP7_MASK)\n#define AIPS_OPACR_SP7_MASK                      0x4u\n#define AIPS_OPACR_SP7_SHIFT                     2u\n#define AIPS_OPACR_SP7_WIDTH                     1u\n#define AIPS_OPACR_SP7(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_SP7_SHIFT))&AIPS_OPACR_SP7_MASK)\n#define AIPS_OPACR_TP6_MASK                      0x10u\n#define AIPS_OPACR_TP6_SHIFT                     4u\n#define AIPS_OPACR_TP6_WIDTH                     1u\n#define AIPS_OPACR_TP6(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_TP6_SHIFT))&AIPS_OPACR_TP6_MASK)\n#define AIPS_OPACR_WP6_MASK                      0x20u\n#define AIPS_OPACR_WP6_SHIFT                     5u\n#define AIPS_OPACR_WP6_WIDTH                     1u\n#define AIPS_OPACR_WP6(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_WP6_SHIFT))&AIPS_OPACR_WP6_MASK)\n#define AIPS_OPACR_SP6_MASK                      0x40u\n#define AIPS_OPACR_SP6_SHIFT                     6u\n#define AIPS_OPACR_SP6_WIDTH                     1u\n#define AIPS_OPACR_SP6(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_SP6_SHIFT))&AIPS_OPACR_SP6_MASK)\n#define AIPS_OPACR_TP5_MASK                      0x100u\n#define AIPS_OPACR_TP5_SHIFT                     8u\n#define AIPS_OPACR_TP5_WIDTH                     1u\n#define AIPS_OPACR_TP5(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_TP5_SHIFT))&AIPS_OPACR_TP5_MASK)\n#define AIPS_OPACR_WP5_MASK                      0x200u\n#define AIPS_OPACR_WP5_SHIFT                     9u\n#define AIPS_OPACR_WP5_WIDTH                     1u\n#define AIPS_OPACR_WP5(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_WP5_SHIFT))&AIPS_OPACR_WP5_MASK)\n#define AIPS_OPACR_SP5_MASK                      0x400u\n#define AIPS_OPACR_SP5_SHIFT                     10u\n#define AIPS_OPACR_SP5_WIDTH                     1u\n#define AIPS_OPACR_SP5(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_SP5_SHIFT))&AIPS_OPACR_SP5_MASK)\n#define AIPS_OPACR_TP4_MASK                      0x1000u\n#define AIPS_OPACR_TP4_SHIFT                     12u\n#define AIPS_OPACR_TP4_WIDTH                     1u\n#define AIPS_OPACR_TP4(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_TP4_SHIFT))&AIPS_OPACR_TP4_MASK)\n#define AIPS_OPACR_WP4_MASK                      0x2000u\n#define AIPS_OPACR_WP4_SHIFT                     13u\n#define AIPS_OPACR_WP4_WIDTH                     1u\n#define AIPS_OPACR_WP4(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_WP4_SHIFT))&AIPS_OPACR_WP4_MASK)\n#define AIPS_OPACR_SP4_MASK                      0x4000u\n#define AIPS_OPACR_SP4_SHIFT                     14u\n#define AIPS_OPACR_SP4_WIDTH                     1u\n#define AIPS_OPACR_SP4(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_SP4_SHIFT))&AIPS_OPACR_SP4_MASK)\n#define AIPS_OPACR_TP3_MASK                      0x10000u\n#define AIPS_OPACR_TP3_SHIFT                     16u\n#define AIPS_OPACR_TP3_WIDTH                     1u\n#define AIPS_OPACR_TP3(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_TP3_SHIFT))&AIPS_OPACR_TP3_MASK)\n#define AIPS_OPACR_WP3_MASK                      0x20000u\n#define AIPS_OPACR_WP3_SHIFT                     17u\n#define AIPS_OPACR_WP3_WIDTH                     1u\n#define AIPS_OPACR_WP3(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_WP3_SHIFT))&AIPS_OPACR_WP3_MASK)\n#define AIPS_OPACR_SP3_MASK                      0x40000u\n#define AIPS_OPACR_SP3_SHIFT                     18u\n#define AIPS_OPACR_SP3_WIDTH                     1u\n#define AIPS_OPACR_SP3(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_SP3_SHIFT))&AIPS_OPACR_SP3_MASK)\n#define AIPS_OPACR_TP2_MASK                      0x100000u\n#define AIPS_OPACR_TP2_SHIFT                     20u\n#define AIPS_OPACR_TP2_WIDTH                     1u\n#define AIPS_OPACR_TP2(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_TP2_SHIFT))&AIPS_OPACR_TP2_MASK)\n#define AIPS_OPACR_WP2_MASK                      0x200000u\n#define AIPS_OPACR_WP2_SHIFT                     21u\n#define AIPS_OPACR_WP2_WIDTH                     1u\n#define AIPS_OPACR_WP2(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_WP2_SHIFT))&AIPS_OPACR_WP2_MASK)\n#define AIPS_OPACR_SP2_MASK                      0x400000u\n#define AIPS_OPACR_SP2_SHIFT                     22u\n#define AIPS_OPACR_SP2_WIDTH                     1u\n#define AIPS_OPACR_SP2(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_SP2_SHIFT))&AIPS_OPACR_SP2_MASK)\n#define AIPS_OPACR_TP1_MASK                      0x1000000u\n#define AIPS_OPACR_TP1_SHIFT                     24u\n#define AIPS_OPACR_TP1_WIDTH                     1u\n#define AIPS_OPACR_TP1(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_TP1_SHIFT))&AIPS_OPACR_TP1_MASK)\n#define AIPS_OPACR_WP1_MASK                      0x2000000u\n#define AIPS_OPACR_WP1_SHIFT                     25u\n#define AIPS_OPACR_WP1_WIDTH                     1u\n#define AIPS_OPACR_WP1(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_WP1_SHIFT))&AIPS_OPACR_WP1_MASK)\n#define AIPS_OPACR_SP1_MASK                      0x4000000u\n#define AIPS_OPACR_SP1_SHIFT                     26u\n#define AIPS_OPACR_SP1_WIDTH                     1u\n#define AIPS_OPACR_SP1(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_SP1_SHIFT))&AIPS_OPACR_SP1_MASK)\n#define AIPS_OPACR_TP0_MASK                      0x10000000u\n#define AIPS_OPACR_TP0_SHIFT                     28u\n#define AIPS_OPACR_TP0_WIDTH                     1u\n#define AIPS_OPACR_TP0(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_TP0_SHIFT))&AIPS_OPACR_TP0_MASK)\n#define AIPS_OPACR_WP0_MASK                      0x20000000u\n#define AIPS_OPACR_WP0_SHIFT                     29u\n#define AIPS_OPACR_WP0_WIDTH                     1u\n#define AIPS_OPACR_WP0(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_WP0_SHIFT))&AIPS_OPACR_WP0_MASK)\n#define AIPS_OPACR_SP0_MASK                      0x40000000u\n#define AIPS_OPACR_SP0_SHIFT                     30u\n#define AIPS_OPACR_SP0_WIDTH                     1u\n#define AIPS_OPACR_SP0(x)                        (((uint32_t)(((uint32_t)(x))<<AIPS_OPACR_SP0_SHIFT))&AIPS_OPACR_SP0_MASK)\n\n/*!\n * @}\n */ /* end of group AIPS_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group AIPS_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- CAN Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup CAN_Peripheral_Access_Layer CAN Peripheral Access Layer\n * @{\n */\n\n\n/** CAN - Size of Registers Arrays */\n#define CAN_RAMn_COUNT                           128u\n#define CAN_RXIMR_COUNT                          32u\n#define CAN_WMB_COUNT                            4u\n\n/** CAN - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t MCR;                               /**< Module Configuration Register, offset: 0x0 */\n  __IO uint32_t CTRL1;                             /**< Control 1 register, offset: 0x4 */\n  __IO uint32_t TIMER;                             /**< Free Running Timer, offset: 0x8 */\n       uint8_t RESERVED_0[4];\n  __IO uint32_t RXMGMASK;                          /**< Rx Mailboxes Global Mask Register, offset: 0x10 */\n  __IO uint32_t RX14MASK;                          /**< Rx 14 Mask register, offset: 0x14 */\n  __IO uint32_t RX15MASK;                          /**< Rx 15 Mask register, offset: 0x18 */\n  __IO uint32_t ECR;                               /**< Error Counter, offset: 0x1C */\n  __IO uint32_t ESR1;                              /**< Error and Status 1 register, offset: 0x20 */\n       uint8_t RESERVED_1[4];\n  __IO uint32_t IMASK1;                            /**< Interrupt Masks 1 register, offset: 0x28 */\n       uint8_t RESERVED_2[4];\n  __IO uint32_t IFLAG1;                            /**< Interrupt Flags 1 register, offset: 0x30 */\n  __IO uint32_t CTRL2;                             /**< Control 2 register, offset: 0x34 */\n  __I  uint32_t ESR2;                              /**< Error and Status 2 register, offset: 0x38 */\n       uint8_t RESERVED_3[8];\n  __I  uint32_t CRCR;                              /**< CRC Register, offset: 0x44 */\n  __IO uint32_t RXFGMASK;                          /**< Rx FIFO Global Mask register, offset: 0x48 */\n  __I  uint32_t RXFIR;                             /**< Rx FIFO Information Register, offset: 0x4C */\n  __IO uint32_t CBT;                               /**< CAN Bit Timing Register, offset: 0x50 */\n       uint8_t RESERVED_4[44];\n  __IO uint32_t RAMn[CAN_RAMn_COUNT];              /**< Embedded RAM, array offset: 0x80, array step: 0x4 */\n       uint8_t RESERVED_5[1536];\n  __IO uint32_t RXIMR[CAN_RXIMR_COUNT];            /**< Rx Individual Mask Registers, array offset: 0x880, array step: 0x4 */\n       uint8_t RESERVED_6[512];\n  __IO uint32_t CTRL1_PN;                          /**< Pretended Networking Control 1 Register, offset: 0xB00 */\n  __IO uint32_t CTRL2_PN;                          /**< Pretended Networking Control 2 Register, offset: 0xB04 */\n  __IO uint32_t WU_MTC;                            /**< Pretended Networking Wake Up Match Register, offset: 0xB08 */\n  __IO uint32_t FLT_ID1;                           /**< Pretended Networking ID Filter 1 Register, offset: 0xB0C */\n  __IO uint32_t FLT_DLC;                           /**< Pretended Networking DLC Filter Register, offset: 0xB10 */\n  __IO uint32_t PL1_LO;                            /**< Pretended Networking Payload Low Filter 1 Register, offset: 0xB14 */\n  __IO uint32_t PL1_HI;                            /**< Pretended Networking Payload High Filter 1 Register, offset: 0xB18 */\n  __IO uint32_t FLT_ID2_IDMASK;                    /**< Pretended Networking ID Filter 2 Register / ID Mask Register, offset: 0xB1C */\n  __IO uint32_t PL2_PLMASK_LO;                     /**< Pretended Networking Payload Low Filter 2 Register / Payload Low Mask Register, offset: 0xB20 */\n  __IO uint32_t PL2_PLMASK_HI;                     /**< Pretended Networking Payload High Filter 2 low order bits / Payload High Mask Register, offset: 0xB24 */\n       uint8_t RESERVED_7[24];\n  struct {                                         /* offset: 0xB40, array step: 0x10 */\n    __I  uint32_t WMBn_CS;                           /**< Wake Up Message Buffer Register for C/S, array offset: 0xB40, array step: 0x10 */\n    __I  uint32_t WMBn_ID;                           /**< Wake Up Message Buffer Register for ID, array offset: 0xB44, array step: 0x10 */\n    __I  uint32_t WMBn_D03;                          /**< Wake Up Message Buffer Register for Data 0-3, array offset: 0xB48, array step: 0x10 */\n    __I  uint32_t WMBn_D47;                          /**< Wake Up Message Buffer Register Data 4-7, array offset: 0xB4C, array step: 0x10 */\n  } WMB[CAN_WMB_COUNT];\n       uint8_t RESERVED_8[128];\n  __IO uint32_t FDCTRL;                            /**< CAN FD Control Register, offset: 0xC00 */\n  __IO uint32_t FDCBT;                             /**< CAN FD Bit Timing Register, offset: 0xC04 */\n  __I  uint32_t FDCRC;                             /**< CAN FD CRC Register, offset: 0xC08 */\n} CAN_Type, *CAN_MemMapPtr;\n\n /** Number of instances of the CAN module. */\n#define CAN_INSTANCE_COUNT                       (3u)\n\n\n/* CAN - Peripheral instance base addresses */\n/** Peripheral CAN0 base address */\n#define CAN0_BASE                                (0x40024000u)\n/** Peripheral CAN0 base pointer */\n#define CAN0                                     ((CAN_Type *)CAN0_BASE)\n/** Peripheral CAN1 base address */\n#define CAN1_BASE                                (0x40025000u)\n/** Peripheral CAN1 base pointer */\n#define CAN1                                     ((CAN_Type *)CAN1_BASE)\n/** Peripheral CAN2 base address */\n#define CAN2_BASE                                (0x4002B000u)\n/** Peripheral CAN2 base pointer */\n#define CAN2                                     ((CAN_Type *)CAN2_BASE)\n/** Array initializer of CAN peripheral base addresses */\n#define CAN_BASE_ADDRS                           { CAN0_BASE, CAN1_BASE, CAN2_BASE }\n/** Array initializer of CAN peripheral base pointers */\n#define CAN_BASE_PTRS                            { CAN0, CAN1, CAN2 }\n /** Number of interrupt vector arrays for the CAN module. */\n#define CAN_IRQS_ARR_COUNT                       (7u)\n /** Number of interrupt channels for the Rx_Warning type of CAN module. */\n#define CAN_Rx_Warning_IRQS_CH_COUNT             (1u)\n /** Number of interrupt channels for the Tx_Warning type of CAN module. */\n#define CAN_Tx_Warning_IRQS_CH_COUNT             (1u)\n /** Number of interrupt channels for the Wake_Up type of CAN module. */\n#define CAN_Wake_Up_IRQS_CH_COUNT                (1u)\n /** Number of interrupt channels for the Error type of CAN module. */\n#define CAN_Error_IRQS_CH_COUNT                  (1u)\n /** Number of interrupt channels for the Bus_Off type of CAN module. */\n#define CAN_Bus_Off_IRQS_CH_COUNT                (1u)\n /** Number of interrupt channels for the ORed_0_15_MB type of CAN module. */\n#define CAN_ORed_0_15_MB_IRQS_CH_COUNT           (1u)\n /** Number of interrupt channels for the ORed_16_31_MB type of CAN module. */\n#define CAN_ORed_16_31_MB_IRQS_CH_COUNT          (1u)\n/** Interrupt vectors for the CAN peripheral type */\n#define CAN_Rx_Warning_IRQS                      { CAN0_ORed_IRQn, CAN1_ORed_IRQn, CAN2_ORed_IRQn }\n#define CAN_Tx_Warning_IRQS                      { CAN0_ORed_IRQn, CAN1_ORed_IRQn, CAN2_ORed_IRQn }\n#define CAN_Wake_Up_IRQS                         { CAN0_Wake_Up_IRQn, NotAvail_IRQn, NotAvail_IRQn }\n#define CAN_Error_IRQS                           { CAN0_Error_IRQn, CAN1_Error_IRQn, CAN2_Error_IRQn }\n#define CAN_Bus_Off_IRQS                         { CAN0_ORed_IRQn, CAN1_ORed_IRQn, CAN2_ORed_IRQn }\n#define CAN_ORed_0_15_MB_IRQS                    { CAN0_ORed_0_15_MB_IRQn, CAN1_ORed_0_15_MB_IRQn, CAN2_ORed_0_15_MB_IRQn }\n#define CAN_ORed_16_31_MB_IRQS                   { CAN0_ORed_16_31_MB_IRQn, NotAvail_IRQn, NotAvail_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- CAN Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup CAN_Register_Masks CAN Register Masks\n * @{\n */\n\n/* MCR Bit Fields */\n#define CAN_MCR_MAXMB_MASK                       0x7Fu\n#define CAN_MCR_MAXMB_SHIFT                      0u\n#define CAN_MCR_MAXMB_WIDTH                      7u\n#define CAN_MCR_MAXMB(x)                         (((uint32_t)(((uint32_t)(x))<<CAN_MCR_MAXMB_SHIFT))&CAN_MCR_MAXMB_MASK)\n#define CAN_MCR_IDAM_MASK                        0x300u\n#define CAN_MCR_IDAM_SHIFT                       8u\n#define CAN_MCR_IDAM_WIDTH                       2u\n#define CAN_MCR_IDAM(x)                          (((uint32_t)(((uint32_t)(x))<<CAN_MCR_IDAM_SHIFT))&CAN_MCR_IDAM_MASK)\n#define CAN_MCR_FDEN_MASK                        0x800u\n#define CAN_MCR_FDEN_SHIFT                       11u\n#define CAN_MCR_FDEN_WIDTH                       1u\n#define CAN_MCR_FDEN(x)                          (((uint32_t)(((uint32_t)(x))<<CAN_MCR_FDEN_SHIFT))&CAN_MCR_FDEN_MASK)\n#define CAN_MCR_AEN_MASK                         0x1000u\n#define CAN_MCR_AEN_SHIFT                        12u\n#define CAN_MCR_AEN_WIDTH                        1u\n#define CAN_MCR_AEN(x)                           (((uint32_t)(((uint32_t)(x))<<CAN_MCR_AEN_SHIFT))&CAN_MCR_AEN_MASK)\n#define CAN_MCR_LPRIOEN_MASK                     0x2000u\n#define CAN_MCR_LPRIOEN_SHIFT                    13u\n#define CAN_MCR_LPRIOEN_WIDTH                    1u\n#define CAN_MCR_LPRIOEN(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_MCR_LPRIOEN_SHIFT))&CAN_MCR_LPRIOEN_MASK)\n#define CAN_MCR_PNET_EN_MASK                     0x4000u\n#define CAN_MCR_PNET_EN_SHIFT                    14u\n#define CAN_MCR_PNET_EN_WIDTH                    1u\n#define CAN_MCR_PNET_EN(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_MCR_PNET_EN_SHIFT))&CAN_MCR_PNET_EN_MASK)\n#define CAN_MCR_DMA_MASK                         0x8000u\n#define CAN_MCR_DMA_SHIFT                        15u\n#define CAN_MCR_DMA_WIDTH                        1u\n#define CAN_MCR_DMA(x)                           (((uint32_t)(((uint32_t)(x))<<CAN_MCR_DMA_SHIFT))&CAN_MCR_DMA_MASK)\n#define CAN_MCR_IRMQ_MASK                        0x10000u\n#define CAN_MCR_IRMQ_SHIFT                       16u\n#define CAN_MCR_IRMQ_WIDTH                       1u\n#define CAN_MCR_IRMQ(x)                          (((uint32_t)(((uint32_t)(x))<<CAN_MCR_IRMQ_SHIFT))&CAN_MCR_IRMQ_MASK)\n#define CAN_MCR_SRXDIS_MASK                      0x20000u\n#define CAN_MCR_SRXDIS_SHIFT                     17u\n#define CAN_MCR_SRXDIS_WIDTH                     1u\n#define CAN_MCR_SRXDIS(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_MCR_SRXDIS_SHIFT))&CAN_MCR_SRXDIS_MASK)\n#define CAN_MCR_LPMACK_MASK                      0x100000u\n#define CAN_MCR_LPMACK_SHIFT                     20u\n#define CAN_MCR_LPMACK_WIDTH                     1u\n#define CAN_MCR_LPMACK(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_MCR_LPMACK_SHIFT))&CAN_MCR_LPMACK_MASK)\n#define CAN_MCR_WRNEN_MASK                       0x200000u\n#define CAN_MCR_WRNEN_SHIFT                      21u\n#define CAN_MCR_WRNEN_WIDTH                      1u\n#define CAN_MCR_WRNEN(x)                         (((uint32_t)(((uint32_t)(x))<<CAN_MCR_WRNEN_SHIFT))&CAN_MCR_WRNEN_MASK)\n#define CAN_MCR_SUPV_MASK                        0x800000u\n#define CAN_MCR_SUPV_SHIFT                       23u\n#define CAN_MCR_SUPV_WIDTH                       1u\n#define CAN_MCR_SUPV(x)                          (((uint32_t)(((uint32_t)(x))<<CAN_MCR_SUPV_SHIFT))&CAN_MCR_SUPV_MASK)\n#define CAN_MCR_FRZACK_MASK                      0x1000000u\n#define CAN_MCR_FRZACK_SHIFT                     24u\n#define CAN_MCR_FRZACK_WIDTH                     1u\n#define CAN_MCR_FRZACK(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_MCR_FRZACK_SHIFT))&CAN_MCR_FRZACK_MASK)\n#define CAN_MCR_SOFTRST_MASK                     0x2000000u\n#define CAN_MCR_SOFTRST_SHIFT                    25u\n#define CAN_MCR_SOFTRST_WIDTH                    1u\n#define CAN_MCR_SOFTRST(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_MCR_SOFTRST_SHIFT))&CAN_MCR_SOFTRST_MASK)\n#define CAN_MCR_NOTRDY_MASK                      0x8000000u\n#define CAN_MCR_NOTRDY_SHIFT                     27u\n#define CAN_MCR_NOTRDY_WIDTH                     1u\n#define CAN_MCR_NOTRDY(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_MCR_NOTRDY_SHIFT))&CAN_MCR_NOTRDY_MASK)\n#define CAN_MCR_HALT_MASK                        0x10000000u\n#define CAN_MCR_HALT_SHIFT                       28u\n#define CAN_MCR_HALT_WIDTH                       1u\n#define CAN_MCR_HALT(x)                          (((uint32_t)(((uint32_t)(x))<<CAN_MCR_HALT_SHIFT))&CAN_MCR_HALT_MASK)\n#define CAN_MCR_RFEN_MASK                        0x20000000u\n#define CAN_MCR_RFEN_SHIFT                       29u\n#define CAN_MCR_RFEN_WIDTH                       1u\n#define CAN_MCR_RFEN(x)                          (((uint32_t)(((uint32_t)(x))<<CAN_MCR_RFEN_SHIFT))&CAN_MCR_RFEN_MASK)\n#define CAN_MCR_FRZ_MASK                         0x40000000u\n#define CAN_MCR_FRZ_SHIFT                        30u\n#define CAN_MCR_FRZ_WIDTH                        1u\n#define CAN_MCR_FRZ(x)                           (((uint32_t)(((uint32_t)(x))<<CAN_MCR_FRZ_SHIFT))&CAN_MCR_FRZ_MASK)\n#define CAN_MCR_MDIS_MASK                        0x80000000u\n#define CAN_MCR_MDIS_SHIFT                       31u\n#define CAN_MCR_MDIS_WIDTH                       1u\n#define CAN_MCR_MDIS(x)                          (((uint32_t)(((uint32_t)(x))<<CAN_MCR_MDIS_SHIFT))&CAN_MCR_MDIS_MASK)\n/* CTRL1 Bit Fields */\n#define CAN_CTRL1_PROPSEG_MASK                   0x7u\n#define CAN_CTRL1_PROPSEG_SHIFT                  0u\n#define CAN_CTRL1_PROPSEG_WIDTH                  3u\n#define CAN_CTRL1_PROPSEG(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_PROPSEG_SHIFT))&CAN_CTRL1_PROPSEG_MASK)\n#define CAN_CTRL1_LOM_MASK                       0x8u\n#define CAN_CTRL1_LOM_SHIFT                      3u\n#define CAN_CTRL1_LOM_WIDTH                      1u\n#define CAN_CTRL1_LOM(x)                         (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_LOM_SHIFT))&CAN_CTRL1_LOM_MASK)\n#define CAN_CTRL1_LBUF_MASK                      0x10u\n#define CAN_CTRL1_LBUF_SHIFT                     4u\n#define CAN_CTRL1_LBUF_WIDTH                     1u\n#define CAN_CTRL1_LBUF(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_LBUF_SHIFT))&CAN_CTRL1_LBUF_MASK)\n#define CAN_CTRL1_TSYN_MASK                      0x20u\n#define CAN_CTRL1_TSYN_SHIFT                     5u\n#define CAN_CTRL1_TSYN_WIDTH                     1u\n#define CAN_CTRL1_TSYN(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_TSYN_SHIFT))&CAN_CTRL1_TSYN_MASK)\n#define CAN_CTRL1_BOFFREC_MASK                   0x40u\n#define CAN_CTRL1_BOFFREC_SHIFT                  6u\n#define CAN_CTRL1_BOFFREC_WIDTH                  1u\n#define CAN_CTRL1_BOFFREC(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_BOFFREC_SHIFT))&CAN_CTRL1_BOFFREC_MASK)\n#define CAN_CTRL1_SMP_MASK                       0x80u\n#define CAN_CTRL1_SMP_SHIFT                      7u\n#define CAN_CTRL1_SMP_WIDTH                      1u\n#define CAN_CTRL1_SMP(x)                         (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_SMP_SHIFT))&CAN_CTRL1_SMP_MASK)\n#define CAN_CTRL1_RWRNMSK_MASK                   0x400u\n#define CAN_CTRL1_RWRNMSK_SHIFT                  10u\n#define CAN_CTRL1_RWRNMSK_WIDTH                  1u\n#define CAN_CTRL1_RWRNMSK(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_RWRNMSK_SHIFT))&CAN_CTRL1_RWRNMSK_MASK)\n#define CAN_CTRL1_TWRNMSK_MASK                   0x800u\n#define CAN_CTRL1_TWRNMSK_SHIFT                  11u\n#define CAN_CTRL1_TWRNMSK_WIDTH                  1u\n#define CAN_CTRL1_TWRNMSK(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_TWRNMSK_SHIFT))&CAN_CTRL1_TWRNMSK_MASK)\n#define CAN_CTRL1_LPB_MASK                       0x1000u\n#define CAN_CTRL1_LPB_SHIFT                      12u\n#define CAN_CTRL1_LPB_WIDTH                      1u\n#define CAN_CTRL1_LPB(x)                         (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_LPB_SHIFT))&CAN_CTRL1_LPB_MASK)\n#define CAN_CTRL1_CLKSRC_MASK                    0x2000u\n#define CAN_CTRL1_CLKSRC_SHIFT                   13u\n#define CAN_CTRL1_CLKSRC_WIDTH                   1u\n#define CAN_CTRL1_CLKSRC(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_CLKSRC_SHIFT))&CAN_CTRL1_CLKSRC_MASK)\n#define CAN_CTRL1_ERRMSK_MASK                    0x4000u\n#define CAN_CTRL1_ERRMSK_SHIFT                   14u\n#define CAN_CTRL1_ERRMSK_WIDTH                   1u\n#define CAN_CTRL1_ERRMSK(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_ERRMSK_SHIFT))&CAN_CTRL1_ERRMSK_MASK)\n#define CAN_CTRL1_BOFFMSK_MASK                   0x8000u\n#define CAN_CTRL1_BOFFMSK_SHIFT                  15u\n#define CAN_CTRL1_BOFFMSK_WIDTH                  1u\n#define CAN_CTRL1_BOFFMSK(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_BOFFMSK_SHIFT))&CAN_CTRL1_BOFFMSK_MASK)\n#define CAN_CTRL1_PSEG2_MASK                     0x70000u\n#define CAN_CTRL1_PSEG2_SHIFT                    16u\n#define CAN_CTRL1_PSEG2_WIDTH                    3u\n#define CAN_CTRL1_PSEG2(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_PSEG2_SHIFT))&CAN_CTRL1_PSEG2_MASK)\n#define CAN_CTRL1_PSEG1_MASK                     0x380000u\n#define CAN_CTRL1_PSEG1_SHIFT                    19u\n#define CAN_CTRL1_PSEG1_WIDTH                    3u\n#define CAN_CTRL1_PSEG1(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_PSEG1_SHIFT))&CAN_CTRL1_PSEG1_MASK)\n#define CAN_CTRL1_RJW_MASK                       0xC00000u\n#define CAN_CTRL1_RJW_SHIFT                      22u\n#define CAN_CTRL1_RJW_WIDTH                      2u\n#define CAN_CTRL1_RJW(x)                         (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_RJW_SHIFT))&CAN_CTRL1_RJW_MASK)\n#define CAN_CTRL1_PRESDIV_MASK                   0xFF000000u\n#define CAN_CTRL1_PRESDIV_SHIFT                  24u\n#define CAN_CTRL1_PRESDIV_WIDTH                  8u\n#define CAN_CTRL1_PRESDIV(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_PRESDIV_SHIFT))&CAN_CTRL1_PRESDIV_MASK)\n/* TIMER Bit Fields */\n#define CAN_TIMER_TIMER_MASK                     0xFFFFu\n#define CAN_TIMER_TIMER_SHIFT                    0u\n#define CAN_TIMER_TIMER_WIDTH                    16u\n#define CAN_TIMER_TIMER(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_TIMER_TIMER_SHIFT))&CAN_TIMER_TIMER_MASK)\n/* RXMGMASK Bit Fields */\n#define CAN_RXMGMASK_MG_MASK                     0xFFFFFFFFu\n#define CAN_RXMGMASK_MG_SHIFT                    0u\n#define CAN_RXMGMASK_MG_WIDTH                    32u\n#define CAN_RXMGMASK_MG(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_RXMGMASK_MG_SHIFT))&CAN_RXMGMASK_MG_MASK)\n/* RX14MASK Bit Fields */\n#define CAN_RX14MASK_RX14M_MASK                  0xFFFFFFFFu\n#define CAN_RX14MASK_RX14M_SHIFT                 0u\n#define CAN_RX14MASK_RX14M_WIDTH                 32u\n#define CAN_RX14MASK_RX14M(x)                    (((uint32_t)(((uint32_t)(x))<<CAN_RX14MASK_RX14M_SHIFT))&CAN_RX14MASK_RX14M_MASK)\n/* RX15MASK Bit Fields */\n#define CAN_RX15MASK_RX15M_MASK                  0xFFFFFFFFu\n#define CAN_RX15MASK_RX15M_SHIFT                 0u\n#define CAN_RX15MASK_RX15M_WIDTH                 32u\n#define CAN_RX15MASK_RX15M(x)                    (((uint32_t)(((uint32_t)(x))<<CAN_RX15MASK_RX15M_SHIFT))&CAN_RX15MASK_RX15M_MASK)\n/* ECR Bit Fields */\n#define CAN_ECR_TXERRCNT_MASK                    0xFFu\n#define CAN_ECR_TXERRCNT_SHIFT                   0u\n#define CAN_ECR_TXERRCNT_WIDTH                   8u\n#define CAN_ECR_TXERRCNT(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_ECR_TXERRCNT_SHIFT))&CAN_ECR_TXERRCNT_MASK)\n#define CAN_ECR_RXERRCNT_MASK                    0xFF00u\n#define CAN_ECR_RXERRCNT_SHIFT                   8u\n#define CAN_ECR_RXERRCNT_WIDTH                   8u\n#define CAN_ECR_RXERRCNT(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_ECR_RXERRCNT_SHIFT))&CAN_ECR_RXERRCNT_MASK)\n#define CAN_ECR_TXERRCNT_FAST_MASK               0xFF0000u\n#define CAN_ECR_TXERRCNT_FAST_SHIFT              16u\n#define CAN_ECR_TXERRCNT_FAST_WIDTH              8u\n#define CAN_ECR_TXERRCNT_FAST(x)                 (((uint32_t)(((uint32_t)(x))<<CAN_ECR_TXERRCNT_FAST_SHIFT))&CAN_ECR_TXERRCNT_FAST_MASK)\n#define CAN_ECR_RXERRCNT_FAST_MASK               0xFF000000u\n#define CAN_ECR_RXERRCNT_FAST_SHIFT              24u\n#define CAN_ECR_RXERRCNT_FAST_WIDTH              8u\n#define CAN_ECR_RXERRCNT_FAST(x)                 (((uint32_t)(((uint32_t)(x))<<CAN_ECR_RXERRCNT_FAST_SHIFT))&CAN_ECR_RXERRCNT_FAST_MASK)\n/* ESR1 Bit Fields */\n#define CAN_ESR1_ERRINT_MASK                     0x2u\n#define CAN_ESR1_ERRINT_SHIFT                    1u\n#define CAN_ESR1_ERRINT_WIDTH                    1u\n#define CAN_ESR1_ERRINT(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_ERRINT_SHIFT))&CAN_ESR1_ERRINT_MASK)\n#define CAN_ESR1_BOFFINT_MASK                    0x4u\n#define CAN_ESR1_BOFFINT_SHIFT                   2u\n#define CAN_ESR1_BOFFINT_WIDTH                   1u\n#define CAN_ESR1_BOFFINT(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_BOFFINT_SHIFT))&CAN_ESR1_BOFFINT_MASK)\n#define CAN_ESR1_RX_MASK                         0x8u\n#define CAN_ESR1_RX_SHIFT                        3u\n#define CAN_ESR1_RX_WIDTH                        1u\n#define CAN_ESR1_RX(x)                           (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_RX_SHIFT))&CAN_ESR1_RX_MASK)\n#define CAN_ESR1_FLTCONF_MASK                    0x30u\n#define CAN_ESR1_FLTCONF_SHIFT                   4u\n#define CAN_ESR1_FLTCONF_WIDTH                   2u\n#define CAN_ESR1_FLTCONF(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_FLTCONF_SHIFT))&CAN_ESR1_FLTCONF_MASK)\n#define CAN_ESR1_TX_MASK                         0x40u\n#define CAN_ESR1_TX_SHIFT                        6u\n#define CAN_ESR1_TX_WIDTH                        1u\n#define CAN_ESR1_TX(x)                           (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_TX_SHIFT))&CAN_ESR1_TX_MASK)\n#define CAN_ESR1_IDLE_MASK                       0x80u\n#define CAN_ESR1_IDLE_SHIFT                      7u\n#define CAN_ESR1_IDLE_WIDTH                      1u\n#define CAN_ESR1_IDLE(x)                         (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_IDLE_SHIFT))&CAN_ESR1_IDLE_MASK)\n#define CAN_ESR1_RXWRN_MASK                      0x100u\n#define CAN_ESR1_RXWRN_SHIFT                     8u\n#define CAN_ESR1_RXWRN_WIDTH                     1u\n#define CAN_ESR1_RXWRN(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_RXWRN_SHIFT))&CAN_ESR1_RXWRN_MASK)\n#define CAN_ESR1_TXWRN_MASK                      0x200u\n#define CAN_ESR1_TXWRN_SHIFT                     9u\n#define CAN_ESR1_TXWRN_WIDTH                     1u\n#define CAN_ESR1_TXWRN(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_TXWRN_SHIFT))&CAN_ESR1_TXWRN_MASK)\n#define CAN_ESR1_STFERR_MASK                     0x400u\n#define CAN_ESR1_STFERR_SHIFT                    10u\n#define CAN_ESR1_STFERR_WIDTH                    1u\n#define CAN_ESR1_STFERR(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_STFERR_SHIFT))&CAN_ESR1_STFERR_MASK)\n#define CAN_ESR1_FRMERR_MASK                     0x800u\n#define CAN_ESR1_FRMERR_SHIFT                    11u\n#define CAN_ESR1_FRMERR_WIDTH                    1u\n#define CAN_ESR1_FRMERR(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_FRMERR_SHIFT))&CAN_ESR1_FRMERR_MASK)\n#define CAN_ESR1_CRCERR_MASK                     0x1000u\n#define CAN_ESR1_CRCERR_SHIFT                    12u\n#define CAN_ESR1_CRCERR_WIDTH                    1u\n#define CAN_ESR1_CRCERR(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_CRCERR_SHIFT))&CAN_ESR1_CRCERR_MASK)\n#define CAN_ESR1_ACKERR_MASK                     0x2000u\n#define CAN_ESR1_ACKERR_SHIFT                    13u\n#define CAN_ESR1_ACKERR_WIDTH                    1u\n#define CAN_ESR1_ACKERR(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_ACKERR_SHIFT))&CAN_ESR1_ACKERR_MASK)\n#define CAN_ESR1_BIT0ERR_MASK                    0x4000u\n#define CAN_ESR1_BIT0ERR_SHIFT                   14u\n#define CAN_ESR1_BIT0ERR_WIDTH                   1u\n#define CAN_ESR1_BIT0ERR(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_BIT0ERR_SHIFT))&CAN_ESR1_BIT0ERR_MASK)\n#define CAN_ESR1_BIT1ERR_MASK                    0x8000u\n#define CAN_ESR1_BIT1ERR_SHIFT                   15u\n#define CAN_ESR1_BIT1ERR_WIDTH                   1u\n#define CAN_ESR1_BIT1ERR(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_BIT1ERR_SHIFT))&CAN_ESR1_BIT1ERR_MASK)\n#define CAN_ESR1_RWRNINT_MASK                    0x10000u\n#define CAN_ESR1_RWRNINT_SHIFT                   16u\n#define CAN_ESR1_RWRNINT_WIDTH                   1u\n#define CAN_ESR1_RWRNINT(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_RWRNINT_SHIFT))&CAN_ESR1_RWRNINT_MASK)\n#define CAN_ESR1_TWRNINT_MASK                    0x20000u\n#define CAN_ESR1_TWRNINT_SHIFT                   17u\n#define CAN_ESR1_TWRNINT_WIDTH                   1u\n#define CAN_ESR1_TWRNINT(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_TWRNINT_SHIFT))&CAN_ESR1_TWRNINT_MASK)\n#define CAN_ESR1_SYNCH_MASK                      0x40000u\n#define CAN_ESR1_SYNCH_SHIFT                     18u\n#define CAN_ESR1_SYNCH_WIDTH                     1u\n#define CAN_ESR1_SYNCH(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_SYNCH_SHIFT))&CAN_ESR1_SYNCH_MASK)\n#define CAN_ESR1_BOFFDONEINT_MASK                0x80000u\n#define CAN_ESR1_BOFFDONEINT_SHIFT               19u\n#define CAN_ESR1_BOFFDONEINT_WIDTH               1u\n#define CAN_ESR1_BOFFDONEINT(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_BOFFDONEINT_SHIFT))&CAN_ESR1_BOFFDONEINT_MASK)\n#define CAN_ESR1_ERRINT_FAST_MASK                0x100000u\n#define CAN_ESR1_ERRINT_FAST_SHIFT               20u\n#define CAN_ESR1_ERRINT_FAST_WIDTH               1u\n#define CAN_ESR1_ERRINT_FAST(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_ERRINT_FAST_SHIFT))&CAN_ESR1_ERRINT_FAST_MASK)\n#define CAN_ESR1_ERROVR_MASK                     0x200000u\n#define CAN_ESR1_ERROVR_SHIFT                    21u\n#define CAN_ESR1_ERROVR_WIDTH                    1u\n#define CAN_ESR1_ERROVR(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_ERROVR_SHIFT))&CAN_ESR1_ERROVR_MASK)\n#define CAN_ESR1_STFERR_FAST_MASK                0x4000000u\n#define CAN_ESR1_STFERR_FAST_SHIFT               26u\n#define CAN_ESR1_STFERR_FAST_WIDTH               1u\n#define CAN_ESR1_STFERR_FAST(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_STFERR_FAST_SHIFT))&CAN_ESR1_STFERR_FAST_MASK)\n#define CAN_ESR1_FRMERR_FAST_MASK                0x8000000u\n#define CAN_ESR1_FRMERR_FAST_SHIFT               27u\n#define CAN_ESR1_FRMERR_FAST_WIDTH               1u\n#define CAN_ESR1_FRMERR_FAST(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_FRMERR_FAST_SHIFT))&CAN_ESR1_FRMERR_FAST_MASK)\n#define CAN_ESR1_CRCERR_FAST_MASK                0x10000000u\n#define CAN_ESR1_CRCERR_FAST_SHIFT               28u\n#define CAN_ESR1_CRCERR_FAST_WIDTH               1u\n#define CAN_ESR1_CRCERR_FAST(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_CRCERR_FAST_SHIFT))&CAN_ESR1_CRCERR_FAST_MASK)\n#define CAN_ESR1_BIT0ERR_FAST_MASK               0x40000000u\n#define CAN_ESR1_BIT0ERR_FAST_SHIFT              30u\n#define CAN_ESR1_BIT0ERR_FAST_WIDTH              1u\n#define CAN_ESR1_BIT0ERR_FAST(x)                 (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_BIT0ERR_FAST_SHIFT))&CAN_ESR1_BIT0ERR_FAST_MASK)\n#define CAN_ESR1_BIT1ERR_FAST_MASK               0x80000000u\n#define CAN_ESR1_BIT1ERR_FAST_SHIFT              31u\n#define CAN_ESR1_BIT1ERR_FAST_WIDTH              1u\n#define CAN_ESR1_BIT1ERR_FAST(x)                 (((uint32_t)(((uint32_t)(x))<<CAN_ESR1_BIT1ERR_FAST_SHIFT))&CAN_ESR1_BIT1ERR_FAST_MASK)\n/* IMASK1 Bit Fields */\n#define CAN_IMASK1_BUF31TO0M_MASK                0xFFFFFFFFu\n#define CAN_IMASK1_BUF31TO0M_SHIFT               0u\n#define CAN_IMASK1_BUF31TO0M_WIDTH               32u\n#define CAN_IMASK1_BUF31TO0M(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_IMASK1_BUF31TO0M_SHIFT))&CAN_IMASK1_BUF31TO0M_MASK)\n/* IFLAG1 Bit Fields */\n#define CAN_IFLAG1_BUF0I_MASK                    0x1u\n#define CAN_IFLAG1_BUF0I_SHIFT                   0u\n#define CAN_IFLAG1_BUF0I_WIDTH                   1u\n#define CAN_IFLAG1_BUF0I(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_IFLAG1_BUF0I_SHIFT))&CAN_IFLAG1_BUF0I_MASK)\n#define CAN_IFLAG1_BUF4TO1I_MASK                 0x1Eu\n#define CAN_IFLAG1_BUF4TO1I_SHIFT                1u\n#define CAN_IFLAG1_BUF4TO1I_WIDTH                4u\n#define CAN_IFLAG1_BUF4TO1I(x)                   (((uint32_t)(((uint32_t)(x))<<CAN_IFLAG1_BUF4TO1I_SHIFT))&CAN_IFLAG1_BUF4TO1I_MASK)\n#define CAN_IFLAG1_BUF5I_MASK                    0x20u\n#define CAN_IFLAG1_BUF5I_SHIFT                   5u\n#define CAN_IFLAG1_BUF5I_WIDTH                   1u\n#define CAN_IFLAG1_BUF5I(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_IFLAG1_BUF5I_SHIFT))&CAN_IFLAG1_BUF5I_MASK)\n#define CAN_IFLAG1_BUF6I_MASK                    0x40u\n#define CAN_IFLAG1_BUF6I_SHIFT                   6u\n#define CAN_IFLAG1_BUF6I_WIDTH                   1u\n#define CAN_IFLAG1_BUF6I(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_IFLAG1_BUF6I_SHIFT))&CAN_IFLAG1_BUF6I_MASK)\n#define CAN_IFLAG1_BUF7I_MASK                    0x80u\n#define CAN_IFLAG1_BUF7I_SHIFT                   7u\n#define CAN_IFLAG1_BUF7I_WIDTH                   1u\n#define CAN_IFLAG1_BUF7I(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_IFLAG1_BUF7I_SHIFT))&CAN_IFLAG1_BUF7I_MASK)\n#define CAN_IFLAG1_BUF31TO8I_MASK                0xFFFFFF00u\n#define CAN_IFLAG1_BUF31TO8I_SHIFT               8u\n#define CAN_IFLAG1_BUF31TO8I_WIDTH               24u\n#define CAN_IFLAG1_BUF31TO8I(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_IFLAG1_BUF31TO8I_SHIFT))&CAN_IFLAG1_BUF31TO8I_MASK)\n/* CTRL2 Bit Fields */\n#define CAN_CTRL2_EDFLTDIS_MASK                  0x800u\n#define CAN_CTRL2_EDFLTDIS_SHIFT                 11u\n#define CAN_CTRL2_EDFLTDIS_WIDTH                 1u\n#define CAN_CTRL2_EDFLTDIS(x)                    (((uint32_t)(((uint32_t)(x))<<CAN_CTRL2_EDFLTDIS_SHIFT))&CAN_CTRL2_EDFLTDIS_MASK)\n#define CAN_CTRL2_ISOCANFDEN_MASK                0x1000u\n#define CAN_CTRL2_ISOCANFDEN_SHIFT               12u\n#define CAN_CTRL2_ISOCANFDEN_WIDTH               1u\n#define CAN_CTRL2_ISOCANFDEN(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_CTRL2_ISOCANFDEN_SHIFT))&CAN_CTRL2_ISOCANFDEN_MASK)\n#define CAN_CTRL2_PREXCEN_MASK                   0x4000u\n#define CAN_CTRL2_PREXCEN_SHIFT                  14u\n#define CAN_CTRL2_PREXCEN_WIDTH                  1u\n#define CAN_CTRL2_PREXCEN(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_CTRL2_PREXCEN_SHIFT))&CAN_CTRL2_PREXCEN_MASK)\n#define CAN_CTRL2_TIMER_SRC_MASK                 0x8000u\n#define CAN_CTRL2_TIMER_SRC_SHIFT                15u\n#define CAN_CTRL2_TIMER_SRC_WIDTH                1u\n#define CAN_CTRL2_TIMER_SRC(x)                   (((uint32_t)(((uint32_t)(x))<<CAN_CTRL2_TIMER_SRC_SHIFT))&CAN_CTRL2_TIMER_SRC_MASK)\n#define CAN_CTRL2_EACEN_MASK                     0x10000u\n#define CAN_CTRL2_EACEN_SHIFT                    16u\n#define CAN_CTRL2_EACEN_WIDTH                    1u\n#define CAN_CTRL2_EACEN(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_CTRL2_EACEN_SHIFT))&CAN_CTRL2_EACEN_MASK)\n#define CAN_CTRL2_RRS_MASK                       0x20000u\n#define CAN_CTRL2_RRS_SHIFT                      17u\n#define CAN_CTRL2_RRS_WIDTH                      1u\n#define CAN_CTRL2_RRS(x)                         (((uint32_t)(((uint32_t)(x))<<CAN_CTRL2_RRS_SHIFT))&CAN_CTRL2_RRS_MASK)\n#define CAN_CTRL2_MRP_MASK                       0x40000u\n#define CAN_CTRL2_MRP_SHIFT                      18u\n#define CAN_CTRL2_MRP_WIDTH                      1u\n#define CAN_CTRL2_MRP(x)                         (((uint32_t)(((uint32_t)(x))<<CAN_CTRL2_MRP_SHIFT))&CAN_CTRL2_MRP_MASK)\n#define CAN_CTRL2_TASD_MASK                      0xF80000u\n#define CAN_CTRL2_TASD_SHIFT                     19u\n#define CAN_CTRL2_TASD_WIDTH                     5u\n#define CAN_CTRL2_TASD(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_CTRL2_TASD_SHIFT))&CAN_CTRL2_TASD_MASK)\n#define CAN_CTRL2_RFFN_MASK                      0xF000000u\n#define CAN_CTRL2_RFFN_SHIFT                     24u\n#define CAN_CTRL2_RFFN_WIDTH                     4u\n#define CAN_CTRL2_RFFN(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_CTRL2_RFFN_SHIFT))&CAN_CTRL2_RFFN_MASK)\n#define CAN_CTRL2_BOFFDONEMSK_MASK               0x40000000u\n#define CAN_CTRL2_BOFFDONEMSK_SHIFT              30u\n#define CAN_CTRL2_BOFFDONEMSK_WIDTH              1u\n#define CAN_CTRL2_BOFFDONEMSK(x)                 (((uint32_t)(((uint32_t)(x))<<CAN_CTRL2_BOFFDONEMSK_SHIFT))&CAN_CTRL2_BOFFDONEMSK_MASK)\n#define CAN_CTRL2_ERRMSK_FAST_MASK               0x80000000u\n#define CAN_CTRL2_ERRMSK_FAST_SHIFT              31u\n#define CAN_CTRL2_ERRMSK_FAST_WIDTH              1u\n#define CAN_CTRL2_ERRMSK_FAST(x)                 (((uint32_t)(((uint32_t)(x))<<CAN_CTRL2_ERRMSK_FAST_SHIFT))&CAN_CTRL2_ERRMSK_FAST_MASK)\n/* ESR2 Bit Fields */\n#define CAN_ESR2_IMB_MASK                        0x2000u\n#define CAN_ESR2_IMB_SHIFT                       13u\n#define CAN_ESR2_IMB_WIDTH                       1u\n#define CAN_ESR2_IMB(x)                          (((uint32_t)(((uint32_t)(x))<<CAN_ESR2_IMB_SHIFT))&CAN_ESR2_IMB_MASK)\n#define CAN_ESR2_VPS_MASK                        0x4000u\n#define CAN_ESR2_VPS_SHIFT                       14u\n#define CAN_ESR2_VPS_WIDTH                       1u\n#define CAN_ESR2_VPS(x)                          (((uint32_t)(((uint32_t)(x))<<CAN_ESR2_VPS_SHIFT))&CAN_ESR2_VPS_MASK)\n#define CAN_ESR2_LPTM_MASK                       0x7F0000u\n#define CAN_ESR2_LPTM_SHIFT                      16u\n#define CAN_ESR2_LPTM_WIDTH                      7u\n#define CAN_ESR2_LPTM(x)                         (((uint32_t)(((uint32_t)(x))<<CAN_ESR2_LPTM_SHIFT))&CAN_ESR2_LPTM_MASK)\n/* CRCR Bit Fields */\n#define CAN_CRCR_TXCRC_MASK                      0x7FFFu\n#define CAN_CRCR_TXCRC_SHIFT                     0u\n#define CAN_CRCR_TXCRC_WIDTH                     15u\n#define CAN_CRCR_TXCRC(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_CRCR_TXCRC_SHIFT))&CAN_CRCR_TXCRC_MASK)\n#define CAN_CRCR_MBCRC_MASK                      0x7F0000u\n#define CAN_CRCR_MBCRC_SHIFT                     16u\n#define CAN_CRCR_MBCRC_WIDTH                     7u\n#define CAN_CRCR_MBCRC(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_CRCR_MBCRC_SHIFT))&CAN_CRCR_MBCRC_MASK)\n/* RXFGMASK Bit Fields */\n#define CAN_RXFGMASK_FGM_MASK                    0xFFFFFFFFu\n#define CAN_RXFGMASK_FGM_SHIFT                   0u\n#define CAN_RXFGMASK_FGM_WIDTH                   32u\n#define CAN_RXFGMASK_FGM(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_RXFGMASK_FGM_SHIFT))&CAN_RXFGMASK_FGM_MASK)\n/* RXFIR Bit Fields */\n#define CAN_RXFIR_IDHIT_MASK                     0x1FFu\n#define CAN_RXFIR_IDHIT_SHIFT                    0u\n#define CAN_RXFIR_IDHIT_WIDTH                    9u\n#define CAN_RXFIR_IDHIT(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_RXFIR_IDHIT_SHIFT))&CAN_RXFIR_IDHIT_MASK)\n/* CBT Bit Fields */\n#define CAN_CBT_EPSEG2_MASK                      0x1Fu\n#define CAN_CBT_EPSEG2_SHIFT                     0u\n#define CAN_CBT_EPSEG2_WIDTH                     5u\n#define CAN_CBT_EPSEG2(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_CBT_EPSEG2_SHIFT))&CAN_CBT_EPSEG2_MASK)\n#define CAN_CBT_EPSEG1_MASK                      0x3E0u\n#define CAN_CBT_EPSEG1_SHIFT                     5u\n#define CAN_CBT_EPSEG1_WIDTH                     5u\n#define CAN_CBT_EPSEG1(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_CBT_EPSEG1_SHIFT))&CAN_CBT_EPSEG1_MASK)\n#define CAN_CBT_EPROPSEG_MASK                    0xFC00u\n#define CAN_CBT_EPROPSEG_SHIFT                   10u\n#define CAN_CBT_EPROPSEG_WIDTH                   6u\n#define CAN_CBT_EPROPSEG(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_CBT_EPROPSEG_SHIFT))&CAN_CBT_EPROPSEG_MASK)\n#define CAN_CBT_ERJW_MASK                        0x1F0000u\n#define CAN_CBT_ERJW_SHIFT                       16u\n#define CAN_CBT_ERJW_WIDTH                       5u\n#define CAN_CBT_ERJW(x)                          (((uint32_t)(((uint32_t)(x))<<CAN_CBT_ERJW_SHIFT))&CAN_CBT_ERJW_MASK)\n#define CAN_CBT_EPRESDIV_MASK                    0x7FE00000u\n#define CAN_CBT_EPRESDIV_SHIFT                   21u\n#define CAN_CBT_EPRESDIV_WIDTH                   10u\n#define CAN_CBT_EPRESDIV(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_CBT_EPRESDIV_SHIFT))&CAN_CBT_EPRESDIV_MASK)\n#define CAN_CBT_BTF_MASK                         0x80000000u\n#define CAN_CBT_BTF_SHIFT                        31u\n#define CAN_CBT_BTF_WIDTH                        1u\n#define CAN_CBT_BTF(x)                           (((uint32_t)(((uint32_t)(x))<<CAN_CBT_BTF_SHIFT))&CAN_CBT_BTF_MASK)\n/* RAMn Bit Fields */\n#define CAN_RAMn_DATA_BYTE_3_MASK                0xFFu\n#define CAN_RAMn_DATA_BYTE_3_SHIFT               0u\n#define CAN_RAMn_DATA_BYTE_3_WIDTH               8u\n#define CAN_RAMn_DATA_BYTE_3(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_RAMn_DATA_BYTE_3_SHIFT))&CAN_RAMn_DATA_BYTE_3_MASK)\n#define CAN_RAMn_DATA_BYTE_2_MASK                0xFF00u\n#define CAN_RAMn_DATA_BYTE_2_SHIFT               8u\n#define CAN_RAMn_DATA_BYTE_2_WIDTH               8u\n#define CAN_RAMn_DATA_BYTE_2(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_RAMn_DATA_BYTE_2_SHIFT))&CAN_RAMn_DATA_BYTE_2_MASK)\n#define CAN_RAMn_DATA_BYTE_1_MASK                0xFF0000u\n#define CAN_RAMn_DATA_BYTE_1_SHIFT               16u\n#define CAN_RAMn_DATA_BYTE_1_WIDTH               8u\n#define CAN_RAMn_DATA_BYTE_1(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_RAMn_DATA_BYTE_1_SHIFT))&CAN_RAMn_DATA_BYTE_1_MASK)\n#define CAN_RAMn_DATA_BYTE_0_MASK                0xFF000000u\n#define CAN_RAMn_DATA_BYTE_0_SHIFT               24u\n#define CAN_RAMn_DATA_BYTE_0_WIDTH               8u\n#define CAN_RAMn_DATA_BYTE_0(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_RAMn_DATA_BYTE_0_SHIFT))&CAN_RAMn_DATA_BYTE_0_MASK)\n/* RXIMR Bit Fields */\n#define CAN_RXIMR_MI_MASK                        0xFFFFFFFFu\n#define CAN_RXIMR_MI_SHIFT                       0u\n#define CAN_RXIMR_MI_WIDTH                       32u\n#define CAN_RXIMR_MI(x)                          (((uint32_t)(((uint32_t)(x))<<CAN_RXIMR_MI_SHIFT))&CAN_RXIMR_MI_MASK)\n/* CTRL1_PN Bit Fields */\n#define CAN_CTRL1_PN_FCS_MASK                    0x3u\n#define CAN_CTRL1_PN_FCS_SHIFT                   0u\n#define CAN_CTRL1_PN_FCS_WIDTH                   2u\n#define CAN_CTRL1_PN_FCS(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_PN_FCS_SHIFT))&CAN_CTRL1_PN_FCS_MASK)\n#define CAN_CTRL1_PN_IDFS_MASK                   0xCu\n#define CAN_CTRL1_PN_IDFS_SHIFT                  2u\n#define CAN_CTRL1_PN_IDFS_WIDTH                  2u\n#define CAN_CTRL1_PN_IDFS(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_PN_IDFS_SHIFT))&CAN_CTRL1_PN_IDFS_MASK)\n#define CAN_CTRL1_PN_PLFS_MASK                   0x30u\n#define CAN_CTRL1_PN_PLFS_SHIFT                  4u\n#define CAN_CTRL1_PN_PLFS_WIDTH                  2u\n#define CAN_CTRL1_PN_PLFS(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_PN_PLFS_SHIFT))&CAN_CTRL1_PN_PLFS_MASK)\n#define CAN_CTRL1_PN_NMATCH_MASK                 0xFF00u\n#define CAN_CTRL1_PN_NMATCH_SHIFT                8u\n#define CAN_CTRL1_PN_NMATCH_WIDTH                8u\n#define CAN_CTRL1_PN_NMATCH(x)                   (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_PN_NMATCH_SHIFT))&CAN_CTRL1_PN_NMATCH_MASK)\n#define CAN_CTRL1_PN_WUMF_MSK_MASK               0x10000u\n#define CAN_CTRL1_PN_WUMF_MSK_SHIFT              16u\n#define CAN_CTRL1_PN_WUMF_MSK_WIDTH              1u\n#define CAN_CTRL1_PN_WUMF_MSK(x)                 (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_PN_WUMF_MSK_SHIFT))&CAN_CTRL1_PN_WUMF_MSK_MASK)\n#define CAN_CTRL1_PN_WTOF_MSK_MASK               0x20000u\n#define CAN_CTRL1_PN_WTOF_MSK_SHIFT              17u\n#define CAN_CTRL1_PN_WTOF_MSK_WIDTH              1u\n#define CAN_CTRL1_PN_WTOF_MSK(x)                 (((uint32_t)(((uint32_t)(x))<<CAN_CTRL1_PN_WTOF_MSK_SHIFT))&CAN_CTRL1_PN_WTOF_MSK_MASK)\n/* CTRL2_PN Bit Fields */\n#define CAN_CTRL2_PN_MATCHTO_MASK                0xFFFFu\n#define CAN_CTRL2_PN_MATCHTO_SHIFT               0u\n#define CAN_CTRL2_PN_MATCHTO_WIDTH               16u\n#define CAN_CTRL2_PN_MATCHTO(x)                  (((uint32_t)(((uint32_t)(x))<<CAN_CTRL2_PN_MATCHTO_SHIFT))&CAN_CTRL2_PN_MATCHTO_MASK)\n/* WU_MTC Bit Fields */\n#define CAN_WU_MTC_MCOUNTER_MASK                 0xFF00u\n#define CAN_WU_MTC_MCOUNTER_SHIFT                8u\n#define CAN_WU_MTC_MCOUNTER_WIDTH                8u\n#define CAN_WU_MTC_MCOUNTER(x)                   (((uint32_t)(((uint32_t)(x))<<CAN_WU_MTC_MCOUNTER_SHIFT))&CAN_WU_MTC_MCOUNTER_MASK)\n#define CAN_WU_MTC_WUMF_MASK                     0x10000u\n#define CAN_WU_MTC_WUMF_SHIFT                    16u\n#define CAN_WU_MTC_WUMF_WIDTH                    1u\n#define CAN_WU_MTC_WUMF(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_WU_MTC_WUMF_SHIFT))&CAN_WU_MTC_WUMF_MASK)\n#define CAN_WU_MTC_WTOF_MASK                     0x20000u\n#define CAN_WU_MTC_WTOF_SHIFT                    17u\n#define CAN_WU_MTC_WTOF_WIDTH                    1u\n#define CAN_WU_MTC_WTOF(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_WU_MTC_WTOF_SHIFT))&CAN_WU_MTC_WTOF_MASK)\n/* FLT_ID1 Bit Fields */\n#define CAN_FLT_ID1_FLT_ID1_MASK                 0x1FFFFFFFu\n#define CAN_FLT_ID1_FLT_ID1_SHIFT                0u\n#define CAN_FLT_ID1_FLT_ID1_WIDTH                29u\n#define CAN_FLT_ID1_FLT_ID1(x)                   (((uint32_t)(((uint32_t)(x))<<CAN_FLT_ID1_FLT_ID1_SHIFT))&CAN_FLT_ID1_FLT_ID1_MASK)\n#define CAN_FLT_ID1_FLT_RTR_MASK                 0x20000000u\n#define CAN_FLT_ID1_FLT_RTR_SHIFT                29u\n#define CAN_FLT_ID1_FLT_RTR_WIDTH                1u\n#define CAN_FLT_ID1_FLT_RTR(x)                   (((uint32_t)(((uint32_t)(x))<<CAN_FLT_ID1_FLT_RTR_SHIFT))&CAN_FLT_ID1_FLT_RTR_MASK)\n#define CAN_FLT_ID1_FLT_IDE_MASK                 0x40000000u\n#define CAN_FLT_ID1_FLT_IDE_SHIFT                30u\n#define CAN_FLT_ID1_FLT_IDE_WIDTH                1u\n#define CAN_FLT_ID1_FLT_IDE(x)                   (((uint32_t)(((uint32_t)(x))<<CAN_FLT_ID1_FLT_IDE_SHIFT))&CAN_FLT_ID1_FLT_IDE_MASK)\n/* FLT_DLC Bit Fields */\n#define CAN_FLT_DLC_FLT_DLC_HI_MASK              0xFu\n#define CAN_FLT_DLC_FLT_DLC_HI_SHIFT             0u\n#define CAN_FLT_DLC_FLT_DLC_HI_WIDTH             4u\n#define CAN_FLT_DLC_FLT_DLC_HI(x)                (((uint32_t)(((uint32_t)(x))<<CAN_FLT_DLC_FLT_DLC_HI_SHIFT))&CAN_FLT_DLC_FLT_DLC_HI_MASK)\n#define CAN_FLT_DLC_FLT_DLC_LO_MASK              0xF0000u\n#define CAN_FLT_DLC_FLT_DLC_LO_SHIFT             16u\n#define CAN_FLT_DLC_FLT_DLC_LO_WIDTH             4u\n#define CAN_FLT_DLC_FLT_DLC_LO(x)                (((uint32_t)(((uint32_t)(x))<<CAN_FLT_DLC_FLT_DLC_LO_SHIFT))&CAN_FLT_DLC_FLT_DLC_LO_MASK)\n/* PL1_LO Bit Fields */\n#define CAN_PL1_LO_Data_byte_3_MASK              0xFFu\n#define CAN_PL1_LO_Data_byte_3_SHIFT             0u\n#define CAN_PL1_LO_Data_byte_3_WIDTH             8u\n#define CAN_PL1_LO_Data_byte_3(x)                (((uint32_t)(((uint32_t)(x))<<CAN_PL1_LO_Data_byte_3_SHIFT))&CAN_PL1_LO_Data_byte_3_MASK)\n#define CAN_PL1_LO_Data_byte_2_MASK              0xFF00u\n#define CAN_PL1_LO_Data_byte_2_SHIFT             8u\n#define CAN_PL1_LO_Data_byte_2_WIDTH             8u\n#define CAN_PL1_LO_Data_byte_2(x)                (((uint32_t)(((uint32_t)(x))<<CAN_PL1_LO_Data_byte_2_SHIFT))&CAN_PL1_LO_Data_byte_2_MASK)\n#define CAN_PL1_LO_Data_byte_1_MASK              0xFF0000u\n#define CAN_PL1_LO_Data_byte_1_SHIFT             16u\n#define CAN_PL1_LO_Data_byte_1_WIDTH             8u\n#define CAN_PL1_LO_Data_byte_1(x)                (((uint32_t)(((uint32_t)(x))<<CAN_PL1_LO_Data_byte_1_SHIFT))&CAN_PL1_LO_Data_byte_1_MASK)\n#define CAN_PL1_LO_Data_byte_0_MASK              0xFF000000u\n#define CAN_PL1_LO_Data_byte_0_SHIFT             24u\n#define CAN_PL1_LO_Data_byte_0_WIDTH             8u\n#define CAN_PL1_LO_Data_byte_0(x)                (((uint32_t)(((uint32_t)(x))<<CAN_PL1_LO_Data_byte_0_SHIFT))&CAN_PL1_LO_Data_byte_0_MASK)\n/* PL1_HI Bit Fields */\n#define CAN_PL1_HI_Data_byte_7_MASK              0xFFu\n#define CAN_PL1_HI_Data_byte_7_SHIFT             0u\n#define CAN_PL1_HI_Data_byte_7_WIDTH             8u\n#define CAN_PL1_HI_Data_byte_7(x)                (((uint32_t)(((uint32_t)(x))<<CAN_PL1_HI_Data_byte_7_SHIFT))&CAN_PL1_HI_Data_byte_7_MASK)\n#define CAN_PL1_HI_Data_byte_6_MASK              0xFF00u\n#define CAN_PL1_HI_Data_byte_6_SHIFT             8u\n#define CAN_PL1_HI_Data_byte_6_WIDTH             8u\n#define CAN_PL1_HI_Data_byte_6(x)                (((uint32_t)(((uint32_t)(x))<<CAN_PL1_HI_Data_byte_6_SHIFT))&CAN_PL1_HI_Data_byte_6_MASK)\n#define CAN_PL1_HI_Data_byte_5_MASK              0xFF0000u\n#define CAN_PL1_HI_Data_byte_5_SHIFT             16u\n#define CAN_PL1_HI_Data_byte_5_WIDTH             8u\n#define CAN_PL1_HI_Data_byte_5(x)                (((uint32_t)(((uint32_t)(x))<<CAN_PL1_HI_Data_byte_5_SHIFT))&CAN_PL1_HI_Data_byte_5_MASK)\n#define CAN_PL1_HI_Data_byte_4_MASK              0xFF000000u\n#define CAN_PL1_HI_Data_byte_4_SHIFT             24u\n#define CAN_PL1_HI_Data_byte_4_WIDTH             8u\n#define CAN_PL1_HI_Data_byte_4(x)                (((uint32_t)(((uint32_t)(x))<<CAN_PL1_HI_Data_byte_4_SHIFT))&CAN_PL1_HI_Data_byte_4_MASK)\n/* FLT_ID2_IDMASK Bit Fields */\n#define CAN_FLT_ID2_IDMASK_FLT_ID2_IDMASK_MASK   0x1FFFFFFFu\n#define CAN_FLT_ID2_IDMASK_FLT_ID2_IDMASK_SHIFT  0u\n#define CAN_FLT_ID2_IDMASK_FLT_ID2_IDMASK_WIDTH  29u\n#define CAN_FLT_ID2_IDMASK_FLT_ID2_IDMASK(x)     (((uint32_t)(((uint32_t)(x))<<CAN_FLT_ID2_IDMASK_FLT_ID2_IDMASK_SHIFT))&CAN_FLT_ID2_IDMASK_FLT_ID2_IDMASK_MASK)\n#define CAN_FLT_ID2_IDMASK_RTR_MSK_MASK          0x20000000u\n#define CAN_FLT_ID2_IDMASK_RTR_MSK_SHIFT         29u\n#define CAN_FLT_ID2_IDMASK_RTR_MSK_WIDTH         1u\n#define CAN_FLT_ID2_IDMASK_RTR_MSK(x)            (((uint32_t)(((uint32_t)(x))<<CAN_FLT_ID2_IDMASK_RTR_MSK_SHIFT))&CAN_FLT_ID2_IDMASK_RTR_MSK_MASK)\n#define CAN_FLT_ID2_IDMASK_IDE_MSK_MASK          0x40000000u\n#define CAN_FLT_ID2_IDMASK_IDE_MSK_SHIFT         30u\n#define CAN_FLT_ID2_IDMASK_IDE_MSK_WIDTH         1u\n#define CAN_FLT_ID2_IDMASK_IDE_MSK(x)            (((uint32_t)(((uint32_t)(x))<<CAN_FLT_ID2_IDMASK_IDE_MSK_SHIFT))&CAN_FLT_ID2_IDMASK_IDE_MSK_MASK)\n/* PL2_PLMASK_LO Bit Fields */\n#define CAN_PL2_PLMASK_LO_Data_byte_3_MASK       0xFFu\n#define CAN_PL2_PLMASK_LO_Data_byte_3_SHIFT      0u\n#define CAN_PL2_PLMASK_LO_Data_byte_3_WIDTH      8u\n#define CAN_PL2_PLMASK_LO_Data_byte_3(x)         (((uint32_t)(((uint32_t)(x))<<CAN_PL2_PLMASK_LO_Data_byte_3_SHIFT))&CAN_PL2_PLMASK_LO_Data_byte_3_MASK)\n#define CAN_PL2_PLMASK_LO_Data_byte_2_MASK       0xFF00u\n#define CAN_PL2_PLMASK_LO_Data_byte_2_SHIFT      8u\n#define CAN_PL2_PLMASK_LO_Data_byte_2_WIDTH      8u\n#define CAN_PL2_PLMASK_LO_Data_byte_2(x)         (((uint32_t)(((uint32_t)(x))<<CAN_PL2_PLMASK_LO_Data_byte_2_SHIFT))&CAN_PL2_PLMASK_LO_Data_byte_2_MASK)\n#define CAN_PL2_PLMASK_LO_Data_byte_1_MASK       0xFF0000u\n#define CAN_PL2_PLMASK_LO_Data_byte_1_SHIFT      16u\n#define CAN_PL2_PLMASK_LO_Data_byte_1_WIDTH      8u\n#define CAN_PL2_PLMASK_LO_Data_byte_1(x)         (((uint32_t)(((uint32_t)(x))<<CAN_PL2_PLMASK_LO_Data_byte_1_SHIFT))&CAN_PL2_PLMASK_LO_Data_byte_1_MASK)\n#define CAN_PL2_PLMASK_LO_Data_byte_0_MASK       0xFF000000u\n#define CAN_PL2_PLMASK_LO_Data_byte_0_SHIFT      24u\n#define CAN_PL2_PLMASK_LO_Data_byte_0_WIDTH      8u\n#define CAN_PL2_PLMASK_LO_Data_byte_0(x)         (((uint32_t)(((uint32_t)(x))<<CAN_PL2_PLMASK_LO_Data_byte_0_SHIFT))&CAN_PL2_PLMASK_LO_Data_byte_0_MASK)\n/* PL2_PLMASK_HI Bit Fields */\n#define CAN_PL2_PLMASK_HI_Data_byte_7_MASK       0xFFu\n#define CAN_PL2_PLMASK_HI_Data_byte_7_SHIFT      0u\n#define CAN_PL2_PLMASK_HI_Data_byte_7_WIDTH      8u\n#define CAN_PL2_PLMASK_HI_Data_byte_7(x)         (((uint32_t)(((uint32_t)(x))<<CAN_PL2_PLMASK_HI_Data_byte_7_SHIFT))&CAN_PL2_PLMASK_HI_Data_byte_7_MASK)\n#define CAN_PL2_PLMASK_HI_Data_byte_6_MASK       0xFF00u\n#define CAN_PL2_PLMASK_HI_Data_byte_6_SHIFT      8u\n#define CAN_PL2_PLMASK_HI_Data_byte_6_WIDTH      8u\n#define CAN_PL2_PLMASK_HI_Data_byte_6(x)         (((uint32_t)(((uint32_t)(x))<<CAN_PL2_PLMASK_HI_Data_byte_6_SHIFT))&CAN_PL2_PLMASK_HI_Data_byte_6_MASK)\n#define CAN_PL2_PLMASK_HI_Data_byte_5_MASK       0xFF0000u\n#define CAN_PL2_PLMASK_HI_Data_byte_5_SHIFT      16u\n#define CAN_PL2_PLMASK_HI_Data_byte_5_WIDTH      8u\n#define CAN_PL2_PLMASK_HI_Data_byte_5(x)         (((uint32_t)(((uint32_t)(x))<<CAN_PL2_PLMASK_HI_Data_byte_5_SHIFT))&CAN_PL2_PLMASK_HI_Data_byte_5_MASK)\n#define CAN_PL2_PLMASK_HI_Data_byte_4_MASK       0xFF000000u\n#define CAN_PL2_PLMASK_HI_Data_byte_4_SHIFT      24u\n#define CAN_PL2_PLMASK_HI_Data_byte_4_WIDTH      8u\n#define CAN_PL2_PLMASK_HI_Data_byte_4(x)         (((uint32_t)(((uint32_t)(x))<<CAN_PL2_PLMASK_HI_Data_byte_4_SHIFT))&CAN_PL2_PLMASK_HI_Data_byte_4_MASK)\n/* WMBn_CS Bit Fields */\n#define CAN_WMBn_CS_DLC_MASK                     0xF0000u\n#define CAN_WMBn_CS_DLC_SHIFT                    16u\n#define CAN_WMBn_CS_DLC_WIDTH                    4u\n#define CAN_WMBn_CS_DLC(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_CS_DLC_SHIFT))&CAN_WMBn_CS_DLC_MASK)\n#define CAN_WMBn_CS_RTR_MASK                     0x100000u\n#define CAN_WMBn_CS_RTR_SHIFT                    20u\n#define CAN_WMBn_CS_RTR_WIDTH                    1u\n#define CAN_WMBn_CS_RTR(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_CS_RTR_SHIFT))&CAN_WMBn_CS_RTR_MASK)\n#define CAN_WMBn_CS_IDE_MASK                     0x200000u\n#define CAN_WMBn_CS_IDE_SHIFT                    21u\n#define CAN_WMBn_CS_IDE_WIDTH                    1u\n#define CAN_WMBn_CS_IDE(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_CS_IDE_SHIFT))&CAN_WMBn_CS_IDE_MASK)\n#define CAN_WMBn_CS_SRR_MASK                     0x400000u\n#define CAN_WMBn_CS_SRR_SHIFT                    22u\n#define CAN_WMBn_CS_SRR_WIDTH                    1u\n#define CAN_WMBn_CS_SRR(x)                       (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_CS_SRR_SHIFT))&CAN_WMBn_CS_SRR_MASK)\n/* WMBn_ID Bit Fields */\n#define CAN_WMBn_ID_ID_MASK                      0x1FFFFFFFu\n#define CAN_WMBn_ID_ID_SHIFT                     0u\n#define CAN_WMBn_ID_ID_WIDTH                     29u\n#define CAN_WMBn_ID_ID(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_ID_ID_SHIFT))&CAN_WMBn_ID_ID_MASK)\n/* WMBn_D03 Bit Fields */\n#define CAN_WMBn_D03_Data_byte_3_MASK            0xFFu\n#define CAN_WMBn_D03_Data_byte_3_SHIFT           0u\n#define CAN_WMBn_D03_Data_byte_3_WIDTH           8u\n#define CAN_WMBn_D03_Data_byte_3(x)              (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_D03_Data_byte_3_SHIFT))&CAN_WMBn_D03_Data_byte_3_MASK)\n#define CAN_WMBn_D03_Data_byte_2_MASK            0xFF00u\n#define CAN_WMBn_D03_Data_byte_2_SHIFT           8u\n#define CAN_WMBn_D03_Data_byte_2_WIDTH           8u\n#define CAN_WMBn_D03_Data_byte_2(x)              (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_D03_Data_byte_2_SHIFT))&CAN_WMBn_D03_Data_byte_2_MASK)\n#define CAN_WMBn_D03_Data_byte_1_MASK            0xFF0000u\n#define CAN_WMBn_D03_Data_byte_1_SHIFT           16u\n#define CAN_WMBn_D03_Data_byte_1_WIDTH           8u\n#define CAN_WMBn_D03_Data_byte_1(x)              (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_D03_Data_byte_1_SHIFT))&CAN_WMBn_D03_Data_byte_1_MASK)\n#define CAN_WMBn_D03_Data_byte_0_MASK            0xFF000000u\n#define CAN_WMBn_D03_Data_byte_0_SHIFT           24u\n#define CAN_WMBn_D03_Data_byte_0_WIDTH           8u\n#define CAN_WMBn_D03_Data_byte_0(x)              (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_D03_Data_byte_0_SHIFT))&CAN_WMBn_D03_Data_byte_0_MASK)\n/* WMBn_D47 Bit Fields */\n#define CAN_WMBn_D47_Data_byte_7_MASK            0xFFu\n#define CAN_WMBn_D47_Data_byte_7_SHIFT           0u\n#define CAN_WMBn_D47_Data_byte_7_WIDTH           8u\n#define CAN_WMBn_D47_Data_byte_7(x)              (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_D47_Data_byte_7_SHIFT))&CAN_WMBn_D47_Data_byte_7_MASK)\n#define CAN_WMBn_D47_Data_byte_6_MASK            0xFF00u\n#define CAN_WMBn_D47_Data_byte_6_SHIFT           8u\n#define CAN_WMBn_D47_Data_byte_6_WIDTH           8u\n#define CAN_WMBn_D47_Data_byte_6(x)              (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_D47_Data_byte_6_SHIFT))&CAN_WMBn_D47_Data_byte_6_MASK)\n#define CAN_WMBn_D47_Data_byte_5_MASK            0xFF0000u\n#define CAN_WMBn_D47_Data_byte_5_SHIFT           16u\n#define CAN_WMBn_D47_Data_byte_5_WIDTH           8u\n#define CAN_WMBn_D47_Data_byte_5(x)              (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_D47_Data_byte_5_SHIFT))&CAN_WMBn_D47_Data_byte_5_MASK)\n#define CAN_WMBn_D47_Data_byte_4_MASK            0xFF000000u\n#define CAN_WMBn_D47_Data_byte_4_SHIFT           24u\n#define CAN_WMBn_D47_Data_byte_4_WIDTH           8u\n#define CAN_WMBn_D47_Data_byte_4(x)              (((uint32_t)(((uint32_t)(x))<<CAN_WMBn_D47_Data_byte_4_SHIFT))&CAN_WMBn_D47_Data_byte_4_MASK)\n/* FDCTRL Bit Fields */\n#define CAN_FDCTRL_TDCVAL_MASK                   0x3Fu\n#define CAN_FDCTRL_TDCVAL_SHIFT                  0u\n#define CAN_FDCTRL_TDCVAL_WIDTH                  6u\n#define CAN_FDCTRL_TDCVAL(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_FDCTRL_TDCVAL_SHIFT))&CAN_FDCTRL_TDCVAL_MASK)\n#define CAN_FDCTRL_TDCOFF_MASK                   0x1F00u\n#define CAN_FDCTRL_TDCOFF_SHIFT                  8u\n#define CAN_FDCTRL_TDCOFF_WIDTH                  5u\n#define CAN_FDCTRL_TDCOFF(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_FDCTRL_TDCOFF_SHIFT))&CAN_FDCTRL_TDCOFF_MASK)\n#define CAN_FDCTRL_TDCFAIL_MASK                  0x4000u\n#define CAN_FDCTRL_TDCFAIL_SHIFT                 14u\n#define CAN_FDCTRL_TDCFAIL_WIDTH                 1u\n#define CAN_FDCTRL_TDCFAIL(x)                    (((uint32_t)(((uint32_t)(x))<<CAN_FDCTRL_TDCFAIL_SHIFT))&CAN_FDCTRL_TDCFAIL_MASK)\n#define CAN_FDCTRL_TDCEN_MASK                    0x8000u\n#define CAN_FDCTRL_TDCEN_SHIFT                   15u\n#define CAN_FDCTRL_TDCEN_WIDTH                   1u\n#define CAN_FDCTRL_TDCEN(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_FDCTRL_TDCEN_SHIFT))&CAN_FDCTRL_TDCEN_MASK)\n#define CAN_FDCTRL_MBDSR0_MASK                   0x30000u\n#define CAN_FDCTRL_MBDSR0_SHIFT                  16u\n#define CAN_FDCTRL_MBDSR0_WIDTH                  2u\n#define CAN_FDCTRL_MBDSR0(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_FDCTRL_MBDSR0_SHIFT))&CAN_FDCTRL_MBDSR0_MASK)\n#define CAN_FDCTRL_FDRATE_MASK                   0x80000000u\n#define CAN_FDCTRL_FDRATE_SHIFT                  31u\n#define CAN_FDCTRL_FDRATE_WIDTH                  1u\n#define CAN_FDCTRL_FDRATE(x)                     (((uint32_t)(((uint32_t)(x))<<CAN_FDCTRL_FDRATE_SHIFT))&CAN_FDCTRL_FDRATE_MASK)\n/* FDCBT Bit Fields */\n#define CAN_FDCBT_FPSEG2_MASK                    0x7u\n#define CAN_FDCBT_FPSEG2_SHIFT                   0u\n#define CAN_FDCBT_FPSEG2_WIDTH                   3u\n#define CAN_FDCBT_FPSEG2(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_FDCBT_FPSEG2_SHIFT))&CAN_FDCBT_FPSEG2_MASK)\n#define CAN_FDCBT_FPSEG1_MASK                    0xE0u\n#define CAN_FDCBT_FPSEG1_SHIFT                   5u\n#define CAN_FDCBT_FPSEG1_WIDTH                   3u\n#define CAN_FDCBT_FPSEG1(x)                      (((uint32_t)(((uint32_t)(x))<<CAN_FDCBT_FPSEG1_SHIFT))&CAN_FDCBT_FPSEG1_MASK)\n#define CAN_FDCBT_FPROPSEG_MASK                  0x7C00u\n#define CAN_FDCBT_FPROPSEG_SHIFT                 10u\n#define CAN_FDCBT_FPROPSEG_WIDTH                 5u\n#define CAN_FDCBT_FPROPSEG(x)                    (((uint32_t)(((uint32_t)(x))<<CAN_FDCBT_FPROPSEG_SHIFT))&CAN_FDCBT_FPROPSEG_MASK)\n#define CAN_FDCBT_FRJW_MASK                      0x70000u\n#define CAN_FDCBT_FRJW_SHIFT                     16u\n#define CAN_FDCBT_FRJW_WIDTH                     3u\n#define CAN_FDCBT_FRJW(x)                        (((uint32_t)(((uint32_t)(x))<<CAN_FDCBT_FRJW_SHIFT))&CAN_FDCBT_FRJW_MASK)\n#define CAN_FDCBT_FPRESDIV_MASK                  0x3FF00000u\n#define CAN_FDCBT_FPRESDIV_SHIFT                 20u\n#define CAN_FDCBT_FPRESDIV_WIDTH                 10u\n#define CAN_FDCBT_FPRESDIV(x)                    (((uint32_t)(((uint32_t)(x))<<CAN_FDCBT_FPRESDIV_SHIFT))&CAN_FDCBT_FPRESDIV_MASK)\n/* FDCRC Bit Fields */\n#define CAN_FDCRC_FD_TXCRC_MASK                  0x1FFFFFu\n#define CAN_FDCRC_FD_TXCRC_SHIFT                 0u\n#define CAN_FDCRC_FD_TXCRC_WIDTH                 21u\n#define CAN_FDCRC_FD_TXCRC(x)                    (((uint32_t)(((uint32_t)(x))<<CAN_FDCRC_FD_TXCRC_SHIFT))&CAN_FDCRC_FD_TXCRC_MASK)\n#define CAN_FDCRC_FD_MBCRC_MASK                  0x7F000000u\n#define CAN_FDCRC_FD_MBCRC_SHIFT                 24u\n#define CAN_FDCRC_FD_MBCRC_WIDTH                 7u\n#define CAN_FDCRC_FD_MBCRC(x)                    (((uint32_t)(((uint32_t)(x))<<CAN_FDCRC_FD_MBCRC_SHIFT))&CAN_FDCRC_FD_MBCRC_MASK)\n\n/*!\n * @}\n */ /* end of group CAN_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group CAN_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- CMP Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup CMP_Peripheral_Access_Layer CMP Peripheral Access Layer\n * @{\n */\n\n\n/** CMP - Size of Registers Arrays */\n\n/** CMP - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t C0;                                /**< CMP Control Register 0, offset: 0x0 */\n  __IO uint32_t C1;                                /**< CMP Control Register 1, offset: 0x4 */\n  __IO uint32_t C2;                                /**< CMP Control Register 2, offset: 0x8 */\n} CMP_Type, *CMP_MemMapPtr;\n\n /** Number of instances of the CMP module. */\n#define CMP_INSTANCE_COUNT                       (1u)\n\n\n/* CMP - Peripheral instance base addresses */\n/** Peripheral CMP0 base address */\n#define CMP0_BASE                                (0x40073000u)\n/** Peripheral CMP0 base pointer */\n#define CMP0                                     ((CMP_Type *)CMP0_BASE)\n/** Array initializer of CMP peripheral base addresses */\n#define CMP_BASE_ADDRS                           { CMP0_BASE }\n/** Array initializer of CMP peripheral base pointers */\n#define CMP_BASE_PTRS                            { CMP0 }\n /** Number of interrupt vector arrays for the CMP module. */\n#define CMP_IRQS_ARR_COUNT                       (1u)\n /** Number of interrupt channels for the CMP module. */\n#define CMP_IRQS_CH_COUNT                        (1u)\n/** Interrupt vectors for the CMP peripheral type */\n#define CMP_IRQS                                 { CMP0_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- CMP Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup CMP_Register_Masks CMP Register Masks\n * @{\n */\n\n/* C0 Bit Fields */\n#define CMP_C0_HYSTCTR_MASK                      0x3u\n#define CMP_C0_HYSTCTR_SHIFT                     0u\n#define CMP_C0_HYSTCTR_WIDTH                     2u\n#define CMP_C0_HYSTCTR(x)                        (((uint32_t)(((uint32_t)(x))<<CMP_C0_HYSTCTR_SHIFT))&CMP_C0_HYSTCTR_MASK)\n#define CMP_C0_OFFSET_MASK                       0x4u\n#define CMP_C0_OFFSET_SHIFT                      2u\n#define CMP_C0_OFFSET_WIDTH                      1u\n#define CMP_C0_OFFSET(x)                         (((uint32_t)(((uint32_t)(x))<<CMP_C0_OFFSET_SHIFT))&CMP_C0_OFFSET_MASK)\n#define CMP_C0_FILTER_CNT_MASK                   0x70u\n#define CMP_C0_FILTER_CNT_SHIFT                  4u\n#define CMP_C0_FILTER_CNT_WIDTH                  3u\n#define CMP_C0_FILTER_CNT(x)                     (((uint32_t)(((uint32_t)(x))<<CMP_C0_FILTER_CNT_SHIFT))&CMP_C0_FILTER_CNT_MASK)\n#define CMP_C0_EN_MASK                           0x100u\n#define CMP_C0_EN_SHIFT                          8u\n#define CMP_C0_EN_WIDTH                          1u\n#define CMP_C0_EN(x)                             (((uint32_t)(((uint32_t)(x))<<CMP_C0_EN_SHIFT))&CMP_C0_EN_MASK)\n#define CMP_C0_OPE_MASK                          0x200u\n#define CMP_C0_OPE_SHIFT                         9u\n#define CMP_C0_OPE_WIDTH                         1u\n#define CMP_C0_OPE(x)                            (((uint32_t)(((uint32_t)(x))<<CMP_C0_OPE_SHIFT))&CMP_C0_OPE_MASK)\n#define CMP_C0_COS_MASK                          0x400u\n#define CMP_C0_COS_SHIFT                         10u\n#define CMP_C0_COS_WIDTH                         1u\n#define CMP_C0_COS(x)                            (((uint32_t)(((uint32_t)(x))<<CMP_C0_COS_SHIFT))&CMP_C0_COS_MASK)\n#define CMP_C0_INVT_MASK                         0x800u\n#define CMP_C0_INVT_SHIFT                        11u\n#define CMP_C0_INVT_WIDTH                        1u\n#define CMP_C0_INVT(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C0_INVT_SHIFT))&CMP_C0_INVT_MASK)\n#define CMP_C0_PMODE_MASK                        0x1000u\n#define CMP_C0_PMODE_SHIFT                       12u\n#define CMP_C0_PMODE_WIDTH                       1u\n#define CMP_C0_PMODE(x)                          (((uint32_t)(((uint32_t)(x))<<CMP_C0_PMODE_SHIFT))&CMP_C0_PMODE_MASK)\n#define CMP_C0_WE_MASK                           0x4000u\n#define CMP_C0_WE_SHIFT                          14u\n#define CMP_C0_WE_WIDTH                          1u\n#define CMP_C0_WE(x)                             (((uint32_t)(((uint32_t)(x))<<CMP_C0_WE_SHIFT))&CMP_C0_WE_MASK)\n#define CMP_C0_SE_MASK                           0x8000u\n#define CMP_C0_SE_SHIFT                          15u\n#define CMP_C0_SE_WIDTH                          1u\n#define CMP_C0_SE(x)                             (((uint32_t)(((uint32_t)(x))<<CMP_C0_SE_SHIFT))&CMP_C0_SE_MASK)\n#define CMP_C0_FPR_MASK                          0xFF0000u\n#define CMP_C0_FPR_SHIFT                         16u\n#define CMP_C0_FPR_WIDTH                         8u\n#define CMP_C0_FPR(x)                            (((uint32_t)(((uint32_t)(x))<<CMP_C0_FPR_SHIFT))&CMP_C0_FPR_MASK)\n#define CMP_C0_COUT_MASK                         0x1000000u\n#define CMP_C0_COUT_SHIFT                        24u\n#define CMP_C0_COUT_WIDTH                        1u\n#define CMP_C0_COUT(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C0_COUT_SHIFT))&CMP_C0_COUT_MASK)\n#define CMP_C0_CFF_MASK                          0x2000000u\n#define CMP_C0_CFF_SHIFT                         25u\n#define CMP_C0_CFF_WIDTH                         1u\n#define CMP_C0_CFF(x)                            (((uint32_t)(((uint32_t)(x))<<CMP_C0_CFF_SHIFT))&CMP_C0_CFF_MASK)\n#define CMP_C0_CFR_MASK                          0x4000000u\n#define CMP_C0_CFR_SHIFT                         26u\n#define CMP_C0_CFR_WIDTH                         1u\n#define CMP_C0_CFR(x)                            (((uint32_t)(((uint32_t)(x))<<CMP_C0_CFR_SHIFT))&CMP_C0_CFR_MASK)\n#define CMP_C0_IEF_MASK                          0x8000000u\n#define CMP_C0_IEF_SHIFT                         27u\n#define CMP_C0_IEF_WIDTH                         1u\n#define CMP_C0_IEF(x)                            (((uint32_t)(((uint32_t)(x))<<CMP_C0_IEF_SHIFT))&CMP_C0_IEF_MASK)\n#define CMP_C0_IER_MASK                          0x10000000u\n#define CMP_C0_IER_SHIFT                         28u\n#define CMP_C0_IER_WIDTH                         1u\n#define CMP_C0_IER(x)                            (((uint32_t)(((uint32_t)(x))<<CMP_C0_IER_SHIFT))&CMP_C0_IER_MASK)\n#define CMP_C0_DMAEN_MASK                        0x40000000u\n#define CMP_C0_DMAEN_SHIFT                       30u\n#define CMP_C0_DMAEN_WIDTH                       1u\n#define CMP_C0_DMAEN(x)                          (((uint32_t)(((uint32_t)(x))<<CMP_C0_DMAEN_SHIFT))&CMP_C0_DMAEN_MASK)\n/* C1 Bit Fields */\n#define CMP_C1_VOSEL_MASK                        0xFFu\n#define CMP_C1_VOSEL_SHIFT                       0u\n#define CMP_C1_VOSEL_WIDTH                       8u\n#define CMP_C1_VOSEL(x)                          (((uint32_t)(((uint32_t)(x))<<CMP_C1_VOSEL_SHIFT))&CMP_C1_VOSEL_MASK)\n#define CMP_C1_MSEL_MASK                         0x700u\n#define CMP_C1_MSEL_SHIFT                        8u\n#define CMP_C1_MSEL_WIDTH                        3u\n#define CMP_C1_MSEL(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C1_MSEL_SHIFT))&CMP_C1_MSEL_MASK)\n#define CMP_C1_PSEL_MASK                         0x3800u\n#define CMP_C1_PSEL_SHIFT                        11u\n#define CMP_C1_PSEL_WIDTH                        3u\n#define CMP_C1_PSEL(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C1_PSEL_SHIFT))&CMP_C1_PSEL_MASK)\n#define CMP_C1_VRSEL_MASK                        0x4000u\n#define CMP_C1_VRSEL_SHIFT                       14u\n#define CMP_C1_VRSEL_WIDTH                       1u\n#define CMP_C1_VRSEL(x)                          (((uint32_t)(((uint32_t)(x))<<CMP_C1_VRSEL_SHIFT))&CMP_C1_VRSEL_MASK)\n#define CMP_C1_DACEN_MASK                        0x8000u\n#define CMP_C1_DACEN_SHIFT                       15u\n#define CMP_C1_DACEN_WIDTH                       1u\n#define CMP_C1_DACEN(x)                          (((uint32_t)(((uint32_t)(x))<<CMP_C1_DACEN_SHIFT))&CMP_C1_DACEN_MASK)\n#define CMP_C1_CHN0_MASK                         0x10000u\n#define CMP_C1_CHN0_SHIFT                        16u\n#define CMP_C1_CHN0_WIDTH                        1u\n#define CMP_C1_CHN0(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C1_CHN0_SHIFT))&CMP_C1_CHN0_MASK)\n#define CMP_C1_CHN1_MASK                         0x20000u\n#define CMP_C1_CHN1_SHIFT                        17u\n#define CMP_C1_CHN1_WIDTH                        1u\n#define CMP_C1_CHN1(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C1_CHN1_SHIFT))&CMP_C1_CHN1_MASK)\n#define CMP_C1_CHN2_MASK                         0x40000u\n#define CMP_C1_CHN2_SHIFT                        18u\n#define CMP_C1_CHN2_WIDTH                        1u\n#define CMP_C1_CHN2(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C1_CHN2_SHIFT))&CMP_C1_CHN2_MASK)\n#define CMP_C1_CHN3_MASK                         0x80000u\n#define CMP_C1_CHN3_SHIFT                        19u\n#define CMP_C1_CHN3_WIDTH                        1u\n#define CMP_C1_CHN3(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C1_CHN3_SHIFT))&CMP_C1_CHN3_MASK)\n#define CMP_C1_CHN4_MASK                         0x100000u\n#define CMP_C1_CHN4_SHIFT                        20u\n#define CMP_C1_CHN4_WIDTH                        1u\n#define CMP_C1_CHN4(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C1_CHN4_SHIFT))&CMP_C1_CHN4_MASK)\n#define CMP_C1_CHN5_MASK                         0x200000u\n#define CMP_C1_CHN5_SHIFT                        21u\n#define CMP_C1_CHN5_WIDTH                        1u\n#define CMP_C1_CHN5(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C1_CHN5_SHIFT))&CMP_C1_CHN5_MASK)\n#define CMP_C1_CHN6_MASK                         0x400000u\n#define CMP_C1_CHN6_SHIFT                        22u\n#define CMP_C1_CHN6_WIDTH                        1u\n#define CMP_C1_CHN6(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C1_CHN6_SHIFT))&CMP_C1_CHN6_MASK)\n#define CMP_C1_CHN7_MASK                         0x800000u\n#define CMP_C1_CHN7_SHIFT                        23u\n#define CMP_C1_CHN7_WIDTH                        1u\n#define CMP_C1_CHN7(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C1_CHN7_SHIFT))&CMP_C1_CHN7_MASK)\n#define CMP_C1_INNSEL_MASK                       0x3000000u\n#define CMP_C1_INNSEL_SHIFT                      24u\n#define CMP_C1_INNSEL_WIDTH                      2u\n#define CMP_C1_INNSEL(x)                         (((uint32_t)(((uint32_t)(x))<<CMP_C1_INNSEL_SHIFT))&CMP_C1_INNSEL_MASK)\n#define CMP_C1_INPSEL_MASK                       0x18000000u\n#define CMP_C1_INPSEL_SHIFT                      27u\n#define CMP_C1_INPSEL_WIDTH                      2u\n#define CMP_C1_INPSEL(x)                         (((uint32_t)(((uint32_t)(x))<<CMP_C1_INPSEL_SHIFT))&CMP_C1_INPSEL_MASK)\n/* C2 Bit Fields */\n#define CMP_C2_ACOn_MASK                         0xFFu\n#define CMP_C2_ACOn_SHIFT                        0u\n#define CMP_C2_ACOn_WIDTH                        8u\n#define CMP_C2_ACOn(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C2_ACOn_SHIFT))&CMP_C2_ACOn_MASK)\n#define CMP_C2_INITMOD_MASK                      0x3F00u\n#define CMP_C2_INITMOD_SHIFT                     8u\n#define CMP_C2_INITMOD_WIDTH                     6u\n#define CMP_C2_INITMOD(x)                        (((uint32_t)(((uint32_t)(x))<<CMP_C2_INITMOD_SHIFT))&CMP_C2_INITMOD_MASK)\n#define CMP_C2_NSAM_MASK                         0xC000u\n#define CMP_C2_NSAM_SHIFT                        14u\n#define CMP_C2_NSAM_WIDTH                        2u\n#define CMP_C2_NSAM(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C2_NSAM_SHIFT))&CMP_C2_NSAM_MASK)\n#define CMP_C2_CH0F_MASK                         0x10000u\n#define CMP_C2_CH0F_SHIFT                        16u\n#define CMP_C2_CH0F_WIDTH                        1u\n#define CMP_C2_CH0F(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C2_CH0F_SHIFT))&CMP_C2_CH0F_MASK)\n#define CMP_C2_CH1F_MASK                         0x20000u\n#define CMP_C2_CH1F_SHIFT                        17u\n#define CMP_C2_CH1F_WIDTH                        1u\n#define CMP_C2_CH1F(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C2_CH1F_SHIFT))&CMP_C2_CH1F_MASK)\n#define CMP_C2_CH2F_MASK                         0x40000u\n#define CMP_C2_CH2F_SHIFT                        18u\n#define CMP_C2_CH2F_WIDTH                        1u\n#define CMP_C2_CH2F(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C2_CH2F_SHIFT))&CMP_C2_CH2F_MASK)\n#define CMP_C2_CH3F_MASK                         0x80000u\n#define CMP_C2_CH3F_SHIFT                        19u\n#define CMP_C2_CH3F_WIDTH                        1u\n#define CMP_C2_CH3F(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C2_CH3F_SHIFT))&CMP_C2_CH3F_MASK)\n#define CMP_C2_CH4F_MASK                         0x100000u\n#define CMP_C2_CH4F_SHIFT                        20u\n#define CMP_C2_CH4F_WIDTH                        1u\n#define CMP_C2_CH4F(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C2_CH4F_SHIFT))&CMP_C2_CH4F_MASK)\n#define CMP_C2_CH5F_MASK                         0x200000u\n#define CMP_C2_CH5F_SHIFT                        21u\n#define CMP_C2_CH5F_WIDTH                        1u\n#define CMP_C2_CH5F(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C2_CH5F_SHIFT))&CMP_C2_CH5F_MASK)\n#define CMP_C2_CH6F_MASK                         0x400000u\n#define CMP_C2_CH6F_SHIFT                        22u\n#define CMP_C2_CH6F_WIDTH                        1u\n#define CMP_C2_CH6F(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C2_CH6F_SHIFT))&CMP_C2_CH6F_MASK)\n#define CMP_C2_CH7F_MASK                         0x800000u\n#define CMP_C2_CH7F_SHIFT                        23u\n#define CMP_C2_CH7F_WIDTH                        1u\n#define CMP_C2_CH7F(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C2_CH7F_SHIFT))&CMP_C2_CH7F_MASK)\n#define CMP_C2_FXMXCH_MASK                       0xE000000u\n#define CMP_C2_FXMXCH_SHIFT                      25u\n#define CMP_C2_FXMXCH_WIDTH                      3u\n#define CMP_C2_FXMXCH(x)                         (((uint32_t)(((uint32_t)(x))<<CMP_C2_FXMXCH_SHIFT))&CMP_C2_FXMXCH_MASK)\n#define CMP_C2_FXMP_MASK                         0x20000000u\n#define CMP_C2_FXMP_SHIFT                        29u\n#define CMP_C2_FXMP_WIDTH                        1u\n#define CMP_C2_FXMP(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C2_FXMP_SHIFT))&CMP_C2_FXMP_MASK)\n#define CMP_C2_RRIE_MASK                         0x40000000u\n#define CMP_C2_RRIE_SHIFT                        30u\n#define CMP_C2_RRIE_WIDTH                        1u\n#define CMP_C2_RRIE(x)                           (((uint32_t)(((uint32_t)(x))<<CMP_C2_RRIE_SHIFT))&CMP_C2_RRIE_MASK)\n#define CMP_C2_RRE_MASK                          0x80000000u\n#define CMP_C2_RRE_SHIFT                         31u\n#define CMP_C2_RRE_WIDTH                         1u\n#define CMP_C2_RRE(x)                            (((uint32_t)(((uint32_t)(x))<<CMP_C2_RRE_SHIFT))&CMP_C2_RRE_MASK)\n\n/*!\n * @}\n */ /* end of group CMP_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group CMP_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- CRC Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup CRC_Peripheral_Access_Layer CRC Peripheral Access Layer\n * @{\n */\n\n\n/** CRC - Size of Registers Arrays */\n\n/** CRC - Register Layout Typedef */\ntypedef struct {\n  union {                                          /* offset: 0x0 */\n    __IO uint32_t DATA;                              /**< CRC Data register, offset: 0x0 */\n    struct {                                         /* offset: 0x0 */\n      __IO uint16_t L;                                 /**< CRC_DATAL register., offset: 0x0 */\n      __IO uint16_t H;                                 /**< CRC_DATAH register., offset: 0x2 */\n    } DATA_16;\n    struct {                                         /* offset: 0x0 */\n      __IO uint8_t LL;                                 /**< CRC_DATALL register., offset: 0x0 */\n      __IO uint8_t LU;                                 /**< CRC_DATALU register., offset: 0x1 */\n      __IO uint8_t HL;                                 /**< CRC_DATAHL register., offset: 0x2 */\n      __IO uint8_t HU;                                 /**< CRC_DATAHU register., offset: 0x3 */\n    } DATA_8;\n  } DATAu;\n  __IO uint32_t GPOLY;                             /**< CRC Polynomial register, offset: 0x4 */\n  __IO uint32_t CTRL;                              /**< CRC Control register, offset: 0x8 */\n} CRC_Type, *CRC_MemMapPtr;\n\n /** Number of instances of the CRC module. */\n#define CRC_INSTANCE_COUNT                       (1u)\n\n\n/* CRC - Peripheral instance base addresses */\n/** Peripheral CRC base address */\n#define CRC_BASE                                 (0x40032000u)\n/** Peripheral CRC base pointer */\n#define CRC                                      ((CRC_Type *)CRC_BASE)\n/** Array initializer of CRC peripheral base addresses */\n#define CRC_BASE_ADDRS                           { CRC_BASE }\n/** Array initializer of CRC peripheral base pointers */\n#define CRC_BASE_PTRS                            { CRC }\n\n/* ----------------------------------------------------------------------------\n   -- CRC Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup CRC_Register_Masks CRC Register Masks\n * @{\n */\n\n/* DATAu_DATA Bit Fields */\n#define CRC_DATAu_DATA_LL_MASK                   0xFFu\n#define CRC_DATAu_DATA_LL_SHIFT                  0u\n#define CRC_DATAu_DATA_LL_WIDTH                  8u\n#define CRC_DATAu_DATA_LL(x)                     (((uint32_t)(((uint32_t)(x))<<CRC_DATAu_DATA_LL_SHIFT))&CRC_DATAu_DATA_LL_MASK)\n#define CRC_DATAu_DATA_LU_MASK                   0xFF00u\n#define CRC_DATAu_DATA_LU_SHIFT                  8u\n#define CRC_DATAu_DATA_LU_WIDTH                  8u\n#define CRC_DATAu_DATA_LU(x)                     (((uint32_t)(((uint32_t)(x))<<CRC_DATAu_DATA_LU_SHIFT))&CRC_DATAu_DATA_LU_MASK)\n#define CRC_DATAu_DATA_HL_MASK                   0xFF0000u\n#define CRC_DATAu_DATA_HL_SHIFT                  16u\n#define CRC_DATAu_DATA_HL_WIDTH                  8u\n#define CRC_DATAu_DATA_HL(x)                     (((uint32_t)(((uint32_t)(x))<<CRC_DATAu_DATA_HL_SHIFT))&CRC_DATAu_DATA_HL_MASK)\n#define CRC_DATAu_DATA_HU_MASK                   0xFF000000u\n#define CRC_DATAu_DATA_HU_SHIFT                  24u\n#define CRC_DATAu_DATA_HU_WIDTH                  8u\n#define CRC_DATAu_DATA_HU(x)                     (((uint32_t)(((uint32_t)(x))<<CRC_DATAu_DATA_HU_SHIFT))&CRC_DATAu_DATA_HU_MASK)\n/* DATAu_DATA_16_L Bit Fields */\n#define CRC_DATAu_DATA_16_L_DATAL_MASK           0xFFFFu\n#define CRC_DATAu_DATA_16_L_DATAL_SHIFT          0u\n#define CRC_DATAu_DATA_16_L_DATAL_WIDTH          16u\n#define CRC_DATAu_DATA_16_L_DATAL(x)             (((uint16_t)(((uint16_t)(x))<<CRC_DATAu_DATA_16_L_DATAL_SHIFT))&CRC_DATAu_DATA_16_L_DATAL_MASK)\n/* DATAu_DATA_16_H Bit Fields */\n#define CRC_DATAu_DATA_16_H_DATAH_MASK           0xFFFFu\n#define CRC_DATAu_DATA_16_H_DATAH_SHIFT          0u\n#define CRC_DATAu_DATA_16_H_DATAH_WIDTH          16u\n#define CRC_DATAu_DATA_16_H_DATAH(x)             (((uint16_t)(((uint16_t)(x))<<CRC_DATAu_DATA_16_H_DATAH_SHIFT))&CRC_DATAu_DATA_16_H_DATAH_MASK)\n/* DATAu_DATA_8_LL Bit Fields */\n#define CRC_DATAu_DATA_8_LL_DATALL_MASK          0xFFu\n#define CRC_DATAu_DATA_8_LL_DATALL_SHIFT         0u\n#define CRC_DATAu_DATA_8_LL_DATALL_WIDTH         8u\n#define CRC_DATAu_DATA_8_LL_DATALL(x)            (((uint8_t)(((uint8_t)(x))<<CRC_DATAu_DATA_8_LL_DATALL_SHIFT))&CRC_DATAu_DATA_8_LL_DATALL_MASK)\n/* DATAu_DATA_8_LU Bit Fields */\n#define CRC_DATAu_DATA_8_LU_DATALU_MASK          0xFFu\n#define CRC_DATAu_DATA_8_LU_DATALU_SHIFT         0u\n#define CRC_DATAu_DATA_8_LU_DATALU_WIDTH         8u\n#define CRC_DATAu_DATA_8_LU_DATALU(x)            (((uint8_t)(((uint8_t)(x))<<CRC_DATAu_DATA_8_LU_DATALU_SHIFT))&CRC_DATAu_DATA_8_LU_DATALU_MASK)\n/* DATAu_DATA_8_HL Bit Fields */\n#define CRC_DATAu_DATA_8_HL_DATAHL_MASK          0xFFu\n#define CRC_DATAu_DATA_8_HL_DATAHL_SHIFT         0u\n#define CRC_DATAu_DATA_8_HL_DATAHL_WIDTH         8u\n#define CRC_DATAu_DATA_8_HL_DATAHL(x)            (((uint8_t)(((uint8_t)(x))<<CRC_DATAu_DATA_8_HL_DATAHL_SHIFT))&CRC_DATAu_DATA_8_HL_DATAHL_MASK)\n/* DATAu_DATA_8_HU Bit Fields */\n#define CRC_DATAu_DATA_8_HU_DATAHU_MASK          0xFFu\n#define CRC_DATAu_DATA_8_HU_DATAHU_SHIFT         0u\n#define CRC_DATAu_DATA_8_HU_DATAHU_WIDTH         8u\n#define CRC_DATAu_DATA_8_HU_DATAHU(x)            (((uint8_t)(((uint8_t)(x))<<CRC_DATAu_DATA_8_HU_DATAHU_SHIFT))&CRC_DATAu_DATA_8_HU_DATAHU_MASK)\n/* GPOLY Bit Fields */\n#define CRC_GPOLY_LOW_MASK                       0xFFFFu\n#define CRC_GPOLY_LOW_SHIFT                      0u\n#define CRC_GPOLY_LOW_WIDTH                      16u\n#define CRC_GPOLY_LOW(x)                         (((uint32_t)(((uint32_t)(x))<<CRC_GPOLY_LOW_SHIFT))&CRC_GPOLY_LOW_MASK)\n#define CRC_GPOLY_HIGH_MASK                      0xFFFF0000u\n#define CRC_GPOLY_HIGH_SHIFT                     16u\n#define CRC_GPOLY_HIGH_WIDTH                     16u\n#define CRC_GPOLY_HIGH(x)                        (((uint32_t)(((uint32_t)(x))<<CRC_GPOLY_HIGH_SHIFT))&CRC_GPOLY_HIGH_MASK)\n/* CTRL Bit Fields */\n#define CRC_CTRL_TCRC_MASK                       0x1000000u\n#define CRC_CTRL_TCRC_SHIFT                      24u\n#define CRC_CTRL_TCRC_WIDTH                      1u\n#define CRC_CTRL_TCRC(x)                         (((uint32_t)(((uint32_t)(x))<<CRC_CTRL_TCRC_SHIFT))&CRC_CTRL_TCRC_MASK)\n#define CRC_CTRL_WAS_MASK                        0x2000000u\n#define CRC_CTRL_WAS_SHIFT                       25u\n#define CRC_CTRL_WAS_WIDTH                       1u\n#define CRC_CTRL_WAS(x)                          (((uint32_t)(((uint32_t)(x))<<CRC_CTRL_WAS_SHIFT))&CRC_CTRL_WAS_MASK)\n#define CRC_CTRL_FXOR_MASK                       0x4000000u\n#define CRC_CTRL_FXOR_SHIFT                      26u\n#define CRC_CTRL_FXOR_WIDTH                      1u\n#define CRC_CTRL_FXOR(x)                         (((uint32_t)(((uint32_t)(x))<<CRC_CTRL_FXOR_SHIFT))&CRC_CTRL_FXOR_MASK)\n#define CRC_CTRL_TOTR_MASK                       0x30000000u\n#define CRC_CTRL_TOTR_SHIFT                      28u\n#define CRC_CTRL_TOTR_WIDTH                      2u\n#define CRC_CTRL_TOTR(x)                         (((uint32_t)(((uint32_t)(x))<<CRC_CTRL_TOTR_SHIFT))&CRC_CTRL_TOTR_MASK)\n#define CRC_CTRL_TOT_MASK                        0xC0000000u\n#define CRC_CTRL_TOT_SHIFT                       30u\n#define CRC_CTRL_TOT_WIDTH                       2u\n#define CRC_CTRL_TOT(x)                          (((uint32_t)(((uint32_t)(x))<<CRC_CTRL_TOT_SHIFT))&CRC_CTRL_TOT_MASK)\n\n/*!\n * @}\n */ /* end of group CRC_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group CRC_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- CSE_PRAM Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup CSE_PRAM_Peripheral_Access_Layer CSE_PRAM Peripheral Access Layer\n * @{\n */\n\n\n/** CSE_PRAM - Size of Registers Arrays */\n#define CSE_PRAM_RAMn_COUNT                      32u\n\n/** CSE_PRAM - Register Layout Typedef */\ntypedef struct {\n  union {                                          /* offset: 0x0, array step: 0x4 */\n    __IO uint32_t DATA_32;                           /**< CSE PRAM 0 Register..CSE PRAM 31 Register, array offset: 0x0, array step: 0x4 */\n    struct {                                         /* offset: 0x0, array step: 0x4 */\n      __IO uint8_t DATA_8LL;                           /**< CSE PRAM0LL register...CSE PRAM31LL register., array offset: 0x0, array step: 0x4 */\n      __IO uint8_t DATA_8LU;                           /**< CSE PRAM0LU register...CSE PRAM31LU register., array offset: 0x1, array step: 0x4 */\n      __IO uint8_t DATA_8HL;                           /**< CSE PRAM0HL register...CSE PRAM31HL register., array offset: 0x2, array step: 0x4 */\n      __IO uint8_t DATA_8HU;                           /**< CSE PRAM0HU register...CSE PRAM31HU register., array offset: 0x3, array step: 0x4 */\n    } ACCESS8BIT;\n  } RAMn[CSE_PRAM_RAMn_COUNT];\n} CSE_PRAM_Type, *CSE_PRAM_MemMapPtr;\n\n /** Number of instances of the CSE_PRAM module. */\n#define CSE_PRAM_INSTANCE_COUNT                  (1u)\n\n\n/* CSE_PRAM - Peripheral instance base addresses */\n/** Peripheral CSE_PRAM base address */\n#define CSE_PRAM_BASE                            (0x14001000u)\n/** Peripheral CSE_PRAM base pointer */\n#define CSE_PRAM                                 ((CSE_PRAM_Type *)CSE_PRAM_BASE)\n/** Array initializer of CSE_PRAM peripheral base addresses */\n#define CSE_PRAM_BASE_ADDRS                      { CSE_PRAM_BASE }\n/** Array initializer of CSE_PRAM peripheral base pointers */\n#define CSE_PRAM_BASE_PTRS                       { CSE_PRAM }\n\n/* ----------------------------------------------------------------------------\n   -- CSE_PRAM Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup CSE_PRAM_Register_Masks CSE_PRAM Register Masks\n * @{\n */\n\n/* RAMn_DATA_32 Bit Fields */\n#define CSE_PRAM_RAMn_DATA_32_BYTE_3_MASK        0xFFu\n#define CSE_PRAM_RAMn_DATA_32_BYTE_3_SHIFT       0u\n#define CSE_PRAM_RAMn_DATA_32_BYTE_3_WIDTH       8u\n#define CSE_PRAM_RAMn_DATA_32_BYTE_3(x)          (((uint32_t)(((uint32_t)(x))<<CSE_PRAM_RAMn_DATA_32_BYTE_3_SHIFT))&CSE_PRAM_RAMn_DATA_32_BYTE_3_MASK)\n#define CSE_PRAM_RAMn_DATA_32_BYTE_2_MASK        0xFF00u\n#define CSE_PRAM_RAMn_DATA_32_BYTE_2_SHIFT       8u\n#define CSE_PRAM_RAMn_DATA_32_BYTE_2_WIDTH       8u\n#define CSE_PRAM_RAMn_DATA_32_BYTE_2(x)          (((uint32_t)(((uint32_t)(x))<<CSE_PRAM_RAMn_DATA_32_BYTE_2_SHIFT))&CSE_PRAM_RAMn_DATA_32_BYTE_2_MASK)\n#define CSE_PRAM_RAMn_DATA_32_BYTE_1_MASK        0xFF0000u\n#define CSE_PRAM_RAMn_DATA_32_BYTE_1_SHIFT       16u\n#define CSE_PRAM_RAMn_DATA_32_BYTE_1_WIDTH       8u\n#define CSE_PRAM_RAMn_DATA_32_BYTE_1(x)          (((uint32_t)(((uint32_t)(x))<<CSE_PRAM_RAMn_DATA_32_BYTE_1_SHIFT))&CSE_PRAM_RAMn_DATA_32_BYTE_1_MASK)\n#define CSE_PRAM_RAMn_DATA_32_BYTE_0_MASK        0xFF000000u\n#define CSE_PRAM_RAMn_DATA_32_BYTE_0_SHIFT       24u\n#define CSE_PRAM_RAMn_DATA_32_BYTE_0_WIDTH       8u\n#define CSE_PRAM_RAMn_DATA_32_BYTE_0(x)          (((uint32_t)(((uint32_t)(x))<<CSE_PRAM_RAMn_DATA_32_BYTE_0_SHIFT))&CSE_PRAM_RAMn_DATA_32_BYTE_0_MASK)\n/* RAMn_ACCESS8BIT_DATA_8LL Bit Fields */\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8LL_RAM_LL_MASK 0xFFu\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8LL_RAM_LL_SHIFT 0u\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8LL_RAM_LL_WIDTH 8u\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8LL_RAM_LL(x) (((uint8_t)(((uint8_t)(x))<<CSE_PRAM_RAMn_ACCESS8BIT_DATA_8LL_RAM_LL_SHIFT))&CSE_PRAM_RAMn_ACCESS8BIT_DATA_8LL_RAM_LL_MASK)\n/* RAMn_ACCESS8BIT_DATA_8LU Bit Fields */\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8LU_RAM_LU_MASK 0xFFu\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8LU_RAM_LU_SHIFT 0u\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8LU_RAM_LU_WIDTH 8u\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8LU_RAM_LU(x) (((uint8_t)(((uint8_t)(x))<<CSE_PRAM_RAMn_ACCESS8BIT_DATA_8LU_RAM_LU_SHIFT))&CSE_PRAM_RAMn_ACCESS8BIT_DATA_8LU_RAM_LU_MASK)\n/* RAMn_ACCESS8BIT_DATA_8HL Bit Fields */\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8HL_RAM_HL_MASK 0xFFu\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8HL_RAM_HL_SHIFT 0u\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8HL_RAM_HL_WIDTH 8u\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8HL_RAM_HL(x) (((uint8_t)(((uint8_t)(x))<<CSE_PRAM_RAMn_ACCESS8BIT_DATA_8HL_RAM_HL_SHIFT))&CSE_PRAM_RAMn_ACCESS8BIT_DATA_8HL_RAM_HL_MASK)\n/* RAMn_ACCESS8BIT_DATA_8HU Bit Fields */\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8HU_RAM_HU_MASK 0xFFu\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8HU_RAM_HU_SHIFT 0u\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8HU_RAM_HU_WIDTH 8u\n#define CSE_PRAM_RAMn_ACCESS8BIT_DATA_8HU_RAM_HU(x) (((uint8_t)(((uint8_t)(x))<<CSE_PRAM_RAMn_ACCESS8BIT_DATA_8HU_RAM_HU_SHIFT))&CSE_PRAM_RAMn_ACCESS8BIT_DATA_8HU_RAM_HU_MASK)\n\n/*!\n * @}\n */ /* end of group CSE_PRAM_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group CSE_PRAM_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- DMA Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup DMA_Peripheral_Access_Layer DMA Peripheral Access Layer\n * @{\n */\n\n\n/** DMA - Size of Registers Arrays */\n#define DMA_DCHPRI_COUNT                         16u\n#define DMA_TCD_COUNT                            16u\n\n/** DMA - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t CR;                                /**< Control Register, offset: 0x0 */\n  __I  uint32_t ES;                                /**< Error Status Register, offset: 0x4 */\n       uint8_t RESERVED_0[4];\n  __IO uint32_t ERQ;                               /**< Enable Request Register, offset: 0xC */\n       uint8_t RESERVED_1[4];\n  __IO uint32_t EEI;                               /**< Enable Error Interrupt Register, offset: 0x14 */\n  __O  uint8_t CEEI;                               /**< Clear Enable Error Interrupt Register, offset: 0x18 */\n  __O  uint8_t SEEI;                               /**< Set Enable Error Interrupt Register, offset: 0x19 */\n  __O  uint8_t CERQ;                               /**< Clear Enable Request Register, offset: 0x1A */\n  __O  uint8_t SERQ;                               /**< Set Enable Request Register, offset: 0x1B */\n  __O  uint8_t CDNE;                               /**< Clear DONE Status Bit Register, offset: 0x1C */\n  __O  uint8_t SSRT;                               /**< Set START Bit Register, offset: 0x1D */\n  __O  uint8_t CERR;                               /**< Clear Error Register, offset: 0x1E */\n  __O  uint8_t CINT;                               /**< Clear Interrupt Request Register, offset: 0x1F */\n       uint8_t RESERVED_2[4];\n  __IO uint32_t INT;                               /**< Interrupt Request Register, offset: 0x24 */\n       uint8_t RESERVED_3[4];\n  __IO uint32_t ERR;                               /**< Error Register, offset: 0x2C */\n       uint8_t RESERVED_4[4];\n  __I  uint32_t HRS;                               /**< Hardware Request Status Register, offset: 0x34 */\n       uint8_t RESERVED_5[12];\n  __IO uint32_t EARS;                              /**< Enable Asynchronous Request in Stop Register, offset: 0x44 */\n       uint8_t RESERVED_6[184];\n  __IO uint8_t DCHPRI[DMA_DCHPRI_COUNT];           /**< Channel n Priority Register, array offset: 0x100, array step: 0x1 */\n       uint8_t RESERVED_7[3824];\n  struct {                                         /* offset: 0x1000, array step: 0x20 */\n    __IO uint32_t SADDR;                             /**< TCD Source Address, array offset: 0x1000, array step: 0x20 */\n    __IO uint16_t SOFF;                              /**< TCD Signed Source Address Offset, array offset: 0x1004, array step: 0x20 */\n    __IO uint16_t ATTR;                              /**< TCD Transfer Attributes, array offset: 0x1006, array step: 0x20 */\n    union {                                          /* offset: 0x1008, array step: 0x20 */\n      __IO uint32_t MLNO;                              /**< TCD Minor Byte Count (Minor Loop Mapping Disabled), array offset: 0x1008, array step: 0x20 */\n      __IO uint32_t MLOFFNO;                           /**< TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled), array offset: 0x1008, array step: 0x20 */\n      __IO uint32_t MLOFFYES;                          /**< TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled), array offset: 0x1008, array step: 0x20 */\n    } NBYTES;\n    __IO uint32_t SLAST;                             /**< TCD Last Source Address Adjustment, array offset: 0x100C, array step: 0x20 */\n    __IO uint32_t DADDR;                             /**< TCD Destination Address, array offset: 0x1010, array step: 0x20 */\n    __IO uint16_t DOFF;                              /**< TCD Signed Destination Address Offset, array offset: 0x1014, array step: 0x20 */\n    union {                                          /* offset: 0x1016, array step: 0x20 */\n      __IO uint16_t ELINKNO;                           /**< TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled), array offset: 0x1016, array step: 0x20 */\n      __IO uint16_t ELINKYES;                          /**< TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled), array offset: 0x1016, array step: 0x20 */\n    } CITER;\n    __IO uint32_t DLASTSGA;                          /**< TCD Last Destination Address Adjustment/Scatter Gather Address, array offset: 0x1018, array step: 0x20 */\n    __IO uint16_t CSR;                               /**< TCD Control and Status, array offset: 0x101C, array step: 0x20 */\n    union {                                          /* offset: 0x101E, array step: 0x20 */\n      __IO uint16_t ELINKNO;                           /**< TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled), array offset: 0x101E, array step: 0x20 */\n      __IO uint16_t ELINKYES;                          /**< TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled), array offset: 0x101E, array step: 0x20 */\n    } BITER;\n  } TCD[DMA_TCD_COUNT];\n} DMA_Type, *DMA_MemMapPtr;\n\n /** Number of instances of the DMA module. */\n#define DMA_INSTANCE_COUNT                       (1u)\n\n\n/* DMA - Peripheral instance base addresses */\n/** Peripheral DMA base address */\n#define DMA_BASE                                 (0x40008000u)\n/** Peripheral DMA base pointer */\n#define DMA                                      ((DMA_Type *)DMA_BASE)\n/** Array initializer of DMA peripheral base addresses */\n#define DMA_BASE_ADDRS                           { DMA_BASE }\n/** Array initializer of DMA peripheral base pointers */\n#define DMA_BASE_PTRS                            { DMA }\n /** Number of interrupt vector arrays for the DMA module. */\n#define DMA_IRQS_ARR_COUNT                       (2u)\n /** Number of interrupt channels for the CHN type of DMA module. */\n#define DMA_CHN_IRQS_CH_COUNT                    (16u)\n /** Number of interrupt channels for the ERROR type of DMA module. */\n#define DMA_ERROR_IRQS_CH_COUNT                  (1u)\n/** Interrupt vectors for the DMA peripheral type */\n#define DMA_CHN_IRQS                             { DMA0_IRQn, DMA1_IRQn, DMA2_IRQn, DMA3_IRQn, DMA4_IRQn, DMA5_IRQn, DMA6_IRQn, DMA7_IRQn, DMA8_IRQn, DMA9_IRQn, DMA10_IRQn, DMA11_IRQn, DMA12_IRQn, DMA13_IRQn, DMA14_IRQn, DMA15_IRQn }\n#define DMA_ERROR_IRQS                           { DMA_Error_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- DMA Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup DMA_Register_Masks DMA Register Masks\n * @{\n */\n\n/* CR Bit Fields */\n#define DMA_CR_EDBG_MASK                         0x2u\n#define DMA_CR_EDBG_SHIFT                        1u\n#define DMA_CR_EDBG_WIDTH                        1u\n#define DMA_CR_EDBG(x)                           (((uint32_t)(((uint32_t)(x))<<DMA_CR_EDBG_SHIFT))&DMA_CR_EDBG_MASK)\n#define DMA_CR_ERCA_MASK                         0x4u\n#define DMA_CR_ERCA_SHIFT                        2u\n#define DMA_CR_ERCA_WIDTH                        1u\n#define DMA_CR_ERCA(x)                           (((uint32_t)(((uint32_t)(x))<<DMA_CR_ERCA_SHIFT))&DMA_CR_ERCA_MASK)\n#define DMA_CR_HOE_MASK                          0x10u\n#define DMA_CR_HOE_SHIFT                         4u\n#define DMA_CR_HOE_WIDTH                         1u\n#define DMA_CR_HOE(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_CR_HOE_SHIFT))&DMA_CR_HOE_MASK)\n#define DMA_CR_HALT_MASK                         0x20u\n#define DMA_CR_HALT_SHIFT                        5u\n#define DMA_CR_HALT_WIDTH                        1u\n#define DMA_CR_HALT(x)                           (((uint32_t)(((uint32_t)(x))<<DMA_CR_HALT_SHIFT))&DMA_CR_HALT_MASK)\n#define DMA_CR_CLM_MASK                          0x40u\n#define DMA_CR_CLM_SHIFT                         6u\n#define DMA_CR_CLM_WIDTH                         1u\n#define DMA_CR_CLM(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_CR_CLM_SHIFT))&DMA_CR_CLM_MASK)\n#define DMA_CR_EMLM_MASK                         0x80u\n#define DMA_CR_EMLM_SHIFT                        7u\n#define DMA_CR_EMLM_WIDTH                        1u\n#define DMA_CR_EMLM(x)                           (((uint32_t)(((uint32_t)(x))<<DMA_CR_EMLM_SHIFT))&DMA_CR_EMLM_MASK)\n#define DMA_CR_ECX_MASK                          0x10000u\n#define DMA_CR_ECX_SHIFT                         16u\n#define DMA_CR_ECX_WIDTH                         1u\n#define DMA_CR_ECX(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_CR_ECX_SHIFT))&DMA_CR_ECX_MASK)\n#define DMA_CR_CX_MASK                           0x20000u\n#define DMA_CR_CX_SHIFT                          17u\n#define DMA_CR_CX_WIDTH                          1u\n#define DMA_CR_CX(x)                             (((uint32_t)(((uint32_t)(x))<<DMA_CR_CX_SHIFT))&DMA_CR_CX_MASK)\n#define DMA_CR_ACTIVE_MASK                       0x80000000u\n#define DMA_CR_ACTIVE_SHIFT                      31u\n#define DMA_CR_ACTIVE_WIDTH                      1u\n#define DMA_CR_ACTIVE(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_CR_ACTIVE_SHIFT))&DMA_CR_ACTIVE_MASK)\n/* ES Bit Fields */\n#define DMA_ES_DBE_MASK                          0x1u\n#define DMA_ES_DBE_SHIFT                         0u\n#define DMA_ES_DBE_WIDTH                         1u\n#define DMA_ES_DBE(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_ES_DBE_SHIFT))&DMA_ES_DBE_MASK)\n#define DMA_ES_SBE_MASK                          0x2u\n#define DMA_ES_SBE_SHIFT                         1u\n#define DMA_ES_SBE_WIDTH                         1u\n#define DMA_ES_SBE(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_ES_SBE_SHIFT))&DMA_ES_SBE_MASK)\n#define DMA_ES_SGE_MASK                          0x4u\n#define DMA_ES_SGE_SHIFT                         2u\n#define DMA_ES_SGE_WIDTH                         1u\n#define DMA_ES_SGE(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_ES_SGE_SHIFT))&DMA_ES_SGE_MASK)\n#define DMA_ES_NCE_MASK                          0x8u\n#define DMA_ES_NCE_SHIFT                         3u\n#define DMA_ES_NCE_WIDTH                         1u\n#define DMA_ES_NCE(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_ES_NCE_SHIFT))&DMA_ES_NCE_MASK)\n#define DMA_ES_DOE_MASK                          0x10u\n#define DMA_ES_DOE_SHIFT                         4u\n#define DMA_ES_DOE_WIDTH                         1u\n#define DMA_ES_DOE(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_ES_DOE_SHIFT))&DMA_ES_DOE_MASK)\n#define DMA_ES_DAE_MASK                          0x20u\n#define DMA_ES_DAE_SHIFT                         5u\n#define DMA_ES_DAE_WIDTH                         1u\n#define DMA_ES_DAE(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_ES_DAE_SHIFT))&DMA_ES_DAE_MASK)\n#define DMA_ES_SOE_MASK                          0x40u\n#define DMA_ES_SOE_SHIFT                         6u\n#define DMA_ES_SOE_WIDTH                         1u\n#define DMA_ES_SOE(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_ES_SOE_SHIFT))&DMA_ES_SOE_MASK)\n#define DMA_ES_SAE_MASK                          0x80u\n#define DMA_ES_SAE_SHIFT                         7u\n#define DMA_ES_SAE_WIDTH                         1u\n#define DMA_ES_SAE(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_ES_SAE_SHIFT))&DMA_ES_SAE_MASK)\n#define DMA_ES_ERRCHN_MASK                       0xF00u\n#define DMA_ES_ERRCHN_SHIFT                      8u\n#define DMA_ES_ERRCHN_WIDTH                      4u\n#define DMA_ES_ERRCHN(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ES_ERRCHN_SHIFT))&DMA_ES_ERRCHN_MASK)\n#define DMA_ES_CPE_MASK                          0x4000u\n#define DMA_ES_CPE_SHIFT                         14u\n#define DMA_ES_CPE_WIDTH                         1u\n#define DMA_ES_CPE(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_ES_CPE_SHIFT))&DMA_ES_CPE_MASK)\n#define DMA_ES_ECX_MASK                          0x10000u\n#define DMA_ES_ECX_SHIFT                         16u\n#define DMA_ES_ECX_WIDTH                         1u\n#define DMA_ES_ECX(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_ES_ECX_SHIFT))&DMA_ES_ECX_MASK)\n#define DMA_ES_VLD_MASK                          0x80000000u\n#define DMA_ES_VLD_SHIFT                         31u\n#define DMA_ES_VLD_WIDTH                         1u\n#define DMA_ES_VLD(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_ES_VLD_SHIFT))&DMA_ES_VLD_MASK)\n/* ERQ Bit Fields */\n#define DMA_ERQ_ERQ0_MASK                        0x1u\n#define DMA_ERQ_ERQ0_SHIFT                       0u\n#define DMA_ERQ_ERQ0_WIDTH                       1u\n#define DMA_ERQ_ERQ0(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ0_SHIFT))&DMA_ERQ_ERQ0_MASK)\n#define DMA_ERQ_ERQ1_MASK                        0x2u\n#define DMA_ERQ_ERQ1_SHIFT                       1u\n#define DMA_ERQ_ERQ1_WIDTH                       1u\n#define DMA_ERQ_ERQ1(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ1_SHIFT))&DMA_ERQ_ERQ1_MASK)\n#define DMA_ERQ_ERQ2_MASK                        0x4u\n#define DMA_ERQ_ERQ2_SHIFT                       2u\n#define DMA_ERQ_ERQ2_WIDTH                       1u\n#define DMA_ERQ_ERQ2(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ2_SHIFT))&DMA_ERQ_ERQ2_MASK)\n#define DMA_ERQ_ERQ3_MASK                        0x8u\n#define DMA_ERQ_ERQ3_SHIFT                       3u\n#define DMA_ERQ_ERQ3_WIDTH                       1u\n#define DMA_ERQ_ERQ3(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ3_SHIFT))&DMA_ERQ_ERQ3_MASK)\n#define DMA_ERQ_ERQ4_MASK                        0x10u\n#define DMA_ERQ_ERQ4_SHIFT                       4u\n#define DMA_ERQ_ERQ4_WIDTH                       1u\n#define DMA_ERQ_ERQ4(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ4_SHIFT))&DMA_ERQ_ERQ4_MASK)\n#define DMA_ERQ_ERQ5_MASK                        0x20u\n#define DMA_ERQ_ERQ5_SHIFT                       5u\n#define DMA_ERQ_ERQ5_WIDTH                       1u\n#define DMA_ERQ_ERQ5(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ5_SHIFT))&DMA_ERQ_ERQ5_MASK)\n#define DMA_ERQ_ERQ6_MASK                        0x40u\n#define DMA_ERQ_ERQ6_SHIFT                       6u\n#define DMA_ERQ_ERQ6_WIDTH                       1u\n#define DMA_ERQ_ERQ6(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ6_SHIFT))&DMA_ERQ_ERQ6_MASK)\n#define DMA_ERQ_ERQ7_MASK                        0x80u\n#define DMA_ERQ_ERQ7_SHIFT                       7u\n#define DMA_ERQ_ERQ7_WIDTH                       1u\n#define DMA_ERQ_ERQ7(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ7_SHIFT))&DMA_ERQ_ERQ7_MASK)\n#define DMA_ERQ_ERQ8_MASK                        0x100u\n#define DMA_ERQ_ERQ8_SHIFT                       8u\n#define DMA_ERQ_ERQ8_WIDTH                       1u\n#define DMA_ERQ_ERQ8(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ8_SHIFT))&DMA_ERQ_ERQ8_MASK)\n#define DMA_ERQ_ERQ9_MASK                        0x200u\n#define DMA_ERQ_ERQ9_SHIFT                       9u\n#define DMA_ERQ_ERQ9_WIDTH                       1u\n#define DMA_ERQ_ERQ9(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ9_SHIFT))&DMA_ERQ_ERQ9_MASK)\n#define DMA_ERQ_ERQ10_MASK                       0x400u\n#define DMA_ERQ_ERQ10_SHIFT                      10u\n#define DMA_ERQ_ERQ10_WIDTH                      1u\n#define DMA_ERQ_ERQ10(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ10_SHIFT))&DMA_ERQ_ERQ10_MASK)\n#define DMA_ERQ_ERQ11_MASK                       0x800u\n#define DMA_ERQ_ERQ11_SHIFT                      11u\n#define DMA_ERQ_ERQ11_WIDTH                      1u\n#define DMA_ERQ_ERQ11(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ11_SHIFT))&DMA_ERQ_ERQ11_MASK)\n#define DMA_ERQ_ERQ12_MASK                       0x1000u\n#define DMA_ERQ_ERQ12_SHIFT                      12u\n#define DMA_ERQ_ERQ12_WIDTH                      1u\n#define DMA_ERQ_ERQ12(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ12_SHIFT))&DMA_ERQ_ERQ12_MASK)\n#define DMA_ERQ_ERQ13_MASK                       0x2000u\n#define DMA_ERQ_ERQ13_SHIFT                      13u\n#define DMA_ERQ_ERQ13_WIDTH                      1u\n#define DMA_ERQ_ERQ13(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ13_SHIFT))&DMA_ERQ_ERQ13_MASK)\n#define DMA_ERQ_ERQ14_MASK                       0x4000u\n#define DMA_ERQ_ERQ14_SHIFT                      14u\n#define DMA_ERQ_ERQ14_WIDTH                      1u\n#define DMA_ERQ_ERQ14(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ14_SHIFT))&DMA_ERQ_ERQ14_MASK)\n#define DMA_ERQ_ERQ15_MASK                       0x8000u\n#define DMA_ERQ_ERQ15_SHIFT                      15u\n#define DMA_ERQ_ERQ15_WIDTH                      1u\n#define DMA_ERQ_ERQ15(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ERQ_ERQ15_SHIFT))&DMA_ERQ_ERQ15_MASK)\n/* EEI Bit Fields */\n#define DMA_EEI_EEI0_MASK                        0x1u\n#define DMA_EEI_EEI0_SHIFT                       0u\n#define DMA_EEI_EEI0_WIDTH                       1u\n#define DMA_EEI_EEI0(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI0_SHIFT))&DMA_EEI_EEI0_MASK)\n#define DMA_EEI_EEI1_MASK                        0x2u\n#define DMA_EEI_EEI1_SHIFT                       1u\n#define DMA_EEI_EEI1_WIDTH                       1u\n#define DMA_EEI_EEI1(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI1_SHIFT))&DMA_EEI_EEI1_MASK)\n#define DMA_EEI_EEI2_MASK                        0x4u\n#define DMA_EEI_EEI2_SHIFT                       2u\n#define DMA_EEI_EEI2_WIDTH                       1u\n#define DMA_EEI_EEI2(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI2_SHIFT))&DMA_EEI_EEI2_MASK)\n#define DMA_EEI_EEI3_MASK                        0x8u\n#define DMA_EEI_EEI3_SHIFT                       3u\n#define DMA_EEI_EEI3_WIDTH                       1u\n#define DMA_EEI_EEI3(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI3_SHIFT))&DMA_EEI_EEI3_MASK)\n#define DMA_EEI_EEI4_MASK                        0x10u\n#define DMA_EEI_EEI4_SHIFT                       4u\n#define DMA_EEI_EEI4_WIDTH                       1u\n#define DMA_EEI_EEI4(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI4_SHIFT))&DMA_EEI_EEI4_MASK)\n#define DMA_EEI_EEI5_MASK                        0x20u\n#define DMA_EEI_EEI5_SHIFT                       5u\n#define DMA_EEI_EEI5_WIDTH                       1u\n#define DMA_EEI_EEI5(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI5_SHIFT))&DMA_EEI_EEI5_MASK)\n#define DMA_EEI_EEI6_MASK                        0x40u\n#define DMA_EEI_EEI6_SHIFT                       6u\n#define DMA_EEI_EEI6_WIDTH                       1u\n#define DMA_EEI_EEI6(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI6_SHIFT))&DMA_EEI_EEI6_MASK)\n#define DMA_EEI_EEI7_MASK                        0x80u\n#define DMA_EEI_EEI7_SHIFT                       7u\n#define DMA_EEI_EEI7_WIDTH                       1u\n#define DMA_EEI_EEI7(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI7_SHIFT))&DMA_EEI_EEI7_MASK)\n#define DMA_EEI_EEI8_MASK                        0x100u\n#define DMA_EEI_EEI8_SHIFT                       8u\n#define DMA_EEI_EEI8_WIDTH                       1u\n#define DMA_EEI_EEI8(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI8_SHIFT))&DMA_EEI_EEI8_MASK)\n#define DMA_EEI_EEI9_MASK                        0x200u\n#define DMA_EEI_EEI9_SHIFT                       9u\n#define DMA_EEI_EEI9_WIDTH                       1u\n#define DMA_EEI_EEI9(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI9_SHIFT))&DMA_EEI_EEI9_MASK)\n#define DMA_EEI_EEI10_MASK                       0x400u\n#define DMA_EEI_EEI10_SHIFT                      10u\n#define DMA_EEI_EEI10_WIDTH                      1u\n#define DMA_EEI_EEI10(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI10_SHIFT))&DMA_EEI_EEI10_MASK)\n#define DMA_EEI_EEI11_MASK                       0x800u\n#define DMA_EEI_EEI11_SHIFT                      11u\n#define DMA_EEI_EEI11_WIDTH                      1u\n#define DMA_EEI_EEI11(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI11_SHIFT))&DMA_EEI_EEI11_MASK)\n#define DMA_EEI_EEI12_MASK                       0x1000u\n#define DMA_EEI_EEI12_SHIFT                      12u\n#define DMA_EEI_EEI12_WIDTH                      1u\n#define DMA_EEI_EEI12(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI12_SHIFT))&DMA_EEI_EEI12_MASK)\n#define DMA_EEI_EEI13_MASK                       0x2000u\n#define DMA_EEI_EEI13_SHIFT                      13u\n#define DMA_EEI_EEI13_WIDTH                      1u\n#define DMA_EEI_EEI13(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI13_SHIFT))&DMA_EEI_EEI13_MASK)\n#define DMA_EEI_EEI14_MASK                       0x4000u\n#define DMA_EEI_EEI14_SHIFT                      14u\n#define DMA_EEI_EEI14_WIDTH                      1u\n#define DMA_EEI_EEI14(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI14_SHIFT))&DMA_EEI_EEI14_MASK)\n#define DMA_EEI_EEI15_MASK                       0x8000u\n#define DMA_EEI_EEI15_SHIFT                      15u\n#define DMA_EEI_EEI15_WIDTH                      1u\n#define DMA_EEI_EEI15(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_EEI_EEI15_SHIFT))&DMA_EEI_EEI15_MASK)\n/* CEEI Bit Fields */\n#define DMA_CEEI_CEEI_MASK                       0xFu\n#define DMA_CEEI_CEEI_SHIFT                      0u\n#define DMA_CEEI_CEEI_WIDTH                      4u\n#define DMA_CEEI_CEEI(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_CEEI_CEEI_SHIFT))&DMA_CEEI_CEEI_MASK)\n#define DMA_CEEI_CAEE_MASK                       0x40u\n#define DMA_CEEI_CAEE_SHIFT                      6u\n#define DMA_CEEI_CAEE_WIDTH                      1u\n#define DMA_CEEI_CAEE(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_CEEI_CAEE_SHIFT))&DMA_CEEI_CAEE_MASK)\n#define DMA_CEEI_NOP_MASK                        0x80u\n#define DMA_CEEI_NOP_SHIFT                       7u\n#define DMA_CEEI_NOP_WIDTH                       1u\n#define DMA_CEEI_NOP(x)                          (((uint8_t)(((uint8_t)(x))<<DMA_CEEI_NOP_SHIFT))&DMA_CEEI_NOP_MASK)\n/* SEEI Bit Fields */\n#define DMA_SEEI_SEEI_MASK                       0xFu\n#define DMA_SEEI_SEEI_SHIFT                      0u\n#define DMA_SEEI_SEEI_WIDTH                      4u\n#define DMA_SEEI_SEEI(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_SEEI_SEEI_SHIFT))&DMA_SEEI_SEEI_MASK)\n#define DMA_SEEI_SAEE_MASK                       0x40u\n#define DMA_SEEI_SAEE_SHIFT                      6u\n#define DMA_SEEI_SAEE_WIDTH                      1u\n#define DMA_SEEI_SAEE(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_SEEI_SAEE_SHIFT))&DMA_SEEI_SAEE_MASK)\n#define DMA_SEEI_NOP_MASK                        0x80u\n#define DMA_SEEI_NOP_SHIFT                       7u\n#define DMA_SEEI_NOP_WIDTH                       1u\n#define DMA_SEEI_NOP(x)                          (((uint8_t)(((uint8_t)(x))<<DMA_SEEI_NOP_SHIFT))&DMA_SEEI_NOP_MASK)\n/* CERQ Bit Fields */\n#define DMA_CERQ_CERQ_MASK                       0xFu\n#define DMA_CERQ_CERQ_SHIFT                      0u\n#define DMA_CERQ_CERQ_WIDTH                      4u\n#define DMA_CERQ_CERQ(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_CERQ_CERQ_SHIFT))&DMA_CERQ_CERQ_MASK)\n#define DMA_CERQ_CAER_MASK                       0x40u\n#define DMA_CERQ_CAER_SHIFT                      6u\n#define DMA_CERQ_CAER_WIDTH                      1u\n#define DMA_CERQ_CAER(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_CERQ_CAER_SHIFT))&DMA_CERQ_CAER_MASK)\n#define DMA_CERQ_NOP_MASK                        0x80u\n#define DMA_CERQ_NOP_SHIFT                       7u\n#define DMA_CERQ_NOP_WIDTH                       1u\n#define DMA_CERQ_NOP(x)                          (((uint8_t)(((uint8_t)(x))<<DMA_CERQ_NOP_SHIFT))&DMA_CERQ_NOP_MASK)\n/* SERQ Bit Fields */\n#define DMA_SERQ_SERQ_MASK                       0xFu\n#define DMA_SERQ_SERQ_SHIFT                      0u\n#define DMA_SERQ_SERQ_WIDTH                      4u\n#define DMA_SERQ_SERQ(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_SERQ_SERQ_SHIFT))&DMA_SERQ_SERQ_MASK)\n#define DMA_SERQ_SAER_MASK                       0x40u\n#define DMA_SERQ_SAER_SHIFT                      6u\n#define DMA_SERQ_SAER_WIDTH                      1u\n#define DMA_SERQ_SAER(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_SERQ_SAER_SHIFT))&DMA_SERQ_SAER_MASK)\n#define DMA_SERQ_NOP_MASK                        0x80u\n#define DMA_SERQ_NOP_SHIFT                       7u\n#define DMA_SERQ_NOP_WIDTH                       1u\n#define DMA_SERQ_NOP(x)                          (((uint8_t)(((uint8_t)(x))<<DMA_SERQ_NOP_SHIFT))&DMA_SERQ_NOP_MASK)\n/* CDNE Bit Fields */\n#define DMA_CDNE_CDNE_MASK                       0xFu\n#define DMA_CDNE_CDNE_SHIFT                      0u\n#define DMA_CDNE_CDNE_WIDTH                      4u\n#define DMA_CDNE_CDNE(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_CDNE_CDNE_SHIFT))&DMA_CDNE_CDNE_MASK)\n#define DMA_CDNE_CADN_MASK                       0x40u\n#define DMA_CDNE_CADN_SHIFT                      6u\n#define DMA_CDNE_CADN_WIDTH                      1u\n#define DMA_CDNE_CADN(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_CDNE_CADN_SHIFT))&DMA_CDNE_CADN_MASK)\n#define DMA_CDNE_NOP_MASK                        0x80u\n#define DMA_CDNE_NOP_SHIFT                       7u\n#define DMA_CDNE_NOP_WIDTH                       1u\n#define DMA_CDNE_NOP(x)                          (((uint8_t)(((uint8_t)(x))<<DMA_CDNE_NOP_SHIFT))&DMA_CDNE_NOP_MASK)\n/* SSRT Bit Fields */\n#define DMA_SSRT_SSRT_MASK                       0xFu\n#define DMA_SSRT_SSRT_SHIFT                      0u\n#define DMA_SSRT_SSRT_WIDTH                      4u\n#define DMA_SSRT_SSRT(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_SSRT_SSRT_SHIFT))&DMA_SSRT_SSRT_MASK)\n#define DMA_SSRT_SAST_MASK                       0x40u\n#define DMA_SSRT_SAST_SHIFT                      6u\n#define DMA_SSRT_SAST_WIDTH                      1u\n#define DMA_SSRT_SAST(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_SSRT_SAST_SHIFT))&DMA_SSRT_SAST_MASK)\n#define DMA_SSRT_NOP_MASK                        0x80u\n#define DMA_SSRT_NOP_SHIFT                       7u\n#define DMA_SSRT_NOP_WIDTH                       1u\n#define DMA_SSRT_NOP(x)                          (((uint8_t)(((uint8_t)(x))<<DMA_SSRT_NOP_SHIFT))&DMA_SSRT_NOP_MASK)\n/* CERR Bit Fields */\n#define DMA_CERR_CERR_MASK                       0xFu\n#define DMA_CERR_CERR_SHIFT                      0u\n#define DMA_CERR_CERR_WIDTH                      4u\n#define DMA_CERR_CERR(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_CERR_CERR_SHIFT))&DMA_CERR_CERR_MASK)\n#define DMA_CERR_CAEI_MASK                       0x40u\n#define DMA_CERR_CAEI_SHIFT                      6u\n#define DMA_CERR_CAEI_WIDTH                      1u\n#define DMA_CERR_CAEI(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_CERR_CAEI_SHIFT))&DMA_CERR_CAEI_MASK)\n#define DMA_CERR_NOP_MASK                        0x80u\n#define DMA_CERR_NOP_SHIFT                       7u\n#define DMA_CERR_NOP_WIDTH                       1u\n#define DMA_CERR_NOP(x)                          (((uint8_t)(((uint8_t)(x))<<DMA_CERR_NOP_SHIFT))&DMA_CERR_NOP_MASK)\n/* CINT Bit Fields */\n#define DMA_CINT_CINT_MASK                       0xFu\n#define DMA_CINT_CINT_SHIFT                      0u\n#define DMA_CINT_CINT_WIDTH                      4u\n#define DMA_CINT_CINT(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_CINT_CINT_SHIFT))&DMA_CINT_CINT_MASK)\n#define DMA_CINT_CAIR_MASK                       0x40u\n#define DMA_CINT_CAIR_SHIFT                      6u\n#define DMA_CINT_CAIR_WIDTH                      1u\n#define DMA_CINT_CAIR(x)                         (((uint8_t)(((uint8_t)(x))<<DMA_CINT_CAIR_SHIFT))&DMA_CINT_CAIR_MASK)\n#define DMA_CINT_NOP_MASK                        0x80u\n#define DMA_CINT_NOP_SHIFT                       7u\n#define DMA_CINT_NOP_WIDTH                       1u\n#define DMA_CINT_NOP(x)                          (((uint8_t)(((uint8_t)(x))<<DMA_CINT_NOP_SHIFT))&DMA_CINT_NOP_MASK)\n/* INT Bit Fields */\n#define DMA_INT_INT0_MASK                        0x1u\n#define DMA_INT_INT0_SHIFT                       0u\n#define DMA_INT_INT0_WIDTH                       1u\n#define DMA_INT_INT0(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT0_SHIFT))&DMA_INT_INT0_MASK)\n#define DMA_INT_INT1_MASK                        0x2u\n#define DMA_INT_INT1_SHIFT                       1u\n#define DMA_INT_INT1_WIDTH                       1u\n#define DMA_INT_INT1(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT1_SHIFT))&DMA_INT_INT1_MASK)\n#define DMA_INT_INT2_MASK                        0x4u\n#define DMA_INT_INT2_SHIFT                       2u\n#define DMA_INT_INT2_WIDTH                       1u\n#define DMA_INT_INT2(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT2_SHIFT))&DMA_INT_INT2_MASK)\n#define DMA_INT_INT3_MASK                        0x8u\n#define DMA_INT_INT3_SHIFT                       3u\n#define DMA_INT_INT3_WIDTH                       1u\n#define DMA_INT_INT3(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT3_SHIFT))&DMA_INT_INT3_MASK)\n#define DMA_INT_INT4_MASK                        0x10u\n#define DMA_INT_INT4_SHIFT                       4u\n#define DMA_INT_INT4_WIDTH                       1u\n#define DMA_INT_INT4(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT4_SHIFT))&DMA_INT_INT4_MASK)\n#define DMA_INT_INT5_MASK                        0x20u\n#define DMA_INT_INT5_SHIFT                       5u\n#define DMA_INT_INT5_WIDTH                       1u\n#define DMA_INT_INT5(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT5_SHIFT))&DMA_INT_INT5_MASK)\n#define DMA_INT_INT6_MASK                        0x40u\n#define DMA_INT_INT6_SHIFT                       6u\n#define DMA_INT_INT6_WIDTH                       1u\n#define DMA_INT_INT6(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT6_SHIFT))&DMA_INT_INT6_MASK)\n#define DMA_INT_INT7_MASK                        0x80u\n#define DMA_INT_INT7_SHIFT                       7u\n#define DMA_INT_INT7_WIDTH                       1u\n#define DMA_INT_INT7(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT7_SHIFT))&DMA_INT_INT7_MASK)\n#define DMA_INT_INT8_MASK                        0x100u\n#define DMA_INT_INT8_SHIFT                       8u\n#define DMA_INT_INT8_WIDTH                       1u\n#define DMA_INT_INT8(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT8_SHIFT))&DMA_INT_INT8_MASK)\n#define DMA_INT_INT9_MASK                        0x200u\n#define DMA_INT_INT9_SHIFT                       9u\n#define DMA_INT_INT9_WIDTH                       1u\n#define DMA_INT_INT9(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT9_SHIFT))&DMA_INT_INT9_MASK)\n#define DMA_INT_INT10_MASK                       0x400u\n#define DMA_INT_INT10_SHIFT                      10u\n#define DMA_INT_INT10_WIDTH                      1u\n#define DMA_INT_INT10(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT10_SHIFT))&DMA_INT_INT10_MASK)\n#define DMA_INT_INT11_MASK                       0x800u\n#define DMA_INT_INT11_SHIFT                      11u\n#define DMA_INT_INT11_WIDTH                      1u\n#define DMA_INT_INT11(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT11_SHIFT))&DMA_INT_INT11_MASK)\n#define DMA_INT_INT12_MASK                       0x1000u\n#define DMA_INT_INT12_SHIFT                      12u\n#define DMA_INT_INT12_WIDTH                      1u\n#define DMA_INT_INT12(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT12_SHIFT))&DMA_INT_INT12_MASK)\n#define DMA_INT_INT13_MASK                       0x2000u\n#define DMA_INT_INT13_SHIFT                      13u\n#define DMA_INT_INT13_WIDTH                      1u\n#define DMA_INT_INT13(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT13_SHIFT))&DMA_INT_INT13_MASK)\n#define DMA_INT_INT14_MASK                       0x4000u\n#define DMA_INT_INT14_SHIFT                      14u\n#define DMA_INT_INT14_WIDTH                      1u\n#define DMA_INT_INT14(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT14_SHIFT))&DMA_INT_INT14_MASK)\n#define DMA_INT_INT15_MASK                       0x8000u\n#define DMA_INT_INT15_SHIFT                      15u\n#define DMA_INT_INT15_WIDTH                      1u\n#define DMA_INT_INT15(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_INT_INT15_SHIFT))&DMA_INT_INT15_MASK)\n/* ERR Bit Fields */\n#define DMA_ERR_ERR0_MASK                        0x1u\n#define DMA_ERR_ERR0_SHIFT                       0u\n#define DMA_ERR_ERR0_WIDTH                       1u\n#define DMA_ERR_ERR0(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR0_SHIFT))&DMA_ERR_ERR0_MASK)\n#define DMA_ERR_ERR1_MASK                        0x2u\n#define DMA_ERR_ERR1_SHIFT                       1u\n#define DMA_ERR_ERR1_WIDTH                       1u\n#define DMA_ERR_ERR1(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR1_SHIFT))&DMA_ERR_ERR1_MASK)\n#define DMA_ERR_ERR2_MASK                        0x4u\n#define DMA_ERR_ERR2_SHIFT                       2u\n#define DMA_ERR_ERR2_WIDTH                       1u\n#define DMA_ERR_ERR2(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR2_SHIFT))&DMA_ERR_ERR2_MASK)\n#define DMA_ERR_ERR3_MASK                        0x8u\n#define DMA_ERR_ERR3_SHIFT                       3u\n#define DMA_ERR_ERR3_WIDTH                       1u\n#define DMA_ERR_ERR3(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR3_SHIFT))&DMA_ERR_ERR3_MASK)\n#define DMA_ERR_ERR4_MASK                        0x10u\n#define DMA_ERR_ERR4_SHIFT                       4u\n#define DMA_ERR_ERR4_WIDTH                       1u\n#define DMA_ERR_ERR4(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR4_SHIFT))&DMA_ERR_ERR4_MASK)\n#define DMA_ERR_ERR5_MASK                        0x20u\n#define DMA_ERR_ERR5_SHIFT                       5u\n#define DMA_ERR_ERR5_WIDTH                       1u\n#define DMA_ERR_ERR5(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR5_SHIFT))&DMA_ERR_ERR5_MASK)\n#define DMA_ERR_ERR6_MASK                        0x40u\n#define DMA_ERR_ERR6_SHIFT                       6u\n#define DMA_ERR_ERR6_WIDTH                       1u\n#define DMA_ERR_ERR6(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR6_SHIFT))&DMA_ERR_ERR6_MASK)\n#define DMA_ERR_ERR7_MASK                        0x80u\n#define DMA_ERR_ERR7_SHIFT                       7u\n#define DMA_ERR_ERR7_WIDTH                       1u\n#define DMA_ERR_ERR7(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR7_SHIFT))&DMA_ERR_ERR7_MASK)\n#define DMA_ERR_ERR8_MASK                        0x100u\n#define DMA_ERR_ERR8_SHIFT                       8u\n#define DMA_ERR_ERR8_WIDTH                       1u\n#define DMA_ERR_ERR8(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR8_SHIFT))&DMA_ERR_ERR8_MASK)\n#define DMA_ERR_ERR9_MASK                        0x200u\n#define DMA_ERR_ERR9_SHIFT                       9u\n#define DMA_ERR_ERR9_WIDTH                       1u\n#define DMA_ERR_ERR9(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR9_SHIFT))&DMA_ERR_ERR9_MASK)\n#define DMA_ERR_ERR10_MASK                       0x400u\n#define DMA_ERR_ERR10_SHIFT                      10u\n#define DMA_ERR_ERR10_WIDTH                      1u\n#define DMA_ERR_ERR10(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR10_SHIFT))&DMA_ERR_ERR10_MASK)\n#define DMA_ERR_ERR11_MASK                       0x800u\n#define DMA_ERR_ERR11_SHIFT                      11u\n#define DMA_ERR_ERR11_WIDTH                      1u\n#define DMA_ERR_ERR11(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR11_SHIFT))&DMA_ERR_ERR11_MASK)\n#define DMA_ERR_ERR12_MASK                       0x1000u\n#define DMA_ERR_ERR12_SHIFT                      12u\n#define DMA_ERR_ERR12_WIDTH                      1u\n#define DMA_ERR_ERR12(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR12_SHIFT))&DMA_ERR_ERR12_MASK)\n#define DMA_ERR_ERR13_MASK                       0x2000u\n#define DMA_ERR_ERR13_SHIFT                      13u\n#define DMA_ERR_ERR13_WIDTH                      1u\n#define DMA_ERR_ERR13(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR13_SHIFT))&DMA_ERR_ERR13_MASK)\n#define DMA_ERR_ERR14_MASK                       0x4000u\n#define DMA_ERR_ERR14_SHIFT                      14u\n#define DMA_ERR_ERR14_WIDTH                      1u\n#define DMA_ERR_ERR14(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR14_SHIFT))&DMA_ERR_ERR14_MASK)\n#define DMA_ERR_ERR15_MASK                       0x8000u\n#define DMA_ERR_ERR15_SHIFT                      15u\n#define DMA_ERR_ERR15_WIDTH                      1u\n#define DMA_ERR_ERR15(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_ERR_ERR15_SHIFT))&DMA_ERR_ERR15_MASK)\n/* HRS Bit Fields */\n#define DMA_HRS_HRS0_MASK                        0x1u\n#define DMA_HRS_HRS0_SHIFT                       0u\n#define DMA_HRS_HRS0_WIDTH                       1u\n#define DMA_HRS_HRS0(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS0_SHIFT))&DMA_HRS_HRS0_MASK)\n#define DMA_HRS_HRS1_MASK                        0x2u\n#define DMA_HRS_HRS1_SHIFT                       1u\n#define DMA_HRS_HRS1_WIDTH                       1u\n#define DMA_HRS_HRS1(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS1_SHIFT))&DMA_HRS_HRS1_MASK)\n#define DMA_HRS_HRS2_MASK                        0x4u\n#define DMA_HRS_HRS2_SHIFT                       2u\n#define DMA_HRS_HRS2_WIDTH                       1u\n#define DMA_HRS_HRS2(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS2_SHIFT))&DMA_HRS_HRS2_MASK)\n#define DMA_HRS_HRS3_MASK                        0x8u\n#define DMA_HRS_HRS3_SHIFT                       3u\n#define DMA_HRS_HRS3_WIDTH                       1u\n#define DMA_HRS_HRS3(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS3_SHIFT))&DMA_HRS_HRS3_MASK)\n#define DMA_HRS_HRS4_MASK                        0x10u\n#define DMA_HRS_HRS4_SHIFT                       4u\n#define DMA_HRS_HRS4_WIDTH                       1u\n#define DMA_HRS_HRS4(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS4_SHIFT))&DMA_HRS_HRS4_MASK)\n#define DMA_HRS_HRS5_MASK                        0x20u\n#define DMA_HRS_HRS5_SHIFT                       5u\n#define DMA_HRS_HRS5_WIDTH                       1u\n#define DMA_HRS_HRS5(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS5_SHIFT))&DMA_HRS_HRS5_MASK)\n#define DMA_HRS_HRS6_MASK                        0x40u\n#define DMA_HRS_HRS6_SHIFT                       6u\n#define DMA_HRS_HRS6_WIDTH                       1u\n#define DMA_HRS_HRS6(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS6_SHIFT))&DMA_HRS_HRS6_MASK)\n#define DMA_HRS_HRS7_MASK                        0x80u\n#define DMA_HRS_HRS7_SHIFT                       7u\n#define DMA_HRS_HRS7_WIDTH                       1u\n#define DMA_HRS_HRS7(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS7_SHIFT))&DMA_HRS_HRS7_MASK)\n#define DMA_HRS_HRS8_MASK                        0x100u\n#define DMA_HRS_HRS8_SHIFT                       8u\n#define DMA_HRS_HRS8_WIDTH                       1u\n#define DMA_HRS_HRS8(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS8_SHIFT))&DMA_HRS_HRS8_MASK)\n#define DMA_HRS_HRS9_MASK                        0x200u\n#define DMA_HRS_HRS9_SHIFT                       9u\n#define DMA_HRS_HRS9_WIDTH                       1u\n#define DMA_HRS_HRS9(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS9_SHIFT))&DMA_HRS_HRS9_MASK)\n#define DMA_HRS_HRS10_MASK                       0x400u\n#define DMA_HRS_HRS10_SHIFT                      10u\n#define DMA_HRS_HRS10_WIDTH                      1u\n#define DMA_HRS_HRS10(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS10_SHIFT))&DMA_HRS_HRS10_MASK)\n#define DMA_HRS_HRS11_MASK                       0x800u\n#define DMA_HRS_HRS11_SHIFT                      11u\n#define DMA_HRS_HRS11_WIDTH                      1u\n#define DMA_HRS_HRS11(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS11_SHIFT))&DMA_HRS_HRS11_MASK)\n#define DMA_HRS_HRS12_MASK                       0x1000u\n#define DMA_HRS_HRS12_SHIFT                      12u\n#define DMA_HRS_HRS12_WIDTH                      1u\n#define DMA_HRS_HRS12(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS12_SHIFT))&DMA_HRS_HRS12_MASK)\n#define DMA_HRS_HRS13_MASK                       0x2000u\n#define DMA_HRS_HRS13_SHIFT                      13u\n#define DMA_HRS_HRS13_WIDTH                      1u\n#define DMA_HRS_HRS13(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS13_SHIFT))&DMA_HRS_HRS13_MASK)\n#define DMA_HRS_HRS14_MASK                       0x4000u\n#define DMA_HRS_HRS14_SHIFT                      14u\n#define DMA_HRS_HRS14_WIDTH                      1u\n#define DMA_HRS_HRS14(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS14_SHIFT))&DMA_HRS_HRS14_MASK)\n#define DMA_HRS_HRS15_MASK                       0x8000u\n#define DMA_HRS_HRS15_SHIFT                      15u\n#define DMA_HRS_HRS15_WIDTH                      1u\n#define DMA_HRS_HRS15(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_HRS_HRS15_SHIFT))&DMA_HRS_HRS15_MASK)\n/* EARS Bit Fields */\n#define DMA_EARS_EDREQ_0_MASK                    0x1u\n#define DMA_EARS_EDREQ_0_SHIFT                   0u\n#define DMA_EARS_EDREQ_0_WIDTH                   1u\n#define DMA_EARS_EDREQ_0(x)                      (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_0_SHIFT))&DMA_EARS_EDREQ_0_MASK)\n#define DMA_EARS_EDREQ_1_MASK                    0x2u\n#define DMA_EARS_EDREQ_1_SHIFT                   1u\n#define DMA_EARS_EDREQ_1_WIDTH                   1u\n#define DMA_EARS_EDREQ_1(x)                      (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_1_SHIFT))&DMA_EARS_EDREQ_1_MASK)\n#define DMA_EARS_EDREQ_2_MASK                    0x4u\n#define DMA_EARS_EDREQ_2_SHIFT                   2u\n#define DMA_EARS_EDREQ_2_WIDTH                   1u\n#define DMA_EARS_EDREQ_2(x)                      (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_2_SHIFT))&DMA_EARS_EDREQ_2_MASK)\n#define DMA_EARS_EDREQ_3_MASK                    0x8u\n#define DMA_EARS_EDREQ_3_SHIFT                   3u\n#define DMA_EARS_EDREQ_3_WIDTH                   1u\n#define DMA_EARS_EDREQ_3(x)                      (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_3_SHIFT))&DMA_EARS_EDREQ_3_MASK)\n#define DMA_EARS_EDREQ_4_MASK                    0x10u\n#define DMA_EARS_EDREQ_4_SHIFT                   4u\n#define DMA_EARS_EDREQ_4_WIDTH                   1u\n#define DMA_EARS_EDREQ_4(x)                      (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_4_SHIFT))&DMA_EARS_EDREQ_4_MASK)\n#define DMA_EARS_EDREQ_5_MASK                    0x20u\n#define DMA_EARS_EDREQ_5_SHIFT                   5u\n#define DMA_EARS_EDREQ_5_WIDTH                   1u\n#define DMA_EARS_EDREQ_5(x)                      (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_5_SHIFT))&DMA_EARS_EDREQ_5_MASK)\n#define DMA_EARS_EDREQ_6_MASK                    0x40u\n#define DMA_EARS_EDREQ_6_SHIFT                   6u\n#define DMA_EARS_EDREQ_6_WIDTH                   1u\n#define DMA_EARS_EDREQ_6(x)                      (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_6_SHIFT))&DMA_EARS_EDREQ_6_MASK)\n#define DMA_EARS_EDREQ_7_MASK                    0x80u\n#define DMA_EARS_EDREQ_7_SHIFT                   7u\n#define DMA_EARS_EDREQ_7_WIDTH                   1u\n#define DMA_EARS_EDREQ_7(x)                      (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_7_SHIFT))&DMA_EARS_EDREQ_7_MASK)\n#define DMA_EARS_EDREQ_8_MASK                    0x100u\n#define DMA_EARS_EDREQ_8_SHIFT                   8u\n#define DMA_EARS_EDREQ_8_WIDTH                   1u\n#define DMA_EARS_EDREQ_8(x)                      (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_8_SHIFT))&DMA_EARS_EDREQ_8_MASK)\n#define DMA_EARS_EDREQ_9_MASK                    0x200u\n#define DMA_EARS_EDREQ_9_SHIFT                   9u\n#define DMA_EARS_EDREQ_9_WIDTH                   1u\n#define DMA_EARS_EDREQ_9(x)                      (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_9_SHIFT))&DMA_EARS_EDREQ_9_MASK)\n#define DMA_EARS_EDREQ_10_MASK                   0x400u\n#define DMA_EARS_EDREQ_10_SHIFT                  10u\n#define DMA_EARS_EDREQ_10_WIDTH                  1u\n#define DMA_EARS_EDREQ_10(x)                     (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_10_SHIFT))&DMA_EARS_EDREQ_10_MASK)\n#define DMA_EARS_EDREQ_11_MASK                   0x800u\n#define DMA_EARS_EDREQ_11_SHIFT                  11u\n#define DMA_EARS_EDREQ_11_WIDTH                  1u\n#define DMA_EARS_EDREQ_11(x)                     (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_11_SHIFT))&DMA_EARS_EDREQ_11_MASK)\n#define DMA_EARS_EDREQ_12_MASK                   0x1000u\n#define DMA_EARS_EDREQ_12_SHIFT                  12u\n#define DMA_EARS_EDREQ_12_WIDTH                  1u\n#define DMA_EARS_EDREQ_12(x)                     (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_12_SHIFT))&DMA_EARS_EDREQ_12_MASK)\n#define DMA_EARS_EDREQ_13_MASK                   0x2000u\n#define DMA_EARS_EDREQ_13_SHIFT                  13u\n#define DMA_EARS_EDREQ_13_WIDTH                  1u\n#define DMA_EARS_EDREQ_13(x)                     (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_13_SHIFT))&DMA_EARS_EDREQ_13_MASK)\n#define DMA_EARS_EDREQ_14_MASK                   0x4000u\n#define DMA_EARS_EDREQ_14_SHIFT                  14u\n#define DMA_EARS_EDREQ_14_WIDTH                  1u\n#define DMA_EARS_EDREQ_14(x)                     (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_14_SHIFT))&DMA_EARS_EDREQ_14_MASK)\n#define DMA_EARS_EDREQ_15_MASK                   0x8000u\n#define DMA_EARS_EDREQ_15_SHIFT                  15u\n#define DMA_EARS_EDREQ_15_WIDTH                  1u\n#define DMA_EARS_EDREQ_15(x)                     (((uint32_t)(((uint32_t)(x))<<DMA_EARS_EDREQ_15_SHIFT))&DMA_EARS_EDREQ_15_MASK)\n/* DCHPRI Bit Fields */\n#define DMA_DCHPRI_CHPRI_MASK                    0xFu\n#define DMA_DCHPRI_CHPRI_SHIFT                   0u\n#define DMA_DCHPRI_CHPRI_WIDTH                   4u\n#define DMA_DCHPRI_CHPRI(x)                      (((uint8_t)(((uint8_t)(x))<<DMA_DCHPRI_CHPRI_SHIFT))&DMA_DCHPRI_CHPRI_MASK)\n#define DMA_DCHPRI_DPA_MASK                      0x40u\n#define DMA_DCHPRI_DPA_SHIFT                     6u\n#define DMA_DCHPRI_DPA_WIDTH                     1u\n#define DMA_DCHPRI_DPA(x)                        (((uint8_t)(((uint8_t)(x))<<DMA_DCHPRI_DPA_SHIFT))&DMA_DCHPRI_DPA_MASK)\n#define DMA_DCHPRI_ECP_MASK                      0x80u\n#define DMA_DCHPRI_ECP_SHIFT                     7u\n#define DMA_DCHPRI_ECP_WIDTH                     1u\n#define DMA_DCHPRI_ECP(x)                        (((uint8_t)(((uint8_t)(x))<<DMA_DCHPRI_ECP_SHIFT))&DMA_DCHPRI_ECP_MASK)\n/* TCD_SADDR Bit Fields */\n#define DMA_TCD_SADDR_SADDR_MASK                 0xFFFFFFFFu\n#define DMA_TCD_SADDR_SADDR_SHIFT                0u\n#define DMA_TCD_SADDR_SADDR_WIDTH                32u\n#define DMA_TCD_SADDR_SADDR(x)                   (((uint32_t)(((uint32_t)(x))<<DMA_TCD_SADDR_SADDR_SHIFT))&DMA_TCD_SADDR_SADDR_MASK)\n/* TCD_SOFF Bit Fields */\n#define DMA_TCD_SOFF_SOFF_MASK                   0xFFFFu\n#define DMA_TCD_SOFF_SOFF_SHIFT                  0u\n#define DMA_TCD_SOFF_SOFF_WIDTH                  16u\n#define DMA_TCD_SOFF_SOFF(x)                     (((uint16_t)(((uint16_t)(x))<<DMA_TCD_SOFF_SOFF_SHIFT))&DMA_TCD_SOFF_SOFF_MASK)\n/* TCD_ATTR Bit Fields */\n#define DMA_TCD_ATTR_DSIZE_MASK                  0x7u\n#define DMA_TCD_ATTR_DSIZE_SHIFT                 0u\n#define DMA_TCD_ATTR_DSIZE_WIDTH                 3u\n#define DMA_TCD_ATTR_DSIZE(x)                    (((uint16_t)(((uint16_t)(x))<<DMA_TCD_ATTR_DSIZE_SHIFT))&DMA_TCD_ATTR_DSIZE_MASK)\n#define DMA_TCD_ATTR_DMOD_MASK                   0xF8u\n#define DMA_TCD_ATTR_DMOD_SHIFT                  3u\n#define DMA_TCD_ATTR_DMOD_WIDTH                  5u\n#define DMA_TCD_ATTR_DMOD(x)                     (((uint16_t)(((uint16_t)(x))<<DMA_TCD_ATTR_DMOD_SHIFT))&DMA_TCD_ATTR_DMOD_MASK)\n#define DMA_TCD_ATTR_SSIZE_MASK                  0x700u\n#define DMA_TCD_ATTR_SSIZE_SHIFT                 8u\n#define DMA_TCD_ATTR_SSIZE_WIDTH                 3u\n#define DMA_TCD_ATTR_SSIZE(x)                    (((uint16_t)(((uint16_t)(x))<<DMA_TCD_ATTR_SSIZE_SHIFT))&DMA_TCD_ATTR_SSIZE_MASK)\n#define DMA_TCD_ATTR_SMOD_MASK                   0xF800u\n#define DMA_TCD_ATTR_SMOD_SHIFT                  11u\n#define DMA_TCD_ATTR_SMOD_WIDTH                  5u\n#define DMA_TCD_ATTR_SMOD(x)                     (((uint16_t)(((uint16_t)(x))<<DMA_TCD_ATTR_SMOD_SHIFT))&DMA_TCD_ATTR_SMOD_MASK)\n/* TCD_NBYTES_MLNO Bit Fields */\n#define DMA_TCD_NBYTES_MLNO_NBYTES_MASK          0xFFFFFFFFu\n#define DMA_TCD_NBYTES_MLNO_NBYTES_SHIFT         0u\n#define DMA_TCD_NBYTES_MLNO_NBYTES_WIDTH         32u\n#define DMA_TCD_NBYTES_MLNO_NBYTES(x)            (((uint32_t)(((uint32_t)(x))<<DMA_TCD_NBYTES_MLNO_NBYTES_SHIFT))&DMA_TCD_NBYTES_MLNO_NBYTES_MASK)\n/* TCD_NBYTES_MLOFFNO Bit Fields */\n#define DMA_TCD_NBYTES_MLOFFNO_NBYTES_MASK       0x3FFFFFFFu\n#define DMA_TCD_NBYTES_MLOFFNO_NBYTES_SHIFT      0u\n#define DMA_TCD_NBYTES_MLOFFNO_NBYTES_WIDTH      30u\n#define DMA_TCD_NBYTES_MLOFFNO_NBYTES(x)         (((uint32_t)(((uint32_t)(x))<<DMA_TCD_NBYTES_MLOFFNO_NBYTES_SHIFT))&DMA_TCD_NBYTES_MLOFFNO_NBYTES_MASK)\n#define DMA_TCD_NBYTES_MLOFFNO_DMLOE_MASK        0x40000000u\n#define DMA_TCD_NBYTES_MLOFFNO_DMLOE_SHIFT       30u\n#define DMA_TCD_NBYTES_MLOFFNO_DMLOE_WIDTH       1u\n#define DMA_TCD_NBYTES_MLOFFNO_DMLOE(x)          (((uint32_t)(((uint32_t)(x))<<DMA_TCD_NBYTES_MLOFFNO_DMLOE_SHIFT))&DMA_TCD_NBYTES_MLOFFNO_DMLOE_MASK)\n#define DMA_TCD_NBYTES_MLOFFNO_SMLOE_MASK        0x80000000u\n#define DMA_TCD_NBYTES_MLOFFNO_SMLOE_SHIFT       31u\n#define DMA_TCD_NBYTES_MLOFFNO_SMLOE_WIDTH       1u\n#define DMA_TCD_NBYTES_MLOFFNO_SMLOE(x)          (((uint32_t)(((uint32_t)(x))<<DMA_TCD_NBYTES_MLOFFNO_SMLOE_SHIFT))&DMA_TCD_NBYTES_MLOFFNO_SMLOE_MASK)\n/* TCD_NBYTES_MLOFFYES Bit Fields */\n#define DMA_TCD_NBYTES_MLOFFYES_NBYTES_MASK      0x3FFu\n#define DMA_TCD_NBYTES_MLOFFYES_NBYTES_SHIFT     0u\n#define DMA_TCD_NBYTES_MLOFFYES_NBYTES_WIDTH     10u\n#define DMA_TCD_NBYTES_MLOFFYES_NBYTES(x)        (((uint32_t)(((uint32_t)(x))<<DMA_TCD_NBYTES_MLOFFYES_NBYTES_SHIFT))&DMA_TCD_NBYTES_MLOFFYES_NBYTES_MASK)\n#define DMA_TCD_NBYTES_MLOFFYES_MLOFF_MASK       0x3FFFFC00u\n#define DMA_TCD_NBYTES_MLOFFYES_MLOFF_SHIFT      10u\n#define DMA_TCD_NBYTES_MLOFFYES_MLOFF_WIDTH      20u\n#define DMA_TCD_NBYTES_MLOFFYES_MLOFF(x)         (((uint32_t)(((uint32_t)(x))<<DMA_TCD_NBYTES_MLOFFYES_MLOFF_SHIFT))&DMA_TCD_NBYTES_MLOFFYES_MLOFF_MASK)\n#define DMA_TCD_NBYTES_MLOFFYES_DMLOE_MASK       0x40000000u\n#define DMA_TCD_NBYTES_MLOFFYES_DMLOE_SHIFT      30u\n#define DMA_TCD_NBYTES_MLOFFYES_DMLOE_WIDTH      1u\n#define DMA_TCD_NBYTES_MLOFFYES_DMLOE(x)         (((uint32_t)(((uint32_t)(x))<<DMA_TCD_NBYTES_MLOFFYES_DMLOE_SHIFT))&DMA_TCD_NBYTES_MLOFFYES_DMLOE_MASK)\n#define DMA_TCD_NBYTES_MLOFFYES_SMLOE_MASK       0x80000000u\n#define DMA_TCD_NBYTES_MLOFFYES_SMLOE_SHIFT      31u\n#define DMA_TCD_NBYTES_MLOFFYES_SMLOE_WIDTH      1u\n#define DMA_TCD_NBYTES_MLOFFYES_SMLOE(x)         (((uint32_t)(((uint32_t)(x))<<DMA_TCD_NBYTES_MLOFFYES_SMLOE_SHIFT))&DMA_TCD_NBYTES_MLOFFYES_SMLOE_MASK)\n/* TCD_SLAST Bit Fields */\n#define DMA_TCD_SLAST_SLAST_MASK                 0xFFFFFFFFu\n#define DMA_TCD_SLAST_SLAST_SHIFT                0u\n#define DMA_TCD_SLAST_SLAST_WIDTH                32u\n#define DMA_TCD_SLAST_SLAST(x)                   (((uint32_t)(((uint32_t)(x))<<DMA_TCD_SLAST_SLAST_SHIFT))&DMA_TCD_SLAST_SLAST_MASK)\n/* TCD_DADDR Bit Fields */\n#define DMA_TCD_DADDR_DADDR_MASK                 0xFFFFFFFFu\n#define DMA_TCD_DADDR_DADDR_SHIFT                0u\n#define DMA_TCD_DADDR_DADDR_WIDTH                32u\n#define DMA_TCD_DADDR_DADDR(x)                   (((uint32_t)(((uint32_t)(x))<<DMA_TCD_DADDR_DADDR_SHIFT))&DMA_TCD_DADDR_DADDR_MASK)\n/* TCD_DOFF Bit Fields */\n#define DMA_TCD_DOFF_DOFF_MASK                   0xFFFFu\n#define DMA_TCD_DOFF_DOFF_SHIFT                  0u\n#define DMA_TCD_DOFF_DOFF_WIDTH                  16u\n#define DMA_TCD_DOFF_DOFF(x)                     (((uint16_t)(((uint16_t)(x))<<DMA_TCD_DOFF_DOFF_SHIFT))&DMA_TCD_DOFF_DOFF_MASK)\n/* TCD_CITER_ELINKNO Bit Fields */\n#define DMA_TCD_CITER_ELINKNO_CITER_MASK         0x7FFFu\n#define DMA_TCD_CITER_ELINKNO_CITER_SHIFT        0u\n#define DMA_TCD_CITER_ELINKNO_CITER_WIDTH        15u\n#define DMA_TCD_CITER_ELINKNO_CITER(x)           (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CITER_ELINKNO_CITER_SHIFT))&DMA_TCD_CITER_ELINKNO_CITER_MASK)\n#define DMA_TCD_CITER_ELINKNO_ELINK_MASK         0x8000u\n#define DMA_TCD_CITER_ELINKNO_ELINK_SHIFT        15u\n#define DMA_TCD_CITER_ELINKNO_ELINK_WIDTH        1u\n#define DMA_TCD_CITER_ELINKNO_ELINK(x)           (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CITER_ELINKNO_ELINK_SHIFT))&DMA_TCD_CITER_ELINKNO_ELINK_MASK)\n/* TCD_CITER_ELINKYES Bit Fields */\n#define DMA_TCD_CITER_ELINKYES_CITER_LE_MASK     0x1FFu\n#define DMA_TCD_CITER_ELINKYES_CITER_LE_SHIFT    0u\n#define DMA_TCD_CITER_ELINKYES_CITER_LE_WIDTH    9u\n#define DMA_TCD_CITER_ELINKYES_CITER_LE(x)       (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CITER_ELINKYES_CITER_LE_SHIFT))&DMA_TCD_CITER_ELINKYES_CITER_LE_MASK)\n#define DMA_TCD_CITER_ELINKYES_LINKCH_MASK       0x1E00u\n#define DMA_TCD_CITER_ELINKYES_LINKCH_SHIFT      9u\n#define DMA_TCD_CITER_ELINKYES_LINKCH_WIDTH      4u\n#define DMA_TCD_CITER_ELINKYES_LINKCH(x)         (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CITER_ELINKYES_LINKCH_SHIFT))&DMA_TCD_CITER_ELINKYES_LINKCH_MASK)\n#define DMA_TCD_CITER_ELINKYES_ELINK_MASK        0x8000u\n#define DMA_TCD_CITER_ELINKYES_ELINK_SHIFT       15u\n#define DMA_TCD_CITER_ELINKYES_ELINK_WIDTH       1u\n#define DMA_TCD_CITER_ELINKYES_ELINK(x)          (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CITER_ELINKYES_ELINK_SHIFT))&DMA_TCD_CITER_ELINKYES_ELINK_MASK)\n/* TCD_DLASTSGA Bit Fields */\n#define DMA_TCD_DLASTSGA_DLASTSGA_MASK           0xFFFFFFFFu\n#define DMA_TCD_DLASTSGA_DLASTSGA_SHIFT          0u\n#define DMA_TCD_DLASTSGA_DLASTSGA_WIDTH          32u\n#define DMA_TCD_DLASTSGA_DLASTSGA(x)             (((uint32_t)(((uint32_t)(x))<<DMA_TCD_DLASTSGA_DLASTSGA_SHIFT))&DMA_TCD_DLASTSGA_DLASTSGA_MASK)\n/* TCD_CSR Bit Fields */\n#define DMA_TCD_CSR_START_MASK                   0x1u\n#define DMA_TCD_CSR_START_SHIFT                  0u\n#define DMA_TCD_CSR_START_WIDTH                  1u\n#define DMA_TCD_CSR_START(x)                     (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CSR_START_SHIFT))&DMA_TCD_CSR_START_MASK)\n#define DMA_TCD_CSR_INTMAJOR_MASK                0x2u\n#define DMA_TCD_CSR_INTMAJOR_SHIFT               1u\n#define DMA_TCD_CSR_INTMAJOR_WIDTH               1u\n#define DMA_TCD_CSR_INTMAJOR(x)                  (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CSR_INTMAJOR_SHIFT))&DMA_TCD_CSR_INTMAJOR_MASK)\n#define DMA_TCD_CSR_INTHALF_MASK                 0x4u\n#define DMA_TCD_CSR_INTHALF_SHIFT                2u\n#define DMA_TCD_CSR_INTHALF_WIDTH                1u\n#define DMA_TCD_CSR_INTHALF(x)                   (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CSR_INTHALF_SHIFT))&DMA_TCD_CSR_INTHALF_MASK)\n#define DMA_TCD_CSR_DREQ_MASK                    0x8u\n#define DMA_TCD_CSR_DREQ_SHIFT                   3u\n#define DMA_TCD_CSR_DREQ_WIDTH                   1u\n#define DMA_TCD_CSR_DREQ(x)                      (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CSR_DREQ_SHIFT))&DMA_TCD_CSR_DREQ_MASK)\n#define DMA_TCD_CSR_ESG_MASK                     0x10u\n#define DMA_TCD_CSR_ESG_SHIFT                    4u\n#define DMA_TCD_CSR_ESG_WIDTH                    1u\n#define DMA_TCD_CSR_ESG(x)                       (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CSR_ESG_SHIFT))&DMA_TCD_CSR_ESG_MASK)\n#define DMA_TCD_CSR_MAJORELINK_MASK              0x20u\n#define DMA_TCD_CSR_MAJORELINK_SHIFT             5u\n#define DMA_TCD_CSR_MAJORELINK_WIDTH             1u\n#define DMA_TCD_CSR_MAJORELINK(x)                (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CSR_MAJORELINK_SHIFT))&DMA_TCD_CSR_MAJORELINK_MASK)\n#define DMA_TCD_CSR_ACTIVE_MASK                  0x40u\n#define DMA_TCD_CSR_ACTIVE_SHIFT                 6u\n#define DMA_TCD_CSR_ACTIVE_WIDTH                 1u\n#define DMA_TCD_CSR_ACTIVE(x)                    (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CSR_ACTIVE_SHIFT))&DMA_TCD_CSR_ACTIVE_MASK)\n#define DMA_TCD_CSR_DONE_MASK                    0x80u\n#define DMA_TCD_CSR_DONE_SHIFT                   7u\n#define DMA_TCD_CSR_DONE_WIDTH                   1u\n#define DMA_TCD_CSR_DONE(x)                      (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CSR_DONE_SHIFT))&DMA_TCD_CSR_DONE_MASK)\n#define DMA_TCD_CSR_MAJORLINKCH_MASK             0xF00u\n#define DMA_TCD_CSR_MAJORLINKCH_SHIFT            8u\n#define DMA_TCD_CSR_MAJORLINKCH_WIDTH            4u\n#define DMA_TCD_CSR_MAJORLINKCH(x)               (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CSR_MAJORLINKCH_SHIFT))&DMA_TCD_CSR_MAJORLINKCH_MASK)\n#define DMA_TCD_CSR_BWC_MASK                     0xC000u\n#define DMA_TCD_CSR_BWC_SHIFT                    14u\n#define DMA_TCD_CSR_BWC_WIDTH                    2u\n#define DMA_TCD_CSR_BWC(x)                       (((uint16_t)(((uint16_t)(x))<<DMA_TCD_CSR_BWC_SHIFT))&DMA_TCD_CSR_BWC_MASK)\n/* TCD_BITER_ELINKNO Bit Fields */\n#define DMA_TCD_BITER_ELINKNO_BITER_MASK         0x7FFFu\n#define DMA_TCD_BITER_ELINKNO_BITER_SHIFT        0u\n#define DMA_TCD_BITER_ELINKNO_BITER_WIDTH        15u\n#define DMA_TCD_BITER_ELINKNO_BITER(x)           (((uint16_t)(((uint16_t)(x))<<DMA_TCD_BITER_ELINKNO_BITER_SHIFT))&DMA_TCD_BITER_ELINKNO_BITER_MASK)\n#define DMA_TCD_BITER_ELINKNO_ELINK_MASK         0x8000u\n#define DMA_TCD_BITER_ELINKNO_ELINK_SHIFT        15u\n#define DMA_TCD_BITER_ELINKNO_ELINK_WIDTH        1u\n#define DMA_TCD_BITER_ELINKNO_ELINK(x)           (((uint16_t)(((uint16_t)(x))<<DMA_TCD_BITER_ELINKNO_ELINK_SHIFT))&DMA_TCD_BITER_ELINKNO_ELINK_MASK)\n/* TCD_BITER_ELINKYES Bit Fields */\n#define DMA_TCD_BITER_ELINKYES_BITER_MASK        0x1FFu\n#define DMA_TCD_BITER_ELINKYES_BITER_SHIFT       0u\n#define DMA_TCD_BITER_ELINKYES_BITER_WIDTH       9u\n#define DMA_TCD_BITER_ELINKYES_BITER(x)          (((uint16_t)(((uint16_t)(x))<<DMA_TCD_BITER_ELINKYES_BITER_SHIFT))&DMA_TCD_BITER_ELINKYES_BITER_MASK)\n#define DMA_TCD_BITER_ELINKYES_LINKCH_MASK       0x1E00u\n#define DMA_TCD_BITER_ELINKYES_LINKCH_SHIFT      9u\n#define DMA_TCD_BITER_ELINKYES_LINKCH_WIDTH      4u\n#define DMA_TCD_BITER_ELINKYES_LINKCH(x)         (((uint16_t)(((uint16_t)(x))<<DMA_TCD_BITER_ELINKYES_LINKCH_SHIFT))&DMA_TCD_BITER_ELINKYES_LINKCH_MASK)\n#define DMA_TCD_BITER_ELINKYES_ELINK_MASK        0x8000u\n#define DMA_TCD_BITER_ELINKYES_ELINK_SHIFT       15u\n#define DMA_TCD_BITER_ELINKYES_ELINK_WIDTH       1u\n#define DMA_TCD_BITER_ELINKYES_ELINK(x)          (((uint16_t)(((uint16_t)(x))<<DMA_TCD_BITER_ELINKYES_ELINK_SHIFT))&DMA_TCD_BITER_ELINKYES_ELINK_MASK)\n\n/*!\n * @}\n */ /* end of group DMA_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group DMA_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- DMAMUX Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup DMAMUX_Peripheral_Access_Layer DMAMUX Peripheral Access Layer\n * @{\n */\n\n\n/** DMAMUX - Size of Registers Arrays */\n#define DMAMUX_CHCFG_COUNT                       16u\n\n/** DMAMUX - Register Layout Typedef */\ntypedef struct {\n  __IO uint8_t CHCFG[DMAMUX_CHCFG_COUNT];          /**< Channel Configuration register, array offset: 0x0, array step: 0x1 */\n} DMAMUX_Type, *DMAMUX_MemMapPtr;\n\n /** Number of instances of the DMAMUX module. */\n#define DMAMUX_INSTANCE_COUNT                    (1u)\n\n\n/* DMAMUX - Peripheral instance base addresses */\n/** Peripheral DMAMUX base address */\n#define DMAMUX_BASE                              (0x40021000u)\n/** Peripheral DMAMUX base pointer */\n#define DMAMUX                                   ((DMAMUX_Type *)DMAMUX_BASE)\n/** Array initializer of DMAMUX peripheral base addresses */\n#define DMAMUX_BASE_ADDRS                        { DMAMUX_BASE }\n/** Array initializer of DMAMUX peripheral base pointers */\n#define DMAMUX_BASE_PTRS                         { DMAMUX }\n\n/* ----------------------------------------------------------------------------\n   -- DMAMUX Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup DMAMUX_Register_Masks DMAMUX Register Masks\n * @{\n */\n\n/* CHCFG Bit Fields */\n#define DMAMUX_CHCFG_SOURCE_MASK                 0x3Fu\n#define DMAMUX_CHCFG_SOURCE_SHIFT                0u\n#define DMAMUX_CHCFG_SOURCE_WIDTH                6u\n#define DMAMUX_CHCFG_SOURCE(x)                   (((uint8_t)(((uint8_t)(x))<<DMAMUX_CHCFG_SOURCE_SHIFT))&DMAMUX_CHCFG_SOURCE_MASK)\n#define DMAMUX_CHCFG_TRIG_MASK                   0x40u\n#define DMAMUX_CHCFG_TRIG_SHIFT                  6u\n#define DMAMUX_CHCFG_TRIG_WIDTH                  1u\n#define DMAMUX_CHCFG_TRIG(x)                     (((uint8_t)(((uint8_t)(x))<<DMAMUX_CHCFG_TRIG_SHIFT))&DMAMUX_CHCFG_TRIG_MASK)\n#define DMAMUX_CHCFG_ENBL_MASK                   0x80u\n#define DMAMUX_CHCFG_ENBL_SHIFT                  7u\n#define DMAMUX_CHCFG_ENBL_WIDTH                  1u\n#define DMAMUX_CHCFG_ENBL(x)                     (((uint8_t)(((uint8_t)(x))<<DMAMUX_CHCFG_ENBL_SHIFT))&DMAMUX_CHCFG_ENBL_MASK)\n\n/*!\n * @}\n */ /* end of group DMAMUX_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group DMAMUX_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- EIM Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup EIM_Peripheral_Access_Layer EIM Peripheral Access Layer\n * @{\n */\n\n\n/** EIM - Size of Registers Arrays */\n#define EIM_EICHDn_COUNT                         2u\n\n/** EIM - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t EIMCR;                             /**< Error Injection Module Configuration Register, offset: 0x0 */\n  __IO uint32_t EICHEN;                            /**< Error Injection Channel Enable register, offset: 0x4 */\n       uint8_t RESERVED_0[248];\n  struct {                                         /* offset: 0x100, array step: 0x100 */\n    __IO uint32_t WORD0;                             /**< Error Injection Channel Descriptor n, Word0, array offset: 0x100, array step: 0x100 */\n    __IO uint32_t WORD1;                             /**< Error Injection Channel Descriptor n, Word1, array offset: 0x104, array step: 0x100 */\n         uint8_t RESERVED_0[248];\n  } EICHDn[EIM_EICHDn_COUNT];\n} EIM_Type, *EIM_MemMapPtr;\n\n /** Number of instances of the EIM module. */\n#define EIM_INSTANCE_COUNT                       (1u)\n\n\n/* EIM - Peripheral instance base addresses */\n/** Peripheral EIM base address */\n#define EIM_BASE                                 (0x40019000u)\n/** Peripheral EIM base pointer */\n#define EIM                                      ((EIM_Type *)EIM_BASE)\n/** Array initializer of EIM peripheral base addresses */\n#define EIM_BASE_ADDRS                           { EIM_BASE }\n/** Array initializer of EIM peripheral base pointers */\n#define EIM_BASE_PTRS                            { EIM }\n\n/* ----------------------------------------------------------------------------\n   -- EIM Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup EIM_Register_Masks EIM Register Masks\n * @{\n */\n\n/* EIMCR Bit Fields */\n#define EIM_EIMCR_GEIEN_MASK                     0x1u\n#define EIM_EIMCR_GEIEN_SHIFT                    0u\n#define EIM_EIMCR_GEIEN_WIDTH                    1u\n#define EIM_EIMCR_GEIEN(x)                       (((uint32_t)(((uint32_t)(x))<<EIM_EIMCR_GEIEN_SHIFT))&EIM_EIMCR_GEIEN_MASK)\n/* EICHEN Bit Fields */\n#define EIM_EICHEN_EICH1EN_MASK                  0x40000000u\n#define EIM_EICHEN_EICH1EN_SHIFT                 30u\n#define EIM_EICHEN_EICH1EN_WIDTH                 1u\n#define EIM_EICHEN_EICH1EN(x)                    (((uint32_t)(((uint32_t)(x))<<EIM_EICHEN_EICH1EN_SHIFT))&EIM_EICHEN_EICH1EN_MASK)\n#define EIM_EICHEN_EICH0EN_MASK                  0x80000000u\n#define EIM_EICHEN_EICH0EN_SHIFT                 31u\n#define EIM_EICHEN_EICH0EN_WIDTH                 1u\n#define EIM_EICHEN_EICH0EN(x)                    (((uint32_t)(((uint32_t)(x))<<EIM_EICHEN_EICH0EN_SHIFT))&EIM_EICHEN_EICH0EN_MASK)\n/* EICHDn_WORD0 Bit Fields */\n#define EIM_EICHDn_WORD0_CHKBIT_MASK_MASK        0xFE000000u\n#define EIM_EICHDn_WORD0_CHKBIT_MASK_SHIFT       25u\n#define EIM_EICHDn_WORD0_CHKBIT_MASK_WIDTH       7u\n#define EIM_EICHDn_WORD0_CHKBIT_MASK(x)          (((uint32_t)(((uint32_t)(x))<<EIM_EICHDn_WORD0_CHKBIT_MASK_SHIFT))&EIM_EICHDn_WORD0_CHKBIT_MASK_MASK)\n/* EICHDn_WORD1 Bit Fields */\n#define EIM_EICHDn_WORD1_B0_3DATA_MASK_MASK      0xFFFFFFFFu\n#define EIM_EICHDn_WORD1_B0_3DATA_MASK_SHIFT     0u\n#define EIM_EICHDn_WORD1_B0_3DATA_MASK_WIDTH     32u\n#define EIM_EICHDn_WORD1_B0_3DATA_MASK(x)        (((uint32_t)(((uint32_t)(x))<<EIM_EICHDn_WORD1_B0_3DATA_MASK_SHIFT))&EIM_EICHDn_WORD1_B0_3DATA_MASK_MASK)\n\n/*!\n * @}\n */ /* end of group EIM_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group EIM_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- ERM Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup ERM_Peripheral_Access_Layer ERM Peripheral Access Layer\n * @{\n */\n\n\n/** ERM - Size of Registers Arrays */\n#define ERM_EARn_COUNT                           2u\n\n/** ERM - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t CR0;                               /**< ERM Configuration Register 0, offset: 0x0 */\n       uint8_t RESERVED_0[12];\n  __IO uint32_t SR0;                               /**< ERM Status Register 0, offset: 0x10 */\n       uint8_t RESERVED_1[236];\n  struct {                                         /* offset: 0x100, array step: 0x10 */\n    __I  uint32_t EAR;                               /**< ERM Memory n Error Address Register, array offset: 0x100, array step: 0x10 */\n         uint8_t RESERVED_0[12];\n  } EARn[ERM_EARn_COUNT];\n} ERM_Type, *ERM_MemMapPtr;\n\n /** Number of instances of the ERM module. */\n#define ERM_INSTANCE_COUNT                       (1u)\n\n\n/* ERM - Peripheral instance base addresses */\n/** Peripheral ERM base address */\n#define ERM_BASE                                 (0x40018000u)\n/** Peripheral ERM base pointer */\n#define ERM                                      ((ERM_Type *)ERM_BASE)\n/** Array initializer of ERM peripheral base addresses */\n#define ERM_BASE_ADDRS                           { ERM_BASE }\n/** Array initializer of ERM peripheral base pointers */\n#define ERM_BASE_PTRS                            { ERM }\n /** Number of interrupt vector arrays for the ERM module. */\n#define ERM_IRQS_ARR_COUNT                       (2u)\n /** Number of interrupt channels for the SINGLE type of ERM module. */\n#define ERM_SINGLE_IRQS_CH_COUNT                 (1u)\n /** Number of interrupt channels for the DOUBLE type of ERM module. */\n#define ERM_DOUBLE_IRQS_CH_COUNT                 (1u)\n/** Interrupt vectors for the ERM peripheral type */\n#define ERM_SINGLE_IRQS                          { ERM_single_fault_IRQn }\n#define ERM_DOUBLE_IRQS                          { ERM_double_fault_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- ERM Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup ERM_Register_Masks ERM Register Masks\n * @{\n */\n\n/* CR0 Bit Fields */\n#define ERM_CR0_ENCIE1_MASK                      0x4000000u\n#define ERM_CR0_ENCIE1_SHIFT                     26u\n#define ERM_CR0_ENCIE1_WIDTH                     1u\n#define ERM_CR0_ENCIE1(x)                        (((uint32_t)(((uint32_t)(x))<<ERM_CR0_ENCIE1_SHIFT))&ERM_CR0_ENCIE1_MASK)\n#define ERM_CR0_ESCIE1_MASK                      0x8000000u\n#define ERM_CR0_ESCIE1_SHIFT                     27u\n#define ERM_CR0_ESCIE1_WIDTH                     1u\n#define ERM_CR0_ESCIE1(x)                        (((uint32_t)(((uint32_t)(x))<<ERM_CR0_ESCIE1_SHIFT))&ERM_CR0_ESCIE1_MASK)\n#define ERM_CR0_ENCIE0_MASK                      0x40000000u\n#define ERM_CR0_ENCIE0_SHIFT                     30u\n#define ERM_CR0_ENCIE0_WIDTH                     1u\n#define ERM_CR0_ENCIE0(x)                        (((uint32_t)(((uint32_t)(x))<<ERM_CR0_ENCIE0_SHIFT))&ERM_CR0_ENCIE0_MASK)\n#define ERM_CR0_ESCIE0_MASK                      0x80000000u\n#define ERM_CR0_ESCIE0_SHIFT                     31u\n#define ERM_CR0_ESCIE0_WIDTH                     1u\n#define ERM_CR0_ESCIE0(x)                        (((uint32_t)(((uint32_t)(x))<<ERM_CR0_ESCIE0_SHIFT))&ERM_CR0_ESCIE0_MASK)\n/* SR0 Bit Fields */\n#define ERM_SR0_NCE1_MASK                        0x4000000u\n#define ERM_SR0_NCE1_SHIFT                       26u\n#define ERM_SR0_NCE1_WIDTH                       1u\n#define ERM_SR0_NCE1(x)                          (((uint32_t)(((uint32_t)(x))<<ERM_SR0_NCE1_SHIFT))&ERM_SR0_NCE1_MASK)\n#define ERM_SR0_SBC1_MASK                        0x8000000u\n#define ERM_SR0_SBC1_SHIFT                       27u\n#define ERM_SR0_SBC1_WIDTH                       1u\n#define ERM_SR0_SBC1(x)                          (((uint32_t)(((uint32_t)(x))<<ERM_SR0_SBC1_SHIFT))&ERM_SR0_SBC1_MASK)\n#define ERM_SR0_NCE0_MASK                        0x40000000u\n#define ERM_SR0_NCE0_SHIFT                       30u\n#define ERM_SR0_NCE0_WIDTH                       1u\n#define ERM_SR0_NCE0(x)                          (((uint32_t)(((uint32_t)(x))<<ERM_SR0_NCE0_SHIFT))&ERM_SR0_NCE0_MASK)\n#define ERM_SR0_SBC0_MASK                        0x80000000u\n#define ERM_SR0_SBC0_SHIFT                       31u\n#define ERM_SR0_SBC0_WIDTH                       1u\n#define ERM_SR0_SBC0(x)                          (((uint32_t)(((uint32_t)(x))<<ERM_SR0_SBC0_SHIFT))&ERM_SR0_SBC0_MASK)\n/* EAR Bit Fields */\n#define ERM_EAR_EAR_MASK                         0xFFFFFFFFu\n#define ERM_EAR_EAR_SHIFT                        0u\n#define ERM_EAR_EAR_WIDTH                        32u\n#define ERM_EAR_EAR(x)                           (((uint32_t)(((uint32_t)(x))<<ERM_EAR_EAR_SHIFT))&ERM_EAR_EAR_MASK)\n\n/*!\n * @}\n */ /* end of group ERM_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group ERM_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- EWM Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup EWM_Peripheral_Access_Layer EWM Peripheral Access Layer\n * @{\n */\n\n\n/** EWM - Size of Registers Arrays */\n\n/** EWM - Register Layout Typedef */\ntypedef struct {\n  __IO uint8_t CTRL;                               /**< Control Register, offset: 0x0 */\n  __O  uint8_t SERV;                               /**< Service Register, offset: 0x1 */\n  __IO uint8_t CMPL;                               /**< Compare Low Register, offset: 0x2 */\n  __IO uint8_t CMPH;                               /**< Compare High Register, offset: 0x3 */\n       uint8_t RESERVED_0[1];\n  __IO uint8_t CLKPRESCALER;                       /**< Clock Prescaler Register, offset: 0x5 */\n} EWM_Type, *EWM_MemMapPtr;\n\n /** Number of instances of the EWM module. */\n#define EWM_INSTANCE_COUNT                       (1u)\n\n\n/* EWM - Peripheral instance base addresses */\n/** Peripheral EWM base address */\n#define EWM_BASE                                 (0x40061000u)\n/** Peripheral EWM base pointer */\n#define EWM                                      ((EWM_Type *)EWM_BASE)\n/** Array initializer of EWM peripheral base addresses */\n#define EWM_BASE_ADDRS                           { EWM_BASE }\n/** Array initializer of EWM peripheral base pointers */\n#define EWM_BASE_PTRS                            { EWM }\n /** Number of interrupt vector arrays for the EWM module. */\n#define EWM_IRQS_ARR_COUNT                       (1u)\n /** Number of interrupt channels for the EWM module. */\n#define EWM_IRQS_CH_COUNT                        (1u)\n/** Interrupt vectors for the EWM peripheral type */\n#define EWM_IRQS                                 { WDOG_EWM_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- EWM Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup EWM_Register_Masks EWM Register Masks\n * @{\n */\n\n/* CTRL Bit Fields */\n#define EWM_CTRL_EWMEN_MASK                      0x1u\n#define EWM_CTRL_EWMEN_SHIFT                     0u\n#define EWM_CTRL_EWMEN_WIDTH                     1u\n#define EWM_CTRL_EWMEN(x)                        (((uint8_t)(((uint8_t)(x))<<EWM_CTRL_EWMEN_SHIFT))&EWM_CTRL_EWMEN_MASK)\n#define EWM_CTRL_ASSIN_MASK                      0x2u\n#define EWM_CTRL_ASSIN_SHIFT                     1u\n#define EWM_CTRL_ASSIN_WIDTH                     1u\n#define EWM_CTRL_ASSIN(x)                        (((uint8_t)(((uint8_t)(x))<<EWM_CTRL_ASSIN_SHIFT))&EWM_CTRL_ASSIN_MASK)\n#define EWM_CTRL_INEN_MASK                       0x4u\n#define EWM_CTRL_INEN_SHIFT                      2u\n#define EWM_CTRL_INEN_WIDTH                      1u\n#define EWM_CTRL_INEN(x)                         (((uint8_t)(((uint8_t)(x))<<EWM_CTRL_INEN_SHIFT))&EWM_CTRL_INEN_MASK)\n#define EWM_CTRL_INTEN_MASK                      0x8u\n#define EWM_CTRL_INTEN_SHIFT                     3u\n#define EWM_CTRL_INTEN_WIDTH                     1u\n#define EWM_CTRL_INTEN(x)                        (((uint8_t)(((uint8_t)(x))<<EWM_CTRL_INTEN_SHIFT))&EWM_CTRL_INTEN_MASK)\n/* SERV Bit Fields */\n#define EWM_SERV_SERVICE_MASK                    0xFFu\n#define EWM_SERV_SERVICE_SHIFT                   0u\n#define EWM_SERV_SERVICE_WIDTH                   8u\n#define EWM_SERV_SERVICE(x)                      (((uint8_t)(((uint8_t)(x))<<EWM_SERV_SERVICE_SHIFT))&EWM_SERV_SERVICE_MASK)\n/* CMPL Bit Fields */\n#define EWM_CMPL_COMPAREL_MASK                   0xFFu\n#define EWM_CMPL_COMPAREL_SHIFT                  0u\n#define EWM_CMPL_COMPAREL_WIDTH                  8u\n#define EWM_CMPL_COMPAREL(x)                     (((uint8_t)(((uint8_t)(x))<<EWM_CMPL_COMPAREL_SHIFT))&EWM_CMPL_COMPAREL_MASK)\n/* CMPH Bit Fields */\n#define EWM_CMPH_COMPAREH_MASK                   0xFFu\n#define EWM_CMPH_COMPAREH_SHIFT                  0u\n#define EWM_CMPH_COMPAREH_WIDTH                  8u\n#define EWM_CMPH_COMPAREH(x)                     (((uint8_t)(((uint8_t)(x))<<EWM_CMPH_COMPAREH_SHIFT))&EWM_CMPH_COMPAREH_MASK)\n/* CLKPRESCALER Bit Fields */\n#define EWM_CLKPRESCALER_CLK_DIV_MASK            0xFFu\n#define EWM_CLKPRESCALER_CLK_DIV_SHIFT           0u\n#define EWM_CLKPRESCALER_CLK_DIV_WIDTH           8u\n#define EWM_CLKPRESCALER_CLK_DIV(x)              (((uint8_t)(((uint8_t)(x))<<EWM_CLKPRESCALER_CLK_DIV_SHIFT))&EWM_CLKPRESCALER_CLK_DIV_MASK)\n\n/*!\n * @}\n */ /* end of group EWM_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group EWM_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- FLEXIO Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup FLEXIO_Peripheral_Access_Layer FLEXIO Peripheral Access Layer\n * @{\n */\n\n\n/** FLEXIO - Size of Registers Arrays */\n#define FLEXIO_SHIFTCTL_COUNT                    4u\n#define FLEXIO_SHIFTCFG_COUNT                    4u\n#define FLEXIO_SHIFTBUF_COUNT                    4u\n#define FLEXIO_SHIFTBUFBIS_COUNT                 4u\n#define FLEXIO_SHIFTBUFBYS_COUNT                 4u\n#define FLEXIO_SHIFTBUFBBS_COUNT                 4u\n#define FLEXIO_TIMCTL_COUNT                      4u\n#define FLEXIO_TIMCFG_COUNT                      4u\n#define FLEXIO_TIMCMP_COUNT                      4u\n\n/** FLEXIO - Register Layout Typedef */\ntypedef struct {\n  __I  uint32_t VERID;                             /**< Version ID Register, offset: 0x0 */\n  __I  uint32_t PARAM;                             /**< Parameter Register, offset: 0x4 */\n  __IO uint32_t CTRL;                              /**< FlexIO Control Register, offset: 0x8 */\n  __I  uint32_t PIN;                               /**< Pin State Register, offset: 0xC */\n  __IO uint32_t SHIFTSTAT;                         /**< Shifter Status Register, offset: 0x10 */\n  __IO uint32_t SHIFTERR;                          /**< Shifter Error Register, offset: 0x14 */\n  __IO uint32_t TIMSTAT;                           /**< Timer Status Register, offset: 0x18 */\n       uint8_t RESERVED_0[4];\n  __IO uint32_t SHIFTSIEN;                         /**< Shifter Status Interrupt Enable, offset: 0x20 */\n  __IO uint32_t SHIFTEIEN;                         /**< Shifter Error Interrupt Enable, offset: 0x24 */\n  __IO uint32_t TIMIEN;                            /**< Timer Interrupt Enable Register, offset: 0x28 */\n       uint8_t RESERVED_1[4];\n  __IO uint32_t SHIFTSDEN;                         /**< Shifter Status DMA Enable, offset: 0x30 */\n       uint8_t RESERVED_2[76];\n  __IO uint32_t SHIFTCTL[FLEXIO_SHIFTCTL_COUNT];   /**< Shifter Control N Register, array offset: 0x80, array step: 0x4 */\n       uint8_t RESERVED_3[112];\n  __IO uint32_t SHIFTCFG[FLEXIO_SHIFTCFG_COUNT];   /**< Shifter Configuration N Register, array offset: 0x100, array step: 0x4 */\n       uint8_t RESERVED_4[240];\n  __IO uint32_t SHIFTBUF[FLEXIO_SHIFTBUF_COUNT];   /**< Shifter Buffer N Register, array offset: 0x200, array step: 0x4 */\n       uint8_t RESERVED_5[112];\n  __IO uint32_t SHIFTBUFBIS[FLEXIO_SHIFTBUFBIS_COUNT]; /**< Shifter Buffer N Bit Swapped Register, array offset: 0x280, array step: 0x4 */\n       uint8_t RESERVED_6[112];\n  __IO uint32_t SHIFTBUFBYS[FLEXIO_SHIFTBUFBYS_COUNT]; /**< Shifter Buffer N Byte Swapped Register, array offset: 0x300, array step: 0x4 */\n       uint8_t RESERVED_7[112];\n  __IO uint32_t SHIFTBUFBBS[FLEXIO_SHIFTBUFBBS_COUNT]; /**< Shifter Buffer N Bit Byte Swapped Register, array offset: 0x380, array step: 0x4 */\n       uint8_t RESERVED_8[112];\n  __IO uint32_t TIMCTL[FLEXIO_TIMCTL_COUNT];       /**< Timer Control N Register, array offset: 0x400, array step: 0x4 */\n       uint8_t RESERVED_9[112];\n  __IO uint32_t TIMCFG[FLEXIO_TIMCFG_COUNT];       /**< Timer Configuration N Register, array offset: 0x480, array step: 0x4 */\n       uint8_t RESERVED_10[112];\n  __IO uint32_t TIMCMP[FLEXIO_TIMCMP_COUNT];       /**< Timer Compare N Register, array offset: 0x500, array step: 0x4 */\n} FLEXIO_Type, *FLEXIO_MemMapPtr;\n\n /** Number of instances of the FLEXIO module. */\n#define FLEXIO_INSTANCE_COUNT                    (1u)\n\n\n/* FLEXIO - Peripheral instance base addresses */\n/** Peripheral FLEXIO base address */\n#define FLEXIO_BASE                              (0x4005A000u)\n/** Peripheral FLEXIO base pointer */\n#define FLEXIO                                   ((FLEXIO_Type *)FLEXIO_BASE)\n/** Array initializer of FLEXIO peripheral base addresses */\n#define FLEXIO_BASE_ADDRS                        { FLEXIO_BASE }\n/** Array initializer of FLEXIO peripheral base pointers */\n#define FLEXIO_BASE_PTRS                         { FLEXIO }\n /** Number of interrupt vector arrays for the FLEXIO module. */\n#define FLEXIO_IRQS_ARR_COUNT                    (1u)\n /** Number of interrupt channels for the FLEXIO module. */\n#define FLEXIO_IRQS_CH_COUNT                     (1u)\n/** Interrupt vectors for the FLEXIO peripheral type */\n#define FLEXIO_IRQS                              { FLEXIO_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- FLEXIO Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup FLEXIO_Register_Masks FLEXIO Register Masks\n * @{\n */\n\n/* VERID Bit Fields */\n#define FLEXIO_VERID_FEATURE_MASK                0xFFFFu\n#define FLEXIO_VERID_FEATURE_SHIFT               0u\n#define FLEXIO_VERID_FEATURE_WIDTH               16u\n#define FLEXIO_VERID_FEATURE(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_VERID_FEATURE_SHIFT))&FLEXIO_VERID_FEATURE_MASK)\n#define FLEXIO_VERID_MINOR_MASK                  0xFF0000u\n#define FLEXIO_VERID_MINOR_SHIFT                 16u\n#define FLEXIO_VERID_MINOR_WIDTH                 8u\n#define FLEXIO_VERID_MINOR(x)                    (((uint32_t)(((uint32_t)(x))<<FLEXIO_VERID_MINOR_SHIFT))&FLEXIO_VERID_MINOR_MASK)\n#define FLEXIO_VERID_MAJOR_MASK                  0xFF000000u\n#define FLEXIO_VERID_MAJOR_SHIFT                 24u\n#define FLEXIO_VERID_MAJOR_WIDTH                 8u\n#define FLEXIO_VERID_MAJOR(x)                    (((uint32_t)(((uint32_t)(x))<<FLEXIO_VERID_MAJOR_SHIFT))&FLEXIO_VERID_MAJOR_MASK)\n/* PARAM Bit Fields */\n#define FLEXIO_PARAM_SHIFTER_MASK                0xFFu\n#define FLEXIO_PARAM_SHIFTER_SHIFT               0u\n#define FLEXIO_PARAM_SHIFTER_WIDTH               8u\n#define FLEXIO_PARAM_SHIFTER(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_PARAM_SHIFTER_SHIFT))&FLEXIO_PARAM_SHIFTER_MASK)\n#define FLEXIO_PARAM_TIMER_MASK                  0xFF00u\n#define FLEXIO_PARAM_TIMER_SHIFT                 8u\n#define FLEXIO_PARAM_TIMER_WIDTH                 8u\n#define FLEXIO_PARAM_TIMER(x)                    (((uint32_t)(((uint32_t)(x))<<FLEXIO_PARAM_TIMER_SHIFT))&FLEXIO_PARAM_TIMER_MASK)\n#define FLEXIO_PARAM_PIN_MASK                    0xFF0000u\n#define FLEXIO_PARAM_PIN_SHIFT                   16u\n#define FLEXIO_PARAM_PIN_WIDTH                   8u\n#define FLEXIO_PARAM_PIN(x)                      (((uint32_t)(((uint32_t)(x))<<FLEXIO_PARAM_PIN_SHIFT))&FLEXIO_PARAM_PIN_MASK)\n#define FLEXIO_PARAM_TRIGGER_MASK                0xFF000000u\n#define FLEXIO_PARAM_TRIGGER_SHIFT               24u\n#define FLEXIO_PARAM_TRIGGER_WIDTH               8u\n#define FLEXIO_PARAM_TRIGGER(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_PARAM_TRIGGER_SHIFT))&FLEXIO_PARAM_TRIGGER_MASK)\n/* CTRL Bit Fields */\n#define FLEXIO_CTRL_FLEXEN_MASK                  0x1u\n#define FLEXIO_CTRL_FLEXEN_SHIFT                 0u\n#define FLEXIO_CTRL_FLEXEN_WIDTH                 1u\n#define FLEXIO_CTRL_FLEXEN(x)                    (((uint32_t)(((uint32_t)(x))<<FLEXIO_CTRL_FLEXEN_SHIFT))&FLEXIO_CTRL_FLEXEN_MASK)\n#define FLEXIO_CTRL_SWRST_MASK                   0x2u\n#define FLEXIO_CTRL_SWRST_SHIFT                  1u\n#define FLEXIO_CTRL_SWRST_WIDTH                  1u\n#define FLEXIO_CTRL_SWRST(x)                     (((uint32_t)(((uint32_t)(x))<<FLEXIO_CTRL_SWRST_SHIFT))&FLEXIO_CTRL_SWRST_MASK)\n#define FLEXIO_CTRL_FASTACC_MASK                 0x4u\n#define FLEXIO_CTRL_FASTACC_SHIFT                2u\n#define FLEXIO_CTRL_FASTACC_WIDTH                1u\n#define FLEXIO_CTRL_FASTACC(x)                   (((uint32_t)(((uint32_t)(x))<<FLEXIO_CTRL_FASTACC_SHIFT))&FLEXIO_CTRL_FASTACC_MASK)\n#define FLEXIO_CTRL_DBGE_MASK                    0x40000000u\n#define FLEXIO_CTRL_DBGE_SHIFT                   30u\n#define FLEXIO_CTRL_DBGE_WIDTH                   1u\n#define FLEXIO_CTRL_DBGE(x)                      (((uint32_t)(((uint32_t)(x))<<FLEXIO_CTRL_DBGE_SHIFT))&FLEXIO_CTRL_DBGE_MASK)\n#define FLEXIO_CTRL_DOZEN_MASK                   0x80000000u\n#define FLEXIO_CTRL_DOZEN_SHIFT                  31u\n#define FLEXIO_CTRL_DOZEN_WIDTH                  1u\n#define FLEXIO_CTRL_DOZEN(x)                     (((uint32_t)(((uint32_t)(x))<<FLEXIO_CTRL_DOZEN_SHIFT))&FLEXIO_CTRL_DOZEN_MASK)\n/* PIN Bit Fields */\n#define FLEXIO_PIN_PDI_MASK                      0xFFu\n#define FLEXIO_PIN_PDI_SHIFT                     0u\n#define FLEXIO_PIN_PDI_WIDTH                     8u\n#define FLEXIO_PIN_PDI(x)                        (((uint32_t)(((uint32_t)(x))<<FLEXIO_PIN_PDI_SHIFT))&FLEXIO_PIN_PDI_MASK)\n/* SHIFTSTAT Bit Fields */\n#define FLEXIO_SHIFTSTAT_SSF_MASK                0xFu\n#define FLEXIO_SHIFTSTAT_SSF_SHIFT               0u\n#define FLEXIO_SHIFTSTAT_SSF_WIDTH               4u\n#define FLEXIO_SHIFTSTAT_SSF(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTSTAT_SSF_SHIFT))&FLEXIO_SHIFTSTAT_SSF_MASK)\n/* SHIFTERR Bit Fields */\n#define FLEXIO_SHIFTERR_SEF_MASK                 0xFu\n#define FLEXIO_SHIFTERR_SEF_SHIFT                0u\n#define FLEXIO_SHIFTERR_SEF_WIDTH                4u\n#define FLEXIO_SHIFTERR_SEF(x)                   (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTERR_SEF_SHIFT))&FLEXIO_SHIFTERR_SEF_MASK)\n/* TIMSTAT Bit Fields */\n#define FLEXIO_TIMSTAT_TSF_MASK                  0xFu\n#define FLEXIO_TIMSTAT_TSF_SHIFT                 0u\n#define FLEXIO_TIMSTAT_TSF_WIDTH                 4u\n#define FLEXIO_TIMSTAT_TSF(x)                    (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMSTAT_TSF_SHIFT))&FLEXIO_TIMSTAT_TSF_MASK)\n/* SHIFTSIEN Bit Fields */\n#define FLEXIO_SHIFTSIEN_SSIE_MASK               0xFu\n#define FLEXIO_SHIFTSIEN_SSIE_SHIFT              0u\n#define FLEXIO_SHIFTSIEN_SSIE_WIDTH              4u\n#define FLEXIO_SHIFTSIEN_SSIE(x)                 (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTSIEN_SSIE_SHIFT))&FLEXIO_SHIFTSIEN_SSIE_MASK)\n/* SHIFTEIEN Bit Fields */\n#define FLEXIO_SHIFTEIEN_SEIE_MASK               0xFu\n#define FLEXIO_SHIFTEIEN_SEIE_SHIFT              0u\n#define FLEXIO_SHIFTEIEN_SEIE_WIDTH              4u\n#define FLEXIO_SHIFTEIEN_SEIE(x)                 (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTEIEN_SEIE_SHIFT))&FLEXIO_SHIFTEIEN_SEIE_MASK)\n/* TIMIEN Bit Fields */\n#define FLEXIO_TIMIEN_TEIE_MASK                  0xFu\n#define FLEXIO_TIMIEN_TEIE_SHIFT                 0u\n#define FLEXIO_TIMIEN_TEIE_WIDTH                 4u\n#define FLEXIO_TIMIEN_TEIE(x)                    (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMIEN_TEIE_SHIFT))&FLEXIO_TIMIEN_TEIE_MASK)\n/* SHIFTSDEN Bit Fields */\n#define FLEXIO_SHIFTSDEN_SSDE_MASK               0xFu\n#define FLEXIO_SHIFTSDEN_SSDE_SHIFT              0u\n#define FLEXIO_SHIFTSDEN_SSDE_WIDTH              4u\n#define FLEXIO_SHIFTSDEN_SSDE(x)                 (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTSDEN_SSDE_SHIFT))&FLEXIO_SHIFTSDEN_SSDE_MASK)\n/* SHIFTCTL Bit Fields */\n#define FLEXIO_SHIFTCTL_SMOD_MASK                0x7u\n#define FLEXIO_SHIFTCTL_SMOD_SHIFT               0u\n#define FLEXIO_SHIFTCTL_SMOD_WIDTH               3u\n#define FLEXIO_SHIFTCTL_SMOD(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTCTL_SMOD_SHIFT))&FLEXIO_SHIFTCTL_SMOD_MASK)\n#define FLEXIO_SHIFTCTL_PINPOL_MASK              0x80u\n#define FLEXIO_SHIFTCTL_PINPOL_SHIFT             7u\n#define FLEXIO_SHIFTCTL_PINPOL_WIDTH             1u\n#define FLEXIO_SHIFTCTL_PINPOL(x)                (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTCTL_PINPOL_SHIFT))&FLEXIO_SHIFTCTL_PINPOL_MASK)\n#define FLEXIO_SHIFTCTL_PINSEL_MASK              0x700u\n#define FLEXIO_SHIFTCTL_PINSEL_SHIFT             8u\n#define FLEXIO_SHIFTCTL_PINSEL_WIDTH             3u\n#define FLEXIO_SHIFTCTL_PINSEL(x)                (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTCTL_PINSEL_SHIFT))&FLEXIO_SHIFTCTL_PINSEL_MASK)\n#define FLEXIO_SHIFTCTL_PINCFG_MASK              0x30000u\n#define FLEXIO_SHIFTCTL_PINCFG_SHIFT             16u\n#define FLEXIO_SHIFTCTL_PINCFG_WIDTH             2u\n#define FLEXIO_SHIFTCTL_PINCFG(x)                (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTCTL_PINCFG_SHIFT))&FLEXIO_SHIFTCTL_PINCFG_MASK)\n#define FLEXIO_SHIFTCTL_TIMPOL_MASK              0x800000u\n#define FLEXIO_SHIFTCTL_TIMPOL_SHIFT             23u\n#define FLEXIO_SHIFTCTL_TIMPOL_WIDTH             1u\n#define FLEXIO_SHIFTCTL_TIMPOL(x)                (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTCTL_TIMPOL_SHIFT))&FLEXIO_SHIFTCTL_TIMPOL_MASK)\n#define FLEXIO_SHIFTCTL_TIMSEL_MASK              0x3000000u\n#define FLEXIO_SHIFTCTL_TIMSEL_SHIFT             24u\n#define FLEXIO_SHIFTCTL_TIMSEL_WIDTH             2u\n#define FLEXIO_SHIFTCTL_TIMSEL(x)                (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTCTL_TIMSEL_SHIFT))&FLEXIO_SHIFTCTL_TIMSEL_MASK)\n/* SHIFTCFG Bit Fields */\n#define FLEXIO_SHIFTCFG_SSTART_MASK              0x3u\n#define FLEXIO_SHIFTCFG_SSTART_SHIFT             0u\n#define FLEXIO_SHIFTCFG_SSTART_WIDTH             2u\n#define FLEXIO_SHIFTCFG_SSTART(x)                (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTCFG_SSTART_SHIFT))&FLEXIO_SHIFTCFG_SSTART_MASK)\n#define FLEXIO_SHIFTCFG_SSTOP_MASK               0x30u\n#define FLEXIO_SHIFTCFG_SSTOP_SHIFT              4u\n#define FLEXIO_SHIFTCFG_SSTOP_WIDTH              2u\n#define FLEXIO_SHIFTCFG_SSTOP(x)                 (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTCFG_SSTOP_SHIFT))&FLEXIO_SHIFTCFG_SSTOP_MASK)\n#define FLEXIO_SHIFTCFG_INSRC_MASK               0x100u\n#define FLEXIO_SHIFTCFG_INSRC_SHIFT              8u\n#define FLEXIO_SHIFTCFG_INSRC_WIDTH              1u\n#define FLEXIO_SHIFTCFG_INSRC(x)                 (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTCFG_INSRC_SHIFT))&FLEXIO_SHIFTCFG_INSRC_MASK)\n/* SHIFTBUF Bit Fields */\n#define FLEXIO_SHIFTBUF_SHIFTBUF_MASK            0xFFFFFFFFu\n#define FLEXIO_SHIFTBUF_SHIFTBUF_SHIFT           0u\n#define FLEXIO_SHIFTBUF_SHIFTBUF_WIDTH           32u\n#define FLEXIO_SHIFTBUF_SHIFTBUF(x)              (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTBUF_SHIFTBUF_SHIFT))&FLEXIO_SHIFTBUF_SHIFTBUF_MASK)\n/* SHIFTBUFBIS Bit Fields */\n#define FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_MASK      0xFFFFFFFFu\n#define FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_SHIFT     0u\n#define FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_WIDTH     32u\n#define FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS(x)        (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_SHIFT))&FLEXIO_SHIFTBUFBIS_SHIFTBUFBIS_MASK)\n/* SHIFTBUFBYS Bit Fields */\n#define FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_MASK      0xFFFFFFFFu\n#define FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_SHIFT     0u\n#define FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_WIDTH     32u\n#define FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS(x)        (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_SHIFT))&FLEXIO_SHIFTBUFBYS_SHIFTBUFBYS_MASK)\n/* SHIFTBUFBBS Bit Fields */\n#define FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_MASK      0xFFFFFFFFu\n#define FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_SHIFT     0u\n#define FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_WIDTH     32u\n#define FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS(x)        (((uint32_t)(((uint32_t)(x))<<FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_SHIFT))&FLEXIO_SHIFTBUFBBS_SHIFTBUFBBS_MASK)\n/* TIMCTL Bit Fields */\n#define FLEXIO_TIMCTL_TIMOD_MASK                 0x3u\n#define FLEXIO_TIMCTL_TIMOD_SHIFT                0u\n#define FLEXIO_TIMCTL_TIMOD_WIDTH                2u\n#define FLEXIO_TIMCTL_TIMOD(x)                   (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCTL_TIMOD_SHIFT))&FLEXIO_TIMCTL_TIMOD_MASK)\n#define FLEXIO_TIMCTL_PINPOL_MASK                0x80u\n#define FLEXIO_TIMCTL_PINPOL_SHIFT               7u\n#define FLEXIO_TIMCTL_PINPOL_WIDTH               1u\n#define FLEXIO_TIMCTL_PINPOL(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCTL_PINPOL_SHIFT))&FLEXIO_TIMCTL_PINPOL_MASK)\n#define FLEXIO_TIMCTL_PINSEL_MASK                0x700u\n#define FLEXIO_TIMCTL_PINSEL_SHIFT               8u\n#define FLEXIO_TIMCTL_PINSEL_WIDTH               3u\n#define FLEXIO_TIMCTL_PINSEL(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCTL_PINSEL_SHIFT))&FLEXIO_TIMCTL_PINSEL_MASK)\n#define FLEXIO_TIMCTL_PINCFG_MASK                0x30000u\n#define FLEXIO_TIMCTL_PINCFG_SHIFT               16u\n#define FLEXIO_TIMCTL_PINCFG_WIDTH               2u\n#define FLEXIO_TIMCTL_PINCFG(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCTL_PINCFG_SHIFT))&FLEXIO_TIMCTL_PINCFG_MASK)\n#define FLEXIO_TIMCTL_TRGSRC_MASK                0x400000u\n#define FLEXIO_TIMCTL_TRGSRC_SHIFT               22u\n#define FLEXIO_TIMCTL_TRGSRC_WIDTH               1u\n#define FLEXIO_TIMCTL_TRGSRC(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCTL_TRGSRC_SHIFT))&FLEXIO_TIMCTL_TRGSRC_MASK)\n#define FLEXIO_TIMCTL_TRGPOL_MASK                0x800000u\n#define FLEXIO_TIMCTL_TRGPOL_SHIFT               23u\n#define FLEXIO_TIMCTL_TRGPOL_WIDTH               1u\n#define FLEXIO_TIMCTL_TRGPOL(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCTL_TRGPOL_SHIFT))&FLEXIO_TIMCTL_TRGPOL_MASK)\n#define FLEXIO_TIMCTL_TRGSEL_MASK                0xF000000u\n#define FLEXIO_TIMCTL_TRGSEL_SHIFT               24u\n#define FLEXIO_TIMCTL_TRGSEL_WIDTH               4u\n#define FLEXIO_TIMCTL_TRGSEL(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCTL_TRGSEL_SHIFT))&FLEXIO_TIMCTL_TRGSEL_MASK)\n/* TIMCFG Bit Fields */\n#define FLEXIO_TIMCFG_TSTART_MASK                0x2u\n#define FLEXIO_TIMCFG_TSTART_SHIFT               1u\n#define FLEXIO_TIMCFG_TSTART_WIDTH               1u\n#define FLEXIO_TIMCFG_TSTART(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCFG_TSTART_SHIFT))&FLEXIO_TIMCFG_TSTART_MASK)\n#define FLEXIO_TIMCFG_TSTOP_MASK                 0x30u\n#define FLEXIO_TIMCFG_TSTOP_SHIFT                4u\n#define FLEXIO_TIMCFG_TSTOP_WIDTH                2u\n#define FLEXIO_TIMCFG_TSTOP(x)                   (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCFG_TSTOP_SHIFT))&FLEXIO_TIMCFG_TSTOP_MASK)\n#define FLEXIO_TIMCFG_TIMENA_MASK                0x700u\n#define FLEXIO_TIMCFG_TIMENA_SHIFT               8u\n#define FLEXIO_TIMCFG_TIMENA_WIDTH               3u\n#define FLEXIO_TIMCFG_TIMENA(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCFG_TIMENA_SHIFT))&FLEXIO_TIMCFG_TIMENA_MASK)\n#define FLEXIO_TIMCFG_TIMDIS_MASK                0x7000u\n#define FLEXIO_TIMCFG_TIMDIS_SHIFT               12u\n#define FLEXIO_TIMCFG_TIMDIS_WIDTH               3u\n#define FLEXIO_TIMCFG_TIMDIS(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCFG_TIMDIS_SHIFT))&FLEXIO_TIMCFG_TIMDIS_MASK)\n#define FLEXIO_TIMCFG_TIMRST_MASK                0x70000u\n#define FLEXIO_TIMCFG_TIMRST_SHIFT               16u\n#define FLEXIO_TIMCFG_TIMRST_WIDTH               3u\n#define FLEXIO_TIMCFG_TIMRST(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCFG_TIMRST_SHIFT))&FLEXIO_TIMCFG_TIMRST_MASK)\n#define FLEXIO_TIMCFG_TIMDEC_MASK                0x300000u\n#define FLEXIO_TIMCFG_TIMDEC_SHIFT               20u\n#define FLEXIO_TIMCFG_TIMDEC_WIDTH               2u\n#define FLEXIO_TIMCFG_TIMDEC(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCFG_TIMDEC_SHIFT))&FLEXIO_TIMCFG_TIMDEC_MASK)\n#define FLEXIO_TIMCFG_TIMOUT_MASK                0x3000000u\n#define FLEXIO_TIMCFG_TIMOUT_SHIFT               24u\n#define FLEXIO_TIMCFG_TIMOUT_WIDTH               2u\n#define FLEXIO_TIMCFG_TIMOUT(x)                  (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCFG_TIMOUT_SHIFT))&FLEXIO_TIMCFG_TIMOUT_MASK)\n/* TIMCMP Bit Fields */\n#define FLEXIO_TIMCMP_CMP_MASK                   0xFFFFu\n#define FLEXIO_TIMCMP_CMP_SHIFT                  0u\n#define FLEXIO_TIMCMP_CMP_WIDTH                  16u\n#define FLEXIO_TIMCMP_CMP(x)                     (((uint32_t)(((uint32_t)(x))<<FLEXIO_TIMCMP_CMP_SHIFT))&FLEXIO_TIMCMP_CMP_MASK)\n\n/*!\n * @}\n */ /* end of group FLEXIO_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group FLEXIO_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- FTFC Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup FTFC_Peripheral_Access_Layer FTFC Peripheral Access Layer\n * @{\n */\n\n\n/** FTFC - Size of Registers Arrays */\n#define FTFC_FCCOB_COUNT                         12u\n#define FTFC_FPROT_COUNT                         4u\n\n/** FTFC - Register Layout Typedef */\ntypedef struct {\n  __IO uint8_t FSTAT;                              /**< Flash Status Register, offset: 0x0 */\n  __IO uint8_t FCNFG;                              /**< Flash Configuration Register, offset: 0x1 */\n  __I  uint8_t FSEC;                               /**< Flash Security Register, offset: 0x2 */\n  __I  uint8_t FOPT;                               /**< Flash Option Register, offset: 0x3 */\n  __IO uint8_t FCCOB[FTFC_FCCOB_COUNT];            /**< Flash Common Command Object Registers, array offset: 0x4, array step: 0x1 */\n  __IO uint8_t FPROT[FTFC_FPROT_COUNT];            /**< Program Flash Protection Registers, array offset: 0x10, array step: 0x1 */\n       uint8_t RESERVED_0[2];\n  __IO uint8_t FEPROT;                             /**< EEPROM Protection Register, offset: 0x16 */\n  __IO uint8_t FDPROT;                             /**< Data Flash Protection Register, offset: 0x17 */\n       uint8_t RESERVED_1[20];\n  __I  uint8_t FCSESTAT;                           /**< Flash CSEc Status Register, offset: 0x2C */\n       uint8_t RESERVED_2[1];\n  __IO uint8_t FERSTAT;                            /**< Flash Error Status Register, offset: 0x2E */\n  __IO uint8_t FERCNFG;                            /**< Flash Error Configuration Register, offset: 0x2F */\n} FTFC_Type, *FTFC_MemMapPtr;\n\n /** Number of instances of the FTFC module. */\n#define FTFC_INSTANCE_COUNT                      (1u)\n\n\n/* FTFC - Peripheral instance base addresses */\n/** Peripheral FTFC base address */\n#define FTFC_BASE                                (0x40020000u)\n/** Peripheral FTFC base pointer */\n#define FTFC                                     ((FTFC_Type *)FTFC_BASE)\n/** Array initializer of FTFC peripheral base addresses */\n#define FTFC_BASE_ADDRS                          { FTFC_BASE }\n/** Array initializer of FTFC peripheral base pointers */\n#define FTFC_BASE_PTRS                           { FTFC }\n /** Number of interrupt vector arrays for the FTFC module. */\n#define FTFC_IRQS_ARR_COUNT                      (2u)\n /** Number of interrupt channels for the COMMAND_COMPLETE type of FTFC module. */\n#define FTFC_COMMAND_COMPLETE_IRQS_CH_COUNT      (1u)\n /** Number of interrupt channels for the READ_COLLISION type of FTFC module. */\n#define FTFC_READ_COLLISION_IRQS_CH_COUNT        (1u)\n/** Interrupt vectors for the FTFC peripheral type */\n#define FTFC_COMMAND_COMPLETE_IRQS               { FTFC_IRQn }\n#define FTFC_READ_COLLISION_IRQS                 { Read_Collision_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- FTFC Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup FTFC_Register_Masks FTFC Register Masks\n * @{\n */\n\n/* FSTAT Bit Fields */\n#define FTFC_FSTAT_MGSTAT0_MASK                  0x1u\n#define FTFC_FSTAT_MGSTAT0_SHIFT                 0u\n#define FTFC_FSTAT_MGSTAT0_WIDTH                 1u\n#define FTFC_FSTAT_MGSTAT0(x)                    (((uint8_t)(((uint8_t)(x))<<FTFC_FSTAT_MGSTAT0_SHIFT))&FTFC_FSTAT_MGSTAT0_MASK)\n#define FTFC_FSTAT_FPVIOL_MASK                   0x10u\n#define FTFC_FSTAT_FPVIOL_SHIFT                  4u\n#define FTFC_FSTAT_FPVIOL_WIDTH                  1u\n#define FTFC_FSTAT_FPVIOL(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FSTAT_FPVIOL_SHIFT))&FTFC_FSTAT_FPVIOL_MASK)\n#define FTFC_FSTAT_ACCERR_MASK                   0x20u\n#define FTFC_FSTAT_ACCERR_SHIFT                  5u\n#define FTFC_FSTAT_ACCERR_WIDTH                  1u\n#define FTFC_FSTAT_ACCERR(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FSTAT_ACCERR_SHIFT))&FTFC_FSTAT_ACCERR_MASK)\n#define FTFC_FSTAT_RDCOLERR_MASK                 0x40u\n#define FTFC_FSTAT_RDCOLERR_SHIFT                6u\n#define FTFC_FSTAT_RDCOLERR_WIDTH                1u\n#define FTFC_FSTAT_RDCOLERR(x)                   (((uint8_t)(((uint8_t)(x))<<FTFC_FSTAT_RDCOLERR_SHIFT))&FTFC_FSTAT_RDCOLERR_MASK)\n#define FTFC_FSTAT_CCIF_MASK                     0x80u\n#define FTFC_FSTAT_CCIF_SHIFT                    7u\n#define FTFC_FSTAT_CCIF_WIDTH                    1u\n#define FTFC_FSTAT_CCIF(x)                       (((uint8_t)(((uint8_t)(x))<<FTFC_FSTAT_CCIF_SHIFT))&FTFC_FSTAT_CCIF_MASK)\n/* FCNFG Bit Fields */\n#define FTFC_FCNFG_EEERDY_MASK                   0x1u\n#define FTFC_FCNFG_EEERDY_SHIFT                  0u\n#define FTFC_FCNFG_EEERDY_WIDTH                  1u\n#define FTFC_FCNFG_EEERDY(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FCNFG_EEERDY_SHIFT))&FTFC_FCNFG_EEERDY_MASK)\n#define FTFC_FCNFG_RAMRDY_MASK                   0x2u\n#define FTFC_FCNFG_RAMRDY_SHIFT                  1u\n#define FTFC_FCNFG_RAMRDY_WIDTH                  1u\n#define FTFC_FCNFG_RAMRDY(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FCNFG_RAMRDY_SHIFT))&FTFC_FCNFG_RAMRDY_MASK)\n#define FTFC_FCNFG_ERSSUSP_MASK                  0x10u\n#define FTFC_FCNFG_ERSSUSP_SHIFT                 4u\n#define FTFC_FCNFG_ERSSUSP_WIDTH                 1u\n#define FTFC_FCNFG_ERSSUSP(x)                    (((uint8_t)(((uint8_t)(x))<<FTFC_FCNFG_ERSSUSP_SHIFT))&FTFC_FCNFG_ERSSUSP_MASK)\n#define FTFC_FCNFG_ERSAREQ_MASK                  0x20u\n#define FTFC_FCNFG_ERSAREQ_SHIFT                 5u\n#define FTFC_FCNFG_ERSAREQ_WIDTH                 1u\n#define FTFC_FCNFG_ERSAREQ(x)                    (((uint8_t)(((uint8_t)(x))<<FTFC_FCNFG_ERSAREQ_SHIFT))&FTFC_FCNFG_ERSAREQ_MASK)\n#define FTFC_FCNFG_RDCOLLIE_MASK                 0x40u\n#define FTFC_FCNFG_RDCOLLIE_SHIFT                6u\n#define FTFC_FCNFG_RDCOLLIE_WIDTH                1u\n#define FTFC_FCNFG_RDCOLLIE(x)                   (((uint8_t)(((uint8_t)(x))<<FTFC_FCNFG_RDCOLLIE_SHIFT))&FTFC_FCNFG_RDCOLLIE_MASK)\n#define FTFC_FCNFG_CCIE_MASK                     0x80u\n#define FTFC_FCNFG_CCIE_SHIFT                    7u\n#define FTFC_FCNFG_CCIE_WIDTH                    1u\n#define FTFC_FCNFG_CCIE(x)                       (((uint8_t)(((uint8_t)(x))<<FTFC_FCNFG_CCIE_SHIFT))&FTFC_FCNFG_CCIE_MASK)\n/* FSEC Bit Fields */\n#define FTFC_FSEC_SEC_MASK                       0x3u\n#define FTFC_FSEC_SEC_SHIFT                      0u\n#define FTFC_FSEC_SEC_WIDTH                      2u\n#define FTFC_FSEC_SEC(x)                         (((uint8_t)(((uint8_t)(x))<<FTFC_FSEC_SEC_SHIFT))&FTFC_FSEC_SEC_MASK)\n#define FTFC_FSEC_FSLACC_MASK                    0xCu\n#define FTFC_FSEC_FSLACC_SHIFT                   2u\n#define FTFC_FSEC_FSLACC_WIDTH                   2u\n#define FTFC_FSEC_FSLACC(x)                      (((uint8_t)(((uint8_t)(x))<<FTFC_FSEC_FSLACC_SHIFT))&FTFC_FSEC_FSLACC_MASK)\n#define FTFC_FSEC_MEEN_MASK                      0x30u\n#define FTFC_FSEC_MEEN_SHIFT                     4u\n#define FTFC_FSEC_MEEN_WIDTH                     2u\n#define FTFC_FSEC_MEEN(x)                        (((uint8_t)(((uint8_t)(x))<<FTFC_FSEC_MEEN_SHIFT))&FTFC_FSEC_MEEN_MASK)\n#define FTFC_FSEC_KEYEN_MASK                     0xC0u\n#define FTFC_FSEC_KEYEN_SHIFT                    6u\n#define FTFC_FSEC_KEYEN_WIDTH                    2u\n#define FTFC_FSEC_KEYEN(x)                       (((uint8_t)(((uint8_t)(x))<<FTFC_FSEC_KEYEN_SHIFT))&FTFC_FSEC_KEYEN_MASK)\n/* FOPT Bit Fields */\n#define FTFC_FOPT_OPT_MASK                       0xFFu\n#define FTFC_FOPT_OPT_SHIFT                      0u\n#define FTFC_FOPT_OPT_WIDTH                      8u\n#define FTFC_FOPT_OPT(x)                         (((uint8_t)(((uint8_t)(x))<<FTFC_FOPT_OPT_SHIFT))&FTFC_FOPT_OPT_MASK)\n/* FCCOB Bit Fields */\n#define FTFC_FCCOB_CCOBn_MASK                    0xFFu\n#define FTFC_FCCOB_CCOBn_SHIFT                   0u\n#define FTFC_FCCOB_CCOBn_WIDTH                   8u\n#define FTFC_FCCOB_CCOBn(x)                      (((uint8_t)(((uint8_t)(x))<<FTFC_FCCOB_CCOBn_SHIFT))&FTFC_FCCOB_CCOBn_MASK)\n/* FPROT Bit Fields */\n#define FTFC_FPROT_PROT_MASK                     0xFFu\n#define FTFC_FPROT_PROT_SHIFT                    0u\n#define FTFC_FPROT_PROT_WIDTH                    8u\n#define FTFC_FPROT_PROT(x)                       (((uint8_t)(((uint8_t)(x))<<FTFC_FPROT_PROT_SHIFT))&FTFC_FPROT_PROT_MASK)\n/* FEPROT Bit Fields */\n#define FTFC_FEPROT_EPROT_MASK                   0xFFu\n#define FTFC_FEPROT_EPROT_SHIFT                  0u\n#define FTFC_FEPROT_EPROT_WIDTH                  8u\n#define FTFC_FEPROT_EPROT(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FEPROT_EPROT_SHIFT))&FTFC_FEPROT_EPROT_MASK)\n/* FDPROT Bit Fields */\n#define FTFC_FDPROT_DPROT_MASK                   0xFFu\n#define FTFC_FDPROT_DPROT_SHIFT                  0u\n#define FTFC_FDPROT_DPROT_WIDTH                  8u\n#define FTFC_FDPROT_DPROT(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FDPROT_DPROT_SHIFT))&FTFC_FDPROT_DPROT_MASK)\n/* FCSESTAT Bit Fields */\n#define FTFC_FCSESTAT_BSY_MASK                   0x1u\n#define FTFC_FCSESTAT_BSY_SHIFT                  0u\n#define FTFC_FCSESTAT_BSY_WIDTH                  1u\n#define FTFC_FCSESTAT_BSY(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FCSESTAT_BSY_SHIFT))&FTFC_FCSESTAT_BSY_MASK)\n#define FTFC_FCSESTAT_SB_MASK                    0x2u\n#define FTFC_FCSESTAT_SB_SHIFT                   1u\n#define FTFC_FCSESTAT_SB_WIDTH                   1u\n#define FTFC_FCSESTAT_SB(x)                      (((uint8_t)(((uint8_t)(x))<<FTFC_FCSESTAT_SB_SHIFT))&FTFC_FCSESTAT_SB_MASK)\n#define FTFC_FCSESTAT_BIN_MASK                   0x4u\n#define FTFC_FCSESTAT_BIN_SHIFT                  2u\n#define FTFC_FCSESTAT_BIN_WIDTH                  1u\n#define FTFC_FCSESTAT_BIN(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FCSESTAT_BIN_SHIFT))&FTFC_FCSESTAT_BIN_MASK)\n#define FTFC_FCSESTAT_BFN_MASK                   0x8u\n#define FTFC_FCSESTAT_BFN_SHIFT                  3u\n#define FTFC_FCSESTAT_BFN_WIDTH                  1u\n#define FTFC_FCSESTAT_BFN(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FCSESTAT_BFN_SHIFT))&FTFC_FCSESTAT_BFN_MASK)\n#define FTFC_FCSESTAT_BOK_MASK                   0x10u\n#define FTFC_FCSESTAT_BOK_SHIFT                  4u\n#define FTFC_FCSESTAT_BOK_WIDTH                  1u\n#define FTFC_FCSESTAT_BOK(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FCSESTAT_BOK_SHIFT))&FTFC_FCSESTAT_BOK_MASK)\n#define FTFC_FCSESTAT_RIN_MASK                   0x20u\n#define FTFC_FCSESTAT_RIN_SHIFT                  5u\n#define FTFC_FCSESTAT_RIN_WIDTH                  1u\n#define FTFC_FCSESTAT_RIN(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FCSESTAT_RIN_SHIFT))&FTFC_FCSESTAT_RIN_MASK)\n#define FTFC_FCSESTAT_EDB_MASK                   0x40u\n#define FTFC_FCSESTAT_EDB_SHIFT                  6u\n#define FTFC_FCSESTAT_EDB_WIDTH                  1u\n#define FTFC_FCSESTAT_EDB(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FCSESTAT_EDB_SHIFT))&FTFC_FCSESTAT_EDB_MASK)\n#define FTFC_FCSESTAT_IDB_MASK                   0x80u\n#define FTFC_FCSESTAT_IDB_SHIFT                  7u\n#define FTFC_FCSESTAT_IDB_WIDTH                  1u\n#define FTFC_FCSESTAT_IDB(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FCSESTAT_IDB_SHIFT))&FTFC_FCSESTAT_IDB_MASK)\n/* FERSTAT Bit Fields */\n#define FTFC_FERSTAT_DFDIF_MASK                  0x2u\n#define FTFC_FERSTAT_DFDIF_SHIFT                 1u\n#define FTFC_FERSTAT_DFDIF_WIDTH                 1u\n#define FTFC_FERSTAT_DFDIF(x)                    (((uint8_t)(((uint8_t)(x))<<FTFC_FERSTAT_DFDIF_SHIFT))&FTFC_FERSTAT_DFDIF_MASK)\n/* FERCNFG Bit Fields */\n#define FTFC_FERCNFG_DFDIE_MASK                  0x2u\n#define FTFC_FERCNFG_DFDIE_SHIFT                 1u\n#define FTFC_FERCNFG_DFDIE_WIDTH                 1u\n#define FTFC_FERCNFG_DFDIE(x)                    (((uint8_t)(((uint8_t)(x))<<FTFC_FERCNFG_DFDIE_SHIFT))&FTFC_FERCNFG_DFDIE_MASK)\n#define FTFC_FERCNFG_FDFD_MASK                   0x20u\n#define FTFC_FERCNFG_FDFD_SHIFT                  5u\n#define FTFC_FERCNFG_FDFD_WIDTH                  1u\n#define FTFC_FERCNFG_FDFD(x)                     (((uint8_t)(((uint8_t)(x))<<FTFC_FERCNFG_FDFD_SHIFT))&FTFC_FERCNFG_FDFD_MASK)\n\n/*!\n * @}\n */ /* end of group FTFC_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group FTFC_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- FTM Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup FTM_Peripheral_Access_Layer FTM Peripheral Access Layer\n * @{\n */\n\n\n/** FTM - Size of Registers Arrays */\n#define FTM_CONTROLS_COUNT                       8u\n\n/** FTM - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t SC;                                /**< Status And Control, offset: 0x0 */\n  __IO uint32_t CNT;                               /**< Counter, offset: 0x4 */\n  __IO uint32_t MOD;                               /**< Modulo, offset: 0x8 */\n  struct {                                         /* offset: 0xC, array step: 0x8 */\n    __IO uint32_t CnSC;                              /**< Channel (n) Status And Control, array offset: 0xC, array step: 0x8 */\n    __IO uint32_t CnV;                               /**< Channel (n) Value, array offset: 0x10, array step: 0x8 */\n  } CONTROLS[FTM_CONTROLS_COUNT];\n  __IO uint32_t CNTIN;                             /**< Counter Initial Value, offset: 0x4C */\n  __IO uint32_t STATUS;                            /**< Capture And Compare Status, offset: 0x50 */\n  __IO uint32_t MODE;                              /**< Features Mode Selection, offset: 0x54 */\n  __IO uint32_t SYNC;                              /**< Synchronization, offset: 0x58 */\n  __IO uint32_t OUTINIT;                           /**< Initial State For Channels Output, offset: 0x5C */\n  __IO uint32_t OUTMASK;                           /**< Output Mask, offset: 0x60 */\n  __IO uint32_t COMBINE;                           /**< Function For Linked Channels, offset: 0x64 */\n  __IO uint32_t DEADTIME;                          /**< Deadtime Configuration, offset: 0x68 */\n  __IO uint32_t EXTTRIG;                           /**< FTM External Trigger, offset: 0x6C */\n  __IO uint32_t POL;                               /**< Channels Polarity, offset: 0x70 */\n  __IO uint32_t FMS;                               /**< Fault Mode Status, offset: 0x74 */\n  __IO uint32_t FILTER;                            /**< Input Capture Filter Control, offset: 0x78 */\n  __IO uint32_t FLTCTRL;                           /**< Fault Control, offset: 0x7C */\n  __IO uint32_t QDCTRL;                            /**< Quadrature Decoder Control And Status, offset: 0x80 */\n  __IO uint32_t CONF;                              /**< Configuration, offset: 0x84 */\n  __IO uint32_t FLTPOL;                            /**< FTM Fault Input Polarity, offset: 0x88 */\n  __IO uint32_t SYNCONF;                           /**< Synchronization Configuration, offset: 0x8C */\n  __IO uint32_t INVCTRL;                           /**< FTM Inverting Control, offset: 0x90 */\n  __IO uint32_t SWOCTRL;                           /**< FTM Software Output Control, offset: 0x94 */\n  __IO uint32_t PWMLOAD;                           /**< FTM PWM Load, offset: 0x98 */\n  __IO uint32_t HCR;                               /**< Half Cycle Register, offset: 0x9C */\n  __IO uint32_t PAIR0DEADTIME;                     /**< Pair 0 Deadtime Configuration, offset: 0xA0 */\n       uint8_t RESERVED_0[4];\n  __IO uint32_t PAIR1DEADTIME;                     /**< Pair 1 Deadtime Configuration, offset: 0xA8 */\n       uint8_t RESERVED_1[4];\n  __IO uint32_t PAIR2DEADTIME;                     /**< Pair 2 Deadtime Configuration, offset: 0xB0 */\n       uint8_t RESERVED_2[4];\n  __IO uint32_t PAIR3DEADTIME;                     /**< Pair 3 Deadtime Configuration, offset: 0xB8 */\n} FTM_Type, *FTM_MemMapPtr;\n\n /** Number of instances of the FTM module. */\n#define FTM_INSTANCE_COUNT                       (4u)\n\n\n/* FTM - Peripheral instance base addresses */\n/** Peripheral FTM0 base address */\n#define FTM0_BASE                                (0x40038000u)\n/** Peripheral FTM0 base pointer */\n#define FTM0                                     ((FTM_Type *)FTM0_BASE)\n/** Peripheral FTM1 base address */\n#define FTM1_BASE                                (0x40039000u)\n/** Peripheral FTM1 base pointer */\n#define FTM1                                     ((FTM_Type *)FTM1_BASE)\n/** Peripheral FTM2 base address */\n#define FTM2_BASE                                (0x4003A000u)\n/** Peripheral FTM2 base pointer */\n#define FTM2                                     ((FTM_Type *)FTM2_BASE)\n/** Peripheral FTM3 base address */\n#define FTM3_BASE                                (0x40026000u)\n/** Peripheral FTM3 base pointer */\n#define FTM3                                     ((FTM_Type *)FTM3_BASE)\n/** Array initializer of FTM peripheral base addresses */\n#define FTM_BASE_ADDRS                           { FTM0_BASE, FTM1_BASE, FTM2_BASE, FTM3_BASE }\n/** Array initializer of FTM peripheral base pointers */\n#define FTM_BASE_PTRS                            { FTM0, FTM1, FTM2, FTM3 }\n /** Number of interrupt vector arrays for the FTM module. */\n#define FTM_IRQS_ARR_COUNT                       (4u)\n /** Number of interrupt channels for the FTM module. */\n#define FTM_IRQS_CH_COUNT                        (8u)\n /** Number of interrupt channels for the Fault type of FTM module. */\n#define FTM_Fault_IRQS_CH_COUNT                  (1u)\n /** Number of interrupt channels for the Overflow type of FTM module. */\n#define FTM_Overflow_IRQS_CH_COUNT               (1u)\n /** Number of interrupt channels for the Reload type of FTM module. */\n#define FTM_Reload_IRQS_CH_COUNT                 (1u)\n/** Interrupt vectors for the FTM peripheral type */\n#define FTM_IRQS                                 { { FTM0_Ch0_Ch1_IRQn, FTM0_Ch0_Ch1_IRQn, FTM0_Ch2_Ch3_IRQn, FTM0_Ch2_Ch3_IRQn, FTM0_Ch4_Ch5_IRQn, FTM0_Ch4_Ch5_IRQn, FTM0_Ch6_Ch7_IRQn, FTM0_Ch6_Ch7_IRQn }, \\\n                                                   { FTM1_Ch0_Ch1_IRQn, FTM1_Ch0_Ch1_IRQn, FTM1_Ch2_Ch3_IRQn, FTM1_Ch2_Ch3_IRQn, FTM1_Ch4_Ch5_IRQn, FTM1_Ch4_Ch5_IRQn, FTM1_Ch6_Ch7_IRQn, FTM1_Ch6_Ch7_IRQn }, \\\n                                                   { FTM2_Ch0_Ch1_IRQn, FTM2_Ch0_Ch1_IRQn, FTM2_Ch2_Ch3_IRQn, FTM2_Ch2_Ch3_IRQn, FTM2_Ch4_Ch5_IRQn, FTM2_Ch4_Ch5_IRQn, FTM2_Ch6_Ch7_IRQn, FTM2_Ch6_Ch7_IRQn }, \\\n                                                   { FTM3_Ch0_Ch1_IRQn, FTM3_Ch0_Ch1_IRQn, FTM3_Ch2_Ch3_IRQn, FTM3_Ch2_Ch3_IRQn, FTM3_Ch4_Ch5_IRQn, FTM3_Ch4_Ch5_IRQn, FTM3_Ch6_Ch7_IRQn, FTM3_Ch6_Ch7_IRQn } }\n#define FTM_Fault_IRQS                           { FTM0_Fault_IRQn, FTM1_Fault_IRQn, FTM2_Fault_IRQn, FTM3_Fault_IRQn }\n#define FTM_Overflow_IRQS                        { FTM0_Ovf_Reload_IRQn, FTM1_Ovf_Reload_IRQn, FTM2_Ovf_Reload_IRQn, FTM3_Ovf_Reload_IRQn }\n#define FTM_Reload_IRQS                          { FTM0_Ovf_Reload_IRQn, FTM1_Ovf_Reload_IRQn, FTM2_Ovf_Reload_IRQn, FTM3_Ovf_Reload_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- FTM Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup FTM_Register_Masks FTM Register Masks\n * @{\n */\n\n/* SC Bit Fields */\n#define FTM_SC_PS_MASK                           0x7u\n#define FTM_SC_PS_SHIFT                          0u\n#define FTM_SC_PS_WIDTH                          3u\n#define FTM_SC_PS(x)                             (((uint32_t)(((uint32_t)(x))<<FTM_SC_PS_SHIFT))&FTM_SC_PS_MASK)\n#define FTM_SC_CLKS_MASK                         0x18u\n#define FTM_SC_CLKS_SHIFT                        3u\n#define FTM_SC_CLKS_WIDTH                        2u\n#define FTM_SC_CLKS(x)                           (((uint32_t)(((uint32_t)(x))<<FTM_SC_CLKS_SHIFT))&FTM_SC_CLKS_MASK)\n#define FTM_SC_CPWMS_MASK                        0x20u\n#define FTM_SC_CPWMS_SHIFT                       5u\n#define FTM_SC_CPWMS_WIDTH                       1u\n#define FTM_SC_CPWMS(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_SC_CPWMS_SHIFT))&FTM_SC_CPWMS_MASK)\n#define FTM_SC_RIE_MASK                          0x40u\n#define FTM_SC_RIE_SHIFT                         6u\n#define FTM_SC_RIE_WIDTH                         1u\n#define FTM_SC_RIE(x)                            (((uint32_t)(((uint32_t)(x))<<FTM_SC_RIE_SHIFT))&FTM_SC_RIE_MASK)\n#define FTM_SC_RF_MASK                           0x80u\n#define FTM_SC_RF_SHIFT                          7u\n#define FTM_SC_RF_WIDTH                          1u\n#define FTM_SC_RF(x)                             (((uint32_t)(((uint32_t)(x))<<FTM_SC_RF_SHIFT))&FTM_SC_RF_MASK)\n#define FTM_SC_TOIE_MASK                         0x100u\n#define FTM_SC_TOIE_SHIFT                        8u\n#define FTM_SC_TOIE_WIDTH                        1u\n#define FTM_SC_TOIE(x)                           (((uint32_t)(((uint32_t)(x))<<FTM_SC_TOIE_SHIFT))&FTM_SC_TOIE_MASK)\n#define FTM_SC_TOF_MASK                          0x200u\n#define FTM_SC_TOF_SHIFT                         9u\n#define FTM_SC_TOF_WIDTH                         1u\n#define FTM_SC_TOF(x)                            (((uint32_t)(((uint32_t)(x))<<FTM_SC_TOF_SHIFT))&FTM_SC_TOF_MASK)\n#define FTM_SC_PWMEN0_MASK                       0x10000u\n#define FTM_SC_PWMEN0_SHIFT                      16u\n#define FTM_SC_PWMEN0_WIDTH                      1u\n#define FTM_SC_PWMEN0(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_SC_PWMEN0_SHIFT))&FTM_SC_PWMEN0_MASK)\n#define FTM_SC_PWMEN1_MASK                       0x20000u\n#define FTM_SC_PWMEN1_SHIFT                      17u\n#define FTM_SC_PWMEN1_WIDTH                      1u\n#define FTM_SC_PWMEN1(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_SC_PWMEN1_SHIFT))&FTM_SC_PWMEN1_MASK)\n#define FTM_SC_PWMEN2_MASK                       0x40000u\n#define FTM_SC_PWMEN2_SHIFT                      18u\n#define FTM_SC_PWMEN2_WIDTH                      1u\n#define FTM_SC_PWMEN2(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_SC_PWMEN2_SHIFT))&FTM_SC_PWMEN2_MASK)\n#define FTM_SC_PWMEN3_MASK                       0x80000u\n#define FTM_SC_PWMEN3_SHIFT                      19u\n#define FTM_SC_PWMEN3_WIDTH                      1u\n#define FTM_SC_PWMEN3(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_SC_PWMEN3_SHIFT))&FTM_SC_PWMEN3_MASK)\n#define FTM_SC_PWMEN4_MASK                       0x100000u\n#define FTM_SC_PWMEN4_SHIFT                      20u\n#define FTM_SC_PWMEN4_WIDTH                      1u\n#define FTM_SC_PWMEN4(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_SC_PWMEN4_SHIFT))&FTM_SC_PWMEN4_MASK)\n#define FTM_SC_PWMEN5_MASK                       0x200000u\n#define FTM_SC_PWMEN5_SHIFT                      21u\n#define FTM_SC_PWMEN5_WIDTH                      1u\n#define FTM_SC_PWMEN5(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_SC_PWMEN5_SHIFT))&FTM_SC_PWMEN5_MASK)\n#define FTM_SC_PWMEN6_MASK                       0x400000u\n#define FTM_SC_PWMEN6_SHIFT                      22u\n#define FTM_SC_PWMEN6_WIDTH                      1u\n#define FTM_SC_PWMEN6(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_SC_PWMEN6_SHIFT))&FTM_SC_PWMEN6_MASK)\n#define FTM_SC_PWMEN7_MASK                       0x800000u\n#define FTM_SC_PWMEN7_SHIFT                      23u\n#define FTM_SC_PWMEN7_WIDTH                      1u\n#define FTM_SC_PWMEN7(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_SC_PWMEN7_SHIFT))&FTM_SC_PWMEN7_MASK)\n#define FTM_SC_FLTPS_MASK                        0xF000000u\n#define FTM_SC_FLTPS_SHIFT                       24u\n#define FTM_SC_FLTPS_WIDTH                       4u\n#define FTM_SC_FLTPS(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_SC_FLTPS_SHIFT))&FTM_SC_FLTPS_MASK)\n/* CNT Bit Fields */\n#define FTM_CNT_COUNT_MASK                       0xFFFFu\n#define FTM_CNT_COUNT_SHIFT                      0u\n#define FTM_CNT_COUNT_WIDTH                      16u\n#define FTM_CNT_COUNT(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_CNT_COUNT_SHIFT))&FTM_CNT_COUNT_MASK)\n/* MOD Bit Fields */\n#define FTM_MOD_MOD_MASK                         0xFFFFu\n#define FTM_MOD_MOD_SHIFT                        0u\n#define FTM_MOD_MOD_WIDTH                        16u\n#define FTM_MOD_MOD(x)                           (((uint32_t)(((uint32_t)(x))<<FTM_MOD_MOD_SHIFT))&FTM_MOD_MOD_MASK)\n/* CnSC Bit Fields */\n#define FTM_CnSC_DMA_MASK                        0x1u\n#define FTM_CnSC_DMA_SHIFT                       0u\n#define FTM_CnSC_DMA_WIDTH                       1u\n#define FTM_CnSC_DMA(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_CnSC_DMA_SHIFT))&FTM_CnSC_DMA_MASK)\n#define FTM_CnSC_ICRST_MASK                      0x2u\n#define FTM_CnSC_ICRST_SHIFT                     1u\n#define FTM_CnSC_ICRST_WIDTH                     1u\n#define FTM_CnSC_ICRST(x)                        (((uint32_t)(((uint32_t)(x))<<FTM_CnSC_ICRST_SHIFT))&FTM_CnSC_ICRST_MASK)\n#define FTM_CnSC_ELSA_MASK                       0x4u\n#define FTM_CnSC_ELSA_SHIFT                      2u\n#define FTM_CnSC_ELSA_WIDTH                      1u\n#define FTM_CnSC_ELSA(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_CnSC_ELSA_SHIFT))&FTM_CnSC_ELSA_MASK)\n#define FTM_CnSC_ELSB_MASK                       0x8u\n#define FTM_CnSC_ELSB_SHIFT                      3u\n#define FTM_CnSC_ELSB_WIDTH                      1u\n#define FTM_CnSC_ELSB(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_CnSC_ELSB_SHIFT))&FTM_CnSC_ELSB_MASK)\n#define FTM_CnSC_MSA_MASK                        0x10u\n#define FTM_CnSC_MSA_SHIFT                       4u\n#define FTM_CnSC_MSA_WIDTH                       1u\n#define FTM_CnSC_MSA(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_CnSC_MSA_SHIFT))&FTM_CnSC_MSA_MASK)\n#define FTM_CnSC_MSB_MASK                        0x20u\n#define FTM_CnSC_MSB_SHIFT                       5u\n#define FTM_CnSC_MSB_WIDTH                       1u\n#define FTM_CnSC_MSB(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_CnSC_MSB_SHIFT))&FTM_CnSC_MSB_MASK)\n#define FTM_CnSC_CHIE_MASK                       0x40u\n#define FTM_CnSC_CHIE_SHIFT                      6u\n#define FTM_CnSC_CHIE_WIDTH                      1u\n#define FTM_CnSC_CHIE(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_CnSC_CHIE_SHIFT))&FTM_CnSC_CHIE_MASK)\n#define FTM_CnSC_CHF_MASK                        0x80u\n#define FTM_CnSC_CHF_SHIFT                       7u\n#define FTM_CnSC_CHF_WIDTH                       1u\n#define FTM_CnSC_CHF(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_CnSC_CHF_SHIFT))&FTM_CnSC_CHF_MASK)\n#define FTM_CnSC_TRIGMODE_MASK                   0x100u\n#define FTM_CnSC_TRIGMODE_SHIFT                  8u\n#define FTM_CnSC_TRIGMODE_WIDTH                  1u\n#define FTM_CnSC_TRIGMODE(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_CnSC_TRIGMODE_SHIFT))&FTM_CnSC_TRIGMODE_MASK)\n#define FTM_CnSC_CHIS_MASK                       0x200u\n#define FTM_CnSC_CHIS_SHIFT                      9u\n#define FTM_CnSC_CHIS_WIDTH                      1u\n#define FTM_CnSC_CHIS(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_CnSC_CHIS_SHIFT))&FTM_CnSC_CHIS_MASK)\n#define FTM_CnSC_CHOV_MASK                       0x400u\n#define FTM_CnSC_CHOV_SHIFT                      10u\n#define FTM_CnSC_CHOV_WIDTH                      1u\n#define FTM_CnSC_CHOV(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_CnSC_CHOV_SHIFT))&FTM_CnSC_CHOV_MASK)\n/* CnV Bit Fields */\n#define FTM_CnV_VAL_MASK                         0xFFFFu\n#define FTM_CnV_VAL_SHIFT                        0u\n#define FTM_CnV_VAL_WIDTH                        16u\n#define FTM_CnV_VAL(x)                           (((uint32_t)(((uint32_t)(x))<<FTM_CnV_VAL_SHIFT))&FTM_CnV_VAL_MASK)\n/* CNTIN Bit Fields */\n#define FTM_CNTIN_INIT_MASK                      0xFFFFu\n#define FTM_CNTIN_INIT_SHIFT                     0u\n#define FTM_CNTIN_INIT_WIDTH                     16u\n#define FTM_CNTIN_INIT(x)                        (((uint32_t)(((uint32_t)(x))<<FTM_CNTIN_INIT_SHIFT))&FTM_CNTIN_INIT_MASK)\n/* STATUS Bit Fields */\n#define FTM_STATUS_CH0F_MASK                     0x1u\n#define FTM_STATUS_CH0F_SHIFT                    0u\n#define FTM_STATUS_CH0F_WIDTH                    1u\n#define FTM_STATUS_CH0F(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_STATUS_CH0F_SHIFT))&FTM_STATUS_CH0F_MASK)\n#define FTM_STATUS_CH1F_MASK                     0x2u\n#define FTM_STATUS_CH1F_SHIFT                    1u\n#define FTM_STATUS_CH1F_WIDTH                    1u\n#define FTM_STATUS_CH1F(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_STATUS_CH1F_SHIFT))&FTM_STATUS_CH1F_MASK)\n#define FTM_STATUS_CH2F_MASK                     0x4u\n#define FTM_STATUS_CH2F_SHIFT                    2u\n#define FTM_STATUS_CH2F_WIDTH                    1u\n#define FTM_STATUS_CH2F(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_STATUS_CH2F_SHIFT))&FTM_STATUS_CH2F_MASK)\n#define FTM_STATUS_CH3F_MASK                     0x8u\n#define FTM_STATUS_CH3F_SHIFT                    3u\n#define FTM_STATUS_CH3F_WIDTH                    1u\n#define FTM_STATUS_CH3F(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_STATUS_CH3F_SHIFT))&FTM_STATUS_CH3F_MASK)\n#define FTM_STATUS_CH4F_MASK                     0x10u\n#define FTM_STATUS_CH4F_SHIFT                    4u\n#define FTM_STATUS_CH4F_WIDTH                    1u\n#define FTM_STATUS_CH4F(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_STATUS_CH4F_SHIFT))&FTM_STATUS_CH4F_MASK)\n#define FTM_STATUS_CH5F_MASK                     0x20u\n#define FTM_STATUS_CH5F_SHIFT                    5u\n#define FTM_STATUS_CH5F_WIDTH                    1u\n#define FTM_STATUS_CH5F(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_STATUS_CH5F_SHIFT))&FTM_STATUS_CH5F_MASK)\n#define FTM_STATUS_CH6F_MASK                     0x40u\n#define FTM_STATUS_CH6F_SHIFT                    6u\n#define FTM_STATUS_CH6F_WIDTH                    1u\n#define FTM_STATUS_CH6F(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_STATUS_CH6F_SHIFT))&FTM_STATUS_CH6F_MASK)\n#define FTM_STATUS_CH7F_MASK                     0x80u\n#define FTM_STATUS_CH7F_SHIFT                    7u\n#define FTM_STATUS_CH7F_WIDTH                    1u\n#define FTM_STATUS_CH7F(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_STATUS_CH7F_SHIFT))&FTM_STATUS_CH7F_MASK)\n/* MODE Bit Fields */\n#define FTM_MODE_FTMEN_MASK                      0x1u\n#define FTM_MODE_FTMEN_SHIFT                     0u\n#define FTM_MODE_FTMEN_WIDTH                     1u\n#define FTM_MODE_FTMEN(x)                        (((uint32_t)(((uint32_t)(x))<<FTM_MODE_FTMEN_SHIFT))&FTM_MODE_FTMEN_MASK)\n#define FTM_MODE_INIT_MASK                       0x2u\n#define FTM_MODE_INIT_SHIFT                      1u\n#define FTM_MODE_INIT_WIDTH                      1u\n#define FTM_MODE_INIT(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_MODE_INIT_SHIFT))&FTM_MODE_INIT_MASK)\n#define FTM_MODE_WPDIS_MASK                      0x4u\n#define FTM_MODE_WPDIS_SHIFT                     2u\n#define FTM_MODE_WPDIS_WIDTH                     1u\n#define FTM_MODE_WPDIS(x)                        (((uint32_t)(((uint32_t)(x))<<FTM_MODE_WPDIS_SHIFT))&FTM_MODE_WPDIS_MASK)\n#define FTM_MODE_PWMSYNC_MASK                    0x8u\n#define FTM_MODE_PWMSYNC_SHIFT                   3u\n#define FTM_MODE_PWMSYNC_WIDTH                   1u\n#define FTM_MODE_PWMSYNC(x)                      (((uint32_t)(((uint32_t)(x))<<FTM_MODE_PWMSYNC_SHIFT))&FTM_MODE_PWMSYNC_MASK)\n#define FTM_MODE_CAPTEST_MASK                    0x10u\n#define FTM_MODE_CAPTEST_SHIFT                   4u\n#define FTM_MODE_CAPTEST_WIDTH                   1u\n#define FTM_MODE_CAPTEST(x)                      (((uint32_t)(((uint32_t)(x))<<FTM_MODE_CAPTEST_SHIFT))&FTM_MODE_CAPTEST_MASK)\n#define FTM_MODE_FAULTM_MASK                     0x60u\n#define FTM_MODE_FAULTM_SHIFT                    5u\n#define FTM_MODE_FAULTM_WIDTH                    2u\n#define FTM_MODE_FAULTM(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_MODE_FAULTM_SHIFT))&FTM_MODE_FAULTM_MASK)\n#define FTM_MODE_FAULTIE_MASK                    0x80u\n#define FTM_MODE_FAULTIE_SHIFT                   7u\n#define FTM_MODE_FAULTIE_WIDTH                   1u\n#define FTM_MODE_FAULTIE(x)                      (((uint32_t)(((uint32_t)(x))<<FTM_MODE_FAULTIE_SHIFT))&FTM_MODE_FAULTIE_MASK)\n/* SYNC Bit Fields */\n#define FTM_SYNC_CNTMIN_MASK                     0x1u\n#define FTM_SYNC_CNTMIN_SHIFT                    0u\n#define FTM_SYNC_CNTMIN_WIDTH                    1u\n#define FTM_SYNC_CNTMIN(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_SYNC_CNTMIN_SHIFT))&FTM_SYNC_CNTMIN_MASK)\n#define FTM_SYNC_CNTMAX_MASK                     0x2u\n#define FTM_SYNC_CNTMAX_SHIFT                    1u\n#define FTM_SYNC_CNTMAX_WIDTH                    1u\n#define FTM_SYNC_CNTMAX(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_SYNC_CNTMAX_SHIFT))&FTM_SYNC_CNTMAX_MASK)\n#define FTM_SYNC_REINIT_MASK                     0x4u\n#define FTM_SYNC_REINIT_SHIFT                    2u\n#define FTM_SYNC_REINIT_WIDTH                    1u\n#define FTM_SYNC_REINIT(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_SYNC_REINIT_SHIFT))&FTM_SYNC_REINIT_MASK)\n#define FTM_SYNC_SYNCHOM_MASK                    0x8u\n#define FTM_SYNC_SYNCHOM_SHIFT                   3u\n#define FTM_SYNC_SYNCHOM_WIDTH                   1u\n#define FTM_SYNC_SYNCHOM(x)                      (((uint32_t)(((uint32_t)(x))<<FTM_SYNC_SYNCHOM_SHIFT))&FTM_SYNC_SYNCHOM_MASK)\n#define FTM_SYNC_TRIG0_MASK                      0x10u\n#define FTM_SYNC_TRIG0_SHIFT                     4u\n#define FTM_SYNC_TRIG0_WIDTH                     1u\n#define FTM_SYNC_TRIG0(x)                        (((uint32_t)(((uint32_t)(x))<<FTM_SYNC_TRIG0_SHIFT))&FTM_SYNC_TRIG0_MASK)\n#define FTM_SYNC_TRIG1_MASK                      0x20u\n#define FTM_SYNC_TRIG1_SHIFT                     5u\n#define FTM_SYNC_TRIG1_WIDTH                     1u\n#define FTM_SYNC_TRIG1(x)                        (((uint32_t)(((uint32_t)(x))<<FTM_SYNC_TRIG1_SHIFT))&FTM_SYNC_TRIG1_MASK)\n#define FTM_SYNC_TRIG2_MASK                      0x40u\n#define FTM_SYNC_TRIG2_SHIFT                     6u\n#define FTM_SYNC_TRIG2_WIDTH                     1u\n#define FTM_SYNC_TRIG2(x)                        (((uint32_t)(((uint32_t)(x))<<FTM_SYNC_TRIG2_SHIFT))&FTM_SYNC_TRIG2_MASK)\n#define FTM_SYNC_SWSYNC_MASK                     0x80u\n#define FTM_SYNC_SWSYNC_SHIFT                    7u\n#define FTM_SYNC_SWSYNC_WIDTH                    1u\n#define FTM_SYNC_SWSYNC(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_SYNC_SWSYNC_SHIFT))&FTM_SYNC_SWSYNC_MASK)\n/* OUTINIT Bit Fields */\n#define FTM_OUTINIT_CH0OI_MASK                   0x1u\n#define FTM_OUTINIT_CH0OI_SHIFT                  0u\n#define FTM_OUTINIT_CH0OI_WIDTH                  1u\n#define FTM_OUTINIT_CH0OI(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTINIT_CH0OI_SHIFT))&FTM_OUTINIT_CH0OI_MASK)\n#define FTM_OUTINIT_CH1OI_MASK                   0x2u\n#define FTM_OUTINIT_CH1OI_SHIFT                  1u\n#define FTM_OUTINIT_CH1OI_WIDTH                  1u\n#define FTM_OUTINIT_CH1OI(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTINIT_CH1OI_SHIFT))&FTM_OUTINIT_CH1OI_MASK)\n#define FTM_OUTINIT_CH2OI_MASK                   0x4u\n#define FTM_OUTINIT_CH2OI_SHIFT                  2u\n#define FTM_OUTINIT_CH2OI_WIDTH                  1u\n#define FTM_OUTINIT_CH2OI(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTINIT_CH2OI_SHIFT))&FTM_OUTINIT_CH2OI_MASK)\n#define FTM_OUTINIT_CH3OI_MASK                   0x8u\n#define FTM_OUTINIT_CH3OI_SHIFT                  3u\n#define FTM_OUTINIT_CH3OI_WIDTH                  1u\n#define FTM_OUTINIT_CH3OI(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTINIT_CH3OI_SHIFT))&FTM_OUTINIT_CH3OI_MASK)\n#define FTM_OUTINIT_CH4OI_MASK                   0x10u\n#define FTM_OUTINIT_CH4OI_SHIFT                  4u\n#define FTM_OUTINIT_CH4OI_WIDTH                  1u\n#define FTM_OUTINIT_CH4OI(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTINIT_CH4OI_SHIFT))&FTM_OUTINIT_CH4OI_MASK)\n#define FTM_OUTINIT_CH5OI_MASK                   0x20u\n#define FTM_OUTINIT_CH5OI_SHIFT                  5u\n#define FTM_OUTINIT_CH5OI_WIDTH                  1u\n#define FTM_OUTINIT_CH5OI(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTINIT_CH5OI_SHIFT))&FTM_OUTINIT_CH5OI_MASK)\n#define FTM_OUTINIT_CH6OI_MASK                   0x40u\n#define FTM_OUTINIT_CH6OI_SHIFT                  6u\n#define FTM_OUTINIT_CH6OI_WIDTH                  1u\n#define FTM_OUTINIT_CH6OI(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTINIT_CH6OI_SHIFT))&FTM_OUTINIT_CH6OI_MASK)\n#define FTM_OUTINIT_CH7OI_MASK                   0x80u\n#define FTM_OUTINIT_CH7OI_SHIFT                  7u\n#define FTM_OUTINIT_CH7OI_WIDTH                  1u\n#define FTM_OUTINIT_CH7OI(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTINIT_CH7OI_SHIFT))&FTM_OUTINIT_CH7OI_MASK)\n/* OUTMASK Bit Fields */\n#define FTM_OUTMASK_CH0OM_MASK                   0x1u\n#define FTM_OUTMASK_CH0OM_SHIFT                  0u\n#define FTM_OUTMASK_CH0OM_WIDTH                  1u\n#define FTM_OUTMASK_CH0OM(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTMASK_CH0OM_SHIFT))&FTM_OUTMASK_CH0OM_MASK)\n#define FTM_OUTMASK_CH1OM_MASK                   0x2u\n#define FTM_OUTMASK_CH1OM_SHIFT                  1u\n#define FTM_OUTMASK_CH1OM_WIDTH                  1u\n#define FTM_OUTMASK_CH1OM(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTMASK_CH1OM_SHIFT))&FTM_OUTMASK_CH1OM_MASK)\n#define FTM_OUTMASK_CH2OM_MASK                   0x4u\n#define FTM_OUTMASK_CH2OM_SHIFT                  2u\n#define FTM_OUTMASK_CH2OM_WIDTH                  1u\n#define FTM_OUTMASK_CH2OM(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTMASK_CH2OM_SHIFT))&FTM_OUTMASK_CH2OM_MASK)\n#define FTM_OUTMASK_CH3OM_MASK                   0x8u\n#define FTM_OUTMASK_CH3OM_SHIFT                  3u\n#define FTM_OUTMASK_CH3OM_WIDTH                  1u\n#define FTM_OUTMASK_CH3OM(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTMASK_CH3OM_SHIFT))&FTM_OUTMASK_CH3OM_MASK)\n#define FTM_OUTMASK_CH4OM_MASK                   0x10u\n#define FTM_OUTMASK_CH4OM_SHIFT                  4u\n#define FTM_OUTMASK_CH4OM_WIDTH                  1u\n#define FTM_OUTMASK_CH4OM(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTMASK_CH4OM_SHIFT))&FTM_OUTMASK_CH4OM_MASK)\n#define FTM_OUTMASK_CH5OM_MASK                   0x20u\n#define FTM_OUTMASK_CH5OM_SHIFT                  5u\n#define FTM_OUTMASK_CH5OM_WIDTH                  1u\n#define FTM_OUTMASK_CH5OM(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTMASK_CH5OM_SHIFT))&FTM_OUTMASK_CH5OM_MASK)\n#define FTM_OUTMASK_CH6OM_MASK                   0x40u\n#define FTM_OUTMASK_CH6OM_SHIFT                  6u\n#define FTM_OUTMASK_CH6OM_WIDTH                  1u\n#define FTM_OUTMASK_CH6OM(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTMASK_CH6OM_SHIFT))&FTM_OUTMASK_CH6OM_MASK)\n#define FTM_OUTMASK_CH7OM_MASK                   0x80u\n#define FTM_OUTMASK_CH7OM_SHIFT                  7u\n#define FTM_OUTMASK_CH7OM_WIDTH                  1u\n#define FTM_OUTMASK_CH7OM(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_OUTMASK_CH7OM_SHIFT))&FTM_OUTMASK_CH7OM_MASK)\n/* COMBINE Bit Fields */\n#define FTM_COMBINE_COMBINE0_MASK                0x1u\n#define FTM_COMBINE_COMBINE0_SHIFT               0u\n#define FTM_COMBINE_COMBINE0_WIDTH               1u\n#define FTM_COMBINE_COMBINE0(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_COMBINE0_SHIFT))&FTM_COMBINE_COMBINE0_MASK)\n#define FTM_COMBINE_COMP0_MASK                   0x2u\n#define FTM_COMBINE_COMP0_SHIFT                  1u\n#define FTM_COMBINE_COMP0_WIDTH                  1u\n#define FTM_COMBINE_COMP0(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_COMP0_SHIFT))&FTM_COMBINE_COMP0_MASK)\n#define FTM_COMBINE_DECAPEN0_MASK                0x4u\n#define FTM_COMBINE_DECAPEN0_SHIFT               2u\n#define FTM_COMBINE_DECAPEN0_WIDTH               1u\n#define FTM_COMBINE_DECAPEN0(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_DECAPEN0_SHIFT))&FTM_COMBINE_DECAPEN0_MASK)\n#define FTM_COMBINE_DECAP0_MASK                  0x8u\n#define FTM_COMBINE_DECAP0_SHIFT                 3u\n#define FTM_COMBINE_DECAP0_WIDTH                 1u\n#define FTM_COMBINE_DECAP0(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_DECAP0_SHIFT))&FTM_COMBINE_DECAP0_MASK)\n#define FTM_COMBINE_DTEN0_MASK                   0x10u\n#define FTM_COMBINE_DTEN0_SHIFT                  4u\n#define FTM_COMBINE_DTEN0_WIDTH                  1u\n#define FTM_COMBINE_DTEN0(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_DTEN0_SHIFT))&FTM_COMBINE_DTEN0_MASK)\n#define FTM_COMBINE_SYNCEN0_MASK                 0x20u\n#define FTM_COMBINE_SYNCEN0_SHIFT                5u\n#define FTM_COMBINE_SYNCEN0_WIDTH                1u\n#define FTM_COMBINE_SYNCEN0(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_SYNCEN0_SHIFT))&FTM_COMBINE_SYNCEN0_MASK)\n#define FTM_COMBINE_FAULTEN0_MASK                0x40u\n#define FTM_COMBINE_FAULTEN0_SHIFT               6u\n#define FTM_COMBINE_FAULTEN0_WIDTH               1u\n#define FTM_COMBINE_FAULTEN0(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_FAULTEN0_SHIFT))&FTM_COMBINE_FAULTEN0_MASK)\n#define FTM_COMBINE_MCOMBINE0_MASK               0x80u\n#define FTM_COMBINE_MCOMBINE0_SHIFT              7u\n#define FTM_COMBINE_MCOMBINE0_WIDTH              1u\n#define FTM_COMBINE_MCOMBINE0(x)                 (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_MCOMBINE0_SHIFT))&FTM_COMBINE_MCOMBINE0_MASK)\n#define FTM_COMBINE_COMBINE1_MASK                0x100u\n#define FTM_COMBINE_COMBINE1_SHIFT               8u\n#define FTM_COMBINE_COMBINE1_WIDTH               1u\n#define FTM_COMBINE_COMBINE1(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_COMBINE1_SHIFT))&FTM_COMBINE_COMBINE1_MASK)\n#define FTM_COMBINE_COMP1_MASK                   0x200u\n#define FTM_COMBINE_COMP1_SHIFT                  9u\n#define FTM_COMBINE_COMP1_WIDTH                  1u\n#define FTM_COMBINE_COMP1(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_COMP1_SHIFT))&FTM_COMBINE_COMP1_MASK)\n#define FTM_COMBINE_DECAPEN1_MASK                0x400u\n#define FTM_COMBINE_DECAPEN1_SHIFT               10u\n#define FTM_COMBINE_DECAPEN1_WIDTH               1u\n#define FTM_COMBINE_DECAPEN1(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_DECAPEN1_SHIFT))&FTM_COMBINE_DECAPEN1_MASK)\n#define FTM_COMBINE_DECAP1_MASK                  0x800u\n#define FTM_COMBINE_DECAP1_SHIFT                 11u\n#define FTM_COMBINE_DECAP1_WIDTH                 1u\n#define FTM_COMBINE_DECAP1(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_DECAP1_SHIFT))&FTM_COMBINE_DECAP1_MASK)\n#define FTM_COMBINE_DTEN1_MASK                   0x1000u\n#define FTM_COMBINE_DTEN1_SHIFT                  12u\n#define FTM_COMBINE_DTEN1_WIDTH                  1u\n#define FTM_COMBINE_DTEN1(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_DTEN1_SHIFT))&FTM_COMBINE_DTEN1_MASK)\n#define FTM_COMBINE_SYNCEN1_MASK                 0x2000u\n#define FTM_COMBINE_SYNCEN1_SHIFT                13u\n#define FTM_COMBINE_SYNCEN1_WIDTH                1u\n#define FTM_COMBINE_SYNCEN1(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_SYNCEN1_SHIFT))&FTM_COMBINE_SYNCEN1_MASK)\n#define FTM_COMBINE_FAULTEN1_MASK                0x4000u\n#define FTM_COMBINE_FAULTEN1_SHIFT               14u\n#define FTM_COMBINE_FAULTEN1_WIDTH               1u\n#define FTM_COMBINE_FAULTEN1(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_FAULTEN1_SHIFT))&FTM_COMBINE_FAULTEN1_MASK)\n#define FTM_COMBINE_MCOMBINE1_MASK               0x8000u\n#define FTM_COMBINE_MCOMBINE1_SHIFT              15u\n#define FTM_COMBINE_MCOMBINE1_WIDTH              1u\n#define FTM_COMBINE_MCOMBINE1(x)                 (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_MCOMBINE1_SHIFT))&FTM_COMBINE_MCOMBINE1_MASK)\n#define FTM_COMBINE_COMBINE2_MASK                0x10000u\n#define FTM_COMBINE_COMBINE2_SHIFT               16u\n#define FTM_COMBINE_COMBINE2_WIDTH               1u\n#define FTM_COMBINE_COMBINE2(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_COMBINE2_SHIFT))&FTM_COMBINE_COMBINE2_MASK)\n#define FTM_COMBINE_COMP2_MASK                   0x20000u\n#define FTM_COMBINE_COMP2_SHIFT                  17u\n#define FTM_COMBINE_COMP2_WIDTH                  1u\n#define FTM_COMBINE_COMP2(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_COMP2_SHIFT))&FTM_COMBINE_COMP2_MASK)\n#define FTM_COMBINE_DECAPEN2_MASK                0x40000u\n#define FTM_COMBINE_DECAPEN2_SHIFT               18u\n#define FTM_COMBINE_DECAPEN2_WIDTH               1u\n#define FTM_COMBINE_DECAPEN2(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_DECAPEN2_SHIFT))&FTM_COMBINE_DECAPEN2_MASK)\n#define FTM_COMBINE_DECAP2_MASK                  0x80000u\n#define FTM_COMBINE_DECAP2_SHIFT                 19u\n#define FTM_COMBINE_DECAP2_WIDTH                 1u\n#define FTM_COMBINE_DECAP2(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_DECAP2_SHIFT))&FTM_COMBINE_DECAP2_MASK)\n#define FTM_COMBINE_DTEN2_MASK                   0x100000u\n#define FTM_COMBINE_DTEN2_SHIFT                  20u\n#define FTM_COMBINE_DTEN2_WIDTH                  1u\n#define FTM_COMBINE_DTEN2(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_DTEN2_SHIFT))&FTM_COMBINE_DTEN2_MASK)\n#define FTM_COMBINE_SYNCEN2_MASK                 0x200000u\n#define FTM_COMBINE_SYNCEN2_SHIFT                21u\n#define FTM_COMBINE_SYNCEN2_WIDTH                1u\n#define FTM_COMBINE_SYNCEN2(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_SYNCEN2_SHIFT))&FTM_COMBINE_SYNCEN2_MASK)\n#define FTM_COMBINE_FAULTEN2_MASK                0x400000u\n#define FTM_COMBINE_FAULTEN2_SHIFT               22u\n#define FTM_COMBINE_FAULTEN2_WIDTH               1u\n#define FTM_COMBINE_FAULTEN2(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_FAULTEN2_SHIFT))&FTM_COMBINE_FAULTEN2_MASK)\n#define FTM_COMBINE_MCOMBINE2_MASK               0x800000u\n#define FTM_COMBINE_MCOMBINE2_SHIFT              23u\n#define FTM_COMBINE_MCOMBINE2_WIDTH              1u\n#define FTM_COMBINE_MCOMBINE2(x)                 (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_MCOMBINE2_SHIFT))&FTM_COMBINE_MCOMBINE2_MASK)\n#define FTM_COMBINE_COMBINE3_MASK                0x1000000u\n#define FTM_COMBINE_COMBINE3_SHIFT               24u\n#define FTM_COMBINE_COMBINE3_WIDTH               1u\n#define FTM_COMBINE_COMBINE3(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_COMBINE3_SHIFT))&FTM_COMBINE_COMBINE3_MASK)\n#define FTM_COMBINE_COMP3_MASK                   0x2000000u\n#define FTM_COMBINE_COMP3_SHIFT                  25u\n#define FTM_COMBINE_COMP3_WIDTH                  1u\n#define FTM_COMBINE_COMP3(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_COMP3_SHIFT))&FTM_COMBINE_COMP3_MASK)\n#define FTM_COMBINE_DECAPEN3_MASK                0x4000000u\n#define FTM_COMBINE_DECAPEN3_SHIFT               26u\n#define FTM_COMBINE_DECAPEN3_WIDTH               1u\n#define FTM_COMBINE_DECAPEN3(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_DECAPEN3_SHIFT))&FTM_COMBINE_DECAPEN3_MASK)\n#define FTM_COMBINE_DECAP3_MASK                  0x8000000u\n#define FTM_COMBINE_DECAP3_SHIFT                 27u\n#define FTM_COMBINE_DECAP3_WIDTH                 1u\n#define FTM_COMBINE_DECAP3(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_DECAP3_SHIFT))&FTM_COMBINE_DECAP3_MASK)\n#define FTM_COMBINE_DTEN3_MASK                   0x10000000u\n#define FTM_COMBINE_DTEN3_SHIFT                  28u\n#define FTM_COMBINE_DTEN3_WIDTH                  1u\n#define FTM_COMBINE_DTEN3(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_DTEN3_SHIFT))&FTM_COMBINE_DTEN3_MASK)\n#define FTM_COMBINE_SYNCEN3_MASK                 0x20000000u\n#define FTM_COMBINE_SYNCEN3_SHIFT                29u\n#define FTM_COMBINE_SYNCEN3_WIDTH                1u\n#define FTM_COMBINE_SYNCEN3(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_SYNCEN3_SHIFT))&FTM_COMBINE_SYNCEN3_MASK)\n#define FTM_COMBINE_FAULTEN3_MASK                0x40000000u\n#define FTM_COMBINE_FAULTEN3_SHIFT               30u\n#define FTM_COMBINE_FAULTEN3_WIDTH               1u\n#define FTM_COMBINE_FAULTEN3(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_FAULTEN3_SHIFT))&FTM_COMBINE_FAULTEN3_MASK)\n#define FTM_COMBINE_MCOMBINE3_MASK               0x80000000u\n#define FTM_COMBINE_MCOMBINE3_SHIFT              31u\n#define FTM_COMBINE_MCOMBINE3_WIDTH              1u\n#define FTM_COMBINE_MCOMBINE3(x)                 (((uint32_t)(((uint32_t)(x))<<FTM_COMBINE_MCOMBINE3_SHIFT))&FTM_COMBINE_MCOMBINE3_MASK)\n/* DEADTIME Bit Fields */\n#define FTM_DEADTIME_DTVAL_MASK                  0x3Fu\n#define FTM_DEADTIME_DTVAL_SHIFT                 0u\n#define FTM_DEADTIME_DTVAL_WIDTH                 6u\n#define FTM_DEADTIME_DTVAL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_DEADTIME_DTVAL_SHIFT))&FTM_DEADTIME_DTVAL_MASK)\n#define FTM_DEADTIME_DTPS_MASK                   0xC0u\n#define FTM_DEADTIME_DTPS_SHIFT                  6u\n#define FTM_DEADTIME_DTPS_WIDTH                  2u\n#define FTM_DEADTIME_DTPS(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_DEADTIME_DTPS_SHIFT))&FTM_DEADTIME_DTPS_MASK)\n#define FTM_DEADTIME_DTVALEX_MASK                0xF0000u\n#define FTM_DEADTIME_DTVALEX_SHIFT               16u\n#define FTM_DEADTIME_DTVALEX_WIDTH               4u\n#define FTM_DEADTIME_DTVALEX(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_DEADTIME_DTVALEX_SHIFT))&FTM_DEADTIME_DTVALEX_MASK)\n/* EXTTRIG Bit Fields */\n#define FTM_EXTTRIG_CH2TRIG_MASK                 0x1u\n#define FTM_EXTTRIG_CH2TRIG_SHIFT                0u\n#define FTM_EXTTRIG_CH2TRIG_WIDTH                1u\n#define FTM_EXTTRIG_CH2TRIG(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_EXTTRIG_CH2TRIG_SHIFT))&FTM_EXTTRIG_CH2TRIG_MASK)\n#define FTM_EXTTRIG_CH3TRIG_MASK                 0x2u\n#define FTM_EXTTRIG_CH3TRIG_SHIFT                1u\n#define FTM_EXTTRIG_CH3TRIG_WIDTH                1u\n#define FTM_EXTTRIG_CH3TRIG(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_EXTTRIG_CH3TRIG_SHIFT))&FTM_EXTTRIG_CH3TRIG_MASK)\n#define FTM_EXTTRIG_CH4TRIG_MASK                 0x4u\n#define FTM_EXTTRIG_CH4TRIG_SHIFT                2u\n#define FTM_EXTTRIG_CH4TRIG_WIDTH                1u\n#define FTM_EXTTRIG_CH4TRIG(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_EXTTRIG_CH4TRIG_SHIFT))&FTM_EXTTRIG_CH4TRIG_MASK)\n#define FTM_EXTTRIG_CH5TRIG_MASK                 0x8u\n#define FTM_EXTTRIG_CH5TRIG_SHIFT                3u\n#define FTM_EXTTRIG_CH5TRIG_WIDTH                1u\n#define FTM_EXTTRIG_CH5TRIG(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_EXTTRIG_CH5TRIG_SHIFT))&FTM_EXTTRIG_CH5TRIG_MASK)\n#define FTM_EXTTRIG_CH0TRIG_MASK                 0x10u\n#define FTM_EXTTRIG_CH0TRIG_SHIFT                4u\n#define FTM_EXTTRIG_CH0TRIG_WIDTH                1u\n#define FTM_EXTTRIG_CH0TRIG(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_EXTTRIG_CH0TRIG_SHIFT))&FTM_EXTTRIG_CH0TRIG_MASK)\n#define FTM_EXTTRIG_CH1TRIG_MASK                 0x20u\n#define FTM_EXTTRIG_CH1TRIG_SHIFT                5u\n#define FTM_EXTTRIG_CH1TRIG_WIDTH                1u\n#define FTM_EXTTRIG_CH1TRIG(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_EXTTRIG_CH1TRIG_SHIFT))&FTM_EXTTRIG_CH1TRIG_MASK)\n#define FTM_EXTTRIG_INITTRIGEN_MASK              0x40u\n#define FTM_EXTTRIG_INITTRIGEN_SHIFT             6u\n#define FTM_EXTTRIG_INITTRIGEN_WIDTH             1u\n#define FTM_EXTTRIG_INITTRIGEN(x)                (((uint32_t)(((uint32_t)(x))<<FTM_EXTTRIG_INITTRIGEN_SHIFT))&FTM_EXTTRIG_INITTRIGEN_MASK)\n#define FTM_EXTTRIG_TRIGF_MASK                   0x80u\n#define FTM_EXTTRIG_TRIGF_SHIFT                  7u\n#define FTM_EXTTRIG_TRIGF_WIDTH                  1u\n#define FTM_EXTTRIG_TRIGF(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_EXTTRIG_TRIGF_SHIFT))&FTM_EXTTRIG_TRIGF_MASK)\n#define FTM_EXTTRIG_CH6TRIG_MASK                 0x100u\n#define FTM_EXTTRIG_CH6TRIG_SHIFT                8u\n#define FTM_EXTTRIG_CH6TRIG_WIDTH                1u\n#define FTM_EXTTRIG_CH6TRIG(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_EXTTRIG_CH6TRIG_SHIFT))&FTM_EXTTRIG_CH6TRIG_MASK)\n#define FTM_EXTTRIG_CH7TRIG_MASK                 0x200u\n#define FTM_EXTTRIG_CH7TRIG_SHIFT                9u\n#define FTM_EXTTRIG_CH7TRIG_WIDTH                1u\n#define FTM_EXTTRIG_CH7TRIG(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_EXTTRIG_CH7TRIG_SHIFT))&FTM_EXTTRIG_CH7TRIG_MASK)\n/* POL Bit Fields */\n#define FTM_POL_POL0_MASK                        0x1u\n#define FTM_POL_POL0_SHIFT                       0u\n#define FTM_POL_POL0_WIDTH                       1u\n#define FTM_POL_POL0(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_POL_POL0_SHIFT))&FTM_POL_POL0_MASK)\n#define FTM_POL_POL1_MASK                        0x2u\n#define FTM_POL_POL1_SHIFT                       1u\n#define FTM_POL_POL1_WIDTH                       1u\n#define FTM_POL_POL1(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_POL_POL1_SHIFT))&FTM_POL_POL1_MASK)\n#define FTM_POL_POL2_MASK                        0x4u\n#define FTM_POL_POL2_SHIFT                       2u\n#define FTM_POL_POL2_WIDTH                       1u\n#define FTM_POL_POL2(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_POL_POL2_SHIFT))&FTM_POL_POL2_MASK)\n#define FTM_POL_POL3_MASK                        0x8u\n#define FTM_POL_POL3_SHIFT                       3u\n#define FTM_POL_POL3_WIDTH                       1u\n#define FTM_POL_POL3(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_POL_POL3_SHIFT))&FTM_POL_POL3_MASK)\n#define FTM_POL_POL4_MASK                        0x10u\n#define FTM_POL_POL4_SHIFT                       4u\n#define FTM_POL_POL4_WIDTH                       1u\n#define FTM_POL_POL4(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_POL_POL4_SHIFT))&FTM_POL_POL4_MASK)\n#define FTM_POL_POL5_MASK                        0x20u\n#define FTM_POL_POL5_SHIFT                       5u\n#define FTM_POL_POL5_WIDTH                       1u\n#define FTM_POL_POL5(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_POL_POL5_SHIFT))&FTM_POL_POL5_MASK)\n#define FTM_POL_POL6_MASK                        0x40u\n#define FTM_POL_POL6_SHIFT                       6u\n#define FTM_POL_POL6_WIDTH                       1u\n#define FTM_POL_POL6(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_POL_POL6_SHIFT))&FTM_POL_POL6_MASK)\n#define FTM_POL_POL7_MASK                        0x80u\n#define FTM_POL_POL7_SHIFT                       7u\n#define FTM_POL_POL7_WIDTH                       1u\n#define FTM_POL_POL7(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_POL_POL7_SHIFT))&FTM_POL_POL7_MASK)\n/* FMS Bit Fields */\n#define FTM_FMS_FAULTF0_MASK                     0x1u\n#define FTM_FMS_FAULTF0_SHIFT                    0u\n#define FTM_FMS_FAULTF0_WIDTH                    1u\n#define FTM_FMS_FAULTF0(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_FMS_FAULTF0_SHIFT))&FTM_FMS_FAULTF0_MASK)\n#define FTM_FMS_FAULTF1_MASK                     0x2u\n#define FTM_FMS_FAULTF1_SHIFT                    1u\n#define FTM_FMS_FAULTF1_WIDTH                    1u\n#define FTM_FMS_FAULTF1(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_FMS_FAULTF1_SHIFT))&FTM_FMS_FAULTF1_MASK)\n#define FTM_FMS_FAULTF2_MASK                     0x4u\n#define FTM_FMS_FAULTF2_SHIFT                    2u\n#define FTM_FMS_FAULTF2_WIDTH                    1u\n#define FTM_FMS_FAULTF2(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_FMS_FAULTF2_SHIFT))&FTM_FMS_FAULTF2_MASK)\n#define FTM_FMS_FAULTF3_MASK                     0x8u\n#define FTM_FMS_FAULTF3_SHIFT                    3u\n#define FTM_FMS_FAULTF3_WIDTH                    1u\n#define FTM_FMS_FAULTF3(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_FMS_FAULTF3_SHIFT))&FTM_FMS_FAULTF3_MASK)\n#define FTM_FMS_FAULTIN_MASK                     0x20u\n#define FTM_FMS_FAULTIN_SHIFT                    5u\n#define FTM_FMS_FAULTIN_WIDTH                    1u\n#define FTM_FMS_FAULTIN(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_FMS_FAULTIN_SHIFT))&FTM_FMS_FAULTIN_MASK)\n#define FTM_FMS_WPEN_MASK                        0x40u\n#define FTM_FMS_WPEN_SHIFT                       6u\n#define FTM_FMS_WPEN_WIDTH                       1u\n#define FTM_FMS_WPEN(x)                          (((uint32_t)(((uint32_t)(x))<<FTM_FMS_WPEN_SHIFT))&FTM_FMS_WPEN_MASK)\n#define FTM_FMS_FAULTF_MASK                      0x80u\n#define FTM_FMS_FAULTF_SHIFT                     7u\n#define FTM_FMS_FAULTF_WIDTH                     1u\n#define FTM_FMS_FAULTF(x)                        (((uint32_t)(((uint32_t)(x))<<FTM_FMS_FAULTF_SHIFT))&FTM_FMS_FAULTF_MASK)\n/* FILTER Bit Fields */\n#define FTM_FILTER_CH0FVAL_MASK                  0xFu\n#define FTM_FILTER_CH0FVAL_SHIFT                 0u\n#define FTM_FILTER_CH0FVAL_WIDTH                 4u\n#define FTM_FILTER_CH0FVAL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_FILTER_CH0FVAL_SHIFT))&FTM_FILTER_CH0FVAL_MASK)\n#define FTM_FILTER_CH1FVAL_MASK                  0xF0u\n#define FTM_FILTER_CH1FVAL_SHIFT                 4u\n#define FTM_FILTER_CH1FVAL_WIDTH                 4u\n#define FTM_FILTER_CH1FVAL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_FILTER_CH1FVAL_SHIFT))&FTM_FILTER_CH1FVAL_MASK)\n#define FTM_FILTER_CH2FVAL_MASK                  0xF00u\n#define FTM_FILTER_CH2FVAL_SHIFT                 8u\n#define FTM_FILTER_CH2FVAL_WIDTH                 4u\n#define FTM_FILTER_CH2FVAL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_FILTER_CH2FVAL_SHIFT))&FTM_FILTER_CH2FVAL_MASK)\n#define FTM_FILTER_CH3FVAL_MASK                  0xF000u\n#define FTM_FILTER_CH3FVAL_SHIFT                 12u\n#define FTM_FILTER_CH3FVAL_WIDTH                 4u\n#define FTM_FILTER_CH3FVAL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_FILTER_CH3FVAL_SHIFT))&FTM_FILTER_CH3FVAL_MASK)\n/* FLTCTRL Bit Fields */\n#define FTM_FLTCTRL_FAULT0EN_MASK                0x1u\n#define FTM_FLTCTRL_FAULT0EN_SHIFT               0u\n#define FTM_FLTCTRL_FAULT0EN_WIDTH               1u\n#define FTM_FLTCTRL_FAULT0EN(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_FLTCTRL_FAULT0EN_SHIFT))&FTM_FLTCTRL_FAULT0EN_MASK)\n#define FTM_FLTCTRL_FAULT1EN_MASK                0x2u\n#define FTM_FLTCTRL_FAULT1EN_SHIFT               1u\n#define FTM_FLTCTRL_FAULT1EN_WIDTH               1u\n#define FTM_FLTCTRL_FAULT1EN(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_FLTCTRL_FAULT1EN_SHIFT))&FTM_FLTCTRL_FAULT1EN_MASK)\n#define FTM_FLTCTRL_FAULT2EN_MASK                0x4u\n#define FTM_FLTCTRL_FAULT2EN_SHIFT               2u\n#define FTM_FLTCTRL_FAULT2EN_WIDTH               1u\n#define FTM_FLTCTRL_FAULT2EN(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_FLTCTRL_FAULT2EN_SHIFT))&FTM_FLTCTRL_FAULT2EN_MASK)\n#define FTM_FLTCTRL_FAULT3EN_MASK                0x8u\n#define FTM_FLTCTRL_FAULT3EN_SHIFT               3u\n#define FTM_FLTCTRL_FAULT3EN_WIDTH               1u\n#define FTM_FLTCTRL_FAULT3EN(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_FLTCTRL_FAULT3EN_SHIFT))&FTM_FLTCTRL_FAULT3EN_MASK)\n#define FTM_FLTCTRL_FFLTR0EN_MASK                0x10u\n#define FTM_FLTCTRL_FFLTR0EN_SHIFT               4u\n#define FTM_FLTCTRL_FFLTR0EN_WIDTH               1u\n#define FTM_FLTCTRL_FFLTR0EN(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_FLTCTRL_FFLTR0EN_SHIFT))&FTM_FLTCTRL_FFLTR0EN_MASK)\n#define FTM_FLTCTRL_FFLTR1EN_MASK                0x20u\n#define FTM_FLTCTRL_FFLTR1EN_SHIFT               5u\n#define FTM_FLTCTRL_FFLTR1EN_WIDTH               1u\n#define FTM_FLTCTRL_FFLTR1EN(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_FLTCTRL_FFLTR1EN_SHIFT))&FTM_FLTCTRL_FFLTR1EN_MASK)\n#define FTM_FLTCTRL_FFLTR2EN_MASK                0x40u\n#define FTM_FLTCTRL_FFLTR2EN_SHIFT               6u\n#define FTM_FLTCTRL_FFLTR2EN_WIDTH               1u\n#define FTM_FLTCTRL_FFLTR2EN(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_FLTCTRL_FFLTR2EN_SHIFT))&FTM_FLTCTRL_FFLTR2EN_MASK)\n#define FTM_FLTCTRL_FFLTR3EN_MASK                0x80u\n#define FTM_FLTCTRL_FFLTR3EN_SHIFT               7u\n#define FTM_FLTCTRL_FFLTR3EN_WIDTH               1u\n#define FTM_FLTCTRL_FFLTR3EN(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_FLTCTRL_FFLTR3EN_SHIFT))&FTM_FLTCTRL_FFLTR3EN_MASK)\n#define FTM_FLTCTRL_FFVAL_MASK                   0xF00u\n#define FTM_FLTCTRL_FFVAL_SHIFT                  8u\n#define FTM_FLTCTRL_FFVAL_WIDTH                  4u\n#define FTM_FLTCTRL_FFVAL(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_FLTCTRL_FFVAL_SHIFT))&FTM_FLTCTRL_FFVAL_MASK)\n#define FTM_FLTCTRL_FSTATE_MASK                  0x8000u\n#define FTM_FLTCTRL_FSTATE_SHIFT                 15u\n#define FTM_FLTCTRL_FSTATE_WIDTH                 1u\n#define FTM_FLTCTRL_FSTATE(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_FLTCTRL_FSTATE_SHIFT))&FTM_FLTCTRL_FSTATE_MASK)\n/* QDCTRL Bit Fields */\n#define FTM_QDCTRL_QUADEN_MASK                   0x1u\n#define FTM_QDCTRL_QUADEN_SHIFT                  0u\n#define FTM_QDCTRL_QUADEN_WIDTH                  1u\n#define FTM_QDCTRL_QUADEN(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_QDCTRL_QUADEN_SHIFT))&FTM_QDCTRL_QUADEN_MASK)\n#define FTM_QDCTRL_TOFDIR_MASK                   0x2u\n#define FTM_QDCTRL_TOFDIR_SHIFT                  1u\n#define FTM_QDCTRL_TOFDIR_WIDTH                  1u\n#define FTM_QDCTRL_TOFDIR(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_QDCTRL_TOFDIR_SHIFT))&FTM_QDCTRL_TOFDIR_MASK)\n#define FTM_QDCTRL_QUADIR_MASK                   0x4u\n#define FTM_QDCTRL_QUADIR_SHIFT                  2u\n#define FTM_QDCTRL_QUADIR_WIDTH                  1u\n#define FTM_QDCTRL_QUADIR(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_QDCTRL_QUADIR_SHIFT))&FTM_QDCTRL_QUADIR_MASK)\n#define FTM_QDCTRL_QUADMODE_MASK                 0x8u\n#define FTM_QDCTRL_QUADMODE_SHIFT                3u\n#define FTM_QDCTRL_QUADMODE_WIDTH                1u\n#define FTM_QDCTRL_QUADMODE(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_QDCTRL_QUADMODE_SHIFT))&FTM_QDCTRL_QUADMODE_MASK)\n#define FTM_QDCTRL_PHBPOL_MASK                   0x10u\n#define FTM_QDCTRL_PHBPOL_SHIFT                  4u\n#define FTM_QDCTRL_PHBPOL_WIDTH                  1u\n#define FTM_QDCTRL_PHBPOL(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_QDCTRL_PHBPOL_SHIFT))&FTM_QDCTRL_PHBPOL_MASK)\n#define FTM_QDCTRL_PHAPOL_MASK                   0x20u\n#define FTM_QDCTRL_PHAPOL_SHIFT                  5u\n#define FTM_QDCTRL_PHAPOL_WIDTH                  1u\n#define FTM_QDCTRL_PHAPOL(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_QDCTRL_PHAPOL_SHIFT))&FTM_QDCTRL_PHAPOL_MASK)\n#define FTM_QDCTRL_PHBFLTREN_MASK                0x40u\n#define FTM_QDCTRL_PHBFLTREN_SHIFT               6u\n#define FTM_QDCTRL_PHBFLTREN_WIDTH               1u\n#define FTM_QDCTRL_PHBFLTREN(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_QDCTRL_PHBFLTREN_SHIFT))&FTM_QDCTRL_PHBFLTREN_MASK)\n#define FTM_QDCTRL_PHAFLTREN_MASK                0x80u\n#define FTM_QDCTRL_PHAFLTREN_SHIFT               7u\n#define FTM_QDCTRL_PHAFLTREN_WIDTH               1u\n#define FTM_QDCTRL_PHAFLTREN(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_QDCTRL_PHAFLTREN_SHIFT))&FTM_QDCTRL_PHAFLTREN_MASK)\n/* CONF Bit Fields */\n#define FTM_CONF_LDFQ_MASK                       0x1Fu\n#define FTM_CONF_LDFQ_SHIFT                      0u\n#define FTM_CONF_LDFQ_WIDTH                      5u\n#define FTM_CONF_LDFQ(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_CONF_LDFQ_SHIFT))&FTM_CONF_LDFQ_MASK)\n#define FTM_CONF_BDMMODE_MASK                    0xC0u\n#define FTM_CONF_BDMMODE_SHIFT                   6u\n#define FTM_CONF_BDMMODE_WIDTH                   2u\n#define FTM_CONF_BDMMODE(x)                      (((uint32_t)(((uint32_t)(x))<<FTM_CONF_BDMMODE_SHIFT))&FTM_CONF_BDMMODE_MASK)\n#define FTM_CONF_GTBEEN_MASK                     0x200u\n#define FTM_CONF_GTBEEN_SHIFT                    9u\n#define FTM_CONF_GTBEEN_WIDTH                    1u\n#define FTM_CONF_GTBEEN(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_CONF_GTBEEN_SHIFT))&FTM_CONF_GTBEEN_MASK)\n#define FTM_CONF_GTBEOUT_MASK                    0x400u\n#define FTM_CONF_GTBEOUT_SHIFT                   10u\n#define FTM_CONF_GTBEOUT_WIDTH                   1u\n#define FTM_CONF_GTBEOUT(x)                      (((uint32_t)(((uint32_t)(x))<<FTM_CONF_GTBEOUT_SHIFT))&FTM_CONF_GTBEOUT_MASK)\n#define FTM_CONF_ITRIGR_MASK                     0x800u\n#define FTM_CONF_ITRIGR_SHIFT                    11u\n#define FTM_CONF_ITRIGR_WIDTH                    1u\n#define FTM_CONF_ITRIGR(x)                       (((uint32_t)(((uint32_t)(x))<<FTM_CONF_ITRIGR_SHIFT))&FTM_CONF_ITRIGR_MASK)\n/* FLTPOL Bit Fields */\n#define FTM_FLTPOL_FLT0POL_MASK                  0x1u\n#define FTM_FLTPOL_FLT0POL_SHIFT                 0u\n#define FTM_FLTPOL_FLT0POL_WIDTH                 1u\n#define FTM_FLTPOL_FLT0POL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_FLTPOL_FLT0POL_SHIFT))&FTM_FLTPOL_FLT0POL_MASK)\n#define FTM_FLTPOL_FLT1POL_MASK                  0x2u\n#define FTM_FLTPOL_FLT1POL_SHIFT                 1u\n#define FTM_FLTPOL_FLT1POL_WIDTH                 1u\n#define FTM_FLTPOL_FLT1POL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_FLTPOL_FLT1POL_SHIFT))&FTM_FLTPOL_FLT1POL_MASK)\n#define FTM_FLTPOL_FLT2POL_MASK                  0x4u\n#define FTM_FLTPOL_FLT2POL_SHIFT                 2u\n#define FTM_FLTPOL_FLT2POL_WIDTH                 1u\n#define FTM_FLTPOL_FLT2POL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_FLTPOL_FLT2POL_SHIFT))&FTM_FLTPOL_FLT2POL_MASK)\n#define FTM_FLTPOL_FLT3POL_MASK                  0x8u\n#define FTM_FLTPOL_FLT3POL_SHIFT                 3u\n#define FTM_FLTPOL_FLT3POL_WIDTH                 1u\n#define FTM_FLTPOL_FLT3POL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_FLTPOL_FLT3POL_SHIFT))&FTM_FLTPOL_FLT3POL_MASK)\n/* SYNCONF Bit Fields */\n#define FTM_SYNCONF_HWTRIGMODE_MASK              0x1u\n#define FTM_SYNCONF_HWTRIGMODE_SHIFT             0u\n#define FTM_SYNCONF_HWTRIGMODE_WIDTH             1u\n#define FTM_SYNCONF_HWTRIGMODE(x)                (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_HWTRIGMODE_SHIFT))&FTM_SYNCONF_HWTRIGMODE_MASK)\n#define FTM_SYNCONF_CNTINC_MASK                  0x4u\n#define FTM_SYNCONF_CNTINC_SHIFT                 2u\n#define FTM_SYNCONF_CNTINC_WIDTH                 1u\n#define FTM_SYNCONF_CNTINC(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_CNTINC_SHIFT))&FTM_SYNCONF_CNTINC_MASK)\n#define FTM_SYNCONF_INVC_MASK                    0x10u\n#define FTM_SYNCONF_INVC_SHIFT                   4u\n#define FTM_SYNCONF_INVC_WIDTH                   1u\n#define FTM_SYNCONF_INVC(x)                      (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_INVC_SHIFT))&FTM_SYNCONF_INVC_MASK)\n#define FTM_SYNCONF_SWOC_MASK                    0x20u\n#define FTM_SYNCONF_SWOC_SHIFT                   5u\n#define FTM_SYNCONF_SWOC_WIDTH                   1u\n#define FTM_SYNCONF_SWOC(x)                      (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_SWOC_SHIFT))&FTM_SYNCONF_SWOC_MASK)\n#define FTM_SYNCONF_SYNCMODE_MASK                0x80u\n#define FTM_SYNCONF_SYNCMODE_SHIFT               7u\n#define FTM_SYNCONF_SYNCMODE_WIDTH               1u\n#define FTM_SYNCONF_SYNCMODE(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_SYNCMODE_SHIFT))&FTM_SYNCONF_SYNCMODE_MASK)\n#define FTM_SYNCONF_SWRSTCNT_MASK                0x100u\n#define FTM_SYNCONF_SWRSTCNT_SHIFT               8u\n#define FTM_SYNCONF_SWRSTCNT_WIDTH               1u\n#define FTM_SYNCONF_SWRSTCNT(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_SWRSTCNT_SHIFT))&FTM_SYNCONF_SWRSTCNT_MASK)\n#define FTM_SYNCONF_SWWRBUF_MASK                 0x200u\n#define FTM_SYNCONF_SWWRBUF_SHIFT                9u\n#define FTM_SYNCONF_SWWRBUF_WIDTH                1u\n#define FTM_SYNCONF_SWWRBUF(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_SWWRBUF_SHIFT))&FTM_SYNCONF_SWWRBUF_MASK)\n#define FTM_SYNCONF_SWOM_MASK                    0x400u\n#define FTM_SYNCONF_SWOM_SHIFT                   10u\n#define FTM_SYNCONF_SWOM_WIDTH                   1u\n#define FTM_SYNCONF_SWOM(x)                      (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_SWOM_SHIFT))&FTM_SYNCONF_SWOM_MASK)\n#define FTM_SYNCONF_SWINVC_MASK                  0x800u\n#define FTM_SYNCONF_SWINVC_SHIFT                 11u\n#define FTM_SYNCONF_SWINVC_WIDTH                 1u\n#define FTM_SYNCONF_SWINVC(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_SWINVC_SHIFT))&FTM_SYNCONF_SWINVC_MASK)\n#define FTM_SYNCONF_SWSOC_MASK                   0x1000u\n#define FTM_SYNCONF_SWSOC_SHIFT                  12u\n#define FTM_SYNCONF_SWSOC_WIDTH                  1u\n#define FTM_SYNCONF_SWSOC(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_SWSOC_SHIFT))&FTM_SYNCONF_SWSOC_MASK)\n#define FTM_SYNCONF_HWRSTCNT_MASK                0x10000u\n#define FTM_SYNCONF_HWRSTCNT_SHIFT               16u\n#define FTM_SYNCONF_HWRSTCNT_WIDTH               1u\n#define FTM_SYNCONF_HWRSTCNT(x)                  (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_HWRSTCNT_SHIFT))&FTM_SYNCONF_HWRSTCNT_MASK)\n#define FTM_SYNCONF_HWWRBUF_MASK                 0x20000u\n#define FTM_SYNCONF_HWWRBUF_SHIFT                17u\n#define FTM_SYNCONF_HWWRBUF_WIDTH                1u\n#define FTM_SYNCONF_HWWRBUF(x)                   (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_HWWRBUF_SHIFT))&FTM_SYNCONF_HWWRBUF_MASK)\n#define FTM_SYNCONF_HWOM_MASK                    0x40000u\n#define FTM_SYNCONF_HWOM_SHIFT                   18u\n#define FTM_SYNCONF_HWOM_WIDTH                   1u\n#define FTM_SYNCONF_HWOM(x)                      (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_HWOM_SHIFT))&FTM_SYNCONF_HWOM_MASK)\n#define FTM_SYNCONF_HWINVC_MASK                  0x80000u\n#define FTM_SYNCONF_HWINVC_SHIFT                 19u\n#define FTM_SYNCONF_HWINVC_WIDTH                 1u\n#define FTM_SYNCONF_HWINVC(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_HWINVC_SHIFT))&FTM_SYNCONF_HWINVC_MASK)\n#define FTM_SYNCONF_HWSOC_MASK                   0x100000u\n#define FTM_SYNCONF_HWSOC_SHIFT                  20u\n#define FTM_SYNCONF_HWSOC_WIDTH                  1u\n#define FTM_SYNCONF_HWSOC(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_SYNCONF_HWSOC_SHIFT))&FTM_SYNCONF_HWSOC_MASK)\n/* INVCTRL Bit Fields */\n#define FTM_INVCTRL_INV0EN_MASK                  0x1u\n#define FTM_INVCTRL_INV0EN_SHIFT                 0u\n#define FTM_INVCTRL_INV0EN_WIDTH                 1u\n#define FTM_INVCTRL_INV0EN(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_INVCTRL_INV0EN_SHIFT))&FTM_INVCTRL_INV0EN_MASK)\n#define FTM_INVCTRL_INV1EN_MASK                  0x2u\n#define FTM_INVCTRL_INV1EN_SHIFT                 1u\n#define FTM_INVCTRL_INV1EN_WIDTH                 1u\n#define FTM_INVCTRL_INV1EN(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_INVCTRL_INV1EN_SHIFT))&FTM_INVCTRL_INV1EN_MASK)\n#define FTM_INVCTRL_INV2EN_MASK                  0x4u\n#define FTM_INVCTRL_INV2EN_SHIFT                 2u\n#define FTM_INVCTRL_INV2EN_WIDTH                 1u\n#define FTM_INVCTRL_INV2EN(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_INVCTRL_INV2EN_SHIFT))&FTM_INVCTRL_INV2EN_MASK)\n#define FTM_INVCTRL_INV3EN_MASK                  0x8u\n#define FTM_INVCTRL_INV3EN_SHIFT                 3u\n#define FTM_INVCTRL_INV3EN_WIDTH                 1u\n#define FTM_INVCTRL_INV3EN(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_INVCTRL_INV3EN_SHIFT))&FTM_INVCTRL_INV3EN_MASK)\n/* SWOCTRL Bit Fields */\n#define FTM_SWOCTRL_CH0OC_MASK                   0x1u\n#define FTM_SWOCTRL_CH0OC_SHIFT                  0u\n#define FTM_SWOCTRL_CH0OC_WIDTH                  1u\n#define FTM_SWOCTRL_CH0OC(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH0OC_SHIFT))&FTM_SWOCTRL_CH0OC_MASK)\n#define FTM_SWOCTRL_CH1OC_MASK                   0x2u\n#define FTM_SWOCTRL_CH1OC_SHIFT                  1u\n#define FTM_SWOCTRL_CH1OC_WIDTH                  1u\n#define FTM_SWOCTRL_CH1OC(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH1OC_SHIFT))&FTM_SWOCTRL_CH1OC_MASK)\n#define FTM_SWOCTRL_CH2OC_MASK                   0x4u\n#define FTM_SWOCTRL_CH2OC_SHIFT                  2u\n#define FTM_SWOCTRL_CH2OC_WIDTH                  1u\n#define FTM_SWOCTRL_CH2OC(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH2OC_SHIFT))&FTM_SWOCTRL_CH2OC_MASK)\n#define FTM_SWOCTRL_CH3OC_MASK                   0x8u\n#define FTM_SWOCTRL_CH3OC_SHIFT                  3u\n#define FTM_SWOCTRL_CH3OC_WIDTH                  1u\n#define FTM_SWOCTRL_CH3OC(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH3OC_SHIFT))&FTM_SWOCTRL_CH3OC_MASK)\n#define FTM_SWOCTRL_CH4OC_MASK                   0x10u\n#define FTM_SWOCTRL_CH4OC_SHIFT                  4u\n#define FTM_SWOCTRL_CH4OC_WIDTH                  1u\n#define FTM_SWOCTRL_CH4OC(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH4OC_SHIFT))&FTM_SWOCTRL_CH4OC_MASK)\n#define FTM_SWOCTRL_CH5OC_MASK                   0x20u\n#define FTM_SWOCTRL_CH5OC_SHIFT                  5u\n#define FTM_SWOCTRL_CH5OC_WIDTH                  1u\n#define FTM_SWOCTRL_CH5OC(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH5OC_SHIFT))&FTM_SWOCTRL_CH5OC_MASK)\n#define FTM_SWOCTRL_CH6OC_MASK                   0x40u\n#define FTM_SWOCTRL_CH6OC_SHIFT                  6u\n#define FTM_SWOCTRL_CH6OC_WIDTH                  1u\n#define FTM_SWOCTRL_CH6OC(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH6OC_SHIFT))&FTM_SWOCTRL_CH6OC_MASK)\n#define FTM_SWOCTRL_CH7OC_MASK                   0x80u\n#define FTM_SWOCTRL_CH7OC_SHIFT                  7u\n#define FTM_SWOCTRL_CH7OC_WIDTH                  1u\n#define FTM_SWOCTRL_CH7OC(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH7OC_SHIFT))&FTM_SWOCTRL_CH7OC_MASK)\n#define FTM_SWOCTRL_CH0OCV_MASK                  0x100u\n#define FTM_SWOCTRL_CH0OCV_SHIFT                 8u\n#define FTM_SWOCTRL_CH0OCV_WIDTH                 1u\n#define FTM_SWOCTRL_CH0OCV(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH0OCV_SHIFT))&FTM_SWOCTRL_CH0OCV_MASK)\n#define FTM_SWOCTRL_CH1OCV_MASK                  0x200u\n#define FTM_SWOCTRL_CH1OCV_SHIFT                 9u\n#define FTM_SWOCTRL_CH1OCV_WIDTH                 1u\n#define FTM_SWOCTRL_CH1OCV(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH1OCV_SHIFT))&FTM_SWOCTRL_CH1OCV_MASK)\n#define FTM_SWOCTRL_CH2OCV_MASK                  0x400u\n#define FTM_SWOCTRL_CH2OCV_SHIFT                 10u\n#define FTM_SWOCTRL_CH2OCV_WIDTH                 1u\n#define FTM_SWOCTRL_CH2OCV(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH2OCV_SHIFT))&FTM_SWOCTRL_CH2OCV_MASK)\n#define FTM_SWOCTRL_CH3OCV_MASK                  0x800u\n#define FTM_SWOCTRL_CH3OCV_SHIFT                 11u\n#define FTM_SWOCTRL_CH3OCV_WIDTH                 1u\n#define FTM_SWOCTRL_CH3OCV(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH3OCV_SHIFT))&FTM_SWOCTRL_CH3OCV_MASK)\n#define FTM_SWOCTRL_CH4OCV_MASK                  0x1000u\n#define FTM_SWOCTRL_CH4OCV_SHIFT                 12u\n#define FTM_SWOCTRL_CH4OCV_WIDTH                 1u\n#define FTM_SWOCTRL_CH4OCV(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH4OCV_SHIFT))&FTM_SWOCTRL_CH4OCV_MASK)\n#define FTM_SWOCTRL_CH5OCV_MASK                  0x2000u\n#define FTM_SWOCTRL_CH5OCV_SHIFT                 13u\n#define FTM_SWOCTRL_CH5OCV_WIDTH                 1u\n#define FTM_SWOCTRL_CH5OCV(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH5OCV_SHIFT))&FTM_SWOCTRL_CH5OCV_MASK)\n#define FTM_SWOCTRL_CH6OCV_MASK                  0x4000u\n#define FTM_SWOCTRL_CH6OCV_SHIFT                 14u\n#define FTM_SWOCTRL_CH6OCV_WIDTH                 1u\n#define FTM_SWOCTRL_CH6OCV(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH6OCV_SHIFT))&FTM_SWOCTRL_CH6OCV_MASK)\n#define FTM_SWOCTRL_CH7OCV_MASK                  0x8000u\n#define FTM_SWOCTRL_CH7OCV_SHIFT                 15u\n#define FTM_SWOCTRL_CH7OCV_WIDTH                 1u\n#define FTM_SWOCTRL_CH7OCV(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_SWOCTRL_CH7OCV_SHIFT))&FTM_SWOCTRL_CH7OCV_MASK)\n/* PWMLOAD Bit Fields */\n#define FTM_PWMLOAD_CH0SEL_MASK                  0x1u\n#define FTM_PWMLOAD_CH0SEL_SHIFT                 0u\n#define FTM_PWMLOAD_CH0SEL_WIDTH                 1u\n#define FTM_PWMLOAD_CH0SEL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_PWMLOAD_CH0SEL_SHIFT))&FTM_PWMLOAD_CH0SEL_MASK)\n#define FTM_PWMLOAD_CH1SEL_MASK                  0x2u\n#define FTM_PWMLOAD_CH1SEL_SHIFT                 1u\n#define FTM_PWMLOAD_CH1SEL_WIDTH                 1u\n#define FTM_PWMLOAD_CH1SEL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_PWMLOAD_CH1SEL_SHIFT))&FTM_PWMLOAD_CH1SEL_MASK)\n#define FTM_PWMLOAD_CH2SEL_MASK                  0x4u\n#define FTM_PWMLOAD_CH2SEL_SHIFT                 2u\n#define FTM_PWMLOAD_CH2SEL_WIDTH                 1u\n#define FTM_PWMLOAD_CH2SEL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_PWMLOAD_CH2SEL_SHIFT))&FTM_PWMLOAD_CH2SEL_MASK)\n#define FTM_PWMLOAD_CH3SEL_MASK                  0x8u\n#define FTM_PWMLOAD_CH3SEL_SHIFT                 3u\n#define FTM_PWMLOAD_CH3SEL_WIDTH                 1u\n#define FTM_PWMLOAD_CH3SEL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_PWMLOAD_CH3SEL_SHIFT))&FTM_PWMLOAD_CH3SEL_MASK)\n#define FTM_PWMLOAD_CH4SEL_MASK                  0x10u\n#define FTM_PWMLOAD_CH4SEL_SHIFT                 4u\n#define FTM_PWMLOAD_CH4SEL_WIDTH                 1u\n#define FTM_PWMLOAD_CH4SEL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_PWMLOAD_CH4SEL_SHIFT))&FTM_PWMLOAD_CH4SEL_MASK)\n#define FTM_PWMLOAD_CH5SEL_MASK                  0x20u\n#define FTM_PWMLOAD_CH5SEL_SHIFT                 5u\n#define FTM_PWMLOAD_CH5SEL_WIDTH                 1u\n#define FTM_PWMLOAD_CH5SEL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_PWMLOAD_CH5SEL_SHIFT))&FTM_PWMLOAD_CH5SEL_MASK)\n#define FTM_PWMLOAD_CH6SEL_MASK                  0x40u\n#define FTM_PWMLOAD_CH6SEL_SHIFT                 6u\n#define FTM_PWMLOAD_CH6SEL_WIDTH                 1u\n#define FTM_PWMLOAD_CH6SEL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_PWMLOAD_CH6SEL_SHIFT))&FTM_PWMLOAD_CH6SEL_MASK)\n#define FTM_PWMLOAD_CH7SEL_MASK                  0x80u\n#define FTM_PWMLOAD_CH7SEL_SHIFT                 7u\n#define FTM_PWMLOAD_CH7SEL_WIDTH                 1u\n#define FTM_PWMLOAD_CH7SEL(x)                    (((uint32_t)(((uint32_t)(x))<<FTM_PWMLOAD_CH7SEL_SHIFT))&FTM_PWMLOAD_CH7SEL_MASK)\n#define FTM_PWMLOAD_HCSEL_MASK                   0x100u\n#define FTM_PWMLOAD_HCSEL_SHIFT                  8u\n#define FTM_PWMLOAD_HCSEL_WIDTH                  1u\n#define FTM_PWMLOAD_HCSEL(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_PWMLOAD_HCSEL_SHIFT))&FTM_PWMLOAD_HCSEL_MASK)\n#define FTM_PWMLOAD_LDOK_MASK                    0x200u\n#define FTM_PWMLOAD_LDOK_SHIFT                   9u\n#define FTM_PWMLOAD_LDOK_WIDTH                   1u\n#define FTM_PWMLOAD_LDOK(x)                      (((uint32_t)(((uint32_t)(x))<<FTM_PWMLOAD_LDOK_SHIFT))&FTM_PWMLOAD_LDOK_MASK)\n#define FTM_PWMLOAD_GLEN_MASK                    0x400u\n#define FTM_PWMLOAD_GLEN_SHIFT                   10u\n#define FTM_PWMLOAD_GLEN_WIDTH                   1u\n#define FTM_PWMLOAD_GLEN(x)                      (((uint32_t)(((uint32_t)(x))<<FTM_PWMLOAD_GLEN_SHIFT))&FTM_PWMLOAD_GLEN_MASK)\n#define FTM_PWMLOAD_GLDOK_MASK                   0x800u\n#define FTM_PWMLOAD_GLDOK_SHIFT                  11u\n#define FTM_PWMLOAD_GLDOK_WIDTH                  1u\n#define FTM_PWMLOAD_GLDOK(x)                     (((uint32_t)(((uint32_t)(x))<<FTM_PWMLOAD_GLDOK_SHIFT))&FTM_PWMLOAD_GLDOK_MASK)\n/* HCR Bit Fields */\n#define FTM_HCR_HCVAL_MASK                       0xFFFFu\n#define FTM_HCR_HCVAL_SHIFT                      0u\n#define FTM_HCR_HCVAL_WIDTH                      16u\n#define FTM_HCR_HCVAL(x)                         (((uint32_t)(((uint32_t)(x))<<FTM_HCR_HCVAL_SHIFT))&FTM_HCR_HCVAL_MASK)\n/* PAIR0DEADTIME Bit Fields */\n#define FTM_PAIR0DEADTIME_DTVAL_MASK             0x3Fu\n#define FTM_PAIR0DEADTIME_DTVAL_SHIFT            0u\n#define FTM_PAIR0DEADTIME_DTVAL_WIDTH            6u\n#define FTM_PAIR0DEADTIME_DTVAL(x)               (((uint32_t)(((uint32_t)(x))<<FTM_PAIR0DEADTIME_DTVAL_SHIFT))&FTM_PAIR0DEADTIME_DTVAL_MASK)\n#define FTM_PAIR0DEADTIME_DTPS_MASK              0xC0u\n#define FTM_PAIR0DEADTIME_DTPS_SHIFT             6u\n#define FTM_PAIR0DEADTIME_DTPS_WIDTH             2u\n#define FTM_PAIR0DEADTIME_DTPS(x)                (((uint32_t)(((uint32_t)(x))<<FTM_PAIR0DEADTIME_DTPS_SHIFT))&FTM_PAIR0DEADTIME_DTPS_MASK)\n#define FTM_PAIR0DEADTIME_DTVALEX_MASK           0xF0000u\n#define FTM_PAIR0DEADTIME_DTVALEX_SHIFT          16u\n#define FTM_PAIR0DEADTIME_DTVALEX_WIDTH          4u\n#define FTM_PAIR0DEADTIME_DTVALEX(x)             (((uint32_t)(((uint32_t)(x))<<FTM_PAIR0DEADTIME_DTVALEX_SHIFT))&FTM_PAIR0DEADTIME_DTVALEX_MASK)\n/* PAIR1DEADTIME Bit Fields */\n#define FTM_PAIR1DEADTIME_DTVAL_MASK             0x3Fu\n#define FTM_PAIR1DEADTIME_DTVAL_SHIFT            0u\n#define FTM_PAIR1DEADTIME_DTVAL_WIDTH            6u\n#define FTM_PAIR1DEADTIME_DTVAL(x)               (((uint32_t)(((uint32_t)(x))<<FTM_PAIR1DEADTIME_DTVAL_SHIFT))&FTM_PAIR1DEADTIME_DTVAL_MASK)\n#define FTM_PAIR1DEADTIME_DTPS_MASK              0xC0u\n#define FTM_PAIR1DEADTIME_DTPS_SHIFT             6u\n#define FTM_PAIR1DEADTIME_DTPS_WIDTH             2u\n#define FTM_PAIR1DEADTIME_DTPS(x)                (((uint32_t)(((uint32_t)(x))<<FTM_PAIR1DEADTIME_DTPS_SHIFT))&FTM_PAIR1DEADTIME_DTPS_MASK)\n#define FTM_PAIR1DEADTIME_DTVALEX_MASK           0xF0000u\n#define FTM_PAIR1DEADTIME_DTVALEX_SHIFT          16u\n#define FTM_PAIR1DEADTIME_DTVALEX_WIDTH          4u\n#define FTM_PAIR1DEADTIME_DTVALEX(x)             (((uint32_t)(((uint32_t)(x))<<FTM_PAIR1DEADTIME_DTVALEX_SHIFT))&FTM_PAIR1DEADTIME_DTVALEX_MASK)\n/* PAIR2DEADTIME Bit Fields */\n#define FTM_PAIR2DEADTIME_DTVAL_MASK             0x3Fu\n#define FTM_PAIR2DEADTIME_DTVAL_SHIFT            0u\n#define FTM_PAIR2DEADTIME_DTVAL_WIDTH            6u\n#define FTM_PAIR2DEADTIME_DTVAL(x)               (((uint32_t)(((uint32_t)(x))<<FTM_PAIR2DEADTIME_DTVAL_SHIFT))&FTM_PAIR2DEADTIME_DTVAL_MASK)\n#define FTM_PAIR2DEADTIME_DTPS_MASK              0xC0u\n#define FTM_PAIR2DEADTIME_DTPS_SHIFT             6u\n#define FTM_PAIR2DEADTIME_DTPS_WIDTH             2u\n#define FTM_PAIR2DEADTIME_DTPS(x)                (((uint32_t)(((uint32_t)(x))<<FTM_PAIR2DEADTIME_DTPS_SHIFT))&FTM_PAIR2DEADTIME_DTPS_MASK)\n#define FTM_PAIR2DEADTIME_DTVALEX_MASK           0xF0000u\n#define FTM_PAIR2DEADTIME_DTVALEX_SHIFT          16u\n#define FTM_PAIR2DEADTIME_DTVALEX_WIDTH          4u\n#define FTM_PAIR2DEADTIME_DTVALEX(x)             (((uint32_t)(((uint32_t)(x))<<FTM_PAIR2DEADTIME_DTVALEX_SHIFT))&FTM_PAIR2DEADTIME_DTVALEX_MASK)\n/* PAIR3DEADTIME Bit Fields */\n#define FTM_PAIR3DEADTIME_DTVAL_MASK             0x3Fu\n#define FTM_PAIR3DEADTIME_DTVAL_SHIFT            0u\n#define FTM_PAIR3DEADTIME_DTVAL_WIDTH            6u\n#define FTM_PAIR3DEADTIME_DTVAL(x)               (((uint32_t)(((uint32_t)(x))<<FTM_PAIR3DEADTIME_DTVAL_SHIFT))&FTM_PAIR3DEADTIME_DTVAL_MASK)\n#define FTM_PAIR3DEADTIME_DTPS_MASK              0xC0u\n#define FTM_PAIR3DEADTIME_DTPS_SHIFT             6u\n#define FTM_PAIR3DEADTIME_DTPS_WIDTH             2u\n#define FTM_PAIR3DEADTIME_DTPS(x)                (((uint32_t)(((uint32_t)(x))<<FTM_PAIR3DEADTIME_DTPS_SHIFT))&FTM_PAIR3DEADTIME_DTPS_MASK)\n#define FTM_PAIR3DEADTIME_DTVALEX_MASK           0xF0000u\n#define FTM_PAIR3DEADTIME_DTVALEX_SHIFT          16u\n#define FTM_PAIR3DEADTIME_DTVALEX_WIDTH          4u\n#define FTM_PAIR3DEADTIME_DTVALEX(x)             (((uint32_t)(((uint32_t)(x))<<FTM_PAIR3DEADTIME_DTVALEX_SHIFT))&FTM_PAIR3DEADTIME_DTVALEX_MASK)\n\n/*!\n * @}\n */ /* end of group FTM_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group FTM_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- GPIO Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup GPIO_Peripheral_Access_Layer GPIO Peripheral Access Layer\n * @{\n */\n\n\n/** GPIO - Size of Registers Arrays */\n\n/** GPIO - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t PDOR;                              /**< Port Data Output Register, offset: 0x0 */\n  __O  uint32_t PSOR;                              /**< Port Set Output Register, offset: 0x4 */\n  __O  uint32_t PCOR;                              /**< Port Clear Output Register, offset: 0x8 */\n  __O  uint32_t PTOR;                              /**< Port Toggle Output Register, offset: 0xC */\n  __I  uint32_t PDIR;                              /**< Port Data Input Register, offset: 0x10 */\n  __IO uint32_t PDDR;                              /**< Port Data Direction Register, offset: 0x14 */\n  __IO uint32_t PIDR;                              /**< Port Input Disable Register, offset: 0x18 */\n} GPIO_Type, *GPIO_MemMapPtr;\n\n /** Number of instances of the GPIO module. */\n#define GPIO_INSTANCE_COUNT                      (5u)\n\n\n/* GPIO - Peripheral instance base addresses */\n/** Peripheral PTA base address */\n#define PTA_BASE                                 (0x400FF000u)\n/** Peripheral PTA base pointer */\n#define PTA                                      ((GPIO_Type *)PTA_BASE)\n/** Peripheral PTB base address */\n#define PTB_BASE                                 (0x400FF040u)\n/** Peripheral PTB base pointer */\n#define PTB                                      ((GPIO_Type *)PTB_BASE)\n/** Peripheral PTC base address */\n#define PTC_BASE                                 (0x400FF080u)\n/** Peripheral PTC base pointer */\n#define PTC                                      ((GPIO_Type *)PTC_BASE)\n/** Peripheral PTD base address */\n#define PTD_BASE                                 (0x400FF0C0u)\n/** Peripheral PTD base pointer */\n#define PTD                                      ((GPIO_Type *)PTD_BASE)\n/** Peripheral PTE base address */\n#define PTE_BASE                                 (0x400FF100u)\n/** Peripheral PTE base pointer */\n#define PTE                                      ((GPIO_Type *)PTE_BASE)\n/** Array initializer of GPIO peripheral base addresses */\n#define GPIO_BASE_ADDRS                          { PTA_BASE, PTB_BASE, PTC_BASE, PTD_BASE, PTE_BASE }\n/** Array initializer of GPIO peripheral base pointers */\n#define GPIO_BASE_PTRS                           { PTA, PTB, PTC, PTD, PTE }\n\n/* ----------------------------------------------------------------------------\n   -- GPIO Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup GPIO_Register_Masks GPIO Register Masks\n * @{\n */\n\n/* PDOR Bit Fields */\n#define GPIO_PDOR_PDO_MASK                       0xFFFFFFFFu\n#define GPIO_PDOR_PDO_SHIFT                      0u\n#define GPIO_PDOR_PDO_WIDTH                      32u\n#define GPIO_PDOR_PDO(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDOR_PDO_SHIFT))&GPIO_PDOR_PDO_MASK)\n/* PSOR Bit Fields */\n#define GPIO_PSOR_PTSO_MASK                      0xFFFFFFFFu\n#define GPIO_PSOR_PTSO_SHIFT                     0u\n#define GPIO_PSOR_PTSO_WIDTH                     32u\n#define GPIO_PSOR_PTSO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PSOR_PTSO_SHIFT))&GPIO_PSOR_PTSO_MASK)\n/* PCOR Bit Fields */\n#define GPIO_PCOR_PTCO_MASK                      0xFFFFFFFFu\n#define GPIO_PCOR_PTCO_SHIFT                     0u\n#define GPIO_PCOR_PTCO_WIDTH                     32u\n#define GPIO_PCOR_PTCO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PCOR_PTCO_SHIFT))&GPIO_PCOR_PTCO_MASK)\n/* PTOR Bit Fields */\n#define GPIO_PTOR_PTTO_MASK                      0xFFFFFFFFu\n#define GPIO_PTOR_PTTO_SHIFT                     0u\n#define GPIO_PTOR_PTTO_WIDTH                     32u\n#define GPIO_PTOR_PTTO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PTOR_PTTO_SHIFT))&GPIO_PTOR_PTTO_MASK)\n/* PDIR Bit Fields */\n#define GPIO_PDIR_PDI_MASK                       0xFFFFFFFFu\n#define GPIO_PDIR_PDI_SHIFT                      0u\n#define GPIO_PDIR_PDI_WIDTH                      32u\n#define GPIO_PDIR_PDI(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDIR_PDI_SHIFT))&GPIO_PDIR_PDI_MASK)\n/* PDDR Bit Fields */\n#define GPIO_PDDR_PDD_MASK                       0xFFFFFFFFu\n#define GPIO_PDDR_PDD_SHIFT                      0u\n#define GPIO_PDDR_PDD_WIDTH                      32u\n#define GPIO_PDDR_PDD(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDDR_PDD_SHIFT))&GPIO_PDDR_PDD_MASK)\n/* PIDR Bit Fields */\n#define GPIO_PIDR_PID_MASK                       0xFFFFFFFFu\n#define GPIO_PIDR_PID_SHIFT                      0u\n#define GPIO_PIDR_PID_WIDTH                      32u\n#define GPIO_PIDR_PID(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PIDR_PID_SHIFT))&GPIO_PIDR_PID_MASK)\n\n/*!\n * @}\n */ /* end of group GPIO_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group GPIO_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- LMEM Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup LMEM_Peripheral_Access_Layer LMEM Peripheral Access Layer\n * @{\n */\n\n\n/** LMEM - Size of Registers Arrays */\n\n/** LMEM - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t PCCCR;                             /**< Cache control register, offset: 0x0 */\n  __IO uint32_t PCCLCR;                            /**< Cache line control register, offset: 0x4 */\n  __IO uint32_t PCCSAR;                            /**< Cache search address register, offset: 0x8 */\n  __IO uint32_t PCCCVR;                            /**< Cache read/write value register, offset: 0xC */\n       uint8_t RESERVED_0[16];\n  __IO uint32_t PCCRMR;                            /**< Cache regions mode register, offset: 0x20 */\n} LMEM_Type, *LMEM_MemMapPtr;\n\n /** Number of instances of the LMEM module. */\n#define LMEM_INSTANCE_COUNT                      (1u)\n\n\n/* LMEM - Peripheral instance base addresses */\n/** Peripheral LMEM base address */\n#define LMEM_BASE                                (0xE0082000u)\n/** Peripheral LMEM base pointer */\n#define LMEM                                     ((LMEM_Type *)LMEM_BASE)\n/** Array initializer of LMEM peripheral base addresses */\n#define LMEM_BASE_ADDRS                          { LMEM_BASE }\n/** Array initializer of LMEM peripheral base pointers */\n#define LMEM_BASE_PTRS                           { LMEM }\n\n/* ----------------------------------------------------------------------------\n   -- LMEM Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup LMEM_Register_Masks LMEM Register Masks\n * @{\n */\n\n/* PCCCR Bit Fields */\n#define LMEM_PCCCR_ENCACHE_MASK                  0x1u\n#define LMEM_PCCCR_ENCACHE_SHIFT                 0u\n#define LMEM_PCCCR_ENCACHE_WIDTH                 1u\n#define LMEM_PCCCR_ENCACHE(x)                    (((uint32_t)(((uint32_t)(x))<<LMEM_PCCCR_ENCACHE_SHIFT))&LMEM_PCCCR_ENCACHE_MASK)\n#define LMEM_PCCCR_PCCR2_MASK                    0x4u\n#define LMEM_PCCCR_PCCR2_SHIFT                   2u\n#define LMEM_PCCCR_PCCR2_WIDTH                   1u\n#define LMEM_PCCCR_PCCR2(x)                      (((uint32_t)(((uint32_t)(x))<<LMEM_PCCCR_PCCR2_SHIFT))&LMEM_PCCCR_PCCR2_MASK)\n#define LMEM_PCCCR_PCCR3_MASK                    0x8u\n#define LMEM_PCCCR_PCCR3_SHIFT                   3u\n#define LMEM_PCCCR_PCCR3_WIDTH                   1u\n#define LMEM_PCCCR_PCCR3(x)                      (((uint32_t)(((uint32_t)(x))<<LMEM_PCCCR_PCCR3_SHIFT))&LMEM_PCCCR_PCCR3_MASK)\n#define LMEM_PCCCR_INVW0_MASK                    0x1000000u\n#define LMEM_PCCCR_INVW0_SHIFT                   24u\n#define LMEM_PCCCR_INVW0_WIDTH                   1u\n#define LMEM_PCCCR_INVW0(x)                      (((uint32_t)(((uint32_t)(x))<<LMEM_PCCCR_INVW0_SHIFT))&LMEM_PCCCR_INVW0_MASK)\n#define LMEM_PCCCR_PUSHW0_MASK                   0x2000000u\n#define LMEM_PCCCR_PUSHW0_SHIFT                  25u\n#define LMEM_PCCCR_PUSHW0_WIDTH                  1u\n#define LMEM_PCCCR_PUSHW0(x)                     (((uint32_t)(((uint32_t)(x))<<LMEM_PCCCR_PUSHW0_SHIFT))&LMEM_PCCCR_PUSHW0_MASK)\n#define LMEM_PCCCR_INVW1_MASK                    0x4000000u\n#define LMEM_PCCCR_INVW1_SHIFT                   26u\n#define LMEM_PCCCR_INVW1_WIDTH                   1u\n#define LMEM_PCCCR_INVW1(x)                      (((uint32_t)(((uint32_t)(x))<<LMEM_PCCCR_INVW1_SHIFT))&LMEM_PCCCR_INVW1_MASK)\n#define LMEM_PCCCR_PUSHW1_MASK                   0x8000000u\n#define LMEM_PCCCR_PUSHW1_SHIFT                  27u\n#define LMEM_PCCCR_PUSHW1_WIDTH                  1u\n#define LMEM_PCCCR_PUSHW1(x)                     (((uint32_t)(((uint32_t)(x))<<LMEM_PCCCR_PUSHW1_SHIFT))&LMEM_PCCCR_PUSHW1_MASK)\n#define LMEM_PCCCR_GO_MASK                       0x80000000u\n#define LMEM_PCCCR_GO_SHIFT                      31u\n#define LMEM_PCCCR_GO_WIDTH                      1u\n#define LMEM_PCCCR_GO(x)                         (((uint32_t)(((uint32_t)(x))<<LMEM_PCCCR_GO_SHIFT))&LMEM_PCCCR_GO_MASK)\n/* PCCLCR Bit Fields */\n#define LMEM_PCCLCR_LGO_MASK                     0x1u\n#define LMEM_PCCLCR_LGO_SHIFT                    0u\n#define LMEM_PCCLCR_LGO_WIDTH                    1u\n#define LMEM_PCCLCR_LGO(x)                       (((uint32_t)(((uint32_t)(x))<<LMEM_PCCLCR_LGO_SHIFT))&LMEM_PCCLCR_LGO_MASK)\n#define LMEM_PCCLCR_CACHEADDR_MASK               0x3FFCu\n#define LMEM_PCCLCR_CACHEADDR_SHIFT              2u\n#define LMEM_PCCLCR_CACHEADDR_WIDTH              12u\n#define LMEM_PCCLCR_CACHEADDR(x)                 (((uint32_t)(((uint32_t)(x))<<LMEM_PCCLCR_CACHEADDR_SHIFT))&LMEM_PCCLCR_CACHEADDR_MASK)\n#define LMEM_PCCLCR_WSEL_MASK                    0x4000u\n#define LMEM_PCCLCR_WSEL_SHIFT                   14u\n#define LMEM_PCCLCR_WSEL_WIDTH                   1u\n#define LMEM_PCCLCR_WSEL(x)                      (((uint32_t)(((uint32_t)(x))<<LMEM_PCCLCR_WSEL_SHIFT))&LMEM_PCCLCR_WSEL_MASK)\n#define LMEM_PCCLCR_TDSEL_MASK                   0x10000u\n#define LMEM_PCCLCR_TDSEL_SHIFT                  16u\n#define LMEM_PCCLCR_TDSEL_WIDTH                  1u\n#define LMEM_PCCLCR_TDSEL(x)                     (((uint32_t)(((uint32_t)(x))<<LMEM_PCCLCR_TDSEL_SHIFT))&LMEM_PCCLCR_TDSEL_MASK)\n#define LMEM_PCCLCR_LCIVB_MASK                   0x100000u\n#define LMEM_PCCLCR_LCIVB_SHIFT                  20u\n#define LMEM_PCCLCR_LCIVB_WIDTH                  1u\n#define LMEM_PCCLCR_LCIVB(x)                     (((uint32_t)(((uint32_t)(x))<<LMEM_PCCLCR_LCIVB_SHIFT))&LMEM_PCCLCR_LCIVB_MASK)\n#define LMEM_PCCLCR_LCIMB_MASK                   0x200000u\n#define LMEM_PCCLCR_LCIMB_SHIFT                  21u\n#define LMEM_PCCLCR_LCIMB_WIDTH                  1u\n#define LMEM_PCCLCR_LCIMB(x)                     (((uint32_t)(((uint32_t)(x))<<LMEM_PCCLCR_LCIMB_SHIFT))&LMEM_PCCLCR_LCIMB_MASK)\n#define LMEM_PCCLCR_LCWAY_MASK                   0x400000u\n#define LMEM_PCCLCR_LCWAY_SHIFT                  22u\n#define LMEM_PCCLCR_LCWAY_WIDTH                  1u\n#define LMEM_PCCLCR_LCWAY(x)                     (((uint32_t)(((uint32_t)(x))<<LMEM_PCCLCR_LCWAY_SHIFT))&LMEM_PCCLCR_LCWAY_MASK)\n#define LMEM_PCCLCR_LCMD_MASK                    0x3000000u\n#define LMEM_PCCLCR_LCMD_SHIFT                   24u\n#define LMEM_PCCLCR_LCMD_WIDTH                   2u\n#define LMEM_PCCLCR_LCMD(x)                      (((uint32_t)(((uint32_t)(x))<<LMEM_PCCLCR_LCMD_SHIFT))&LMEM_PCCLCR_LCMD_MASK)\n#define LMEM_PCCLCR_LADSEL_MASK                  0x4000000u\n#define LMEM_PCCLCR_LADSEL_SHIFT                 26u\n#define LMEM_PCCLCR_LADSEL_WIDTH                 1u\n#define LMEM_PCCLCR_LADSEL(x)                    (((uint32_t)(((uint32_t)(x))<<LMEM_PCCLCR_LADSEL_SHIFT))&LMEM_PCCLCR_LADSEL_MASK)\n#define LMEM_PCCLCR_LACC_MASK                    0x8000000u\n#define LMEM_PCCLCR_LACC_SHIFT                   27u\n#define LMEM_PCCLCR_LACC_WIDTH                   1u\n#define LMEM_PCCLCR_LACC(x)                      (((uint32_t)(((uint32_t)(x))<<LMEM_PCCLCR_LACC_SHIFT))&LMEM_PCCLCR_LACC_MASK)\n/* PCCSAR Bit Fields */\n#define LMEM_PCCSAR_LGO_MASK                     0x1u\n#define LMEM_PCCSAR_LGO_SHIFT                    0u\n#define LMEM_PCCSAR_LGO_WIDTH                    1u\n#define LMEM_PCCSAR_LGO(x)                       (((uint32_t)(((uint32_t)(x))<<LMEM_PCCSAR_LGO_SHIFT))&LMEM_PCCSAR_LGO_MASK)\n#define LMEM_PCCSAR_PHYADDR_MASK                 0xFFFFFFFCu\n#define LMEM_PCCSAR_PHYADDR_SHIFT                2u\n#define LMEM_PCCSAR_PHYADDR_WIDTH                30u\n#define LMEM_PCCSAR_PHYADDR(x)                   (((uint32_t)(((uint32_t)(x))<<LMEM_PCCSAR_PHYADDR_SHIFT))&LMEM_PCCSAR_PHYADDR_MASK)\n/* PCCCVR Bit Fields */\n#define LMEM_PCCCVR_DATA_MASK                    0xFFFFFFFFu\n#define LMEM_PCCCVR_DATA_SHIFT                   0u\n#define LMEM_PCCCVR_DATA_WIDTH                   32u\n#define LMEM_PCCCVR_DATA(x)                      (((uint32_t)(((uint32_t)(x))<<LMEM_PCCCVR_DATA_SHIFT))&LMEM_PCCCVR_DATA_MASK)\n/* PCCRMR Bit Fields */\n#define LMEM_PCCRMR_R15_MASK                     0x3u\n#define LMEM_PCCRMR_R15_SHIFT                    0u\n#define LMEM_PCCRMR_R15_WIDTH                    2u\n#define LMEM_PCCRMR_R15(x)                       (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R15_SHIFT))&LMEM_PCCRMR_R15_MASK)\n#define LMEM_PCCRMR_R14_MASK                     0xCu\n#define LMEM_PCCRMR_R14_SHIFT                    2u\n#define LMEM_PCCRMR_R14_WIDTH                    2u\n#define LMEM_PCCRMR_R14(x)                       (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R14_SHIFT))&LMEM_PCCRMR_R14_MASK)\n#define LMEM_PCCRMR_R13_MASK                     0x30u\n#define LMEM_PCCRMR_R13_SHIFT                    4u\n#define LMEM_PCCRMR_R13_WIDTH                    2u\n#define LMEM_PCCRMR_R13(x)                       (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R13_SHIFT))&LMEM_PCCRMR_R13_MASK)\n#define LMEM_PCCRMR_R12_MASK                     0xC0u\n#define LMEM_PCCRMR_R12_SHIFT                    6u\n#define LMEM_PCCRMR_R12_WIDTH                    2u\n#define LMEM_PCCRMR_R12(x)                       (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R12_SHIFT))&LMEM_PCCRMR_R12_MASK)\n#define LMEM_PCCRMR_R11_MASK                     0x300u\n#define LMEM_PCCRMR_R11_SHIFT                    8u\n#define LMEM_PCCRMR_R11_WIDTH                    2u\n#define LMEM_PCCRMR_R11(x)                       (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R11_SHIFT))&LMEM_PCCRMR_R11_MASK)\n#define LMEM_PCCRMR_R10_MASK                     0xC00u\n#define LMEM_PCCRMR_R10_SHIFT                    10u\n#define LMEM_PCCRMR_R10_WIDTH                    2u\n#define LMEM_PCCRMR_R10(x)                       (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R10_SHIFT))&LMEM_PCCRMR_R10_MASK)\n#define LMEM_PCCRMR_R9_MASK                      0x3000u\n#define LMEM_PCCRMR_R9_SHIFT                     12u\n#define LMEM_PCCRMR_R9_WIDTH                     2u\n#define LMEM_PCCRMR_R9(x)                        (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R9_SHIFT))&LMEM_PCCRMR_R9_MASK)\n#define LMEM_PCCRMR_R8_MASK                      0xC000u\n#define LMEM_PCCRMR_R8_SHIFT                     14u\n#define LMEM_PCCRMR_R8_WIDTH                     2u\n#define LMEM_PCCRMR_R8(x)                        (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R8_SHIFT))&LMEM_PCCRMR_R8_MASK)\n#define LMEM_PCCRMR_R7_MASK                      0x30000u\n#define LMEM_PCCRMR_R7_SHIFT                     16u\n#define LMEM_PCCRMR_R7_WIDTH                     2u\n#define LMEM_PCCRMR_R7(x)                        (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R7_SHIFT))&LMEM_PCCRMR_R7_MASK)\n#define LMEM_PCCRMR_R6_MASK                      0xC0000u\n#define LMEM_PCCRMR_R6_SHIFT                     18u\n#define LMEM_PCCRMR_R6_WIDTH                     2u\n#define LMEM_PCCRMR_R6(x)                        (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R6_SHIFT))&LMEM_PCCRMR_R6_MASK)\n#define LMEM_PCCRMR_R5_MASK                      0x300000u\n#define LMEM_PCCRMR_R5_SHIFT                     20u\n#define LMEM_PCCRMR_R5_WIDTH                     2u\n#define LMEM_PCCRMR_R5(x)                        (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R5_SHIFT))&LMEM_PCCRMR_R5_MASK)\n#define LMEM_PCCRMR_R4_MASK                      0xC00000u\n#define LMEM_PCCRMR_R4_SHIFT                     22u\n#define LMEM_PCCRMR_R4_WIDTH                     2u\n#define LMEM_PCCRMR_R4(x)                        (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R4_SHIFT))&LMEM_PCCRMR_R4_MASK)\n#define LMEM_PCCRMR_R3_MASK                      0x3000000u\n#define LMEM_PCCRMR_R3_SHIFT                     24u\n#define LMEM_PCCRMR_R3_WIDTH                     2u\n#define LMEM_PCCRMR_R3(x)                        (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R3_SHIFT))&LMEM_PCCRMR_R3_MASK)\n#define LMEM_PCCRMR_R2_MASK                      0xC000000u\n#define LMEM_PCCRMR_R2_SHIFT                     26u\n#define LMEM_PCCRMR_R2_WIDTH                     2u\n#define LMEM_PCCRMR_R2(x)                        (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R2_SHIFT))&LMEM_PCCRMR_R2_MASK)\n#define LMEM_PCCRMR_R1_MASK                      0x30000000u\n#define LMEM_PCCRMR_R1_SHIFT                     28u\n#define LMEM_PCCRMR_R1_WIDTH                     2u\n#define LMEM_PCCRMR_R1(x)                        (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R1_SHIFT))&LMEM_PCCRMR_R1_MASK)\n#define LMEM_PCCRMR_R0_MASK                      0xC0000000u\n#define LMEM_PCCRMR_R0_SHIFT                     30u\n#define LMEM_PCCRMR_R0_WIDTH                     2u\n#define LMEM_PCCRMR_R0(x)                        (((uint32_t)(((uint32_t)(x))<<LMEM_PCCRMR_R0_SHIFT))&LMEM_PCCRMR_R0_MASK)\n\n/*!\n * @}\n */ /* end of group LMEM_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group LMEM_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- LPI2C Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup LPI2C_Peripheral_Access_Layer LPI2C Peripheral Access Layer\n * @{\n */\n\n\n/** LPI2C - Size of Registers Arrays */\n\n/** LPI2C - Register Layout Typedef */\ntypedef struct {\n  __I  uint32_t VERID;                             /**< Version ID Register, offset: 0x0 */\n  __I  uint32_t PARAM;                             /**< Parameter Register, offset: 0x4 */\n       uint8_t RESERVED_0[8];\n  __IO uint32_t MCR;                               /**< Master Control Register, offset: 0x10 */\n  __IO uint32_t MSR;                               /**< Master Status Register, offset: 0x14 */\n  __IO uint32_t MIER;                              /**< Master Interrupt Enable Register, offset: 0x18 */\n  __IO uint32_t MDER;                              /**< Master DMA Enable Register, offset: 0x1C */\n  __IO uint32_t MCFGR0;                            /**< Master Configuration Register 0, offset: 0x20 */\n  __IO uint32_t MCFGR1;                            /**< Master Configuration Register 1, offset: 0x24 */\n  __IO uint32_t MCFGR2;                            /**< Master Configuration Register 2, offset: 0x28 */\n  __IO uint32_t MCFGR3;                            /**< Master Configuration Register 3, offset: 0x2C */\n       uint8_t RESERVED_1[16];\n  __IO uint32_t MDMR;                              /**< Master Data Match Register, offset: 0x40 */\n       uint8_t RESERVED_2[4];\n  __IO uint32_t MCCR0;                             /**< Master Clock Configuration Register 0, offset: 0x48 */\n       uint8_t RESERVED_3[4];\n  __IO uint32_t MCCR1;                             /**< Master Clock Configuration Register 1, offset: 0x50 */\n       uint8_t RESERVED_4[4];\n  __IO uint32_t MFCR;                              /**< Master FIFO Control Register, offset: 0x58 */\n  __I  uint32_t MFSR;                              /**< Master FIFO Status Register, offset: 0x5C */\n  __IO uint32_t MTDR;                              /**< Master Transmit Data Register, offset: 0x60 */\n       uint8_t RESERVED_5[12];\n  __I  uint32_t MRDR;                              /**< Master Receive Data Register, offset: 0x70 */\n       uint8_t RESERVED_6[156];\n  __IO uint32_t SCR;                               /**< Slave Control Register, offset: 0x110 */\n  __IO uint32_t SSR;                               /**< Slave Status Register, offset: 0x114 */\n  __IO uint32_t SIER;                              /**< Slave Interrupt Enable Register, offset: 0x118 */\n  __IO uint32_t SDER;                              /**< Slave DMA Enable Register, offset: 0x11C */\n       uint8_t RESERVED_7[4];\n  __IO uint32_t SCFGR1;                            /**< Slave Configuration Register 1, offset: 0x124 */\n  __IO uint32_t SCFGR2;                            /**< Slave Configuration Register 2, offset: 0x128 */\n       uint8_t RESERVED_8[20];\n  __IO uint32_t SAMR;                              /**< Slave Address Match Register, offset: 0x140 */\n       uint8_t RESERVED_9[12];\n  __I  uint32_t SASR;                              /**< Slave Address Status Register, offset: 0x150 */\n  __IO uint32_t STAR;                              /**< Slave Transmit ACK Register, offset: 0x154 */\n       uint8_t RESERVED_10[8];\n  __IO uint32_t STDR;                              /**< Slave Transmit Data Register, offset: 0x160 */\n       uint8_t RESERVED_11[12];\n  __I  uint32_t SRDR;                              /**< Slave Receive Data Register, offset: 0x170 */\n} LPI2C_Type, *LPI2C_MemMapPtr;\n\n /** Number of instances of the LPI2C module. */\n#define LPI2C_INSTANCE_COUNT                     (1u)\n\n\n/* LPI2C - Peripheral instance base addresses */\n/** Peripheral LPI2C0 base address */\n#define LPI2C0_BASE                              (0x40066000u)\n/** Peripheral LPI2C0 base pointer */\n#define LPI2C0                                   ((LPI2C_Type *)LPI2C0_BASE)\n/** Array initializer of LPI2C peripheral base addresses */\n#define LPI2C_BASE_ADDRS                         { LPI2C0_BASE }\n/** Array initializer of LPI2C peripheral base pointers */\n#define LPI2C_BASE_PTRS                          { LPI2C0 }\n /** Number of interrupt vector arrays for the LPI2C module. */\n#define LPI2C_IRQS_ARR_COUNT                     (2u)\n /** Number of interrupt channels for the MASTER type of LPI2C module. */\n#define LPI2C_MASTER_IRQS_CH_COUNT               (1u)\n /** Number of interrupt channels for the SLAVE type of LPI2C module. */\n#define LPI2C_SLAVE_IRQS_CH_COUNT                (1u)\n/** Interrupt vectors for the LPI2C peripheral type */\n#define LPI2C_MASTER_IRQS                        { LPI2C0_Master_IRQn }\n#define LPI2C_SLAVE_IRQS                         { LPI2C0_Slave_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- LPI2C Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup LPI2C_Register_Masks LPI2C Register Masks\n * @{\n */\n\n/* VERID Bit Fields */\n#define LPI2C_VERID_FEATURE_MASK                 0xFFFFu\n#define LPI2C_VERID_FEATURE_SHIFT                0u\n#define LPI2C_VERID_FEATURE_WIDTH                16u\n#define LPI2C_VERID_FEATURE(x)                   (((uint32_t)(((uint32_t)(x))<<LPI2C_VERID_FEATURE_SHIFT))&LPI2C_VERID_FEATURE_MASK)\n#define LPI2C_VERID_MINOR_MASK                   0xFF0000u\n#define LPI2C_VERID_MINOR_SHIFT                  16u\n#define LPI2C_VERID_MINOR_WIDTH                  8u\n#define LPI2C_VERID_MINOR(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_VERID_MINOR_SHIFT))&LPI2C_VERID_MINOR_MASK)\n#define LPI2C_VERID_MAJOR_MASK                   0xFF000000u\n#define LPI2C_VERID_MAJOR_SHIFT                  24u\n#define LPI2C_VERID_MAJOR_WIDTH                  8u\n#define LPI2C_VERID_MAJOR(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_VERID_MAJOR_SHIFT))&LPI2C_VERID_MAJOR_MASK)\n/* PARAM Bit Fields */\n#define LPI2C_PARAM_MTXFIFO_MASK                 0xFu\n#define LPI2C_PARAM_MTXFIFO_SHIFT                0u\n#define LPI2C_PARAM_MTXFIFO_WIDTH                4u\n#define LPI2C_PARAM_MTXFIFO(x)                   (((uint32_t)(((uint32_t)(x))<<LPI2C_PARAM_MTXFIFO_SHIFT))&LPI2C_PARAM_MTXFIFO_MASK)\n#define LPI2C_PARAM_MRXFIFO_MASK                 0xF00u\n#define LPI2C_PARAM_MRXFIFO_SHIFT                8u\n#define LPI2C_PARAM_MRXFIFO_WIDTH                4u\n#define LPI2C_PARAM_MRXFIFO(x)                   (((uint32_t)(((uint32_t)(x))<<LPI2C_PARAM_MRXFIFO_SHIFT))&LPI2C_PARAM_MRXFIFO_MASK)\n/* MCR Bit Fields */\n#define LPI2C_MCR_MEN_MASK                       0x1u\n#define LPI2C_MCR_MEN_SHIFT                      0u\n#define LPI2C_MCR_MEN_WIDTH                      1u\n#define LPI2C_MCR_MEN(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MCR_MEN_SHIFT))&LPI2C_MCR_MEN_MASK)\n#define LPI2C_MCR_RST_MASK                       0x2u\n#define LPI2C_MCR_RST_SHIFT                      1u\n#define LPI2C_MCR_RST_WIDTH                      1u\n#define LPI2C_MCR_RST(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MCR_RST_SHIFT))&LPI2C_MCR_RST_MASK)\n#define LPI2C_MCR_DOZEN_MASK                     0x4u\n#define LPI2C_MCR_DOZEN_SHIFT                    2u\n#define LPI2C_MCR_DOZEN_WIDTH                    1u\n#define LPI2C_MCR_DOZEN(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MCR_DOZEN_SHIFT))&LPI2C_MCR_DOZEN_MASK)\n#define LPI2C_MCR_DBGEN_MASK                     0x8u\n#define LPI2C_MCR_DBGEN_SHIFT                    3u\n#define LPI2C_MCR_DBGEN_WIDTH                    1u\n#define LPI2C_MCR_DBGEN(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MCR_DBGEN_SHIFT))&LPI2C_MCR_DBGEN_MASK)\n#define LPI2C_MCR_RTF_MASK                       0x100u\n#define LPI2C_MCR_RTF_SHIFT                      8u\n#define LPI2C_MCR_RTF_WIDTH                      1u\n#define LPI2C_MCR_RTF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MCR_RTF_SHIFT))&LPI2C_MCR_RTF_MASK)\n#define LPI2C_MCR_RRF_MASK                       0x200u\n#define LPI2C_MCR_RRF_SHIFT                      9u\n#define LPI2C_MCR_RRF_WIDTH                      1u\n#define LPI2C_MCR_RRF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MCR_RRF_SHIFT))&LPI2C_MCR_RRF_MASK)\n/* MSR Bit Fields */\n#define LPI2C_MSR_TDF_MASK                       0x1u\n#define LPI2C_MSR_TDF_SHIFT                      0u\n#define LPI2C_MSR_TDF_WIDTH                      1u\n#define LPI2C_MSR_TDF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MSR_TDF_SHIFT))&LPI2C_MSR_TDF_MASK)\n#define LPI2C_MSR_RDF_MASK                       0x2u\n#define LPI2C_MSR_RDF_SHIFT                      1u\n#define LPI2C_MSR_RDF_WIDTH                      1u\n#define LPI2C_MSR_RDF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MSR_RDF_SHIFT))&LPI2C_MSR_RDF_MASK)\n#define LPI2C_MSR_EPF_MASK                       0x100u\n#define LPI2C_MSR_EPF_SHIFT                      8u\n#define LPI2C_MSR_EPF_WIDTH                      1u\n#define LPI2C_MSR_EPF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MSR_EPF_SHIFT))&LPI2C_MSR_EPF_MASK)\n#define LPI2C_MSR_SDF_MASK                       0x200u\n#define LPI2C_MSR_SDF_SHIFT                      9u\n#define LPI2C_MSR_SDF_WIDTH                      1u\n#define LPI2C_MSR_SDF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MSR_SDF_SHIFT))&LPI2C_MSR_SDF_MASK)\n#define LPI2C_MSR_NDF_MASK                       0x400u\n#define LPI2C_MSR_NDF_SHIFT                      10u\n#define LPI2C_MSR_NDF_WIDTH                      1u\n#define LPI2C_MSR_NDF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MSR_NDF_SHIFT))&LPI2C_MSR_NDF_MASK)\n#define LPI2C_MSR_ALF_MASK                       0x800u\n#define LPI2C_MSR_ALF_SHIFT                      11u\n#define LPI2C_MSR_ALF_WIDTH                      1u\n#define LPI2C_MSR_ALF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MSR_ALF_SHIFT))&LPI2C_MSR_ALF_MASK)\n#define LPI2C_MSR_FEF_MASK                       0x1000u\n#define LPI2C_MSR_FEF_SHIFT                      12u\n#define LPI2C_MSR_FEF_WIDTH                      1u\n#define LPI2C_MSR_FEF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MSR_FEF_SHIFT))&LPI2C_MSR_FEF_MASK)\n#define LPI2C_MSR_PLTF_MASK                      0x2000u\n#define LPI2C_MSR_PLTF_SHIFT                     13u\n#define LPI2C_MSR_PLTF_WIDTH                     1u\n#define LPI2C_MSR_PLTF(x)                        (((uint32_t)(((uint32_t)(x))<<LPI2C_MSR_PLTF_SHIFT))&LPI2C_MSR_PLTF_MASK)\n#define LPI2C_MSR_DMF_MASK                       0x4000u\n#define LPI2C_MSR_DMF_SHIFT                      14u\n#define LPI2C_MSR_DMF_WIDTH                      1u\n#define LPI2C_MSR_DMF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MSR_DMF_SHIFT))&LPI2C_MSR_DMF_MASK)\n#define LPI2C_MSR_MBF_MASK                       0x1000000u\n#define LPI2C_MSR_MBF_SHIFT                      24u\n#define LPI2C_MSR_MBF_WIDTH                      1u\n#define LPI2C_MSR_MBF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MSR_MBF_SHIFT))&LPI2C_MSR_MBF_MASK)\n#define LPI2C_MSR_BBF_MASK                       0x2000000u\n#define LPI2C_MSR_BBF_SHIFT                      25u\n#define LPI2C_MSR_BBF_WIDTH                      1u\n#define LPI2C_MSR_BBF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_MSR_BBF_SHIFT))&LPI2C_MSR_BBF_MASK)\n/* MIER Bit Fields */\n#define LPI2C_MIER_TDIE_MASK                     0x1u\n#define LPI2C_MIER_TDIE_SHIFT                    0u\n#define LPI2C_MIER_TDIE_WIDTH                    1u\n#define LPI2C_MIER_TDIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MIER_TDIE_SHIFT))&LPI2C_MIER_TDIE_MASK)\n#define LPI2C_MIER_RDIE_MASK                     0x2u\n#define LPI2C_MIER_RDIE_SHIFT                    1u\n#define LPI2C_MIER_RDIE_WIDTH                    1u\n#define LPI2C_MIER_RDIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MIER_RDIE_SHIFT))&LPI2C_MIER_RDIE_MASK)\n#define LPI2C_MIER_EPIE_MASK                     0x100u\n#define LPI2C_MIER_EPIE_SHIFT                    8u\n#define LPI2C_MIER_EPIE_WIDTH                    1u\n#define LPI2C_MIER_EPIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MIER_EPIE_SHIFT))&LPI2C_MIER_EPIE_MASK)\n#define LPI2C_MIER_SDIE_MASK                     0x200u\n#define LPI2C_MIER_SDIE_SHIFT                    9u\n#define LPI2C_MIER_SDIE_WIDTH                    1u\n#define LPI2C_MIER_SDIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MIER_SDIE_SHIFT))&LPI2C_MIER_SDIE_MASK)\n#define LPI2C_MIER_NDIE_MASK                     0x400u\n#define LPI2C_MIER_NDIE_SHIFT                    10u\n#define LPI2C_MIER_NDIE_WIDTH                    1u\n#define LPI2C_MIER_NDIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MIER_NDIE_SHIFT))&LPI2C_MIER_NDIE_MASK)\n#define LPI2C_MIER_ALIE_MASK                     0x800u\n#define LPI2C_MIER_ALIE_SHIFT                    11u\n#define LPI2C_MIER_ALIE_WIDTH                    1u\n#define LPI2C_MIER_ALIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MIER_ALIE_SHIFT))&LPI2C_MIER_ALIE_MASK)\n#define LPI2C_MIER_FEIE_MASK                     0x1000u\n#define LPI2C_MIER_FEIE_SHIFT                    12u\n#define LPI2C_MIER_FEIE_WIDTH                    1u\n#define LPI2C_MIER_FEIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MIER_FEIE_SHIFT))&LPI2C_MIER_FEIE_MASK)\n#define LPI2C_MIER_PLTIE_MASK                    0x2000u\n#define LPI2C_MIER_PLTIE_SHIFT                   13u\n#define LPI2C_MIER_PLTIE_WIDTH                   1u\n#define LPI2C_MIER_PLTIE(x)                      (((uint32_t)(((uint32_t)(x))<<LPI2C_MIER_PLTIE_SHIFT))&LPI2C_MIER_PLTIE_MASK)\n#define LPI2C_MIER_DMIE_MASK                     0x4000u\n#define LPI2C_MIER_DMIE_SHIFT                    14u\n#define LPI2C_MIER_DMIE_WIDTH                    1u\n#define LPI2C_MIER_DMIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MIER_DMIE_SHIFT))&LPI2C_MIER_DMIE_MASK)\n/* MDER Bit Fields */\n#define LPI2C_MDER_TDDE_MASK                     0x1u\n#define LPI2C_MDER_TDDE_SHIFT                    0u\n#define LPI2C_MDER_TDDE_WIDTH                    1u\n#define LPI2C_MDER_TDDE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MDER_TDDE_SHIFT))&LPI2C_MDER_TDDE_MASK)\n#define LPI2C_MDER_RDDE_MASK                     0x2u\n#define LPI2C_MDER_RDDE_SHIFT                    1u\n#define LPI2C_MDER_RDDE_WIDTH                    1u\n#define LPI2C_MDER_RDDE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MDER_RDDE_SHIFT))&LPI2C_MDER_RDDE_MASK)\n/* MCFGR0 Bit Fields */\n#define LPI2C_MCFGR0_HREN_MASK                   0x1u\n#define LPI2C_MCFGR0_HREN_SHIFT                  0u\n#define LPI2C_MCFGR0_HREN_WIDTH                  1u\n#define LPI2C_MCFGR0_HREN(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR0_HREN_SHIFT))&LPI2C_MCFGR0_HREN_MASK)\n#define LPI2C_MCFGR0_HRPOL_MASK                  0x2u\n#define LPI2C_MCFGR0_HRPOL_SHIFT                 1u\n#define LPI2C_MCFGR0_HRPOL_WIDTH                 1u\n#define LPI2C_MCFGR0_HRPOL(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR0_HRPOL_SHIFT))&LPI2C_MCFGR0_HRPOL_MASK)\n#define LPI2C_MCFGR0_HRSEL_MASK                  0x4u\n#define LPI2C_MCFGR0_HRSEL_SHIFT                 2u\n#define LPI2C_MCFGR0_HRSEL_WIDTH                 1u\n#define LPI2C_MCFGR0_HRSEL(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR0_HRSEL_SHIFT))&LPI2C_MCFGR0_HRSEL_MASK)\n#define LPI2C_MCFGR0_CIRFIFO_MASK                0x100u\n#define LPI2C_MCFGR0_CIRFIFO_SHIFT               8u\n#define LPI2C_MCFGR0_CIRFIFO_WIDTH               1u\n#define LPI2C_MCFGR0_CIRFIFO(x)                  (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR0_CIRFIFO_SHIFT))&LPI2C_MCFGR0_CIRFIFO_MASK)\n#define LPI2C_MCFGR0_RDMO_MASK                   0x200u\n#define LPI2C_MCFGR0_RDMO_SHIFT                  9u\n#define LPI2C_MCFGR0_RDMO_WIDTH                  1u\n#define LPI2C_MCFGR0_RDMO(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR0_RDMO_SHIFT))&LPI2C_MCFGR0_RDMO_MASK)\n/* MCFGR1 Bit Fields */\n#define LPI2C_MCFGR1_PRESCALE_MASK               0x7u\n#define LPI2C_MCFGR1_PRESCALE_SHIFT              0u\n#define LPI2C_MCFGR1_PRESCALE_WIDTH              3u\n#define LPI2C_MCFGR1_PRESCALE(x)                 (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR1_PRESCALE_SHIFT))&LPI2C_MCFGR1_PRESCALE_MASK)\n#define LPI2C_MCFGR1_AUTOSTOP_MASK               0x100u\n#define LPI2C_MCFGR1_AUTOSTOP_SHIFT              8u\n#define LPI2C_MCFGR1_AUTOSTOP_WIDTH              1u\n#define LPI2C_MCFGR1_AUTOSTOP(x)                 (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR1_AUTOSTOP_SHIFT))&LPI2C_MCFGR1_AUTOSTOP_MASK)\n#define LPI2C_MCFGR1_IGNACK_MASK                 0x200u\n#define LPI2C_MCFGR1_IGNACK_SHIFT                9u\n#define LPI2C_MCFGR1_IGNACK_WIDTH                1u\n#define LPI2C_MCFGR1_IGNACK(x)                   (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR1_IGNACK_SHIFT))&LPI2C_MCFGR1_IGNACK_MASK)\n#define LPI2C_MCFGR1_TIMECFG_MASK                0x400u\n#define LPI2C_MCFGR1_TIMECFG_SHIFT               10u\n#define LPI2C_MCFGR1_TIMECFG_WIDTH               1u\n#define LPI2C_MCFGR1_TIMECFG(x)                  (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR1_TIMECFG_SHIFT))&LPI2C_MCFGR1_TIMECFG_MASK)\n#define LPI2C_MCFGR1_MATCFG_MASK                 0x70000u\n#define LPI2C_MCFGR1_MATCFG_SHIFT                16u\n#define LPI2C_MCFGR1_MATCFG_WIDTH                3u\n#define LPI2C_MCFGR1_MATCFG(x)                   (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR1_MATCFG_SHIFT))&LPI2C_MCFGR1_MATCFG_MASK)\n#define LPI2C_MCFGR1_PINCFG_MASK                 0x7000000u\n#define LPI2C_MCFGR1_PINCFG_SHIFT                24u\n#define LPI2C_MCFGR1_PINCFG_WIDTH                3u\n#define LPI2C_MCFGR1_PINCFG(x)                   (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR1_PINCFG_SHIFT))&LPI2C_MCFGR1_PINCFG_MASK)\n/* MCFGR2 Bit Fields */\n#define LPI2C_MCFGR2_BUSIDLE_MASK                0xFFFu\n#define LPI2C_MCFGR2_BUSIDLE_SHIFT               0u\n#define LPI2C_MCFGR2_BUSIDLE_WIDTH               12u\n#define LPI2C_MCFGR2_BUSIDLE(x)                  (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR2_BUSIDLE_SHIFT))&LPI2C_MCFGR2_BUSIDLE_MASK)\n#define LPI2C_MCFGR2_FILTSCL_MASK                0xF0000u\n#define LPI2C_MCFGR2_FILTSCL_SHIFT               16u\n#define LPI2C_MCFGR2_FILTSCL_WIDTH               4u\n#define LPI2C_MCFGR2_FILTSCL(x)                  (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR2_FILTSCL_SHIFT))&LPI2C_MCFGR2_FILTSCL_MASK)\n#define LPI2C_MCFGR2_FILTSDA_MASK                0xF000000u\n#define LPI2C_MCFGR2_FILTSDA_SHIFT               24u\n#define LPI2C_MCFGR2_FILTSDA_WIDTH               4u\n#define LPI2C_MCFGR2_FILTSDA(x)                  (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR2_FILTSDA_SHIFT))&LPI2C_MCFGR2_FILTSDA_MASK)\n/* MCFGR3 Bit Fields */\n#define LPI2C_MCFGR3_PINLOW_MASK                 0xFFF00u\n#define LPI2C_MCFGR3_PINLOW_SHIFT                8u\n#define LPI2C_MCFGR3_PINLOW_WIDTH                12u\n#define LPI2C_MCFGR3_PINLOW(x)                   (((uint32_t)(((uint32_t)(x))<<LPI2C_MCFGR3_PINLOW_SHIFT))&LPI2C_MCFGR3_PINLOW_MASK)\n/* MDMR Bit Fields */\n#define LPI2C_MDMR_MATCH0_MASK                   0xFFu\n#define LPI2C_MDMR_MATCH0_SHIFT                  0u\n#define LPI2C_MDMR_MATCH0_WIDTH                  8u\n#define LPI2C_MDMR_MATCH0(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_MDMR_MATCH0_SHIFT))&LPI2C_MDMR_MATCH0_MASK)\n#define LPI2C_MDMR_MATCH1_MASK                   0xFF0000u\n#define LPI2C_MDMR_MATCH1_SHIFT                  16u\n#define LPI2C_MDMR_MATCH1_WIDTH                  8u\n#define LPI2C_MDMR_MATCH1(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_MDMR_MATCH1_SHIFT))&LPI2C_MDMR_MATCH1_MASK)\n/* MCCR0 Bit Fields */\n#define LPI2C_MCCR0_CLKLO_MASK                   0x3Fu\n#define LPI2C_MCCR0_CLKLO_SHIFT                  0u\n#define LPI2C_MCCR0_CLKLO_WIDTH                  6u\n#define LPI2C_MCCR0_CLKLO(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_MCCR0_CLKLO_SHIFT))&LPI2C_MCCR0_CLKLO_MASK)\n#define LPI2C_MCCR0_CLKHI_MASK                   0x3F00u\n#define LPI2C_MCCR0_CLKHI_SHIFT                  8u\n#define LPI2C_MCCR0_CLKHI_WIDTH                  6u\n#define LPI2C_MCCR0_CLKHI(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_MCCR0_CLKHI_SHIFT))&LPI2C_MCCR0_CLKHI_MASK)\n#define LPI2C_MCCR0_SETHOLD_MASK                 0x3F0000u\n#define LPI2C_MCCR0_SETHOLD_SHIFT                16u\n#define LPI2C_MCCR0_SETHOLD_WIDTH                6u\n#define LPI2C_MCCR0_SETHOLD(x)                   (((uint32_t)(((uint32_t)(x))<<LPI2C_MCCR0_SETHOLD_SHIFT))&LPI2C_MCCR0_SETHOLD_MASK)\n#define LPI2C_MCCR0_DATAVD_MASK                  0x3F000000u\n#define LPI2C_MCCR0_DATAVD_SHIFT                 24u\n#define LPI2C_MCCR0_DATAVD_WIDTH                 6u\n#define LPI2C_MCCR0_DATAVD(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_MCCR0_DATAVD_SHIFT))&LPI2C_MCCR0_DATAVD_MASK)\n/* MCCR1 Bit Fields */\n#define LPI2C_MCCR1_CLKLO_MASK                   0x3Fu\n#define LPI2C_MCCR1_CLKLO_SHIFT                  0u\n#define LPI2C_MCCR1_CLKLO_WIDTH                  6u\n#define LPI2C_MCCR1_CLKLO(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_MCCR1_CLKLO_SHIFT))&LPI2C_MCCR1_CLKLO_MASK)\n#define LPI2C_MCCR1_CLKHI_MASK                   0x3F00u\n#define LPI2C_MCCR1_CLKHI_SHIFT                  8u\n#define LPI2C_MCCR1_CLKHI_WIDTH                  6u\n#define LPI2C_MCCR1_CLKHI(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_MCCR1_CLKHI_SHIFT))&LPI2C_MCCR1_CLKHI_MASK)\n#define LPI2C_MCCR1_SETHOLD_MASK                 0x3F0000u\n#define LPI2C_MCCR1_SETHOLD_SHIFT                16u\n#define LPI2C_MCCR1_SETHOLD_WIDTH                6u\n#define LPI2C_MCCR1_SETHOLD(x)                   (((uint32_t)(((uint32_t)(x))<<LPI2C_MCCR1_SETHOLD_SHIFT))&LPI2C_MCCR1_SETHOLD_MASK)\n#define LPI2C_MCCR1_DATAVD_MASK                  0x3F000000u\n#define LPI2C_MCCR1_DATAVD_SHIFT                 24u\n#define LPI2C_MCCR1_DATAVD_WIDTH                 6u\n#define LPI2C_MCCR1_DATAVD(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_MCCR1_DATAVD_SHIFT))&LPI2C_MCCR1_DATAVD_MASK)\n/* MFCR Bit Fields */\n#define LPI2C_MFCR_TXWATER_MASK                  0x3u\n#define LPI2C_MFCR_TXWATER_SHIFT                 0u\n#define LPI2C_MFCR_TXWATER_WIDTH                 2u\n#define LPI2C_MFCR_TXWATER(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_MFCR_TXWATER_SHIFT))&LPI2C_MFCR_TXWATER_MASK)\n#define LPI2C_MFCR_RXWATER_MASK                  0x30000u\n#define LPI2C_MFCR_RXWATER_SHIFT                 16u\n#define LPI2C_MFCR_RXWATER_WIDTH                 2u\n#define LPI2C_MFCR_RXWATER(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_MFCR_RXWATER_SHIFT))&LPI2C_MFCR_RXWATER_MASK)\n/* MFSR Bit Fields */\n#define LPI2C_MFSR_TXCOUNT_MASK                  0x7u\n#define LPI2C_MFSR_TXCOUNT_SHIFT                 0u\n#define LPI2C_MFSR_TXCOUNT_WIDTH                 3u\n#define LPI2C_MFSR_TXCOUNT(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_MFSR_TXCOUNT_SHIFT))&LPI2C_MFSR_TXCOUNT_MASK)\n#define LPI2C_MFSR_RXCOUNT_MASK                  0x70000u\n#define LPI2C_MFSR_RXCOUNT_SHIFT                 16u\n#define LPI2C_MFSR_RXCOUNT_WIDTH                 3u\n#define LPI2C_MFSR_RXCOUNT(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_MFSR_RXCOUNT_SHIFT))&LPI2C_MFSR_RXCOUNT_MASK)\n/* MTDR Bit Fields */\n#define LPI2C_MTDR_DATA_MASK                     0xFFu\n#define LPI2C_MTDR_DATA_SHIFT                    0u\n#define LPI2C_MTDR_DATA_WIDTH                    8u\n#define LPI2C_MTDR_DATA(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MTDR_DATA_SHIFT))&LPI2C_MTDR_DATA_MASK)\n#define LPI2C_MTDR_CMD_MASK                      0x700u\n#define LPI2C_MTDR_CMD_SHIFT                     8u\n#define LPI2C_MTDR_CMD_WIDTH                     3u\n#define LPI2C_MTDR_CMD(x)                        (((uint32_t)(((uint32_t)(x))<<LPI2C_MTDR_CMD_SHIFT))&LPI2C_MTDR_CMD_MASK)\n/* MRDR Bit Fields */\n#define LPI2C_MRDR_DATA_MASK                     0xFFu\n#define LPI2C_MRDR_DATA_SHIFT                    0u\n#define LPI2C_MRDR_DATA_WIDTH                    8u\n#define LPI2C_MRDR_DATA(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_MRDR_DATA_SHIFT))&LPI2C_MRDR_DATA_MASK)\n#define LPI2C_MRDR_RXEMPTY_MASK                  0x4000u\n#define LPI2C_MRDR_RXEMPTY_SHIFT                 14u\n#define LPI2C_MRDR_RXEMPTY_WIDTH                 1u\n#define LPI2C_MRDR_RXEMPTY(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_MRDR_RXEMPTY_SHIFT))&LPI2C_MRDR_RXEMPTY_MASK)\n/* SCR Bit Fields */\n#define LPI2C_SCR_SEN_MASK                       0x1u\n#define LPI2C_SCR_SEN_SHIFT                      0u\n#define LPI2C_SCR_SEN_WIDTH                      1u\n#define LPI2C_SCR_SEN(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SCR_SEN_SHIFT))&LPI2C_SCR_SEN_MASK)\n#define LPI2C_SCR_RST_MASK                       0x2u\n#define LPI2C_SCR_RST_SHIFT                      1u\n#define LPI2C_SCR_RST_WIDTH                      1u\n#define LPI2C_SCR_RST(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SCR_RST_SHIFT))&LPI2C_SCR_RST_MASK)\n#define LPI2C_SCR_FILTEN_MASK                    0x10u\n#define LPI2C_SCR_FILTEN_SHIFT                   4u\n#define LPI2C_SCR_FILTEN_WIDTH                   1u\n#define LPI2C_SCR_FILTEN(x)                      (((uint32_t)(((uint32_t)(x))<<LPI2C_SCR_FILTEN_SHIFT))&LPI2C_SCR_FILTEN_MASK)\n#define LPI2C_SCR_FILTDZ_MASK                    0x20u\n#define LPI2C_SCR_FILTDZ_SHIFT                   5u\n#define LPI2C_SCR_FILTDZ_WIDTH                   1u\n#define LPI2C_SCR_FILTDZ(x)                      (((uint32_t)(((uint32_t)(x))<<LPI2C_SCR_FILTDZ_SHIFT))&LPI2C_SCR_FILTDZ_MASK)\n#define LPI2C_SCR_RTF_MASK                       0x100u\n#define LPI2C_SCR_RTF_SHIFT                      8u\n#define LPI2C_SCR_RTF_WIDTH                      1u\n#define LPI2C_SCR_RTF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SCR_RTF_SHIFT))&LPI2C_SCR_RTF_MASK)\n#define LPI2C_SCR_RRF_MASK                       0x200u\n#define LPI2C_SCR_RRF_SHIFT                      9u\n#define LPI2C_SCR_RRF_WIDTH                      1u\n#define LPI2C_SCR_RRF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SCR_RRF_SHIFT))&LPI2C_SCR_RRF_MASK)\n/* SSR Bit Fields */\n#define LPI2C_SSR_TDF_MASK                       0x1u\n#define LPI2C_SSR_TDF_SHIFT                      0u\n#define LPI2C_SSR_TDF_WIDTH                      1u\n#define LPI2C_SSR_TDF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_TDF_SHIFT))&LPI2C_SSR_TDF_MASK)\n#define LPI2C_SSR_RDF_MASK                       0x2u\n#define LPI2C_SSR_RDF_SHIFT                      1u\n#define LPI2C_SSR_RDF_WIDTH                      1u\n#define LPI2C_SSR_RDF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_RDF_SHIFT))&LPI2C_SSR_RDF_MASK)\n#define LPI2C_SSR_AVF_MASK                       0x4u\n#define LPI2C_SSR_AVF_SHIFT                      2u\n#define LPI2C_SSR_AVF_WIDTH                      1u\n#define LPI2C_SSR_AVF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_AVF_SHIFT))&LPI2C_SSR_AVF_MASK)\n#define LPI2C_SSR_TAF_MASK                       0x8u\n#define LPI2C_SSR_TAF_SHIFT                      3u\n#define LPI2C_SSR_TAF_WIDTH                      1u\n#define LPI2C_SSR_TAF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_TAF_SHIFT))&LPI2C_SSR_TAF_MASK)\n#define LPI2C_SSR_RSF_MASK                       0x100u\n#define LPI2C_SSR_RSF_SHIFT                      8u\n#define LPI2C_SSR_RSF_WIDTH                      1u\n#define LPI2C_SSR_RSF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_RSF_SHIFT))&LPI2C_SSR_RSF_MASK)\n#define LPI2C_SSR_SDF_MASK                       0x200u\n#define LPI2C_SSR_SDF_SHIFT                      9u\n#define LPI2C_SSR_SDF_WIDTH                      1u\n#define LPI2C_SSR_SDF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_SDF_SHIFT))&LPI2C_SSR_SDF_MASK)\n#define LPI2C_SSR_BEF_MASK                       0x400u\n#define LPI2C_SSR_BEF_SHIFT                      10u\n#define LPI2C_SSR_BEF_WIDTH                      1u\n#define LPI2C_SSR_BEF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_BEF_SHIFT))&LPI2C_SSR_BEF_MASK)\n#define LPI2C_SSR_FEF_MASK                       0x800u\n#define LPI2C_SSR_FEF_SHIFT                      11u\n#define LPI2C_SSR_FEF_WIDTH                      1u\n#define LPI2C_SSR_FEF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_FEF_SHIFT))&LPI2C_SSR_FEF_MASK)\n#define LPI2C_SSR_AM0F_MASK                      0x1000u\n#define LPI2C_SSR_AM0F_SHIFT                     12u\n#define LPI2C_SSR_AM0F_WIDTH                     1u\n#define LPI2C_SSR_AM0F(x)                        (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_AM0F_SHIFT))&LPI2C_SSR_AM0F_MASK)\n#define LPI2C_SSR_AM1F_MASK                      0x2000u\n#define LPI2C_SSR_AM1F_SHIFT                     13u\n#define LPI2C_SSR_AM1F_WIDTH                     1u\n#define LPI2C_SSR_AM1F(x)                        (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_AM1F_SHIFT))&LPI2C_SSR_AM1F_MASK)\n#define LPI2C_SSR_GCF_MASK                       0x4000u\n#define LPI2C_SSR_GCF_SHIFT                      14u\n#define LPI2C_SSR_GCF_WIDTH                      1u\n#define LPI2C_SSR_GCF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_GCF_SHIFT))&LPI2C_SSR_GCF_MASK)\n#define LPI2C_SSR_SARF_MASK                      0x8000u\n#define LPI2C_SSR_SARF_SHIFT                     15u\n#define LPI2C_SSR_SARF_WIDTH                     1u\n#define LPI2C_SSR_SARF(x)                        (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_SARF_SHIFT))&LPI2C_SSR_SARF_MASK)\n#define LPI2C_SSR_SBF_MASK                       0x1000000u\n#define LPI2C_SSR_SBF_SHIFT                      24u\n#define LPI2C_SSR_SBF_WIDTH                      1u\n#define LPI2C_SSR_SBF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_SBF_SHIFT))&LPI2C_SSR_SBF_MASK)\n#define LPI2C_SSR_BBF_MASK                       0x2000000u\n#define LPI2C_SSR_BBF_SHIFT                      25u\n#define LPI2C_SSR_BBF_WIDTH                      1u\n#define LPI2C_SSR_BBF(x)                         (((uint32_t)(((uint32_t)(x))<<LPI2C_SSR_BBF_SHIFT))&LPI2C_SSR_BBF_MASK)\n/* SIER Bit Fields */\n#define LPI2C_SIER_TDIE_MASK                     0x1u\n#define LPI2C_SIER_TDIE_SHIFT                    0u\n#define LPI2C_SIER_TDIE_WIDTH                    1u\n#define LPI2C_SIER_TDIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SIER_TDIE_SHIFT))&LPI2C_SIER_TDIE_MASK)\n#define LPI2C_SIER_RDIE_MASK                     0x2u\n#define LPI2C_SIER_RDIE_SHIFT                    1u\n#define LPI2C_SIER_RDIE_WIDTH                    1u\n#define LPI2C_SIER_RDIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SIER_RDIE_SHIFT))&LPI2C_SIER_RDIE_MASK)\n#define LPI2C_SIER_AVIE_MASK                     0x4u\n#define LPI2C_SIER_AVIE_SHIFT                    2u\n#define LPI2C_SIER_AVIE_WIDTH                    1u\n#define LPI2C_SIER_AVIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SIER_AVIE_SHIFT))&LPI2C_SIER_AVIE_MASK)\n#define LPI2C_SIER_TAIE_MASK                     0x8u\n#define LPI2C_SIER_TAIE_SHIFT                    3u\n#define LPI2C_SIER_TAIE_WIDTH                    1u\n#define LPI2C_SIER_TAIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SIER_TAIE_SHIFT))&LPI2C_SIER_TAIE_MASK)\n#define LPI2C_SIER_RSIE_MASK                     0x100u\n#define LPI2C_SIER_RSIE_SHIFT                    8u\n#define LPI2C_SIER_RSIE_WIDTH                    1u\n#define LPI2C_SIER_RSIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SIER_RSIE_SHIFT))&LPI2C_SIER_RSIE_MASK)\n#define LPI2C_SIER_SDIE_MASK                     0x200u\n#define LPI2C_SIER_SDIE_SHIFT                    9u\n#define LPI2C_SIER_SDIE_WIDTH                    1u\n#define LPI2C_SIER_SDIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SIER_SDIE_SHIFT))&LPI2C_SIER_SDIE_MASK)\n#define LPI2C_SIER_BEIE_MASK                     0x400u\n#define LPI2C_SIER_BEIE_SHIFT                    10u\n#define LPI2C_SIER_BEIE_WIDTH                    1u\n#define LPI2C_SIER_BEIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SIER_BEIE_SHIFT))&LPI2C_SIER_BEIE_MASK)\n#define LPI2C_SIER_FEIE_MASK                     0x800u\n#define LPI2C_SIER_FEIE_SHIFT                    11u\n#define LPI2C_SIER_FEIE_WIDTH                    1u\n#define LPI2C_SIER_FEIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SIER_FEIE_SHIFT))&LPI2C_SIER_FEIE_MASK)\n#define LPI2C_SIER_AM0IE_MASK                    0x1000u\n#define LPI2C_SIER_AM0IE_SHIFT                   12u\n#define LPI2C_SIER_AM0IE_WIDTH                   1u\n#define LPI2C_SIER_AM0IE(x)                      (((uint32_t)(((uint32_t)(x))<<LPI2C_SIER_AM0IE_SHIFT))&LPI2C_SIER_AM0IE_MASK)\n#define LPI2C_SIER_AM1F_MASK                     0x2000u\n#define LPI2C_SIER_AM1F_SHIFT                    13u\n#define LPI2C_SIER_AM1F_WIDTH                    1u\n#define LPI2C_SIER_AM1F(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SIER_AM1F_SHIFT))&LPI2C_SIER_AM1F_MASK)\n#define LPI2C_SIER_GCIE_MASK                     0x4000u\n#define LPI2C_SIER_GCIE_SHIFT                    14u\n#define LPI2C_SIER_GCIE_WIDTH                    1u\n#define LPI2C_SIER_GCIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SIER_GCIE_SHIFT))&LPI2C_SIER_GCIE_MASK)\n#define LPI2C_SIER_SARIE_MASK                    0x8000u\n#define LPI2C_SIER_SARIE_SHIFT                   15u\n#define LPI2C_SIER_SARIE_WIDTH                   1u\n#define LPI2C_SIER_SARIE(x)                      (((uint32_t)(((uint32_t)(x))<<LPI2C_SIER_SARIE_SHIFT))&LPI2C_SIER_SARIE_MASK)\n/* SDER Bit Fields */\n#define LPI2C_SDER_TDDE_MASK                     0x1u\n#define LPI2C_SDER_TDDE_SHIFT                    0u\n#define LPI2C_SDER_TDDE_WIDTH                    1u\n#define LPI2C_SDER_TDDE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SDER_TDDE_SHIFT))&LPI2C_SDER_TDDE_MASK)\n#define LPI2C_SDER_RDDE_MASK                     0x2u\n#define LPI2C_SDER_RDDE_SHIFT                    1u\n#define LPI2C_SDER_RDDE_WIDTH                    1u\n#define LPI2C_SDER_RDDE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SDER_RDDE_SHIFT))&LPI2C_SDER_RDDE_MASK)\n#define LPI2C_SDER_AVDE_MASK                     0x4u\n#define LPI2C_SDER_AVDE_SHIFT                    2u\n#define LPI2C_SDER_AVDE_WIDTH                    1u\n#define LPI2C_SDER_AVDE(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SDER_AVDE_SHIFT))&LPI2C_SDER_AVDE_MASK)\n/* SCFGR1 Bit Fields */\n#define LPI2C_SCFGR1_ADRSTALL_MASK               0x1u\n#define LPI2C_SCFGR1_ADRSTALL_SHIFT              0u\n#define LPI2C_SCFGR1_ADRSTALL_WIDTH              1u\n#define LPI2C_SCFGR1_ADRSTALL(x)                 (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR1_ADRSTALL_SHIFT))&LPI2C_SCFGR1_ADRSTALL_MASK)\n#define LPI2C_SCFGR1_RXSTALL_MASK                0x2u\n#define LPI2C_SCFGR1_RXSTALL_SHIFT               1u\n#define LPI2C_SCFGR1_RXSTALL_WIDTH               1u\n#define LPI2C_SCFGR1_RXSTALL(x)                  (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR1_RXSTALL_SHIFT))&LPI2C_SCFGR1_RXSTALL_MASK)\n#define LPI2C_SCFGR1_TXDSTALL_MASK               0x4u\n#define LPI2C_SCFGR1_TXDSTALL_SHIFT              2u\n#define LPI2C_SCFGR1_TXDSTALL_WIDTH              1u\n#define LPI2C_SCFGR1_TXDSTALL(x)                 (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR1_TXDSTALL_SHIFT))&LPI2C_SCFGR1_TXDSTALL_MASK)\n#define LPI2C_SCFGR1_ACKSTALL_MASK               0x8u\n#define LPI2C_SCFGR1_ACKSTALL_SHIFT              3u\n#define LPI2C_SCFGR1_ACKSTALL_WIDTH              1u\n#define LPI2C_SCFGR1_ACKSTALL(x)                 (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR1_ACKSTALL_SHIFT))&LPI2C_SCFGR1_ACKSTALL_MASK)\n#define LPI2C_SCFGR1_GCEN_MASK                   0x100u\n#define LPI2C_SCFGR1_GCEN_SHIFT                  8u\n#define LPI2C_SCFGR1_GCEN_WIDTH                  1u\n#define LPI2C_SCFGR1_GCEN(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR1_GCEN_SHIFT))&LPI2C_SCFGR1_GCEN_MASK)\n#define LPI2C_SCFGR1_SAEN_MASK                   0x200u\n#define LPI2C_SCFGR1_SAEN_SHIFT                  9u\n#define LPI2C_SCFGR1_SAEN_WIDTH                  1u\n#define LPI2C_SCFGR1_SAEN(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR1_SAEN_SHIFT))&LPI2C_SCFGR1_SAEN_MASK)\n#define LPI2C_SCFGR1_TXCFG_MASK                  0x400u\n#define LPI2C_SCFGR1_TXCFG_SHIFT                 10u\n#define LPI2C_SCFGR1_TXCFG_WIDTH                 1u\n#define LPI2C_SCFGR1_TXCFG(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR1_TXCFG_SHIFT))&LPI2C_SCFGR1_TXCFG_MASK)\n#define LPI2C_SCFGR1_RXCFG_MASK                  0x800u\n#define LPI2C_SCFGR1_RXCFG_SHIFT                 11u\n#define LPI2C_SCFGR1_RXCFG_WIDTH                 1u\n#define LPI2C_SCFGR1_RXCFG(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR1_RXCFG_SHIFT))&LPI2C_SCFGR1_RXCFG_MASK)\n#define LPI2C_SCFGR1_IGNACK_MASK                 0x1000u\n#define LPI2C_SCFGR1_IGNACK_SHIFT                12u\n#define LPI2C_SCFGR1_IGNACK_WIDTH                1u\n#define LPI2C_SCFGR1_IGNACK(x)                   (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR1_IGNACK_SHIFT))&LPI2C_SCFGR1_IGNACK_MASK)\n#define LPI2C_SCFGR1_HSMEN_MASK                  0x2000u\n#define LPI2C_SCFGR1_HSMEN_SHIFT                 13u\n#define LPI2C_SCFGR1_HSMEN_WIDTH                 1u\n#define LPI2C_SCFGR1_HSMEN(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR1_HSMEN_SHIFT))&LPI2C_SCFGR1_HSMEN_MASK)\n#define LPI2C_SCFGR1_ADDRCFG_MASK                0x70000u\n#define LPI2C_SCFGR1_ADDRCFG_SHIFT               16u\n#define LPI2C_SCFGR1_ADDRCFG_WIDTH               3u\n#define LPI2C_SCFGR1_ADDRCFG(x)                  (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR1_ADDRCFG_SHIFT))&LPI2C_SCFGR1_ADDRCFG_MASK)\n/* SCFGR2 Bit Fields */\n#define LPI2C_SCFGR2_CLKHOLD_MASK                0xFu\n#define LPI2C_SCFGR2_CLKHOLD_SHIFT               0u\n#define LPI2C_SCFGR2_CLKHOLD_WIDTH               4u\n#define LPI2C_SCFGR2_CLKHOLD(x)                  (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR2_CLKHOLD_SHIFT))&LPI2C_SCFGR2_CLKHOLD_MASK)\n#define LPI2C_SCFGR2_DATAVD_MASK                 0x3F00u\n#define LPI2C_SCFGR2_DATAVD_SHIFT                8u\n#define LPI2C_SCFGR2_DATAVD_WIDTH                6u\n#define LPI2C_SCFGR2_DATAVD(x)                   (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR2_DATAVD_SHIFT))&LPI2C_SCFGR2_DATAVD_MASK)\n#define LPI2C_SCFGR2_FILTSCL_MASK                0xF0000u\n#define LPI2C_SCFGR2_FILTSCL_SHIFT               16u\n#define LPI2C_SCFGR2_FILTSCL_WIDTH               4u\n#define LPI2C_SCFGR2_FILTSCL(x)                  (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR2_FILTSCL_SHIFT))&LPI2C_SCFGR2_FILTSCL_MASK)\n#define LPI2C_SCFGR2_FILTSDA_MASK                0xF000000u\n#define LPI2C_SCFGR2_FILTSDA_SHIFT               24u\n#define LPI2C_SCFGR2_FILTSDA_WIDTH               4u\n#define LPI2C_SCFGR2_FILTSDA(x)                  (((uint32_t)(((uint32_t)(x))<<LPI2C_SCFGR2_FILTSDA_SHIFT))&LPI2C_SCFGR2_FILTSDA_MASK)\n/* SAMR Bit Fields */\n#define LPI2C_SAMR_ADDR0_MASK                    0x7FEu\n#define LPI2C_SAMR_ADDR0_SHIFT                   1u\n#define LPI2C_SAMR_ADDR0_WIDTH                   10u\n#define LPI2C_SAMR_ADDR0(x)                      (((uint32_t)(((uint32_t)(x))<<LPI2C_SAMR_ADDR0_SHIFT))&LPI2C_SAMR_ADDR0_MASK)\n#define LPI2C_SAMR_ADDR1_MASK                    0x7FE0000u\n#define LPI2C_SAMR_ADDR1_SHIFT                   17u\n#define LPI2C_SAMR_ADDR1_WIDTH                   10u\n#define LPI2C_SAMR_ADDR1(x)                      (((uint32_t)(((uint32_t)(x))<<LPI2C_SAMR_ADDR1_SHIFT))&LPI2C_SAMR_ADDR1_MASK)\n/* SASR Bit Fields */\n#define LPI2C_SASR_RADDR_MASK                    0x7FFu\n#define LPI2C_SASR_RADDR_SHIFT                   0u\n#define LPI2C_SASR_RADDR_WIDTH                   11u\n#define LPI2C_SASR_RADDR(x)                      (((uint32_t)(((uint32_t)(x))<<LPI2C_SASR_RADDR_SHIFT))&LPI2C_SASR_RADDR_MASK)\n#define LPI2C_SASR_ANV_MASK                      0x4000u\n#define LPI2C_SASR_ANV_SHIFT                     14u\n#define LPI2C_SASR_ANV_WIDTH                     1u\n#define LPI2C_SASR_ANV(x)                        (((uint32_t)(((uint32_t)(x))<<LPI2C_SASR_ANV_SHIFT))&LPI2C_SASR_ANV_MASK)\n/* STAR Bit Fields */\n#define LPI2C_STAR_TXNACK_MASK                   0x1u\n#define LPI2C_STAR_TXNACK_SHIFT                  0u\n#define LPI2C_STAR_TXNACK_WIDTH                  1u\n#define LPI2C_STAR_TXNACK(x)                     (((uint32_t)(((uint32_t)(x))<<LPI2C_STAR_TXNACK_SHIFT))&LPI2C_STAR_TXNACK_MASK)\n/* STDR Bit Fields */\n#define LPI2C_STDR_DATA_MASK                     0xFFu\n#define LPI2C_STDR_DATA_SHIFT                    0u\n#define LPI2C_STDR_DATA_WIDTH                    8u\n#define LPI2C_STDR_DATA(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_STDR_DATA_SHIFT))&LPI2C_STDR_DATA_MASK)\n/* SRDR Bit Fields */\n#define LPI2C_SRDR_DATA_MASK                     0xFFu\n#define LPI2C_SRDR_DATA_SHIFT                    0u\n#define LPI2C_SRDR_DATA_WIDTH                    8u\n#define LPI2C_SRDR_DATA(x)                       (((uint32_t)(((uint32_t)(x))<<LPI2C_SRDR_DATA_SHIFT))&LPI2C_SRDR_DATA_MASK)\n#define LPI2C_SRDR_RXEMPTY_MASK                  0x4000u\n#define LPI2C_SRDR_RXEMPTY_SHIFT                 14u\n#define LPI2C_SRDR_RXEMPTY_WIDTH                 1u\n#define LPI2C_SRDR_RXEMPTY(x)                    (((uint32_t)(((uint32_t)(x))<<LPI2C_SRDR_RXEMPTY_SHIFT))&LPI2C_SRDR_RXEMPTY_MASK)\n#define LPI2C_SRDR_SOF_MASK                      0x8000u\n#define LPI2C_SRDR_SOF_SHIFT                     15u\n#define LPI2C_SRDR_SOF_WIDTH                     1u\n#define LPI2C_SRDR_SOF(x)                        (((uint32_t)(((uint32_t)(x))<<LPI2C_SRDR_SOF_SHIFT))&LPI2C_SRDR_SOF_MASK)\n\n/*!\n * @}\n */ /* end of group LPI2C_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group LPI2C_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- LPIT Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup LPIT_Peripheral_Access_Layer LPIT Peripheral Access Layer\n * @{\n */\n\n\n/** LPIT - Size of Registers Arrays */\n#define LPIT_TMR_COUNT                           4u\n\n/** LPIT - Register Layout Typedef */\ntypedef struct {\n  __I  uint32_t VERID;                             /**< Version ID Register, offset: 0x0 */\n  __I  uint32_t PARAM;                             /**< Parameter Register, offset: 0x4 */\n  __IO uint32_t MCR;                               /**< Module Control Register, offset: 0x8 */\n  __IO uint32_t MSR;                               /**< Module Status Register, offset: 0xC */\n  __IO uint32_t MIER;                              /**< Module Interrupt Enable Register, offset: 0x10 */\n  __IO uint32_t SETTEN;                            /**< Set Timer Enable Register, offset: 0x14 */\n  __IO uint32_t CLRTEN;                            /**< Clear Timer Enable Register, offset: 0x18 */\n       uint8_t RESERVED_0[4];\n  struct {                                         /* offset: 0x20, array step: 0x10 */\n    __IO uint32_t TVAL;                              /**< Timer Value Register, array offset: 0x20, array step: 0x10 */\n    __I  uint32_t CVAL;                              /**< Current Timer Value, array offset: 0x24, array step: 0x10 */\n    __IO uint32_t TCTRL;                             /**< Timer Control Register, array offset: 0x28, array step: 0x10 */\n         uint8_t RESERVED_0[4];\n  } TMR[LPIT_TMR_COUNT];\n} LPIT_Type, *LPIT_MemMapPtr;\n\n /** Number of instances of the LPIT module. */\n#define LPIT_INSTANCE_COUNT                      (1u)\n\n\n/* LPIT - Peripheral instance base addresses */\n/** Peripheral LPIT0 base address */\n#define LPIT0_BASE                               (0x40037000u)\n/** Peripheral LPIT0 base pointer */\n#define LPIT0                                    ((LPIT_Type *)LPIT0_BASE)\n/** Array initializer of LPIT peripheral base addresses */\n#define LPIT_BASE_ADDRS                          { LPIT0_BASE }\n/** Array initializer of LPIT peripheral base pointers */\n#define LPIT_BASE_PTRS                           { LPIT0 }\n /** Number of interrupt vector arrays for the LPIT module. */\n#define LPIT_IRQS_ARR_COUNT                      (1u)\n /** Number of interrupt channels for the LPIT module. */\n#define LPIT_IRQS_CH_COUNT                       (4u)\n/** Interrupt vectors for the LPIT peripheral type */\n#define LPIT_IRQS                                { LPIT0_Ch0_IRQn, LPIT0_Ch1_IRQn, LPIT0_Ch2_IRQn, LPIT0_Ch3_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- LPIT Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup LPIT_Register_Masks LPIT Register Masks\n * @{\n */\n\n/* VERID Bit Fields */\n#define LPIT_VERID_FEATURE_MASK                  0xFFFFu\n#define LPIT_VERID_FEATURE_SHIFT                 0u\n#define LPIT_VERID_FEATURE_WIDTH                 16u\n#define LPIT_VERID_FEATURE(x)                    (((uint32_t)(((uint32_t)(x))<<LPIT_VERID_FEATURE_SHIFT))&LPIT_VERID_FEATURE_MASK)\n#define LPIT_VERID_MINOR_MASK                    0xFF0000u\n#define LPIT_VERID_MINOR_SHIFT                   16u\n#define LPIT_VERID_MINOR_WIDTH                   8u\n#define LPIT_VERID_MINOR(x)                      (((uint32_t)(((uint32_t)(x))<<LPIT_VERID_MINOR_SHIFT))&LPIT_VERID_MINOR_MASK)\n#define LPIT_VERID_MAJOR_MASK                    0xFF000000u\n#define LPIT_VERID_MAJOR_SHIFT                   24u\n#define LPIT_VERID_MAJOR_WIDTH                   8u\n#define LPIT_VERID_MAJOR(x)                      (((uint32_t)(((uint32_t)(x))<<LPIT_VERID_MAJOR_SHIFT))&LPIT_VERID_MAJOR_MASK)\n/* PARAM Bit Fields */\n#define LPIT_PARAM_CHANNEL_MASK                  0xFFu\n#define LPIT_PARAM_CHANNEL_SHIFT                 0u\n#define LPIT_PARAM_CHANNEL_WIDTH                 8u\n#define LPIT_PARAM_CHANNEL(x)                    (((uint32_t)(((uint32_t)(x))<<LPIT_PARAM_CHANNEL_SHIFT))&LPIT_PARAM_CHANNEL_MASK)\n#define LPIT_PARAM_EXT_TRIG_MASK                 0xFF00u\n#define LPIT_PARAM_EXT_TRIG_SHIFT                8u\n#define LPIT_PARAM_EXT_TRIG_WIDTH                8u\n#define LPIT_PARAM_EXT_TRIG(x)                   (((uint32_t)(((uint32_t)(x))<<LPIT_PARAM_EXT_TRIG_SHIFT))&LPIT_PARAM_EXT_TRIG_MASK)\n/* MCR Bit Fields */\n#define LPIT_MCR_M_CEN_MASK                      0x1u\n#define LPIT_MCR_M_CEN_SHIFT                     0u\n#define LPIT_MCR_M_CEN_WIDTH                     1u\n#define LPIT_MCR_M_CEN(x)                        (((uint32_t)(((uint32_t)(x))<<LPIT_MCR_M_CEN_SHIFT))&LPIT_MCR_M_CEN_MASK)\n#define LPIT_MCR_SW_RST_MASK                     0x2u\n#define LPIT_MCR_SW_RST_SHIFT                    1u\n#define LPIT_MCR_SW_RST_WIDTH                    1u\n#define LPIT_MCR_SW_RST(x)                       (((uint32_t)(((uint32_t)(x))<<LPIT_MCR_SW_RST_SHIFT))&LPIT_MCR_SW_RST_MASK)\n#define LPIT_MCR_DOZE_EN_MASK                    0x4u\n#define LPIT_MCR_DOZE_EN_SHIFT                   2u\n#define LPIT_MCR_DOZE_EN_WIDTH                   1u\n#define LPIT_MCR_DOZE_EN(x)                      (((uint32_t)(((uint32_t)(x))<<LPIT_MCR_DOZE_EN_SHIFT))&LPIT_MCR_DOZE_EN_MASK)\n#define LPIT_MCR_DBG_EN_MASK                     0x8u\n#define LPIT_MCR_DBG_EN_SHIFT                    3u\n#define LPIT_MCR_DBG_EN_WIDTH                    1u\n#define LPIT_MCR_DBG_EN(x)                       (((uint32_t)(((uint32_t)(x))<<LPIT_MCR_DBG_EN_SHIFT))&LPIT_MCR_DBG_EN_MASK)\n/* MSR Bit Fields */\n#define LPIT_MSR_TIF0_MASK                       0x1u\n#define LPIT_MSR_TIF0_SHIFT                      0u\n#define LPIT_MSR_TIF0_WIDTH                      1u\n#define LPIT_MSR_TIF0(x)                         (((uint32_t)(((uint32_t)(x))<<LPIT_MSR_TIF0_SHIFT))&LPIT_MSR_TIF0_MASK)\n#define LPIT_MSR_TIF1_MASK                       0x2u\n#define LPIT_MSR_TIF1_SHIFT                      1u\n#define LPIT_MSR_TIF1_WIDTH                      1u\n#define LPIT_MSR_TIF1(x)                         (((uint32_t)(((uint32_t)(x))<<LPIT_MSR_TIF1_SHIFT))&LPIT_MSR_TIF1_MASK)\n#define LPIT_MSR_TIF2_MASK                       0x4u\n#define LPIT_MSR_TIF2_SHIFT                      2u\n#define LPIT_MSR_TIF2_WIDTH                      1u\n#define LPIT_MSR_TIF2(x)                         (((uint32_t)(((uint32_t)(x))<<LPIT_MSR_TIF2_SHIFT))&LPIT_MSR_TIF2_MASK)\n#define LPIT_MSR_TIF3_MASK                       0x8u\n#define LPIT_MSR_TIF3_SHIFT                      3u\n#define LPIT_MSR_TIF3_WIDTH                      1u\n#define LPIT_MSR_TIF3(x)                         (((uint32_t)(((uint32_t)(x))<<LPIT_MSR_TIF3_SHIFT))&LPIT_MSR_TIF3_MASK)\n/* MIER Bit Fields */\n#define LPIT_MIER_TIE0_MASK                      0x1u\n#define LPIT_MIER_TIE0_SHIFT                     0u\n#define LPIT_MIER_TIE0_WIDTH                     1u\n#define LPIT_MIER_TIE0(x)                        (((uint32_t)(((uint32_t)(x))<<LPIT_MIER_TIE0_SHIFT))&LPIT_MIER_TIE0_MASK)\n#define LPIT_MIER_TIE1_MASK                      0x2u\n#define LPIT_MIER_TIE1_SHIFT                     1u\n#define LPIT_MIER_TIE1_WIDTH                     1u\n#define LPIT_MIER_TIE1(x)                        (((uint32_t)(((uint32_t)(x))<<LPIT_MIER_TIE1_SHIFT))&LPIT_MIER_TIE1_MASK)\n#define LPIT_MIER_TIE2_MASK                      0x4u\n#define LPIT_MIER_TIE2_SHIFT                     2u\n#define LPIT_MIER_TIE2_WIDTH                     1u\n#define LPIT_MIER_TIE2(x)                        (((uint32_t)(((uint32_t)(x))<<LPIT_MIER_TIE2_SHIFT))&LPIT_MIER_TIE2_MASK)\n#define LPIT_MIER_TIE3_MASK                      0x8u\n#define LPIT_MIER_TIE3_SHIFT                     3u\n#define LPIT_MIER_TIE3_WIDTH                     1u\n#define LPIT_MIER_TIE3(x)                        (((uint32_t)(((uint32_t)(x))<<LPIT_MIER_TIE3_SHIFT))&LPIT_MIER_TIE3_MASK)\n/* SETTEN Bit Fields */\n#define LPIT_SETTEN_SET_T_EN_0_MASK              0x1u\n#define LPIT_SETTEN_SET_T_EN_0_SHIFT             0u\n#define LPIT_SETTEN_SET_T_EN_0_WIDTH             1u\n#define LPIT_SETTEN_SET_T_EN_0(x)                (((uint32_t)(((uint32_t)(x))<<LPIT_SETTEN_SET_T_EN_0_SHIFT))&LPIT_SETTEN_SET_T_EN_0_MASK)\n#define LPIT_SETTEN_SET_T_EN_1_MASK              0x2u\n#define LPIT_SETTEN_SET_T_EN_1_SHIFT             1u\n#define LPIT_SETTEN_SET_T_EN_1_WIDTH             1u\n#define LPIT_SETTEN_SET_T_EN_1(x)                (((uint32_t)(((uint32_t)(x))<<LPIT_SETTEN_SET_T_EN_1_SHIFT))&LPIT_SETTEN_SET_T_EN_1_MASK)\n#define LPIT_SETTEN_SET_T_EN_2_MASK              0x4u\n#define LPIT_SETTEN_SET_T_EN_2_SHIFT             2u\n#define LPIT_SETTEN_SET_T_EN_2_WIDTH             1u\n#define LPIT_SETTEN_SET_T_EN_2(x)                (((uint32_t)(((uint32_t)(x))<<LPIT_SETTEN_SET_T_EN_2_SHIFT))&LPIT_SETTEN_SET_T_EN_2_MASK)\n#define LPIT_SETTEN_SET_T_EN_3_MASK              0x8u\n#define LPIT_SETTEN_SET_T_EN_3_SHIFT             3u\n#define LPIT_SETTEN_SET_T_EN_3_WIDTH             1u\n#define LPIT_SETTEN_SET_T_EN_3(x)                (((uint32_t)(((uint32_t)(x))<<LPIT_SETTEN_SET_T_EN_3_SHIFT))&LPIT_SETTEN_SET_T_EN_3_MASK)\n/* CLRTEN Bit Fields */\n#define LPIT_CLRTEN_CLR_T_EN_0_MASK              0x1u\n#define LPIT_CLRTEN_CLR_T_EN_0_SHIFT             0u\n#define LPIT_CLRTEN_CLR_T_EN_0_WIDTH             1u\n#define LPIT_CLRTEN_CLR_T_EN_0(x)                (((uint32_t)(((uint32_t)(x))<<LPIT_CLRTEN_CLR_T_EN_0_SHIFT))&LPIT_CLRTEN_CLR_T_EN_0_MASK)\n#define LPIT_CLRTEN_CLR_T_EN_1_MASK              0x2u\n#define LPIT_CLRTEN_CLR_T_EN_1_SHIFT             1u\n#define LPIT_CLRTEN_CLR_T_EN_1_WIDTH             1u\n#define LPIT_CLRTEN_CLR_T_EN_1(x)                (((uint32_t)(((uint32_t)(x))<<LPIT_CLRTEN_CLR_T_EN_1_SHIFT))&LPIT_CLRTEN_CLR_T_EN_1_MASK)\n#define LPIT_CLRTEN_CLR_T_EN_2_MASK              0x4u\n#define LPIT_CLRTEN_CLR_T_EN_2_SHIFT             2u\n#define LPIT_CLRTEN_CLR_T_EN_2_WIDTH             1u\n#define LPIT_CLRTEN_CLR_T_EN_2(x)                (((uint32_t)(((uint32_t)(x))<<LPIT_CLRTEN_CLR_T_EN_2_SHIFT))&LPIT_CLRTEN_CLR_T_EN_2_MASK)\n#define LPIT_CLRTEN_CLR_T_EN_3_MASK              0x8u\n#define LPIT_CLRTEN_CLR_T_EN_3_SHIFT             3u\n#define LPIT_CLRTEN_CLR_T_EN_3_WIDTH             1u\n#define LPIT_CLRTEN_CLR_T_EN_3(x)                (((uint32_t)(((uint32_t)(x))<<LPIT_CLRTEN_CLR_T_EN_3_SHIFT))&LPIT_CLRTEN_CLR_T_EN_3_MASK)\n/* TMR_TVAL Bit Fields */\n#define LPIT_TMR_TVAL_TMR_VAL_MASK               0xFFFFFFFFu\n#define LPIT_TMR_TVAL_TMR_VAL_SHIFT              0u\n#define LPIT_TMR_TVAL_TMR_VAL_WIDTH              32u\n#define LPIT_TMR_TVAL_TMR_VAL(x)                 (((uint32_t)(((uint32_t)(x))<<LPIT_TMR_TVAL_TMR_VAL_SHIFT))&LPIT_TMR_TVAL_TMR_VAL_MASK)\n/* TMR_CVAL Bit Fields */\n#define LPIT_TMR_CVAL_TMR_CUR_VAL_MASK           0xFFFFFFFFu\n#define LPIT_TMR_CVAL_TMR_CUR_VAL_SHIFT          0u\n#define LPIT_TMR_CVAL_TMR_CUR_VAL_WIDTH          32u\n#define LPIT_TMR_CVAL_TMR_CUR_VAL(x)             (((uint32_t)(((uint32_t)(x))<<LPIT_TMR_CVAL_TMR_CUR_VAL_SHIFT))&LPIT_TMR_CVAL_TMR_CUR_VAL_MASK)\n/* TMR_TCTRL Bit Fields */\n#define LPIT_TMR_TCTRL_T_EN_MASK                 0x1u\n#define LPIT_TMR_TCTRL_T_EN_SHIFT                0u\n#define LPIT_TMR_TCTRL_T_EN_WIDTH                1u\n#define LPIT_TMR_TCTRL_T_EN(x)                   (((uint32_t)(((uint32_t)(x))<<LPIT_TMR_TCTRL_T_EN_SHIFT))&LPIT_TMR_TCTRL_T_EN_MASK)\n#define LPIT_TMR_TCTRL_CHAIN_MASK                0x2u\n#define LPIT_TMR_TCTRL_CHAIN_SHIFT               1u\n#define LPIT_TMR_TCTRL_CHAIN_WIDTH               1u\n#define LPIT_TMR_TCTRL_CHAIN(x)                  (((uint32_t)(((uint32_t)(x))<<LPIT_TMR_TCTRL_CHAIN_SHIFT))&LPIT_TMR_TCTRL_CHAIN_MASK)\n#define LPIT_TMR_TCTRL_MODE_MASK                 0xCu\n#define LPIT_TMR_TCTRL_MODE_SHIFT                2u\n#define LPIT_TMR_TCTRL_MODE_WIDTH                2u\n#define LPIT_TMR_TCTRL_MODE(x)                   (((uint32_t)(((uint32_t)(x))<<LPIT_TMR_TCTRL_MODE_SHIFT))&LPIT_TMR_TCTRL_MODE_MASK)\n#define LPIT_TMR_TCTRL_TSOT_MASK                 0x10000u\n#define LPIT_TMR_TCTRL_TSOT_SHIFT                16u\n#define LPIT_TMR_TCTRL_TSOT_WIDTH                1u\n#define LPIT_TMR_TCTRL_TSOT(x)                   (((uint32_t)(((uint32_t)(x))<<LPIT_TMR_TCTRL_TSOT_SHIFT))&LPIT_TMR_TCTRL_TSOT_MASK)\n#define LPIT_TMR_TCTRL_TSOI_MASK                 0x20000u\n#define LPIT_TMR_TCTRL_TSOI_SHIFT                17u\n#define LPIT_TMR_TCTRL_TSOI_WIDTH                1u\n#define LPIT_TMR_TCTRL_TSOI(x)                   (((uint32_t)(((uint32_t)(x))<<LPIT_TMR_TCTRL_TSOI_SHIFT))&LPIT_TMR_TCTRL_TSOI_MASK)\n#define LPIT_TMR_TCTRL_TROT_MASK                 0x40000u\n#define LPIT_TMR_TCTRL_TROT_SHIFT                18u\n#define LPIT_TMR_TCTRL_TROT_WIDTH                1u\n#define LPIT_TMR_TCTRL_TROT(x)                   (((uint32_t)(((uint32_t)(x))<<LPIT_TMR_TCTRL_TROT_SHIFT))&LPIT_TMR_TCTRL_TROT_MASK)\n#define LPIT_TMR_TCTRL_TRG_SRC_MASK              0x800000u\n#define LPIT_TMR_TCTRL_TRG_SRC_SHIFT             23u\n#define LPIT_TMR_TCTRL_TRG_SRC_WIDTH             1u\n#define LPIT_TMR_TCTRL_TRG_SRC(x)                (((uint32_t)(((uint32_t)(x))<<LPIT_TMR_TCTRL_TRG_SRC_SHIFT))&LPIT_TMR_TCTRL_TRG_SRC_MASK)\n#define LPIT_TMR_TCTRL_TRG_SEL_MASK              0xF000000u\n#define LPIT_TMR_TCTRL_TRG_SEL_SHIFT             24u\n#define LPIT_TMR_TCTRL_TRG_SEL_WIDTH             4u\n#define LPIT_TMR_TCTRL_TRG_SEL(x)                (((uint32_t)(((uint32_t)(x))<<LPIT_TMR_TCTRL_TRG_SEL_SHIFT))&LPIT_TMR_TCTRL_TRG_SEL_MASK)\n\n/*!\n * @}\n */ /* end of group LPIT_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group LPIT_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- LPSPI Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup LPSPI_Peripheral_Access_Layer LPSPI Peripheral Access Layer\n * @{\n */\n\n\n/** LPSPI - Size of Registers Arrays */\n\n/** LPSPI - Register Layout Typedef */\ntypedef struct {\n  __I  uint32_t VERID;                             /**< Version ID Register, offset: 0x0 */\n  __I  uint32_t PARAM;                             /**< Parameter Register, offset: 0x4 */\n       uint8_t RESERVED_0[8];\n  __IO uint32_t CR;                                /**< Control Register, offset: 0x10 */\n  __IO uint32_t SR;                                /**< Status Register, offset: 0x14 */\n  __IO uint32_t IER;                               /**< Interrupt Enable Register, offset: 0x18 */\n  __IO uint32_t DER;                               /**< DMA Enable Register, offset: 0x1C */\n  __IO uint32_t CFGR0;                             /**< Configuration Register 0, offset: 0x20 */\n  __IO uint32_t CFGR1;                             /**< Configuration Register 1, offset: 0x24 */\n       uint8_t RESERVED_1[8];\n  __IO uint32_t DMR0;                              /**< Data Match Register 0, offset: 0x30 */\n  __IO uint32_t DMR1;                              /**< Data Match Register 1, offset: 0x34 */\n       uint8_t RESERVED_2[8];\n  __IO uint32_t CCR;                               /**< Clock Configuration Register, offset: 0x40 */\n       uint8_t RESERVED_3[20];\n  __IO uint32_t FCR;                               /**< FIFO Control Register, offset: 0x58 */\n  __I  uint32_t FSR;                               /**< FIFO Status Register, offset: 0x5C */\n  __IO uint32_t TCR;                               /**< Transmit Command Register, offset: 0x60 */\n  __O  uint32_t TDR;                               /**< Transmit Data Register, offset: 0x64 */\n       uint8_t RESERVED_4[8];\n  __I  uint32_t RSR;                               /**< Receive Status Register, offset: 0x70 */\n  __I  uint32_t RDR;                               /**< Receive Data Register, offset: 0x74 */\n} LPSPI_Type, *LPSPI_MemMapPtr;\n\n /** Number of instances of the LPSPI module. */\n#define LPSPI_INSTANCE_COUNT                     (3u)\n\n\n/* LPSPI - Peripheral instance base addresses */\n/** Peripheral LPSPI0 base address */\n#define LPSPI0_BASE                              (0x4002C000u)\n/** Peripheral LPSPI0 base pointer */\n#define LPSPI0                                   ((LPSPI_Type *)LPSPI0_BASE)\n/** Peripheral LPSPI1 base address */\n#define LPSPI1_BASE                              (0x4002D000u)\n/** Peripheral LPSPI1 base pointer */\n#define LPSPI1                                   ((LPSPI_Type *)LPSPI1_BASE)\n/** Peripheral LPSPI2 base address */\n#define LPSPI2_BASE                              (0x4002E000u)\n/** Peripheral LPSPI2 base pointer */\n#define LPSPI2                                   ((LPSPI_Type *)LPSPI2_BASE)\n/** Array initializer of LPSPI peripheral base addresses */\n#define LPSPI_BASE_ADDRS                         { LPSPI0_BASE, LPSPI1_BASE, LPSPI2_BASE }\n/** Array initializer of LPSPI peripheral base pointers */\n#define LPSPI_BASE_PTRS                          { LPSPI0, LPSPI1, LPSPI2 }\n /** Number of interrupt vector arrays for the LPSPI module. */\n#define LPSPI_IRQS_ARR_COUNT                     (1u)\n /** Number of interrupt channels for the LPSPI module. */\n#define LPSPI_IRQS_CH_COUNT                      (1u)\n/** Interrupt vectors for the LPSPI peripheral type */\n#define LPSPI_IRQS                               { LPSPI0_IRQn, LPSPI1_IRQn, LPSPI2_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- LPSPI Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup LPSPI_Register_Masks LPSPI Register Masks\n * @{\n */\n\n/* VERID Bit Fields */\n#define LPSPI_VERID_FEATURE_MASK                 0xFFFFu\n#define LPSPI_VERID_FEATURE_SHIFT                0u\n#define LPSPI_VERID_FEATURE_WIDTH                16u\n#define LPSPI_VERID_FEATURE(x)                   (((uint32_t)(((uint32_t)(x))<<LPSPI_VERID_FEATURE_SHIFT))&LPSPI_VERID_FEATURE_MASK)\n#define LPSPI_VERID_MINOR_MASK                   0xFF0000u\n#define LPSPI_VERID_MINOR_SHIFT                  16u\n#define LPSPI_VERID_MINOR_WIDTH                  8u\n#define LPSPI_VERID_MINOR(x)                     (((uint32_t)(((uint32_t)(x))<<LPSPI_VERID_MINOR_SHIFT))&LPSPI_VERID_MINOR_MASK)\n#define LPSPI_VERID_MAJOR_MASK                   0xFF000000u\n#define LPSPI_VERID_MAJOR_SHIFT                  24u\n#define LPSPI_VERID_MAJOR_WIDTH                  8u\n#define LPSPI_VERID_MAJOR(x)                     (((uint32_t)(((uint32_t)(x))<<LPSPI_VERID_MAJOR_SHIFT))&LPSPI_VERID_MAJOR_MASK)\n/* PARAM Bit Fields */\n#define LPSPI_PARAM_TXFIFO_MASK                  0xFFu\n#define LPSPI_PARAM_TXFIFO_SHIFT                 0u\n#define LPSPI_PARAM_TXFIFO_WIDTH                 8u\n#define LPSPI_PARAM_TXFIFO(x)                    (((uint32_t)(((uint32_t)(x))<<LPSPI_PARAM_TXFIFO_SHIFT))&LPSPI_PARAM_TXFIFO_MASK)\n#define LPSPI_PARAM_RXFIFO_MASK                  0xFF00u\n#define LPSPI_PARAM_RXFIFO_SHIFT                 8u\n#define LPSPI_PARAM_RXFIFO_WIDTH                 8u\n#define LPSPI_PARAM_RXFIFO(x)                    (((uint32_t)(((uint32_t)(x))<<LPSPI_PARAM_RXFIFO_SHIFT))&LPSPI_PARAM_RXFIFO_MASK)\n/* CR Bit Fields */\n#define LPSPI_CR_MEN_MASK                        0x1u\n#define LPSPI_CR_MEN_SHIFT                       0u\n#define LPSPI_CR_MEN_WIDTH                       1u\n#define LPSPI_CR_MEN(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_CR_MEN_SHIFT))&LPSPI_CR_MEN_MASK)\n#define LPSPI_CR_RST_MASK                        0x2u\n#define LPSPI_CR_RST_SHIFT                       1u\n#define LPSPI_CR_RST_WIDTH                       1u\n#define LPSPI_CR_RST(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_CR_RST_SHIFT))&LPSPI_CR_RST_MASK)\n#define LPSPI_CR_DOZEN_MASK                      0x4u\n#define LPSPI_CR_DOZEN_SHIFT                     2u\n#define LPSPI_CR_DOZEN_WIDTH                     1u\n#define LPSPI_CR_DOZEN(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_CR_DOZEN_SHIFT))&LPSPI_CR_DOZEN_MASK)\n#define LPSPI_CR_DBGEN_MASK                      0x8u\n#define LPSPI_CR_DBGEN_SHIFT                     3u\n#define LPSPI_CR_DBGEN_WIDTH                     1u\n#define LPSPI_CR_DBGEN(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_CR_DBGEN_SHIFT))&LPSPI_CR_DBGEN_MASK)\n#define LPSPI_CR_RTF_MASK                        0x100u\n#define LPSPI_CR_RTF_SHIFT                       8u\n#define LPSPI_CR_RTF_WIDTH                       1u\n#define LPSPI_CR_RTF(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_CR_RTF_SHIFT))&LPSPI_CR_RTF_MASK)\n#define LPSPI_CR_RRF_MASK                        0x200u\n#define LPSPI_CR_RRF_SHIFT                       9u\n#define LPSPI_CR_RRF_WIDTH                       1u\n#define LPSPI_CR_RRF(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_CR_RRF_SHIFT))&LPSPI_CR_RRF_MASK)\n/* SR Bit Fields */\n#define LPSPI_SR_TDF_MASK                        0x1u\n#define LPSPI_SR_TDF_SHIFT                       0u\n#define LPSPI_SR_TDF_WIDTH                       1u\n#define LPSPI_SR_TDF(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_SR_TDF_SHIFT))&LPSPI_SR_TDF_MASK)\n#define LPSPI_SR_RDF_MASK                        0x2u\n#define LPSPI_SR_RDF_SHIFT                       1u\n#define LPSPI_SR_RDF_WIDTH                       1u\n#define LPSPI_SR_RDF(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_SR_RDF_SHIFT))&LPSPI_SR_RDF_MASK)\n#define LPSPI_SR_WCF_MASK                        0x100u\n#define LPSPI_SR_WCF_SHIFT                       8u\n#define LPSPI_SR_WCF_WIDTH                       1u\n#define LPSPI_SR_WCF(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_SR_WCF_SHIFT))&LPSPI_SR_WCF_MASK)\n#define LPSPI_SR_FCF_MASK                        0x200u\n#define LPSPI_SR_FCF_SHIFT                       9u\n#define LPSPI_SR_FCF_WIDTH                       1u\n#define LPSPI_SR_FCF(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_SR_FCF_SHIFT))&LPSPI_SR_FCF_MASK)\n#define LPSPI_SR_TCF_MASK                        0x400u\n#define LPSPI_SR_TCF_SHIFT                       10u\n#define LPSPI_SR_TCF_WIDTH                       1u\n#define LPSPI_SR_TCF(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_SR_TCF_SHIFT))&LPSPI_SR_TCF_MASK)\n#define LPSPI_SR_TEF_MASK                        0x800u\n#define LPSPI_SR_TEF_SHIFT                       11u\n#define LPSPI_SR_TEF_WIDTH                       1u\n#define LPSPI_SR_TEF(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_SR_TEF_SHIFT))&LPSPI_SR_TEF_MASK)\n#define LPSPI_SR_REF_MASK                        0x1000u\n#define LPSPI_SR_REF_SHIFT                       12u\n#define LPSPI_SR_REF_WIDTH                       1u\n#define LPSPI_SR_REF(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_SR_REF_SHIFT))&LPSPI_SR_REF_MASK)\n#define LPSPI_SR_DMF_MASK                        0x2000u\n#define LPSPI_SR_DMF_SHIFT                       13u\n#define LPSPI_SR_DMF_WIDTH                       1u\n#define LPSPI_SR_DMF(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_SR_DMF_SHIFT))&LPSPI_SR_DMF_MASK)\n#define LPSPI_SR_MBF_MASK                        0x1000000u\n#define LPSPI_SR_MBF_SHIFT                       24u\n#define LPSPI_SR_MBF_WIDTH                       1u\n#define LPSPI_SR_MBF(x)                          (((uint32_t)(((uint32_t)(x))<<LPSPI_SR_MBF_SHIFT))&LPSPI_SR_MBF_MASK)\n/* IER Bit Fields */\n#define LPSPI_IER_TDIE_MASK                      0x1u\n#define LPSPI_IER_TDIE_SHIFT                     0u\n#define LPSPI_IER_TDIE_WIDTH                     1u\n#define LPSPI_IER_TDIE(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_IER_TDIE_SHIFT))&LPSPI_IER_TDIE_MASK)\n#define LPSPI_IER_RDIE_MASK                      0x2u\n#define LPSPI_IER_RDIE_SHIFT                     1u\n#define LPSPI_IER_RDIE_WIDTH                     1u\n#define LPSPI_IER_RDIE(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_IER_RDIE_SHIFT))&LPSPI_IER_RDIE_MASK)\n#define LPSPI_IER_WCIE_MASK                      0x100u\n#define LPSPI_IER_WCIE_SHIFT                     8u\n#define LPSPI_IER_WCIE_WIDTH                     1u\n#define LPSPI_IER_WCIE(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_IER_WCIE_SHIFT))&LPSPI_IER_WCIE_MASK)\n#define LPSPI_IER_FCIE_MASK                      0x200u\n#define LPSPI_IER_FCIE_SHIFT                     9u\n#define LPSPI_IER_FCIE_WIDTH                     1u\n#define LPSPI_IER_FCIE(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_IER_FCIE_SHIFT))&LPSPI_IER_FCIE_MASK)\n#define LPSPI_IER_TCIE_MASK                      0x400u\n#define LPSPI_IER_TCIE_SHIFT                     10u\n#define LPSPI_IER_TCIE_WIDTH                     1u\n#define LPSPI_IER_TCIE(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_IER_TCIE_SHIFT))&LPSPI_IER_TCIE_MASK)\n#define LPSPI_IER_TEIE_MASK                      0x800u\n#define LPSPI_IER_TEIE_SHIFT                     11u\n#define LPSPI_IER_TEIE_WIDTH                     1u\n#define LPSPI_IER_TEIE(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_IER_TEIE_SHIFT))&LPSPI_IER_TEIE_MASK)\n#define LPSPI_IER_REIE_MASK                      0x1000u\n#define LPSPI_IER_REIE_SHIFT                     12u\n#define LPSPI_IER_REIE_WIDTH                     1u\n#define LPSPI_IER_REIE(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_IER_REIE_SHIFT))&LPSPI_IER_REIE_MASK)\n#define LPSPI_IER_DMIE_MASK                      0x2000u\n#define LPSPI_IER_DMIE_SHIFT                     13u\n#define LPSPI_IER_DMIE_WIDTH                     1u\n#define LPSPI_IER_DMIE(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_IER_DMIE_SHIFT))&LPSPI_IER_DMIE_MASK)\n/* DER Bit Fields */\n#define LPSPI_DER_TDDE_MASK                      0x1u\n#define LPSPI_DER_TDDE_SHIFT                     0u\n#define LPSPI_DER_TDDE_WIDTH                     1u\n#define LPSPI_DER_TDDE(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_DER_TDDE_SHIFT))&LPSPI_DER_TDDE_MASK)\n#define LPSPI_DER_RDDE_MASK                      0x2u\n#define LPSPI_DER_RDDE_SHIFT                     1u\n#define LPSPI_DER_RDDE_WIDTH                     1u\n#define LPSPI_DER_RDDE(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_DER_RDDE_SHIFT))&LPSPI_DER_RDDE_MASK)\n/* CFGR0 Bit Fields */\n#define LPSPI_CFGR0_HREN_MASK                    0x1u\n#define LPSPI_CFGR0_HREN_SHIFT                   0u\n#define LPSPI_CFGR0_HREN_WIDTH                   1u\n#define LPSPI_CFGR0_HREN(x)                      (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR0_HREN_SHIFT))&LPSPI_CFGR0_HREN_MASK)\n#define LPSPI_CFGR0_HRPOL_MASK                   0x2u\n#define LPSPI_CFGR0_HRPOL_SHIFT                  1u\n#define LPSPI_CFGR0_HRPOL_WIDTH                  1u\n#define LPSPI_CFGR0_HRPOL(x)                     (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR0_HRPOL_SHIFT))&LPSPI_CFGR0_HRPOL_MASK)\n#define LPSPI_CFGR0_HRSEL_MASK                   0x4u\n#define LPSPI_CFGR0_HRSEL_SHIFT                  2u\n#define LPSPI_CFGR0_HRSEL_WIDTH                  1u\n#define LPSPI_CFGR0_HRSEL(x)                     (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR0_HRSEL_SHIFT))&LPSPI_CFGR0_HRSEL_MASK)\n#define LPSPI_CFGR0_CIRFIFO_MASK                 0x100u\n#define LPSPI_CFGR0_CIRFIFO_SHIFT                8u\n#define LPSPI_CFGR0_CIRFIFO_WIDTH                1u\n#define LPSPI_CFGR0_CIRFIFO(x)                   (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR0_CIRFIFO_SHIFT))&LPSPI_CFGR0_CIRFIFO_MASK)\n#define LPSPI_CFGR0_RDMO_MASK                    0x200u\n#define LPSPI_CFGR0_RDMO_SHIFT                   9u\n#define LPSPI_CFGR0_RDMO_WIDTH                   1u\n#define LPSPI_CFGR0_RDMO(x)                      (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR0_RDMO_SHIFT))&LPSPI_CFGR0_RDMO_MASK)\n/* CFGR1 Bit Fields */\n#define LPSPI_CFGR1_MASTER_MASK                  0x1u\n#define LPSPI_CFGR1_MASTER_SHIFT                 0u\n#define LPSPI_CFGR1_MASTER_WIDTH                 1u\n#define LPSPI_CFGR1_MASTER(x)                    (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR1_MASTER_SHIFT))&LPSPI_CFGR1_MASTER_MASK)\n#define LPSPI_CFGR1_SAMPLE_MASK                  0x2u\n#define LPSPI_CFGR1_SAMPLE_SHIFT                 1u\n#define LPSPI_CFGR1_SAMPLE_WIDTH                 1u\n#define LPSPI_CFGR1_SAMPLE(x)                    (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR1_SAMPLE_SHIFT))&LPSPI_CFGR1_SAMPLE_MASK)\n#define LPSPI_CFGR1_AUTOPCS_MASK                 0x4u\n#define LPSPI_CFGR1_AUTOPCS_SHIFT                2u\n#define LPSPI_CFGR1_AUTOPCS_WIDTH                1u\n#define LPSPI_CFGR1_AUTOPCS(x)                   (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR1_AUTOPCS_SHIFT))&LPSPI_CFGR1_AUTOPCS_MASK)\n#define LPSPI_CFGR1_NOSTALL_MASK                 0x8u\n#define LPSPI_CFGR1_NOSTALL_SHIFT                3u\n#define LPSPI_CFGR1_NOSTALL_WIDTH                1u\n#define LPSPI_CFGR1_NOSTALL(x)                   (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR1_NOSTALL_SHIFT))&LPSPI_CFGR1_NOSTALL_MASK)\n#define LPSPI_CFGR1_PCSPOL_MASK                  0xF00u\n#define LPSPI_CFGR1_PCSPOL_SHIFT                 8u\n#define LPSPI_CFGR1_PCSPOL_WIDTH                 4u\n#define LPSPI_CFGR1_PCSPOL(x)                    (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR1_PCSPOL_SHIFT))&LPSPI_CFGR1_PCSPOL_MASK)\n#define LPSPI_CFGR1_MATCFG_MASK                  0x70000u\n#define LPSPI_CFGR1_MATCFG_SHIFT                 16u\n#define LPSPI_CFGR1_MATCFG_WIDTH                 3u\n#define LPSPI_CFGR1_MATCFG(x)                    (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR1_MATCFG_SHIFT))&LPSPI_CFGR1_MATCFG_MASK)\n#define LPSPI_CFGR1_PINCFG_MASK                  0x3000000u\n#define LPSPI_CFGR1_PINCFG_SHIFT                 24u\n#define LPSPI_CFGR1_PINCFG_WIDTH                 2u\n#define LPSPI_CFGR1_PINCFG(x)                    (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR1_PINCFG_SHIFT))&LPSPI_CFGR1_PINCFG_MASK)\n#define LPSPI_CFGR1_OUTCFG_MASK                  0x4000000u\n#define LPSPI_CFGR1_OUTCFG_SHIFT                 26u\n#define LPSPI_CFGR1_OUTCFG_WIDTH                 1u\n#define LPSPI_CFGR1_OUTCFG(x)                    (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR1_OUTCFG_SHIFT))&LPSPI_CFGR1_OUTCFG_MASK)\n#define LPSPI_CFGR1_PCSCFG_MASK                  0x8000000u\n#define LPSPI_CFGR1_PCSCFG_SHIFT                 27u\n#define LPSPI_CFGR1_PCSCFG_WIDTH                 1u\n#define LPSPI_CFGR1_PCSCFG(x)                    (((uint32_t)(((uint32_t)(x))<<LPSPI_CFGR1_PCSCFG_SHIFT))&LPSPI_CFGR1_PCSCFG_MASK)\n/* DMR0 Bit Fields */\n#define LPSPI_DMR0_MATCH0_MASK                   0xFFFFFFFFu\n#define LPSPI_DMR0_MATCH0_SHIFT                  0u\n#define LPSPI_DMR0_MATCH0_WIDTH                  32u\n#define LPSPI_DMR0_MATCH0(x)                     (((uint32_t)(((uint32_t)(x))<<LPSPI_DMR0_MATCH0_SHIFT))&LPSPI_DMR0_MATCH0_MASK)\n/* DMR1 Bit Fields */\n#define LPSPI_DMR1_MATCH1_MASK                   0xFFFFFFFFu\n#define LPSPI_DMR1_MATCH1_SHIFT                  0u\n#define LPSPI_DMR1_MATCH1_WIDTH                  32u\n#define LPSPI_DMR1_MATCH1(x)                     (((uint32_t)(((uint32_t)(x))<<LPSPI_DMR1_MATCH1_SHIFT))&LPSPI_DMR1_MATCH1_MASK)\n/* CCR Bit Fields */\n#define LPSPI_CCR_SCKDIV_MASK                    0xFFu\n#define LPSPI_CCR_SCKDIV_SHIFT                   0u\n#define LPSPI_CCR_SCKDIV_WIDTH                   8u\n#define LPSPI_CCR_SCKDIV(x)                      (((uint32_t)(((uint32_t)(x))<<LPSPI_CCR_SCKDIV_SHIFT))&LPSPI_CCR_SCKDIV_MASK)\n#define LPSPI_CCR_DBT_MASK                       0xFF00u\n#define LPSPI_CCR_DBT_SHIFT                      8u\n#define LPSPI_CCR_DBT_WIDTH                      8u\n#define LPSPI_CCR_DBT(x)                         (((uint32_t)(((uint32_t)(x))<<LPSPI_CCR_DBT_SHIFT))&LPSPI_CCR_DBT_MASK)\n#define LPSPI_CCR_PCSSCK_MASK                    0xFF0000u\n#define LPSPI_CCR_PCSSCK_SHIFT                   16u\n#define LPSPI_CCR_PCSSCK_WIDTH                   8u\n#define LPSPI_CCR_PCSSCK(x)                      (((uint32_t)(((uint32_t)(x))<<LPSPI_CCR_PCSSCK_SHIFT))&LPSPI_CCR_PCSSCK_MASK)\n#define LPSPI_CCR_SCKPCS_MASK                    0xFF000000u\n#define LPSPI_CCR_SCKPCS_SHIFT                   24u\n#define LPSPI_CCR_SCKPCS_WIDTH                   8u\n#define LPSPI_CCR_SCKPCS(x)                      (((uint32_t)(((uint32_t)(x))<<LPSPI_CCR_SCKPCS_SHIFT))&LPSPI_CCR_SCKPCS_MASK)\n/* FCR Bit Fields */\n#define LPSPI_FCR_TXWATER_MASK                   0x3u\n#define LPSPI_FCR_TXWATER_SHIFT                  0u\n#define LPSPI_FCR_TXWATER_WIDTH                  2u\n#define LPSPI_FCR_TXWATER(x)                     (((uint32_t)(((uint32_t)(x))<<LPSPI_FCR_TXWATER_SHIFT))&LPSPI_FCR_TXWATER_MASK)\n#define LPSPI_FCR_RXWATER_MASK                   0x30000u\n#define LPSPI_FCR_RXWATER_SHIFT                  16u\n#define LPSPI_FCR_RXWATER_WIDTH                  2u\n#define LPSPI_FCR_RXWATER(x)                     (((uint32_t)(((uint32_t)(x))<<LPSPI_FCR_RXWATER_SHIFT))&LPSPI_FCR_RXWATER_MASK)\n/* FSR Bit Fields */\n#define LPSPI_FSR_TXCOUNT_MASK                   0x7u\n#define LPSPI_FSR_TXCOUNT_SHIFT                  0u\n#define LPSPI_FSR_TXCOUNT_WIDTH                  3u\n#define LPSPI_FSR_TXCOUNT(x)                     (((uint32_t)(((uint32_t)(x))<<LPSPI_FSR_TXCOUNT_SHIFT))&LPSPI_FSR_TXCOUNT_MASK)\n#define LPSPI_FSR_RXCOUNT_MASK                   0x70000u\n#define LPSPI_FSR_RXCOUNT_SHIFT                  16u\n#define LPSPI_FSR_RXCOUNT_WIDTH                  3u\n#define LPSPI_FSR_RXCOUNT(x)                     (((uint32_t)(((uint32_t)(x))<<LPSPI_FSR_RXCOUNT_SHIFT))&LPSPI_FSR_RXCOUNT_MASK)\n/* TCR Bit Fields */\n#define LPSPI_TCR_FRAMESZ_MASK                   0xFFFu\n#define LPSPI_TCR_FRAMESZ_SHIFT                  0u\n#define LPSPI_TCR_FRAMESZ_WIDTH                  12u\n#define LPSPI_TCR_FRAMESZ(x)                     (((uint32_t)(((uint32_t)(x))<<LPSPI_TCR_FRAMESZ_SHIFT))&LPSPI_TCR_FRAMESZ_MASK)\n#define LPSPI_TCR_WIDTH_MASK                     0x30000u\n#define LPSPI_TCR_WIDTH_SHIFT                    16u\n#define LPSPI_TCR_WIDTH_WIDTH                    2u\n#define LPSPI_TCR_WIDTH(x)                       (((uint32_t)(((uint32_t)(x))<<LPSPI_TCR_WIDTH_SHIFT))&LPSPI_TCR_WIDTH_MASK)\n#define LPSPI_TCR_TXMSK_MASK                     0x40000u\n#define LPSPI_TCR_TXMSK_SHIFT                    18u\n#define LPSPI_TCR_TXMSK_WIDTH                    1u\n#define LPSPI_TCR_TXMSK(x)                       (((uint32_t)(((uint32_t)(x))<<LPSPI_TCR_TXMSK_SHIFT))&LPSPI_TCR_TXMSK_MASK)\n#define LPSPI_TCR_RXMSK_MASK                     0x80000u\n#define LPSPI_TCR_RXMSK_SHIFT                    19u\n#define LPSPI_TCR_RXMSK_WIDTH                    1u\n#define LPSPI_TCR_RXMSK(x)                       (((uint32_t)(((uint32_t)(x))<<LPSPI_TCR_RXMSK_SHIFT))&LPSPI_TCR_RXMSK_MASK)\n#define LPSPI_TCR_CONTC_MASK                     0x100000u\n#define LPSPI_TCR_CONTC_SHIFT                    20u\n#define LPSPI_TCR_CONTC_WIDTH                    1u\n#define LPSPI_TCR_CONTC(x)                       (((uint32_t)(((uint32_t)(x))<<LPSPI_TCR_CONTC_SHIFT))&LPSPI_TCR_CONTC_MASK)\n#define LPSPI_TCR_CONT_MASK                      0x200000u\n#define LPSPI_TCR_CONT_SHIFT                     21u\n#define LPSPI_TCR_CONT_WIDTH                     1u\n#define LPSPI_TCR_CONT(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_TCR_CONT_SHIFT))&LPSPI_TCR_CONT_MASK)\n#define LPSPI_TCR_BYSW_MASK                      0x400000u\n#define LPSPI_TCR_BYSW_SHIFT                     22u\n#define LPSPI_TCR_BYSW_WIDTH                     1u\n#define LPSPI_TCR_BYSW(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_TCR_BYSW_SHIFT))&LPSPI_TCR_BYSW_MASK)\n#define LPSPI_TCR_LSBF_MASK                      0x800000u\n#define LPSPI_TCR_LSBF_SHIFT                     23u\n#define LPSPI_TCR_LSBF_WIDTH                     1u\n#define LPSPI_TCR_LSBF(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_TCR_LSBF_SHIFT))&LPSPI_TCR_LSBF_MASK)\n#define LPSPI_TCR_PCS_MASK                       0x3000000u\n#define LPSPI_TCR_PCS_SHIFT                      24u\n#define LPSPI_TCR_PCS_WIDTH                      2u\n#define LPSPI_TCR_PCS(x)                         (((uint32_t)(((uint32_t)(x))<<LPSPI_TCR_PCS_SHIFT))&LPSPI_TCR_PCS_MASK)\n#define LPSPI_TCR_PRESCALE_MASK                  0x38000000u\n#define LPSPI_TCR_PRESCALE_SHIFT                 27u\n#define LPSPI_TCR_PRESCALE_WIDTH                 3u\n#define LPSPI_TCR_PRESCALE(x)                    (((uint32_t)(((uint32_t)(x))<<LPSPI_TCR_PRESCALE_SHIFT))&LPSPI_TCR_PRESCALE_MASK)\n#define LPSPI_TCR_CPHA_MASK                      0x40000000u\n#define LPSPI_TCR_CPHA_SHIFT                     30u\n#define LPSPI_TCR_CPHA_WIDTH                     1u\n#define LPSPI_TCR_CPHA(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_TCR_CPHA_SHIFT))&LPSPI_TCR_CPHA_MASK)\n#define LPSPI_TCR_CPOL_MASK                      0x80000000u\n#define LPSPI_TCR_CPOL_SHIFT                     31u\n#define LPSPI_TCR_CPOL_WIDTH                     1u\n#define LPSPI_TCR_CPOL(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_TCR_CPOL_SHIFT))&LPSPI_TCR_CPOL_MASK)\n/* TDR Bit Fields */\n#define LPSPI_TDR_DATA_MASK                      0xFFFFFFFFu\n#define LPSPI_TDR_DATA_SHIFT                     0u\n#define LPSPI_TDR_DATA_WIDTH                     32u\n#define LPSPI_TDR_DATA(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_TDR_DATA_SHIFT))&LPSPI_TDR_DATA_MASK)\n/* RSR Bit Fields */\n#define LPSPI_RSR_SOF_MASK                       0x1u\n#define LPSPI_RSR_SOF_SHIFT                      0u\n#define LPSPI_RSR_SOF_WIDTH                      1u\n#define LPSPI_RSR_SOF(x)                         (((uint32_t)(((uint32_t)(x))<<LPSPI_RSR_SOF_SHIFT))&LPSPI_RSR_SOF_MASK)\n#define LPSPI_RSR_RXEMPTY_MASK                   0x2u\n#define LPSPI_RSR_RXEMPTY_SHIFT                  1u\n#define LPSPI_RSR_RXEMPTY_WIDTH                  1u\n#define LPSPI_RSR_RXEMPTY(x)                     (((uint32_t)(((uint32_t)(x))<<LPSPI_RSR_RXEMPTY_SHIFT))&LPSPI_RSR_RXEMPTY_MASK)\n/* RDR Bit Fields */\n#define LPSPI_RDR_DATA_MASK                      0xFFFFFFFFu\n#define LPSPI_RDR_DATA_SHIFT                     0u\n#define LPSPI_RDR_DATA_WIDTH                     32u\n#define LPSPI_RDR_DATA(x)                        (((uint32_t)(((uint32_t)(x))<<LPSPI_RDR_DATA_SHIFT))&LPSPI_RDR_DATA_MASK)\n\n/*!\n * @}\n */ /* end of group LPSPI_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group LPSPI_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- LPTMR Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup LPTMR_Peripheral_Access_Layer LPTMR Peripheral Access Layer\n * @{\n */\n\n\n/** LPTMR - Size of Registers Arrays */\n\n/** LPTMR - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t CSR;                               /**< Low Power Timer Control Status Register, offset: 0x0 */\n  __IO uint32_t PSR;                               /**< Low Power Timer Prescale Register, offset: 0x4 */\n  __IO uint32_t CMR;                               /**< Low Power Timer Compare Register, offset: 0x8 */\n  __IO uint32_t CNR;                               /**< Low Power Timer Counter Register, offset: 0xC */\n} LPTMR_Type, *LPTMR_MemMapPtr;\n\n /** Number of instances of the LPTMR module. */\n#define LPTMR_INSTANCE_COUNT                     (1u)\n\n\n/* LPTMR - Peripheral instance base addresses */\n/** Peripheral LPTMR0 base address */\n#define LPTMR0_BASE                              (0x40040000u)\n/** Peripheral LPTMR0 base pointer */\n#define LPTMR0                                   ((LPTMR_Type *)LPTMR0_BASE)\n/** Array initializer of LPTMR peripheral base addresses */\n#define LPTMR_BASE_ADDRS                         { LPTMR0_BASE }\n/** Array initializer of LPTMR peripheral base pointers */\n#define LPTMR_BASE_PTRS                          { LPTMR0 }\n /** Number of interrupt vector arrays for the LPTMR module. */\n#define LPTMR_IRQS_ARR_COUNT                     (1u)\n /** Number of interrupt channels for the LPTMR module. */\n#define LPTMR_IRQS_CH_COUNT                      (1u)\n/** Interrupt vectors for the LPTMR peripheral type */\n#define LPTMR_IRQS                               { LPTMR0_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- LPTMR Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup LPTMR_Register_Masks LPTMR Register Masks\n * @{\n */\n\n/* CSR Bit Fields */\n#define LPTMR_CSR_TEN_MASK                       0x1u\n#define LPTMR_CSR_TEN_SHIFT                      0u\n#define LPTMR_CSR_TEN_WIDTH                      1u\n#define LPTMR_CSR_TEN(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TEN_SHIFT))&LPTMR_CSR_TEN_MASK)\n#define LPTMR_CSR_TMS_MASK                       0x2u\n#define LPTMR_CSR_TMS_SHIFT                      1u\n#define LPTMR_CSR_TMS_WIDTH                      1u\n#define LPTMR_CSR_TMS(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TMS_SHIFT))&LPTMR_CSR_TMS_MASK)\n#define LPTMR_CSR_TFC_MASK                       0x4u\n#define LPTMR_CSR_TFC_SHIFT                      2u\n#define LPTMR_CSR_TFC_WIDTH                      1u\n#define LPTMR_CSR_TFC(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TFC_SHIFT))&LPTMR_CSR_TFC_MASK)\n#define LPTMR_CSR_TPP_MASK                       0x8u\n#define LPTMR_CSR_TPP_SHIFT                      3u\n#define LPTMR_CSR_TPP_WIDTH                      1u\n#define LPTMR_CSR_TPP(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TPP_SHIFT))&LPTMR_CSR_TPP_MASK)\n#define LPTMR_CSR_TPS_MASK                       0x30u\n#define LPTMR_CSR_TPS_SHIFT                      4u\n#define LPTMR_CSR_TPS_WIDTH                      2u\n#define LPTMR_CSR_TPS(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TPS_SHIFT))&LPTMR_CSR_TPS_MASK)\n#define LPTMR_CSR_TIE_MASK                       0x40u\n#define LPTMR_CSR_TIE_SHIFT                      6u\n#define LPTMR_CSR_TIE_WIDTH                      1u\n#define LPTMR_CSR_TIE(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TIE_SHIFT))&LPTMR_CSR_TIE_MASK)\n#define LPTMR_CSR_TCF_MASK                       0x80u\n#define LPTMR_CSR_TCF_SHIFT                      7u\n#define LPTMR_CSR_TCF_WIDTH                      1u\n#define LPTMR_CSR_TCF(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TCF_SHIFT))&LPTMR_CSR_TCF_MASK)\n#define LPTMR_CSR_TDRE_MASK                      0x100u\n#define LPTMR_CSR_TDRE_SHIFT                     8u\n#define LPTMR_CSR_TDRE_WIDTH                     1u\n#define LPTMR_CSR_TDRE(x)                        (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TDRE_SHIFT))&LPTMR_CSR_TDRE_MASK)\n/* PSR Bit Fields */\n#define LPTMR_PSR_PCS_MASK                       0x3u\n#define LPTMR_PSR_PCS_SHIFT                      0u\n#define LPTMR_PSR_PCS_WIDTH                      2u\n#define LPTMR_PSR_PCS(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_PSR_PCS_SHIFT))&LPTMR_PSR_PCS_MASK)\n#define LPTMR_PSR_PBYP_MASK                      0x4u\n#define LPTMR_PSR_PBYP_SHIFT                     2u\n#define LPTMR_PSR_PBYP_WIDTH                     1u\n#define LPTMR_PSR_PBYP(x)                        (((uint32_t)(((uint32_t)(x))<<LPTMR_PSR_PBYP_SHIFT))&LPTMR_PSR_PBYP_MASK)\n#define LPTMR_PSR_PRESCALE_MASK                  0x78u\n#define LPTMR_PSR_PRESCALE_SHIFT                 3u\n#define LPTMR_PSR_PRESCALE_WIDTH                 4u\n#define LPTMR_PSR_PRESCALE(x)                    (((uint32_t)(((uint32_t)(x))<<LPTMR_PSR_PRESCALE_SHIFT))&LPTMR_PSR_PRESCALE_MASK)\n/* CMR Bit Fields */\n#define LPTMR_CMR_COMPARE_MASK                   0xFFFFu\n#define LPTMR_CMR_COMPARE_SHIFT                  0u\n#define LPTMR_CMR_COMPARE_WIDTH                  16u\n#define LPTMR_CMR_COMPARE(x)                     (((uint32_t)(((uint32_t)(x))<<LPTMR_CMR_COMPARE_SHIFT))&LPTMR_CMR_COMPARE_MASK)\n/* CNR Bit Fields */\n#define LPTMR_CNR_COUNTER_MASK                   0xFFFFu\n#define LPTMR_CNR_COUNTER_SHIFT                  0u\n#define LPTMR_CNR_COUNTER_WIDTH                  16u\n#define LPTMR_CNR_COUNTER(x)                     (((uint32_t)(((uint32_t)(x))<<LPTMR_CNR_COUNTER_SHIFT))&LPTMR_CNR_COUNTER_MASK)\n\n/*!\n * @}\n */ /* end of group LPTMR_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group LPTMR_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- LPUART Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup LPUART_Peripheral_Access_Layer LPUART Peripheral Access Layer\n * @{\n */\n\n\n/** LPUART - Size of Registers Arrays */\n\n/** LPUART - Register Layout Typedef */\ntypedef struct {\n  __I  uint32_t VERID;                             /**< Version ID Register, offset: 0x0 */\n  __I  uint32_t PARAM;                             /**< Parameter Register, offset: 0x4 */\n  __IO uint32_t GLOBAL;                            /**< LPUART Global Register, offset: 0x8 */\n  __IO uint32_t PINCFG;                            /**< LPUART Pin Configuration Register, offset: 0xC */\n  __IO uint32_t BAUD;                              /**< LPUART Baud Rate Register, offset: 0x10 */\n  __IO uint32_t STAT;                              /**< LPUART Status Register, offset: 0x14 */\n  __IO uint32_t CTRL;                              /**< LPUART Control Register, offset: 0x18 */\n  __IO uint32_t DATA;                              /**< LPUART Data Register, offset: 0x1C */\n  __IO uint32_t MATCH;                             /**< LPUART Match Address Register, offset: 0x20 */\n  __IO uint32_t MODIR;                             /**< LPUART Modem IrDA Register, offset: 0x24 */\n  __IO uint32_t FIFO;                              /**< LPUART FIFO Register, offset: 0x28 */\n  __IO uint32_t WATER;                             /**< LPUART Watermark Register, offset: 0x2C */\n} LPUART_Type, *LPUART_MemMapPtr;\n\n /** Number of instances of the LPUART module. */\n#define LPUART_INSTANCE_COUNT                    (3u)\n\n\n/* LPUART - Peripheral instance base addresses */\n/** Peripheral LPUART0 base address */\n#define LPUART0_BASE                             (0x4006A000u)\n/** Peripheral LPUART0 base pointer */\n#define LPUART0                                  ((LPUART_Type *)LPUART0_BASE)\n/** Peripheral LPUART1 base address */\n#define LPUART1_BASE                             (0x4006B000u)\n/** Peripheral LPUART1 base pointer */\n#define LPUART1                                  ((LPUART_Type *)LPUART1_BASE)\n/** Peripheral LPUART2 base address */\n#define LPUART2_BASE                             (0x4006C000u)\n/** Peripheral LPUART2 base pointer */\n#define LPUART2                                  ((LPUART_Type *)LPUART2_BASE)\n/** Array initializer of LPUART peripheral base addresses */\n#define LPUART_BASE_ADDRS                        { LPUART0_BASE, LPUART1_BASE, LPUART2_BASE }\n/** Array initializer of LPUART peripheral base pointers */\n#define LPUART_BASE_PTRS                         { LPUART0, LPUART1, LPUART2 }\n /** Number of interrupt vector arrays for the LPUART module. */\n#define LPUART_IRQS_ARR_COUNT                    (1u)\n /** Number of interrupt channels for the RX_TX type of LPUART module. */\n#define LPUART_RX_TX_IRQS_CH_COUNT               (1u)\n/** Interrupt vectors for the LPUART peripheral type */\n#define LPUART_RX_TX_IRQS                        { LPUART0_RxTx_IRQn, LPUART1_RxTx_IRQn, LPUART2_RxTx_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- LPUART Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup LPUART_Register_Masks LPUART Register Masks\n * @{\n */\n\n/* VERID Bit Fields */\n#define LPUART_VERID_FEATURE_MASK                0xFFFFu\n#define LPUART_VERID_FEATURE_SHIFT               0u\n#define LPUART_VERID_FEATURE_WIDTH               16u\n#define LPUART_VERID_FEATURE(x)                  (((uint32_t)(((uint32_t)(x))<<LPUART_VERID_FEATURE_SHIFT))&LPUART_VERID_FEATURE_MASK)\n#define LPUART_VERID_MINOR_MASK                  0xFF0000u\n#define LPUART_VERID_MINOR_SHIFT                 16u\n#define LPUART_VERID_MINOR_WIDTH                 8u\n#define LPUART_VERID_MINOR(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_VERID_MINOR_SHIFT))&LPUART_VERID_MINOR_MASK)\n#define LPUART_VERID_MAJOR_MASK                  0xFF000000u\n#define LPUART_VERID_MAJOR_SHIFT                 24u\n#define LPUART_VERID_MAJOR_WIDTH                 8u\n#define LPUART_VERID_MAJOR(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_VERID_MAJOR_SHIFT))&LPUART_VERID_MAJOR_MASK)\n/* PARAM Bit Fields */\n#define LPUART_PARAM_TXFIFO_MASK                 0xFFu\n#define LPUART_PARAM_TXFIFO_SHIFT                0u\n#define LPUART_PARAM_TXFIFO_WIDTH                8u\n#define LPUART_PARAM_TXFIFO(x)                   (((uint32_t)(((uint32_t)(x))<<LPUART_PARAM_TXFIFO_SHIFT))&LPUART_PARAM_TXFIFO_MASK)\n#define LPUART_PARAM_RXFIFO_MASK                 0xFF00u\n#define LPUART_PARAM_RXFIFO_SHIFT                8u\n#define LPUART_PARAM_RXFIFO_WIDTH                8u\n#define LPUART_PARAM_RXFIFO(x)                   (((uint32_t)(((uint32_t)(x))<<LPUART_PARAM_RXFIFO_SHIFT))&LPUART_PARAM_RXFIFO_MASK)\n/* GLOBAL Bit Fields */\n#define LPUART_GLOBAL_RST_MASK                   0x2u\n#define LPUART_GLOBAL_RST_SHIFT                  1u\n#define LPUART_GLOBAL_RST_WIDTH                  1u\n#define LPUART_GLOBAL_RST(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_GLOBAL_RST_SHIFT))&LPUART_GLOBAL_RST_MASK)\n/* PINCFG Bit Fields */\n#define LPUART_PINCFG_TRGSEL_MASK                0x3u\n#define LPUART_PINCFG_TRGSEL_SHIFT               0u\n#define LPUART_PINCFG_TRGSEL_WIDTH               2u\n#define LPUART_PINCFG_TRGSEL(x)                  (((uint32_t)(((uint32_t)(x))<<LPUART_PINCFG_TRGSEL_SHIFT))&LPUART_PINCFG_TRGSEL_MASK)\n/* BAUD Bit Fields */\n#define LPUART_BAUD_SBR_MASK                     0x1FFFu\n#define LPUART_BAUD_SBR_SHIFT                    0u\n#define LPUART_BAUD_SBR_WIDTH                    13u\n#define LPUART_BAUD_SBR(x)                       (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_SBR_SHIFT))&LPUART_BAUD_SBR_MASK)\n#define LPUART_BAUD_SBNS_MASK                    0x2000u\n#define LPUART_BAUD_SBNS_SHIFT                   13u\n#define LPUART_BAUD_SBNS_WIDTH                   1u\n#define LPUART_BAUD_SBNS(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_SBNS_SHIFT))&LPUART_BAUD_SBNS_MASK)\n#define LPUART_BAUD_RXEDGIE_MASK                 0x4000u\n#define LPUART_BAUD_RXEDGIE_SHIFT                14u\n#define LPUART_BAUD_RXEDGIE_WIDTH                1u\n#define LPUART_BAUD_RXEDGIE(x)                   (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_RXEDGIE_SHIFT))&LPUART_BAUD_RXEDGIE_MASK)\n#define LPUART_BAUD_LBKDIE_MASK                  0x8000u\n#define LPUART_BAUD_LBKDIE_SHIFT                 15u\n#define LPUART_BAUD_LBKDIE_WIDTH                 1u\n#define LPUART_BAUD_LBKDIE(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_LBKDIE_SHIFT))&LPUART_BAUD_LBKDIE_MASK)\n#define LPUART_BAUD_RESYNCDIS_MASK               0x10000u\n#define LPUART_BAUD_RESYNCDIS_SHIFT              16u\n#define LPUART_BAUD_RESYNCDIS_WIDTH              1u\n#define LPUART_BAUD_RESYNCDIS(x)                 (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_RESYNCDIS_SHIFT))&LPUART_BAUD_RESYNCDIS_MASK)\n#define LPUART_BAUD_BOTHEDGE_MASK                0x20000u\n#define LPUART_BAUD_BOTHEDGE_SHIFT               17u\n#define LPUART_BAUD_BOTHEDGE_WIDTH               1u\n#define LPUART_BAUD_BOTHEDGE(x)                  (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_BOTHEDGE_SHIFT))&LPUART_BAUD_BOTHEDGE_MASK)\n#define LPUART_BAUD_MATCFG_MASK                  0xC0000u\n#define LPUART_BAUD_MATCFG_SHIFT                 18u\n#define LPUART_BAUD_MATCFG_WIDTH                 2u\n#define LPUART_BAUD_MATCFG(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_MATCFG_SHIFT))&LPUART_BAUD_MATCFG_MASK)\n#define LPUART_BAUD_RIDMAE_MASK                  0x100000u\n#define LPUART_BAUD_RIDMAE_SHIFT                 20u\n#define LPUART_BAUD_RIDMAE_WIDTH                 1u\n#define LPUART_BAUD_RIDMAE(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_RIDMAE_SHIFT))&LPUART_BAUD_RIDMAE_MASK)\n#define LPUART_BAUD_RDMAE_MASK                   0x200000u\n#define LPUART_BAUD_RDMAE_SHIFT                  21u\n#define LPUART_BAUD_RDMAE_WIDTH                  1u\n#define LPUART_BAUD_RDMAE(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_RDMAE_SHIFT))&LPUART_BAUD_RDMAE_MASK)\n#define LPUART_BAUD_TDMAE_MASK                   0x800000u\n#define LPUART_BAUD_TDMAE_SHIFT                  23u\n#define LPUART_BAUD_TDMAE_WIDTH                  1u\n#define LPUART_BAUD_TDMAE(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_TDMAE_SHIFT))&LPUART_BAUD_TDMAE_MASK)\n#define LPUART_BAUD_OSR_MASK                     0x1F000000u\n#define LPUART_BAUD_OSR_SHIFT                    24u\n#define LPUART_BAUD_OSR_WIDTH                    5u\n#define LPUART_BAUD_OSR(x)                       (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_OSR_SHIFT))&LPUART_BAUD_OSR_MASK)\n#define LPUART_BAUD_M10_MASK                     0x20000000u\n#define LPUART_BAUD_M10_SHIFT                    29u\n#define LPUART_BAUD_M10_WIDTH                    1u\n#define LPUART_BAUD_M10(x)                       (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_M10_SHIFT))&LPUART_BAUD_M10_MASK)\n#define LPUART_BAUD_MAEN2_MASK                   0x40000000u\n#define LPUART_BAUD_MAEN2_SHIFT                  30u\n#define LPUART_BAUD_MAEN2_WIDTH                  1u\n#define LPUART_BAUD_MAEN2(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_MAEN2_SHIFT))&LPUART_BAUD_MAEN2_MASK)\n#define LPUART_BAUD_MAEN1_MASK                   0x80000000u\n#define LPUART_BAUD_MAEN1_SHIFT                  31u\n#define LPUART_BAUD_MAEN1_WIDTH                  1u\n#define LPUART_BAUD_MAEN1(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_BAUD_MAEN1_SHIFT))&LPUART_BAUD_MAEN1_MASK)\n/* STAT Bit Fields */\n#define LPUART_STAT_MA2F_MASK                    0x4000u\n#define LPUART_STAT_MA2F_SHIFT                   14u\n#define LPUART_STAT_MA2F_WIDTH                   1u\n#define LPUART_STAT_MA2F(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_MA2F_SHIFT))&LPUART_STAT_MA2F_MASK)\n#define LPUART_STAT_MA1F_MASK                    0x8000u\n#define LPUART_STAT_MA1F_SHIFT                   15u\n#define LPUART_STAT_MA1F_WIDTH                   1u\n#define LPUART_STAT_MA1F(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_MA1F_SHIFT))&LPUART_STAT_MA1F_MASK)\n#define LPUART_STAT_PF_MASK                      0x10000u\n#define LPUART_STAT_PF_SHIFT                     16u\n#define LPUART_STAT_PF_WIDTH                     1u\n#define LPUART_STAT_PF(x)                        (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_PF_SHIFT))&LPUART_STAT_PF_MASK)\n#define LPUART_STAT_FE_MASK                      0x20000u\n#define LPUART_STAT_FE_SHIFT                     17u\n#define LPUART_STAT_FE_WIDTH                     1u\n#define LPUART_STAT_FE(x)                        (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_FE_SHIFT))&LPUART_STAT_FE_MASK)\n#define LPUART_STAT_NF_MASK                      0x40000u\n#define LPUART_STAT_NF_SHIFT                     18u\n#define LPUART_STAT_NF_WIDTH                     1u\n#define LPUART_STAT_NF(x)                        (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_NF_SHIFT))&LPUART_STAT_NF_MASK)\n#define LPUART_STAT_OR_MASK                      0x80000u\n#define LPUART_STAT_OR_SHIFT                     19u\n#define LPUART_STAT_OR_WIDTH                     1u\n#define LPUART_STAT_OR(x)                        (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_OR_SHIFT))&LPUART_STAT_OR_MASK)\n#define LPUART_STAT_IDLE_MASK                    0x100000u\n#define LPUART_STAT_IDLE_SHIFT                   20u\n#define LPUART_STAT_IDLE_WIDTH                   1u\n#define LPUART_STAT_IDLE(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_IDLE_SHIFT))&LPUART_STAT_IDLE_MASK)\n#define LPUART_STAT_RDRF_MASK                    0x200000u\n#define LPUART_STAT_RDRF_SHIFT                   21u\n#define LPUART_STAT_RDRF_WIDTH                   1u\n#define LPUART_STAT_RDRF(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_RDRF_SHIFT))&LPUART_STAT_RDRF_MASK)\n#define LPUART_STAT_TC_MASK                      0x400000u\n#define LPUART_STAT_TC_SHIFT                     22u\n#define LPUART_STAT_TC_WIDTH                     1u\n#define LPUART_STAT_TC(x)                        (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_TC_SHIFT))&LPUART_STAT_TC_MASK)\n#define LPUART_STAT_TDRE_MASK                    0x800000u\n#define LPUART_STAT_TDRE_SHIFT                   23u\n#define LPUART_STAT_TDRE_WIDTH                   1u\n#define LPUART_STAT_TDRE(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_TDRE_SHIFT))&LPUART_STAT_TDRE_MASK)\n#define LPUART_STAT_RAF_MASK                     0x1000000u\n#define LPUART_STAT_RAF_SHIFT                    24u\n#define LPUART_STAT_RAF_WIDTH                    1u\n#define LPUART_STAT_RAF(x)                       (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_RAF_SHIFT))&LPUART_STAT_RAF_MASK)\n#define LPUART_STAT_LBKDE_MASK                   0x2000000u\n#define LPUART_STAT_LBKDE_SHIFT                  25u\n#define LPUART_STAT_LBKDE_WIDTH                  1u\n#define LPUART_STAT_LBKDE(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_LBKDE_SHIFT))&LPUART_STAT_LBKDE_MASK)\n#define LPUART_STAT_BRK13_MASK                   0x4000000u\n#define LPUART_STAT_BRK13_SHIFT                  26u\n#define LPUART_STAT_BRK13_WIDTH                  1u\n#define LPUART_STAT_BRK13(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_BRK13_SHIFT))&LPUART_STAT_BRK13_MASK)\n#define LPUART_STAT_RWUID_MASK                   0x8000000u\n#define LPUART_STAT_RWUID_SHIFT                  27u\n#define LPUART_STAT_RWUID_WIDTH                  1u\n#define LPUART_STAT_RWUID(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_RWUID_SHIFT))&LPUART_STAT_RWUID_MASK)\n#define LPUART_STAT_RXINV_MASK                   0x10000000u\n#define LPUART_STAT_RXINV_SHIFT                  28u\n#define LPUART_STAT_RXINV_WIDTH                  1u\n#define LPUART_STAT_RXINV(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_RXINV_SHIFT))&LPUART_STAT_RXINV_MASK)\n#define LPUART_STAT_MSBF_MASK                    0x20000000u\n#define LPUART_STAT_MSBF_SHIFT                   29u\n#define LPUART_STAT_MSBF_WIDTH                   1u\n#define LPUART_STAT_MSBF(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_MSBF_SHIFT))&LPUART_STAT_MSBF_MASK)\n#define LPUART_STAT_RXEDGIF_MASK                 0x40000000u\n#define LPUART_STAT_RXEDGIF_SHIFT                30u\n#define LPUART_STAT_RXEDGIF_WIDTH                1u\n#define LPUART_STAT_RXEDGIF(x)                   (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_RXEDGIF_SHIFT))&LPUART_STAT_RXEDGIF_MASK)\n#define LPUART_STAT_LBKDIF_MASK                  0x80000000u\n#define LPUART_STAT_LBKDIF_SHIFT                 31u\n#define LPUART_STAT_LBKDIF_WIDTH                 1u\n#define LPUART_STAT_LBKDIF(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_STAT_LBKDIF_SHIFT))&LPUART_STAT_LBKDIF_MASK)\n/* CTRL Bit Fields */\n#define LPUART_CTRL_PT_MASK                      0x1u\n#define LPUART_CTRL_PT_SHIFT                     0u\n#define LPUART_CTRL_PT_WIDTH                     1u\n#define LPUART_CTRL_PT(x)                        (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_PT_SHIFT))&LPUART_CTRL_PT_MASK)\n#define LPUART_CTRL_PE_MASK                      0x2u\n#define LPUART_CTRL_PE_SHIFT                     1u\n#define LPUART_CTRL_PE_WIDTH                     1u\n#define LPUART_CTRL_PE(x)                        (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_PE_SHIFT))&LPUART_CTRL_PE_MASK)\n#define LPUART_CTRL_ILT_MASK                     0x4u\n#define LPUART_CTRL_ILT_SHIFT                    2u\n#define LPUART_CTRL_ILT_WIDTH                    1u\n#define LPUART_CTRL_ILT(x)                       (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_ILT_SHIFT))&LPUART_CTRL_ILT_MASK)\n#define LPUART_CTRL_WAKE_MASK                    0x8u\n#define LPUART_CTRL_WAKE_SHIFT                   3u\n#define LPUART_CTRL_WAKE_WIDTH                   1u\n#define LPUART_CTRL_WAKE(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_WAKE_SHIFT))&LPUART_CTRL_WAKE_MASK)\n#define LPUART_CTRL_M_MASK                       0x10u\n#define LPUART_CTRL_M_SHIFT                      4u\n#define LPUART_CTRL_M_WIDTH                      1u\n#define LPUART_CTRL_M(x)                         (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_M_SHIFT))&LPUART_CTRL_M_MASK)\n#define LPUART_CTRL_RSRC_MASK                    0x20u\n#define LPUART_CTRL_RSRC_SHIFT                   5u\n#define LPUART_CTRL_RSRC_WIDTH                   1u\n#define LPUART_CTRL_RSRC(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_RSRC_SHIFT))&LPUART_CTRL_RSRC_MASK)\n#define LPUART_CTRL_DOZEEN_MASK                  0x40u\n#define LPUART_CTRL_DOZEEN_SHIFT                 6u\n#define LPUART_CTRL_DOZEEN_WIDTH                 1u\n#define LPUART_CTRL_DOZEEN(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_DOZEEN_SHIFT))&LPUART_CTRL_DOZEEN_MASK)\n#define LPUART_CTRL_LOOPS_MASK                   0x80u\n#define LPUART_CTRL_LOOPS_SHIFT                  7u\n#define LPUART_CTRL_LOOPS_WIDTH                  1u\n#define LPUART_CTRL_LOOPS(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_LOOPS_SHIFT))&LPUART_CTRL_LOOPS_MASK)\n#define LPUART_CTRL_IDLECFG_MASK                 0x700u\n#define LPUART_CTRL_IDLECFG_SHIFT                8u\n#define LPUART_CTRL_IDLECFG_WIDTH                3u\n#define LPUART_CTRL_IDLECFG(x)                   (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_IDLECFG_SHIFT))&LPUART_CTRL_IDLECFG_MASK)\n#define LPUART_CTRL_M7_MASK                      0x800u\n#define LPUART_CTRL_M7_SHIFT                     11u\n#define LPUART_CTRL_M7_WIDTH                     1u\n#define LPUART_CTRL_M7(x)                        (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_M7_SHIFT))&LPUART_CTRL_M7_MASK)\n#define LPUART_CTRL_MA2IE_MASK                   0x4000u\n#define LPUART_CTRL_MA2IE_SHIFT                  14u\n#define LPUART_CTRL_MA2IE_WIDTH                  1u\n#define LPUART_CTRL_MA2IE(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_MA2IE_SHIFT))&LPUART_CTRL_MA2IE_MASK)\n#define LPUART_CTRL_MA1IE_MASK                   0x8000u\n#define LPUART_CTRL_MA1IE_SHIFT                  15u\n#define LPUART_CTRL_MA1IE_WIDTH                  1u\n#define LPUART_CTRL_MA1IE(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_MA1IE_SHIFT))&LPUART_CTRL_MA1IE_MASK)\n#define LPUART_CTRL_SBK_MASK                     0x10000u\n#define LPUART_CTRL_SBK_SHIFT                    16u\n#define LPUART_CTRL_SBK_WIDTH                    1u\n#define LPUART_CTRL_SBK(x)                       (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_SBK_SHIFT))&LPUART_CTRL_SBK_MASK)\n#define LPUART_CTRL_RWU_MASK                     0x20000u\n#define LPUART_CTRL_RWU_SHIFT                    17u\n#define LPUART_CTRL_RWU_WIDTH                    1u\n#define LPUART_CTRL_RWU(x)                       (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_RWU_SHIFT))&LPUART_CTRL_RWU_MASK)\n#define LPUART_CTRL_RE_MASK                      0x40000u\n#define LPUART_CTRL_RE_SHIFT                     18u\n#define LPUART_CTRL_RE_WIDTH                     1u\n#define LPUART_CTRL_RE(x)                        (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_RE_SHIFT))&LPUART_CTRL_RE_MASK)\n#define LPUART_CTRL_TE_MASK                      0x80000u\n#define LPUART_CTRL_TE_SHIFT                     19u\n#define LPUART_CTRL_TE_WIDTH                     1u\n#define LPUART_CTRL_TE(x)                        (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_TE_SHIFT))&LPUART_CTRL_TE_MASK)\n#define LPUART_CTRL_ILIE_MASK                    0x100000u\n#define LPUART_CTRL_ILIE_SHIFT                   20u\n#define LPUART_CTRL_ILIE_WIDTH                   1u\n#define LPUART_CTRL_ILIE(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_ILIE_SHIFT))&LPUART_CTRL_ILIE_MASK)\n#define LPUART_CTRL_RIE_MASK                     0x200000u\n#define LPUART_CTRL_RIE_SHIFT                    21u\n#define LPUART_CTRL_RIE_WIDTH                    1u\n#define LPUART_CTRL_RIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_RIE_SHIFT))&LPUART_CTRL_RIE_MASK)\n#define LPUART_CTRL_TCIE_MASK                    0x400000u\n#define LPUART_CTRL_TCIE_SHIFT                   22u\n#define LPUART_CTRL_TCIE_WIDTH                   1u\n#define LPUART_CTRL_TCIE(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_TCIE_SHIFT))&LPUART_CTRL_TCIE_MASK)\n#define LPUART_CTRL_TIE_MASK                     0x800000u\n#define LPUART_CTRL_TIE_SHIFT                    23u\n#define LPUART_CTRL_TIE_WIDTH                    1u\n#define LPUART_CTRL_TIE(x)                       (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_TIE_SHIFT))&LPUART_CTRL_TIE_MASK)\n#define LPUART_CTRL_PEIE_MASK                    0x1000000u\n#define LPUART_CTRL_PEIE_SHIFT                   24u\n#define LPUART_CTRL_PEIE_WIDTH                   1u\n#define LPUART_CTRL_PEIE(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_PEIE_SHIFT))&LPUART_CTRL_PEIE_MASK)\n#define LPUART_CTRL_FEIE_MASK                    0x2000000u\n#define LPUART_CTRL_FEIE_SHIFT                   25u\n#define LPUART_CTRL_FEIE_WIDTH                   1u\n#define LPUART_CTRL_FEIE(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_FEIE_SHIFT))&LPUART_CTRL_FEIE_MASK)\n#define LPUART_CTRL_NEIE_MASK                    0x4000000u\n#define LPUART_CTRL_NEIE_SHIFT                   26u\n#define LPUART_CTRL_NEIE_WIDTH                   1u\n#define LPUART_CTRL_NEIE(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_NEIE_SHIFT))&LPUART_CTRL_NEIE_MASK)\n#define LPUART_CTRL_ORIE_MASK                    0x8000000u\n#define LPUART_CTRL_ORIE_SHIFT                   27u\n#define LPUART_CTRL_ORIE_WIDTH                   1u\n#define LPUART_CTRL_ORIE(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_ORIE_SHIFT))&LPUART_CTRL_ORIE_MASK)\n#define LPUART_CTRL_TXINV_MASK                   0x10000000u\n#define LPUART_CTRL_TXINV_SHIFT                  28u\n#define LPUART_CTRL_TXINV_WIDTH                  1u\n#define LPUART_CTRL_TXINV(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_TXINV_SHIFT))&LPUART_CTRL_TXINV_MASK)\n#define LPUART_CTRL_TXDIR_MASK                   0x20000000u\n#define LPUART_CTRL_TXDIR_SHIFT                  29u\n#define LPUART_CTRL_TXDIR_WIDTH                  1u\n#define LPUART_CTRL_TXDIR(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_TXDIR_SHIFT))&LPUART_CTRL_TXDIR_MASK)\n#define LPUART_CTRL_R9T8_MASK                    0x40000000u\n#define LPUART_CTRL_R9T8_SHIFT                   30u\n#define LPUART_CTRL_R9T8_WIDTH                   1u\n#define LPUART_CTRL_R9T8(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_R9T8_SHIFT))&LPUART_CTRL_R9T8_MASK)\n#define LPUART_CTRL_R8T9_MASK                    0x80000000u\n#define LPUART_CTRL_R8T9_SHIFT                   31u\n#define LPUART_CTRL_R8T9_WIDTH                   1u\n#define LPUART_CTRL_R8T9(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_CTRL_R8T9_SHIFT))&LPUART_CTRL_R8T9_MASK)\n/* DATA Bit Fields */\n#define LPUART_DATA_R0T0_MASK                    0x1u\n#define LPUART_DATA_R0T0_SHIFT                   0u\n#define LPUART_DATA_R0T0_WIDTH                   1u\n#define LPUART_DATA_R0T0(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_R0T0_SHIFT))&LPUART_DATA_R0T0_MASK)\n#define LPUART_DATA_R1T1_MASK                    0x2u\n#define LPUART_DATA_R1T1_SHIFT                   1u\n#define LPUART_DATA_R1T1_WIDTH                   1u\n#define LPUART_DATA_R1T1(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_R1T1_SHIFT))&LPUART_DATA_R1T1_MASK)\n#define LPUART_DATA_R2T2_MASK                    0x4u\n#define LPUART_DATA_R2T2_SHIFT                   2u\n#define LPUART_DATA_R2T2_WIDTH                   1u\n#define LPUART_DATA_R2T2(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_R2T2_SHIFT))&LPUART_DATA_R2T2_MASK)\n#define LPUART_DATA_R3T3_MASK                    0x8u\n#define LPUART_DATA_R3T3_SHIFT                   3u\n#define LPUART_DATA_R3T3_WIDTH                   1u\n#define LPUART_DATA_R3T3(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_R3T3_SHIFT))&LPUART_DATA_R3T3_MASK)\n#define LPUART_DATA_R4T4_MASK                    0x10u\n#define LPUART_DATA_R4T4_SHIFT                   4u\n#define LPUART_DATA_R4T4_WIDTH                   1u\n#define LPUART_DATA_R4T4(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_R4T4_SHIFT))&LPUART_DATA_R4T4_MASK)\n#define LPUART_DATA_R5T5_MASK                    0x20u\n#define LPUART_DATA_R5T5_SHIFT                   5u\n#define LPUART_DATA_R5T5_WIDTH                   1u\n#define LPUART_DATA_R5T5(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_R5T5_SHIFT))&LPUART_DATA_R5T5_MASK)\n#define LPUART_DATA_R6T6_MASK                    0x40u\n#define LPUART_DATA_R6T6_SHIFT                   6u\n#define LPUART_DATA_R6T6_WIDTH                   1u\n#define LPUART_DATA_R6T6(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_R6T6_SHIFT))&LPUART_DATA_R6T6_MASK)\n#define LPUART_DATA_R7T7_MASK                    0x80u\n#define LPUART_DATA_R7T7_SHIFT                   7u\n#define LPUART_DATA_R7T7_WIDTH                   1u\n#define LPUART_DATA_R7T7(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_R7T7_SHIFT))&LPUART_DATA_R7T7_MASK)\n#define LPUART_DATA_R8T8_MASK                    0x100u\n#define LPUART_DATA_R8T8_SHIFT                   8u\n#define LPUART_DATA_R8T8_WIDTH                   1u\n#define LPUART_DATA_R8T8(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_R8T8_SHIFT))&LPUART_DATA_R8T8_MASK)\n#define LPUART_DATA_R9T9_MASK                    0x200u\n#define LPUART_DATA_R9T9_SHIFT                   9u\n#define LPUART_DATA_R9T9_WIDTH                   1u\n#define LPUART_DATA_R9T9(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_R9T9_SHIFT))&LPUART_DATA_R9T9_MASK)\n#define LPUART_DATA_IDLINE_MASK                  0x800u\n#define LPUART_DATA_IDLINE_SHIFT                 11u\n#define LPUART_DATA_IDLINE_WIDTH                 1u\n#define LPUART_DATA_IDLINE(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_IDLINE_SHIFT))&LPUART_DATA_IDLINE_MASK)\n#define LPUART_DATA_RXEMPT_MASK                  0x1000u\n#define LPUART_DATA_RXEMPT_SHIFT                 12u\n#define LPUART_DATA_RXEMPT_WIDTH                 1u\n#define LPUART_DATA_RXEMPT(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_RXEMPT_SHIFT))&LPUART_DATA_RXEMPT_MASK)\n#define LPUART_DATA_FRETSC_MASK                  0x2000u\n#define LPUART_DATA_FRETSC_SHIFT                 13u\n#define LPUART_DATA_FRETSC_WIDTH                 1u\n#define LPUART_DATA_FRETSC(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_FRETSC_SHIFT))&LPUART_DATA_FRETSC_MASK)\n#define LPUART_DATA_PARITYE_MASK                 0x4000u\n#define LPUART_DATA_PARITYE_SHIFT                14u\n#define LPUART_DATA_PARITYE_WIDTH                1u\n#define LPUART_DATA_PARITYE(x)                   (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_PARITYE_SHIFT))&LPUART_DATA_PARITYE_MASK)\n#define LPUART_DATA_NOISY_MASK                   0x8000u\n#define LPUART_DATA_NOISY_SHIFT                  15u\n#define LPUART_DATA_NOISY_WIDTH                  1u\n#define LPUART_DATA_NOISY(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_DATA_NOISY_SHIFT))&LPUART_DATA_NOISY_MASK)\n/* MATCH Bit Fields */\n#define LPUART_MATCH_MA1_MASK                    0x3FFu\n#define LPUART_MATCH_MA1_SHIFT                   0u\n#define LPUART_MATCH_MA1_WIDTH                   10u\n#define LPUART_MATCH_MA1(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_MATCH_MA1_SHIFT))&LPUART_MATCH_MA1_MASK)\n#define LPUART_MATCH_MA2_MASK                    0x3FF0000u\n#define LPUART_MATCH_MA2_SHIFT                   16u\n#define LPUART_MATCH_MA2_WIDTH                   10u\n#define LPUART_MATCH_MA2(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_MATCH_MA2_SHIFT))&LPUART_MATCH_MA2_MASK)\n/* MODIR Bit Fields */\n#define LPUART_MODIR_TXCTSE_MASK                 0x1u\n#define LPUART_MODIR_TXCTSE_SHIFT                0u\n#define LPUART_MODIR_TXCTSE_WIDTH                1u\n#define LPUART_MODIR_TXCTSE(x)                   (((uint32_t)(((uint32_t)(x))<<LPUART_MODIR_TXCTSE_SHIFT))&LPUART_MODIR_TXCTSE_MASK)\n#define LPUART_MODIR_TXRTSE_MASK                 0x2u\n#define LPUART_MODIR_TXRTSE_SHIFT                1u\n#define LPUART_MODIR_TXRTSE_WIDTH                1u\n#define LPUART_MODIR_TXRTSE(x)                   (((uint32_t)(((uint32_t)(x))<<LPUART_MODIR_TXRTSE_SHIFT))&LPUART_MODIR_TXRTSE_MASK)\n#define LPUART_MODIR_TXRTSPOL_MASK               0x4u\n#define LPUART_MODIR_TXRTSPOL_SHIFT              2u\n#define LPUART_MODIR_TXRTSPOL_WIDTH              1u\n#define LPUART_MODIR_TXRTSPOL(x)                 (((uint32_t)(((uint32_t)(x))<<LPUART_MODIR_TXRTSPOL_SHIFT))&LPUART_MODIR_TXRTSPOL_MASK)\n#define LPUART_MODIR_RXRTSE_MASK                 0x8u\n#define LPUART_MODIR_RXRTSE_SHIFT                3u\n#define LPUART_MODIR_RXRTSE_WIDTH                1u\n#define LPUART_MODIR_RXRTSE(x)                   (((uint32_t)(((uint32_t)(x))<<LPUART_MODIR_RXRTSE_SHIFT))&LPUART_MODIR_RXRTSE_MASK)\n#define LPUART_MODIR_TXCTSC_MASK                 0x10u\n#define LPUART_MODIR_TXCTSC_SHIFT                4u\n#define LPUART_MODIR_TXCTSC_WIDTH                1u\n#define LPUART_MODIR_TXCTSC(x)                   (((uint32_t)(((uint32_t)(x))<<LPUART_MODIR_TXCTSC_SHIFT))&LPUART_MODIR_TXCTSC_MASK)\n#define LPUART_MODIR_TXCTSSRC_MASK               0x20u\n#define LPUART_MODIR_TXCTSSRC_SHIFT              5u\n#define LPUART_MODIR_TXCTSSRC_WIDTH              1u\n#define LPUART_MODIR_TXCTSSRC(x)                 (((uint32_t)(((uint32_t)(x))<<LPUART_MODIR_TXCTSSRC_SHIFT))&LPUART_MODIR_TXCTSSRC_MASK)\n#define LPUART_MODIR_RTSWATER_MASK               0x300u\n#define LPUART_MODIR_RTSWATER_SHIFT              8u\n#define LPUART_MODIR_RTSWATER_WIDTH              2u\n#define LPUART_MODIR_RTSWATER(x)                 (((uint32_t)(((uint32_t)(x))<<LPUART_MODIR_RTSWATER_SHIFT))&LPUART_MODIR_RTSWATER_MASK)\n#define LPUART_MODIR_TNP_MASK                    0x30000u\n#define LPUART_MODIR_TNP_SHIFT                   16u\n#define LPUART_MODIR_TNP_WIDTH                   2u\n#define LPUART_MODIR_TNP(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_MODIR_TNP_SHIFT))&LPUART_MODIR_TNP_MASK)\n#define LPUART_MODIR_IREN_MASK                   0x40000u\n#define LPUART_MODIR_IREN_SHIFT                  18u\n#define LPUART_MODIR_IREN_WIDTH                  1u\n#define LPUART_MODIR_IREN(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_MODIR_IREN_SHIFT))&LPUART_MODIR_IREN_MASK)\n/* FIFO Bit Fields */\n#define LPUART_FIFO_RXFIFOSIZE_MASK              0x7u\n#define LPUART_FIFO_RXFIFOSIZE_SHIFT             0u\n#define LPUART_FIFO_RXFIFOSIZE_WIDTH             3u\n#define LPUART_FIFO_RXFIFOSIZE(x)                (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_RXFIFOSIZE_SHIFT))&LPUART_FIFO_RXFIFOSIZE_MASK)\n#define LPUART_FIFO_RXFE_MASK                    0x8u\n#define LPUART_FIFO_RXFE_SHIFT                   3u\n#define LPUART_FIFO_RXFE_WIDTH                   1u\n#define LPUART_FIFO_RXFE(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_RXFE_SHIFT))&LPUART_FIFO_RXFE_MASK)\n#define LPUART_FIFO_TXFIFOSIZE_MASK              0x70u\n#define LPUART_FIFO_TXFIFOSIZE_SHIFT             4u\n#define LPUART_FIFO_TXFIFOSIZE_WIDTH             3u\n#define LPUART_FIFO_TXFIFOSIZE(x)                (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_TXFIFOSIZE_SHIFT))&LPUART_FIFO_TXFIFOSIZE_MASK)\n#define LPUART_FIFO_TXFE_MASK                    0x80u\n#define LPUART_FIFO_TXFE_SHIFT                   7u\n#define LPUART_FIFO_TXFE_WIDTH                   1u\n#define LPUART_FIFO_TXFE(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_TXFE_SHIFT))&LPUART_FIFO_TXFE_MASK)\n#define LPUART_FIFO_RXUFE_MASK                   0x100u\n#define LPUART_FIFO_RXUFE_SHIFT                  8u\n#define LPUART_FIFO_RXUFE_WIDTH                  1u\n#define LPUART_FIFO_RXUFE(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_RXUFE_SHIFT))&LPUART_FIFO_RXUFE_MASK)\n#define LPUART_FIFO_TXOFE_MASK                   0x200u\n#define LPUART_FIFO_TXOFE_SHIFT                  9u\n#define LPUART_FIFO_TXOFE_WIDTH                  1u\n#define LPUART_FIFO_TXOFE(x)                     (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_TXOFE_SHIFT))&LPUART_FIFO_TXOFE_MASK)\n#define LPUART_FIFO_RXIDEN_MASK                  0x1C00u\n#define LPUART_FIFO_RXIDEN_SHIFT                 10u\n#define LPUART_FIFO_RXIDEN_WIDTH                 3u\n#define LPUART_FIFO_RXIDEN(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_RXIDEN_SHIFT))&LPUART_FIFO_RXIDEN_MASK)\n#define LPUART_FIFO_RXFLUSH_MASK                 0x4000u\n#define LPUART_FIFO_RXFLUSH_SHIFT                14u\n#define LPUART_FIFO_RXFLUSH_WIDTH                1u\n#define LPUART_FIFO_RXFLUSH(x)                   (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_RXFLUSH_SHIFT))&LPUART_FIFO_RXFLUSH_MASK)\n#define LPUART_FIFO_TXFLUSH_MASK                 0x8000u\n#define LPUART_FIFO_TXFLUSH_SHIFT                15u\n#define LPUART_FIFO_TXFLUSH_WIDTH                1u\n#define LPUART_FIFO_TXFLUSH(x)                   (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_TXFLUSH_SHIFT))&LPUART_FIFO_TXFLUSH_MASK)\n#define LPUART_FIFO_RXUF_MASK                    0x10000u\n#define LPUART_FIFO_RXUF_SHIFT                   16u\n#define LPUART_FIFO_RXUF_WIDTH                   1u\n#define LPUART_FIFO_RXUF(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_RXUF_SHIFT))&LPUART_FIFO_RXUF_MASK)\n#define LPUART_FIFO_TXOF_MASK                    0x20000u\n#define LPUART_FIFO_TXOF_SHIFT                   17u\n#define LPUART_FIFO_TXOF_WIDTH                   1u\n#define LPUART_FIFO_TXOF(x)                      (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_TXOF_SHIFT))&LPUART_FIFO_TXOF_MASK)\n#define LPUART_FIFO_RXEMPT_MASK                  0x400000u\n#define LPUART_FIFO_RXEMPT_SHIFT                 22u\n#define LPUART_FIFO_RXEMPT_WIDTH                 1u\n#define LPUART_FIFO_RXEMPT(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_RXEMPT_SHIFT))&LPUART_FIFO_RXEMPT_MASK)\n#define LPUART_FIFO_TXEMPT_MASK                  0x800000u\n#define LPUART_FIFO_TXEMPT_SHIFT                 23u\n#define LPUART_FIFO_TXEMPT_WIDTH                 1u\n#define LPUART_FIFO_TXEMPT(x)                    (((uint32_t)(((uint32_t)(x))<<LPUART_FIFO_TXEMPT_SHIFT))&LPUART_FIFO_TXEMPT_MASK)\n/* WATER Bit Fields */\n#define LPUART_WATER_TXWATER_MASK                0x3u\n#define LPUART_WATER_TXWATER_SHIFT               0u\n#define LPUART_WATER_TXWATER_WIDTH               2u\n#define LPUART_WATER_TXWATER(x)                  (((uint32_t)(((uint32_t)(x))<<LPUART_WATER_TXWATER_SHIFT))&LPUART_WATER_TXWATER_MASK)\n#define LPUART_WATER_TXCOUNT_MASK                0x700u\n#define LPUART_WATER_TXCOUNT_SHIFT               8u\n#define LPUART_WATER_TXCOUNT_WIDTH               3u\n#define LPUART_WATER_TXCOUNT(x)                  (((uint32_t)(((uint32_t)(x))<<LPUART_WATER_TXCOUNT_SHIFT))&LPUART_WATER_TXCOUNT_MASK)\n#define LPUART_WATER_RXWATER_MASK                0x30000u\n#define LPUART_WATER_RXWATER_SHIFT               16u\n#define LPUART_WATER_RXWATER_WIDTH               2u\n#define LPUART_WATER_RXWATER(x)                  (((uint32_t)(((uint32_t)(x))<<LPUART_WATER_RXWATER_SHIFT))&LPUART_WATER_RXWATER_MASK)\n#define LPUART_WATER_RXCOUNT_MASK                0x7000000u\n#define LPUART_WATER_RXCOUNT_SHIFT               24u\n#define LPUART_WATER_RXCOUNT_WIDTH               3u\n#define LPUART_WATER_RXCOUNT(x)                  (((uint32_t)(((uint32_t)(x))<<LPUART_WATER_RXCOUNT_SHIFT))&LPUART_WATER_RXCOUNT_MASK)\n\n/*!\n * @}\n */ /* end of group LPUART_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group LPUART_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- MCM Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup MCM_Peripheral_Access_Layer MCM Peripheral Access Layer\n * @{\n */\n\n\n/** MCM - Size of Registers Arrays */\n#define MCM_LMDR_COUNT                           2u\n\n/** MCM - Register Layout Typedef */\ntypedef struct {\n       uint8_t RESERVED_0[8];\n  __I  uint16_t PLASC;                             /**< Crossbar Switch (AXBS) Slave Configuration, offset: 0x8 */\n  __I  uint16_t PLAMC;                             /**< Crossbar Switch (AXBS) Master Configuration, offset: 0xA */\n  __IO uint32_t CPCR;                              /**< Core Platform Control Register, offset: 0xC */\n  __IO uint32_t ISCR;                              /**< Interrupt Status and Control Register, offset: 0x10 */\n       uint8_t RESERVED_1[28];\n  __IO uint32_t PID;                               /**< Process ID Register, offset: 0x30 */\n       uint8_t RESERVED_2[12];\n  __IO uint32_t CPO;                               /**< Compute Operation Control Register, offset: 0x40 */\n       uint8_t RESERVED_3[956];\n  __IO uint32_t LMDR[MCM_LMDR_COUNT];              /**< Local Memory Descriptor Register, array offset: 0x400, array step: 0x4 */\n  __IO uint32_t LMDR2;                             /**< Local Memory Descriptor Register2, offset: 0x408 */\n       uint8_t RESERVED_4[116];\n  __IO uint32_t LMPECR;                            /**< LMEM Parity and ECC Control Register, offset: 0x480 */\n       uint8_t RESERVED_5[4];\n  __IO uint32_t LMPEIR;                            /**< LMEM Parity and ECC Interrupt Register, offset: 0x488 */\n       uint8_t RESERVED_6[4];\n  __I  uint32_t LMFAR;                             /**< LMEM Fault Address Register, offset: 0x490 */\n  __I  uint32_t LMFATR;                            /**< LMEM Fault Attribute Register, offset: 0x494 */\n       uint8_t RESERVED_7[8];\n  __I  uint32_t LMFDHR;                            /**< LMEM Fault Data High Register, offset: 0x4A0 */\n  __I  uint32_t LMFDLR;                            /**< LMEM Fault Data Low Register, offset: 0x4A4 */\n} MCM_Type, *MCM_MemMapPtr;\n\n /** Number of instances of the MCM module. */\n#define MCM_INSTANCE_COUNT                       (1u)\n\n\n/* MCM - Peripheral instance base addresses */\n/** Peripheral MCM base address */\n#define MCM_BASE                                 (0xE0080000u)\n/** Peripheral MCM base pointer */\n#define MCM                                      ((MCM_Type *)MCM_BASE)\n/** Array initializer of MCM peripheral base addresses */\n#define MCM_BASE_ADDRS                           { MCM_BASE }\n/** Array initializer of MCM peripheral base pointers */\n#define MCM_BASE_PTRS                            { MCM }\n /** Number of interrupt vector arrays for the MCM module. */\n#define MCM_IRQS_ARR_COUNT                       (1u)\n /** Number of interrupt channels for the MCM module. */\n#define MCM_IRQS_CH_COUNT                        (1u)\n/** Interrupt vectors for the MCM peripheral type */\n#define MCM_IRQS                                 { MCM_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- MCM Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup MCM_Register_Masks MCM Register Masks\n * @{\n */\n\n/* PLASC Bit Fields */\n#define MCM_PLASC_ASC_MASK                       0xFFu\n#define MCM_PLASC_ASC_SHIFT                      0u\n#define MCM_PLASC_ASC_WIDTH                      8u\n#define MCM_PLASC_ASC(x)                         (((uint16_t)(((uint16_t)(x))<<MCM_PLASC_ASC_SHIFT))&MCM_PLASC_ASC_MASK)\n/* PLAMC Bit Fields */\n#define MCM_PLAMC_AMC_MASK                       0xFFu\n#define MCM_PLAMC_AMC_SHIFT                      0u\n#define MCM_PLAMC_AMC_WIDTH                      8u\n#define MCM_PLAMC_AMC(x)                         (((uint16_t)(((uint16_t)(x))<<MCM_PLAMC_AMC_SHIFT))&MCM_PLAMC_AMC_MASK)\n/* CPCR Bit Fields */\n#define MCM_CPCR_HLT_FSM_ST_MASK                 0x3u\n#define MCM_CPCR_HLT_FSM_ST_SHIFT                0u\n#define MCM_CPCR_HLT_FSM_ST_WIDTH                2u\n#define MCM_CPCR_HLT_FSM_ST(x)                   (((uint32_t)(((uint32_t)(x))<<MCM_CPCR_HLT_FSM_ST_SHIFT))&MCM_CPCR_HLT_FSM_ST_MASK)\n#define MCM_CPCR_AXBS_HLT_REQ_MASK               0x4u\n#define MCM_CPCR_AXBS_HLT_REQ_SHIFT              2u\n#define MCM_CPCR_AXBS_HLT_REQ_WIDTH              1u\n#define MCM_CPCR_AXBS_HLT_REQ(x)                 (((uint32_t)(((uint32_t)(x))<<MCM_CPCR_AXBS_HLT_REQ_SHIFT))&MCM_CPCR_AXBS_HLT_REQ_MASK)\n#define MCM_CPCR_AXBS_HLTD_MASK                  0x8u\n#define MCM_CPCR_AXBS_HLTD_SHIFT                 3u\n#define MCM_CPCR_AXBS_HLTD_WIDTH                 1u\n#define MCM_CPCR_AXBS_HLTD(x)                    (((uint32_t)(((uint32_t)(x))<<MCM_CPCR_AXBS_HLTD_SHIFT))&MCM_CPCR_AXBS_HLTD_MASK)\n#define MCM_CPCR_FMC_PF_IDLE_MASK                0x10u\n#define MCM_CPCR_FMC_PF_IDLE_SHIFT               4u\n#define MCM_CPCR_FMC_PF_IDLE_WIDTH               1u\n#define MCM_CPCR_FMC_PF_IDLE(x)                  (((uint32_t)(((uint32_t)(x))<<MCM_CPCR_FMC_PF_IDLE_SHIFT))&MCM_CPCR_FMC_PF_IDLE_MASK)\n#define MCM_CPCR_PBRIDGE_IDLE_MASK               0x40u\n#define MCM_CPCR_PBRIDGE_IDLE_SHIFT              6u\n#define MCM_CPCR_PBRIDGE_IDLE_WIDTH              1u\n#define MCM_CPCR_PBRIDGE_IDLE(x)                 (((uint32_t)(((uint32_t)(x))<<MCM_CPCR_PBRIDGE_IDLE_SHIFT))&MCM_CPCR_PBRIDGE_IDLE_MASK)\n#define MCM_CPCR_CBRR_MASK                       0x200u\n#define MCM_CPCR_CBRR_SHIFT                      9u\n#define MCM_CPCR_CBRR_WIDTH                      1u\n#define MCM_CPCR_CBRR(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_CPCR_CBRR_SHIFT))&MCM_CPCR_CBRR_MASK)\n#define MCM_CPCR_SRAMUAP_MASK                    0x3000000u\n#define MCM_CPCR_SRAMUAP_SHIFT                   24u\n#define MCM_CPCR_SRAMUAP_WIDTH                   2u\n#define MCM_CPCR_SRAMUAP(x)                      (((uint32_t)(((uint32_t)(x))<<MCM_CPCR_SRAMUAP_SHIFT))&MCM_CPCR_SRAMUAP_MASK)\n#define MCM_CPCR_SRAMUWP_MASK                    0x4000000u\n#define MCM_CPCR_SRAMUWP_SHIFT                   26u\n#define MCM_CPCR_SRAMUWP_WIDTH                   1u\n#define MCM_CPCR_SRAMUWP(x)                      (((uint32_t)(((uint32_t)(x))<<MCM_CPCR_SRAMUWP_SHIFT))&MCM_CPCR_SRAMUWP_MASK)\n#define MCM_CPCR_SRAMLAP_MASK                    0x30000000u\n#define MCM_CPCR_SRAMLAP_SHIFT                   28u\n#define MCM_CPCR_SRAMLAP_WIDTH                   2u\n#define MCM_CPCR_SRAMLAP(x)                      (((uint32_t)(((uint32_t)(x))<<MCM_CPCR_SRAMLAP_SHIFT))&MCM_CPCR_SRAMLAP_MASK)\n#define MCM_CPCR_SRAMLWP_MASK                    0x40000000u\n#define MCM_CPCR_SRAMLWP_SHIFT                   30u\n#define MCM_CPCR_SRAMLWP_WIDTH                   1u\n#define MCM_CPCR_SRAMLWP(x)                      (((uint32_t)(((uint32_t)(x))<<MCM_CPCR_SRAMLWP_SHIFT))&MCM_CPCR_SRAMLWP_MASK)\n/* ISCR Bit Fields */\n#define MCM_ISCR_FIOC_MASK                       0x100u\n#define MCM_ISCR_FIOC_SHIFT                      8u\n#define MCM_ISCR_FIOC_WIDTH                      1u\n#define MCM_ISCR_FIOC(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_ISCR_FIOC_SHIFT))&MCM_ISCR_FIOC_MASK)\n#define MCM_ISCR_FDZC_MASK                       0x200u\n#define MCM_ISCR_FDZC_SHIFT                      9u\n#define MCM_ISCR_FDZC_WIDTH                      1u\n#define MCM_ISCR_FDZC(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_ISCR_FDZC_SHIFT))&MCM_ISCR_FDZC_MASK)\n#define MCM_ISCR_FOFC_MASK                       0x400u\n#define MCM_ISCR_FOFC_SHIFT                      10u\n#define MCM_ISCR_FOFC_WIDTH                      1u\n#define MCM_ISCR_FOFC(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_ISCR_FOFC_SHIFT))&MCM_ISCR_FOFC_MASK)\n#define MCM_ISCR_FUFC_MASK                       0x800u\n#define MCM_ISCR_FUFC_SHIFT                      11u\n#define MCM_ISCR_FUFC_WIDTH                      1u\n#define MCM_ISCR_FUFC(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_ISCR_FUFC_SHIFT))&MCM_ISCR_FUFC_MASK)\n#define MCM_ISCR_FIXC_MASK                       0x1000u\n#define MCM_ISCR_FIXC_SHIFT                      12u\n#define MCM_ISCR_FIXC_WIDTH                      1u\n#define MCM_ISCR_FIXC(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_ISCR_FIXC_SHIFT))&MCM_ISCR_FIXC_MASK)\n#define MCM_ISCR_FIDC_MASK                       0x8000u\n#define MCM_ISCR_FIDC_SHIFT                      15u\n#define MCM_ISCR_FIDC_WIDTH                      1u\n#define MCM_ISCR_FIDC(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_ISCR_FIDC_SHIFT))&MCM_ISCR_FIDC_MASK)\n#define MCM_ISCR_FIOCE_MASK                      0x1000000u\n#define MCM_ISCR_FIOCE_SHIFT                     24u\n#define MCM_ISCR_FIOCE_WIDTH                     1u\n#define MCM_ISCR_FIOCE(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_ISCR_FIOCE_SHIFT))&MCM_ISCR_FIOCE_MASK)\n#define MCM_ISCR_FDZCE_MASK                      0x2000000u\n#define MCM_ISCR_FDZCE_SHIFT                     25u\n#define MCM_ISCR_FDZCE_WIDTH                     1u\n#define MCM_ISCR_FDZCE(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_ISCR_FDZCE_SHIFT))&MCM_ISCR_FDZCE_MASK)\n#define MCM_ISCR_FOFCE_MASK                      0x4000000u\n#define MCM_ISCR_FOFCE_SHIFT                     26u\n#define MCM_ISCR_FOFCE_WIDTH                     1u\n#define MCM_ISCR_FOFCE(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_ISCR_FOFCE_SHIFT))&MCM_ISCR_FOFCE_MASK)\n#define MCM_ISCR_FUFCE_MASK                      0x8000000u\n#define MCM_ISCR_FUFCE_SHIFT                     27u\n#define MCM_ISCR_FUFCE_WIDTH                     1u\n#define MCM_ISCR_FUFCE(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_ISCR_FUFCE_SHIFT))&MCM_ISCR_FUFCE_MASK)\n#define MCM_ISCR_FIXCE_MASK                      0x10000000u\n#define MCM_ISCR_FIXCE_SHIFT                     28u\n#define MCM_ISCR_FIXCE_WIDTH                     1u\n#define MCM_ISCR_FIXCE(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_ISCR_FIXCE_SHIFT))&MCM_ISCR_FIXCE_MASK)\n#define MCM_ISCR_FIDCE_MASK                      0x80000000u\n#define MCM_ISCR_FIDCE_SHIFT                     31u\n#define MCM_ISCR_FIDCE_WIDTH                     1u\n#define MCM_ISCR_FIDCE(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_ISCR_FIDCE_SHIFT))&MCM_ISCR_FIDCE_MASK)\n/* PID Bit Fields */\n#define MCM_PID_PID_MASK                         0xFFu\n#define MCM_PID_PID_SHIFT                        0u\n#define MCM_PID_PID_WIDTH                        8u\n#define MCM_PID_PID(x)                           (((uint32_t)(((uint32_t)(x))<<MCM_PID_PID_SHIFT))&MCM_PID_PID_MASK)\n/* CPO Bit Fields */\n#define MCM_CPO_CPOREQ_MASK                      0x1u\n#define MCM_CPO_CPOREQ_SHIFT                     0u\n#define MCM_CPO_CPOREQ_WIDTH                     1u\n#define MCM_CPO_CPOREQ(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_CPO_CPOREQ_SHIFT))&MCM_CPO_CPOREQ_MASK)\n#define MCM_CPO_CPOACK_MASK                      0x2u\n#define MCM_CPO_CPOACK_SHIFT                     1u\n#define MCM_CPO_CPOACK_WIDTH                     1u\n#define MCM_CPO_CPOACK(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_CPO_CPOACK_SHIFT))&MCM_CPO_CPOACK_MASK)\n#define MCM_CPO_CPOWOI_MASK                      0x4u\n#define MCM_CPO_CPOWOI_SHIFT                     2u\n#define MCM_CPO_CPOWOI_WIDTH                     1u\n#define MCM_CPO_CPOWOI(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_CPO_CPOWOI_SHIFT))&MCM_CPO_CPOWOI_MASK)\n/* LMDR Bit Fields */\n#define MCM_LMDR_CF0_MASK                        0xFu\n#define MCM_LMDR_CF0_SHIFT                       0u\n#define MCM_LMDR_CF0_WIDTH                       4u\n#define MCM_LMDR_CF0(x)                          (((uint32_t)(((uint32_t)(x))<<MCM_LMDR_CF0_SHIFT))&MCM_LMDR_CF0_MASK)\n#define MCM_LMDR_MT_MASK                         0xE000u\n#define MCM_LMDR_MT_SHIFT                        13u\n#define MCM_LMDR_MT_WIDTH                        3u\n#define MCM_LMDR_MT(x)                           (((uint32_t)(((uint32_t)(x))<<MCM_LMDR_MT_SHIFT))&MCM_LMDR_MT_MASK)\n#define MCM_LMDR_LOCK_MASK                       0x10000u\n#define MCM_LMDR_LOCK_SHIFT                      16u\n#define MCM_LMDR_LOCK_WIDTH                      1u\n#define MCM_LMDR_LOCK(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_LMDR_LOCK_SHIFT))&MCM_LMDR_LOCK_MASK)\n#define MCM_LMDR_DPW_MASK                        0xE0000u\n#define MCM_LMDR_DPW_SHIFT                       17u\n#define MCM_LMDR_DPW_WIDTH                       3u\n#define MCM_LMDR_DPW(x)                          (((uint32_t)(((uint32_t)(x))<<MCM_LMDR_DPW_SHIFT))&MCM_LMDR_DPW_MASK)\n#define MCM_LMDR_WY_MASK                         0xF00000u\n#define MCM_LMDR_WY_SHIFT                        20u\n#define MCM_LMDR_WY_WIDTH                        4u\n#define MCM_LMDR_WY(x)                           (((uint32_t)(((uint32_t)(x))<<MCM_LMDR_WY_SHIFT))&MCM_LMDR_WY_MASK)\n#define MCM_LMDR_LMSZ_MASK                       0xF000000u\n#define MCM_LMDR_LMSZ_SHIFT                      24u\n#define MCM_LMDR_LMSZ_WIDTH                      4u\n#define MCM_LMDR_LMSZ(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_LMDR_LMSZ_SHIFT))&MCM_LMDR_LMSZ_MASK)\n#define MCM_LMDR_LMSZH_MASK                      0x10000000u\n#define MCM_LMDR_LMSZH_SHIFT                     28u\n#define MCM_LMDR_LMSZH_WIDTH                     1u\n#define MCM_LMDR_LMSZH(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_LMDR_LMSZH_SHIFT))&MCM_LMDR_LMSZH_MASK)\n#define MCM_LMDR_V_MASK                          0x80000000u\n#define MCM_LMDR_V_SHIFT                         31u\n#define MCM_LMDR_V_WIDTH                         1u\n#define MCM_LMDR_V(x)                            (((uint32_t)(((uint32_t)(x))<<MCM_LMDR_V_SHIFT))&MCM_LMDR_V_MASK)\n/* LMDR2 Bit Fields */\n#define MCM_LMDR2_CF1_MASK                       0xF0u\n#define MCM_LMDR2_CF1_SHIFT                      4u\n#define MCM_LMDR2_CF1_WIDTH                      4u\n#define MCM_LMDR2_CF1(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_LMDR2_CF1_SHIFT))&MCM_LMDR2_CF1_MASK)\n#define MCM_LMDR2_MT_MASK                        0xE000u\n#define MCM_LMDR2_MT_SHIFT                       13u\n#define MCM_LMDR2_MT_WIDTH                       3u\n#define MCM_LMDR2_MT(x)                          (((uint32_t)(((uint32_t)(x))<<MCM_LMDR2_MT_SHIFT))&MCM_LMDR2_MT_MASK)\n#define MCM_LMDR2_LOCK_MASK                      0x10000u\n#define MCM_LMDR2_LOCK_SHIFT                     16u\n#define MCM_LMDR2_LOCK_WIDTH                     1u\n#define MCM_LMDR2_LOCK(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_LMDR2_LOCK_SHIFT))&MCM_LMDR2_LOCK_MASK)\n#define MCM_LMDR2_DPW_MASK                       0xE0000u\n#define MCM_LMDR2_DPW_SHIFT                      17u\n#define MCM_LMDR2_DPW_WIDTH                      3u\n#define MCM_LMDR2_DPW(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_LMDR2_DPW_SHIFT))&MCM_LMDR2_DPW_MASK)\n#define MCM_LMDR2_WY_MASK                        0xF00000u\n#define MCM_LMDR2_WY_SHIFT                       20u\n#define MCM_LMDR2_WY_WIDTH                       4u\n#define MCM_LMDR2_WY(x)                          (((uint32_t)(((uint32_t)(x))<<MCM_LMDR2_WY_SHIFT))&MCM_LMDR2_WY_MASK)\n#define MCM_LMDR2_LMSZ_MASK                      0xF000000u\n#define MCM_LMDR2_LMSZ_SHIFT                     24u\n#define MCM_LMDR2_LMSZ_WIDTH                     4u\n#define MCM_LMDR2_LMSZ(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_LMDR2_LMSZ_SHIFT))&MCM_LMDR2_LMSZ_MASK)\n#define MCM_LMDR2_LMSZH_MASK                     0x10000000u\n#define MCM_LMDR2_LMSZH_SHIFT                    28u\n#define MCM_LMDR2_LMSZH_WIDTH                    1u\n#define MCM_LMDR2_LMSZH(x)                       (((uint32_t)(((uint32_t)(x))<<MCM_LMDR2_LMSZH_SHIFT))&MCM_LMDR2_LMSZH_MASK)\n#define MCM_LMDR2_V_MASK                         0x80000000u\n#define MCM_LMDR2_V_SHIFT                        31u\n#define MCM_LMDR2_V_WIDTH                        1u\n#define MCM_LMDR2_V(x)                           (((uint32_t)(((uint32_t)(x))<<MCM_LMDR2_V_SHIFT))&MCM_LMDR2_V_MASK)\n/* LMPECR Bit Fields */\n#define MCM_LMPECR_ERNCR_MASK                    0x1u\n#define MCM_LMPECR_ERNCR_SHIFT                   0u\n#define MCM_LMPECR_ERNCR_WIDTH                   1u\n#define MCM_LMPECR_ERNCR(x)                      (((uint32_t)(((uint32_t)(x))<<MCM_LMPECR_ERNCR_SHIFT))&MCM_LMPECR_ERNCR_MASK)\n#define MCM_LMPECR_ER1BR_MASK                    0x100u\n#define MCM_LMPECR_ER1BR_SHIFT                   8u\n#define MCM_LMPECR_ER1BR_WIDTH                   1u\n#define MCM_LMPECR_ER1BR(x)                      (((uint32_t)(((uint32_t)(x))<<MCM_LMPECR_ER1BR_SHIFT))&MCM_LMPECR_ER1BR_MASK)\n#define MCM_LMPECR_ECPR_MASK                     0x100000u\n#define MCM_LMPECR_ECPR_SHIFT                    20u\n#define MCM_LMPECR_ECPR_WIDTH                    1u\n#define MCM_LMPECR_ECPR(x)                       (((uint32_t)(((uint32_t)(x))<<MCM_LMPECR_ECPR_SHIFT))&MCM_LMPECR_ECPR_MASK)\n/* LMPEIR Bit Fields */\n#define MCM_LMPEIR_ENC_MASK                      0xFFu\n#define MCM_LMPEIR_ENC_SHIFT                     0u\n#define MCM_LMPEIR_ENC_WIDTH                     8u\n#define MCM_LMPEIR_ENC(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_LMPEIR_ENC_SHIFT))&MCM_LMPEIR_ENC_MASK)\n#define MCM_LMPEIR_E1B_MASK                      0xFF00u\n#define MCM_LMPEIR_E1B_SHIFT                     8u\n#define MCM_LMPEIR_E1B_WIDTH                     8u\n#define MCM_LMPEIR_E1B(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_LMPEIR_E1B_SHIFT))&MCM_LMPEIR_E1B_MASK)\n#define MCM_LMPEIR_PE_MASK                       0xFF0000u\n#define MCM_LMPEIR_PE_SHIFT                      16u\n#define MCM_LMPEIR_PE_WIDTH                      8u\n#define MCM_LMPEIR_PE(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_LMPEIR_PE_SHIFT))&MCM_LMPEIR_PE_MASK)\n#define MCM_LMPEIR_PEELOC_MASK                   0x1F000000u\n#define MCM_LMPEIR_PEELOC_SHIFT                  24u\n#define MCM_LMPEIR_PEELOC_WIDTH                  5u\n#define MCM_LMPEIR_PEELOC(x)                     (((uint32_t)(((uint32_t)(x))<<MCM_LMPEIR_PEELOC_SHIFT))&MCM_LMPEIR_PEELOC_MASK)\n#define MCM_LMPEIR_V_MASK                        0x80000000u\n#define MCM_LMPEIR_V_SHIFT                       31u\n#define MCM_LMPEIR_V_WIDTH                       1u\n#define MCM_LMPEIR_V(x)                          (((uint32_t)(((uint32_t)(x))<<MCM_LMPEIR_V_SHIFT))&MCM_LMPEIR_V_MASK)\n/* LMFAR Bit Fields */\n#define MCM_LMFAR_EFADD_MASK                     0xFFFFFFFFu\n#define MCM_LMFAR_EFADD_SHIFT                    0u\n#define MCM_LMFAR_EFADD_WIDTH                    32u\n#define MCM_LMFAR_EFADD(x)                       (((uint32_t)(((uint32_t)(x))<<MCM_LMFAR_EFADD_SHIFT))&MCM_LMFAR_EFADD_MASK)\n/* LMFATR Bit Fields */\n#define MCM_LMFATR_PEFPRT_MASK                   0xFu\n#define MCM_LMFATR_PEFPRT_SHIFT                  0u\n#define MCM_LMFATR_PEFPRT_WIDTH                  4u\n#define MCM_LMFATR_PEFPRT(x)                     (((uint32_t)(((uint32_t)(x))<<MCM_LMFATR_PEFPRT_SHIFT))&MCM_LMFATR_PEFPRT_MASK)\n#define MCM_LMFATR_PEFSIZE_MASK                  0x70u\n#define MCM_LMFATR_PEFSIZE_SHIFT                 4u\n#define MCM_LMFATR_PEFSIZE_WIDTH                 3u\n#define MCM_LMFATR_PEFSIZE(x)                    (((uint32_t)(((uint32_t)(x))<<MCM_LMFATR_PEFSIZE_SHIFT))&MCM_LMFATR_PEFSIZE_MASK)\n#define MCM_LMFATR_PEFW_MASK                     0x80u\n#define MCM_LMFATR_PEFW_SHIFT                    7u\n#define MCM_LMFATR_PEFW_WIDTH                    1u\n#define MCM_LMFATR_PEFW(x)                       (((uint32_t)(((uint32_t)(x))<<MCM_LMFATR_PEFW_SHIFT))&MCM_LMFATR_PEFW_MASK)\n#define MCM_LMFATR_PEFMST_MASK                   0xFF00u\n#define MCM_LMFATR_PEFMST_SHIFT                  8u\n#define MCM_LMFATR_PEFMST_WIDTH                  8u\n#define MCM_LMFATR_PEFMST(x)                     (((uint32_t)(((uint32_t)(x))<<MCM_LMFATR_PEFMST_SHIFT))&MCM_LMFATR_PEFMST_MASK)\n#define MCM_LMFATR_OVR_MASK                      0x80000000u\n#define MCM_LMFATR_OVR_SHIFT                     31u\n#define MCM_LMFATR_OVR_WIDTH                     1u\n#define MCM_LMFATR_OVR(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_LMFATR_OVR_SHIFT))&MCM_LMFATR_OVR_MASK)\n/* LMFDHR Bit Fields */\n#define MCM_LMFDHR_PEFDH_MASK                    0xFFFFFFFFu\n#define MCM_LMFDHR_PEFDH_SHIFT                   0u\n#define MCM_LMFDHR_PEFDH_WIDTH                   32u\n#define MCM_LMFDHR_PEFDH(x)                      (((uint32_t)(((uint32_t)(x))<<MCM_LMFDHR_PEFDH_SHIFT))&MCM_LMFDHR_PEFDH_MASK)\n/* LMFDLR Bit Fields */\n#define MCM_LMFDLR_PEFDL_MASK                    0xFFFFFFFFu\n#define MCM_LMFDLR_PEFDL_SHIFT                   0u\n#define MCM_LMFDLR_PEFDL_WIDTH                   32u\n#define MCM_LMFDLR_PEFDL(x)                      (((uint32_t)(((uint32_t)(x))<<MCM_LMFDLR_PEFDL_SHIFT))&MCM_LMFDLR_PEFDL_MASK)\n\n/*!\n * @}\n */ /* end of group MCM_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group MCM_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- MPU Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup MPU_Peripheral_Access_Layer MPU Peripheral Access Layer\n * @{\n */\n\n\n/** MPU - Size of Registers Arrays */\n#define MPU_EAR_EDR_COUNT                        4u\n#define MPU_RGD_COUNT                            8u\n#define MPU_RGDAAC_COUNT                         8u\n\n/** MPU - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t CESR;                              /**< Control/Error Status Register, offset: 0x0 */\n       uint8_t RESERVED_0[12];\n  struct {                                         /* offset: 0x10, array step: 0x8 */\n    __I  uint32_t EAR;                               /**< Error Address Register, slave port\n    \t\t\t\t\t\t\t0..Error Address Register, slave port\n    \t\t\t\t\t\t\t3, array offset: 0x10, array step: 0x8 */\n    __I  uint32_t EDR;                               /**< Error Detail Register, slave port\n    \t\t\t\t\t\t\t0..Error Detail Register, slave port\n    \t\t\t\t\t\t\t3, array offset: 0x14, array step: 0x8 */\n  } EAR_EDR[MPU_EAR_EDR_COUNT];\n       uint8_t RESERVED_1[976];\n  struct {                                         /* offset: 0x400, array step: 0x10 */\n    __IO uint32_t WORD0;                             /**< Region Descriptor 0, Word 0..Region Descriptor 7, Word 0, array offset: 0x400, array step: 0x10 */\n    __IO uint32_t WORD1;                             /**< Region Descriptor 0, Word 1..Region Descriptor 7, Word 1, array offset: 0x404, array step: 0x10 */\n    __IO uint32_t WORD2;                             /**< Region Descriptor 0, Word 2..Region Descriptor 7, Word 2, array offset: 0x408, array step: 0x10 */\n    __IO uint32_t WORD3;                             /**< Region Descriptor 0, Word 3..Region Descriptor 7, Word 3, array offset: 0x40C, array step: 0x10 */\n  } RGD[MPU_RGD_COUNT];\n       uint8_t RESERVED_2[896];\n  __IO uint32_t RGDAAC[MPU_RGDAAC_COUNT];          /**< Region Descriptor Alternate Access Control\n  \t\t\t\t\t\t\t0..Region Descriptor Alternate Access Control\n  \t\t\t\t\t\t\t7, array offset: 0x800, array step: 0x4 */\n} MPU_Type, *MPU_MemMapPtr;\n\n /** Number of instances of the MPU module. */\n#define MPU_INSTANCE_COUNT                       (1u)\n\n\n/* MPU - Peripheral instance base addresses */\n/** Peripheral MPU base address */\n#define MPU_BASE                                 (0x4000D000u)\n/** Peripheral MPU base pointer */\n#define MPU                                      ((MPU_Type *)MPU_BASE)\n/** Array initializer of MPU peripheral base addresses */\n#define MPU_BASE_ADDRS                           { MPU_BASE }\n/** Array initializer of MPU peripheral base pointers */\n#define MPU_BASE_PTRS                            { MPU }\n\n/* ----------------------------------------------------------------------------\n   -- MPU Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup MPU_Register_Masks MPU Register Masks\n * @{\n */\n\n/* CESR Bit Fields */\n#define MPU_CESR_VLD_MASK                        0x1u\n#define MPU_CESR_VLD_SHIFT                       0u\n#define MPU_CESR_VLD_WIDTH                       1u\n#define MPU_CESR_VLD(x)                          (((uint32_t)(((uint32_t)(x))<<MPU_CESR_VLD_SHIFT))&MPU_CESR_VLD_MASK)\n#define MPU_CESR_NRGD_MASK                       0xF00u\n#define MPU_CESR_NRGD_SHIFT                      8u\n#define MPU_CESR_NRGD_WIDTH                      4u\n#define MPU_CESR_NRGD(x)                         (((uint32_t)(((uint32_t)(x))<<MPU_CESR_NRGD_SHIFT))&MPU_CESR_NRGD_MASK)\n#define MPU_CESR_NSP_MASK                        0xF000u\n#define MPU_CESR_NSP_SHIFT                       12u\n#define MPU_CESR_NSP_WIDTH                       4u\n#define MPU_CESR_NSP(x)                          (((uint32_t)(((uint32_t)(x))<<MPU_CESR_NSP_SHIFT))&MPU_CESR_NSP_MASK)\n#define MPU_CESR_HRL_MASK                        0xF0000u\n#define MPU_CESR_HRL_SHIFT                       16u\n#define MPU_CESR_HRL_WIDTH                       4u\n#define MPU_CESR_HRL(x)                          (((uint32_t)(((uint32_t)(x))<<MPU_CESR_HRL_SHIFT))&MPU_CESR_HRL_MASK)\n#define MPU_CESR_SPERR3_MASK                     0x10000000u\n#define MPU_CESR_SPERR3_SHIFT                    28u\n#define MPU_CESR_SPERR3_WIDTH                    1u\n#define MPU_CESR_SPERR3(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_CESR_SPERR3_SHIFT))&MPU_CESR_SPERR3_MASK)\n#define MPU_CESR_SPERR2_MASK                     0x20000000u\n#define MPU_CESR_SPERR2_SHIFT                    29u\n#define MPU_CESR_SPERR2_WIDTH                    1u\n#define MPU_CESR_SPERR2(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_CESR_SPERR2_SHIFT))&MPU_CESR_SPERR2_MASK)\n#define MPU_CESR_SPERR1_MASK                     0x40000000u\n#define MPU_CESR_SPERR1_SHIFT                    30u\n#define MPU_CESR_SPERR1_WIDTH                    1u\n#define MPU_CESR_SPERR1(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_CESR_SPERR1_SHIFT))&MPU_CESR_SPERR1_MASK)\n#define MPU_CESR_SPERR0_MASK                     0x80000000u\n#define MPU_CESR_SPERR0_SHIFT                    31u\n#define MPU_CESR_SPERR0_WIDTH                    1u\n#define MPU_CESR_SPERR0(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_CESR_SPERR0_SHIFT))&MPU_CESR_SPERR0_MASK)\n/* EAR Bit Fields */\n#define MPU_EAR_EADDR_MASK                       0xFFFFFFFFu\n#define MPU_EAR_EADDR_SHIFT                      0u\n#define MPU_EAR_EADDR_WIDTH                      32u\n#define MPU_EAR_EADDR(x)                         (((uint32_t)(((uint32_t)(x))<<MPU_EAR_EADDR_SHIFT))&MPU_EAR_EADDR_MASK)\n/* EDR Bit Fields */\n#define MPU_EDR_ERW_MASK                         0x1u\n#define MPU_EDR_ERW_SHIFT                        0u\n#define MPU_EDR_ERW_WIDTH                        1u\n#define MPU_EDR_ERW(x)                           (((uint32_t)(((uint32_t)(x))<<MPU_EDR_ERW_SHIFT))&MPU_EDR_ERW_MASK)\n#define MPU_EDR_EATTR_MASK                       0xEu\n#define MPU_EDR_EATTR_SHIFT                      1u\n#define MPU_EDR_EATTR_WIDTH                      3u\n#define MPU_EDR_EATTR(x)                         (((uint32_t)(((uint32_t)(x))<<MPU_EDR_EATTR_SHIFT))&MPU_EDR_EATTR_MASK)\n#define MPU_EDR_EMN_MASK                         0xF0u\n#define MPU_EDR_EMN_SHIFT                        4u\n#define MPU_EDR_EMN_WIDTH                        4u\n#define MPU_EDR_EMN(x)                           (((uint32_t)(((uint32_t)(x))<<MPU_EDR_EMN_SHIFT))&MPU_EDR_EMN_MASK)\n#define MPU_EDR_EPID_MASK                        0xFF00u\n#define MPU_EDR_EPID_SHIFT                       8u\n#define MPU_EDR_EPID_WIDTH                       8u\n#define MPU_EDR_EPID(x)                          (((uint32_t)(((uint32_t)(x))<<MPU_EDR_EPID_SHIFT))&MPU_EDR_EPID_MASK)\n#define MPU_EDR_EACD_MASK                        0xFFFF0000u\n#define MPU_EDR_EACD_SHIFT                       16u\n#define MPU_EDR_EACD_WIDTH                       16u\n#define MPU_EDR_EACD(x)                          (((uint32_t)(((uint32_t)(x))<<MPU_EDR_EACD_SHIFT))&MPU_EDR_EACD_MASK)\n/* RGD_WORD0 Bit Fields */\n#define MPU_RGD_WORD0_SRTADDR_MASK               0xFFFFFFE0u\n#define MPU_RGD_WORD0_SRTADDR_SHIFT              5u\n#define MPU_RGD_WORD0_SRTADDR_WIDTH              27u\n#define MPU_RGD_WORD0_SRTADDR(x)                 (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD0_SRTADDR_SHIFT))&MPU_RGD_WORD0_SRTADDR_MASK)\n/* RGD_WORD1 Bit Fields */\n#define MPU_RGD_WORD1_ENDADDR_MASK               0xFFFFFFE0u\n#define MPU_RGD_WORD1_ENDADDR_SHIFT              5u\n#define MPU_RGD_WORD1_ENDADDR_WIDTH              27u\n#define MPU_RGD_WORD1_ENDADDR(x)                 (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD1_ENDADDR_SHIFT))&MPU_RGD_WORD1_ENDADDR_MASK)\n/* RGD_WORD2 Bit Fields */\n#define MPU_RGD_WORD2_M0UM_MASK                  0x7u\n#define MPU_RGD_WORD2_M0UM_SHIFT                 0u\n#define MPU_RGD_WORD2_M0UM_WIDTH                 3u\n#define MPU_RGD_WORD2_M0UM(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M0UM_SHIFT))&MPU_RGD_WORD2_M0UM_MASK)\n#define MPU_RGD_WORD2_M0SM_MASK                  0x18u\n#define MPU_RGD_WORD2_M0SM_SHIFT                 3u\n#define MPU_RGD_WORD2_M0SM_WIDTH                 2u\n#define MPU_RGD_WORD2_M0SM(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M0SM_SHIFT))&MPU_RGD_WORD2_M0SM_MASK)\n#define MPU_RGD_WORD2_M0PE_MASK                  0x20u\n#define MPU_RGD_WORD2_M0PE_SHIFT                 5u\n#define MPU_RGD_WORD2_M0PE_WIDTH                 1u\n#define MPU_RGD_WORD2_M0PE(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M0PE_SHIFT))&MPU_RGD_WORD2_M0PE_MASK)\n#define MPU_RGD_WORD2_M1UM_MASK                  0x1C0u\n#define MPU_RGD_WORD2_M1UM_SHIFT                 6u\n#define MPU_RGD_WORD2_M1UM_WIDTH                 3u\n#define MPU_RGD_WORD2_M1UM(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M1UM_SHIFT))&MPU_RGD_WORD2_M1UM_MASK)\n#define MPU_RGD_WORD2_M1SM_MASK                  0x600u\n#define MPU_RGD_WORD2_M1SM_SHIFT                 9u\n#define MPU_RGD_WORD2_M1SM_WIDTH                 2u\n#define MPU_RGD_WORD2_M1SM(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M1SM_SHIFT))&MPU_RGD_WORD2_M1SM_MASK)\n#define MPU_RGD_WORD2_M1PE_MASK                  0x800u\n#define MPU_RGD_WORD2_M1PE_SHIFT                 11u\n#define MPU_RGD_WORD2_M1PE_WIDTH                 1u\n#define MPU_RGD_WORD2_M1PE(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M1PE_SHIFT))&MPU_RGD_WORD2_M1PE_MASK)\n#define MPU_RGD_WORD2_M2UM_MASK                  0x7000u\n#define MPU_RGD_WORD2_M2UM_SHIFT                 12u\n#define MPU_RGD_WORD2_M2UM_WIDTH                 3u\n#define MPU_RGD_WORD2_M2UM(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M2UM_SHIFT))&MPU_RGD_WORD2_M2UM_MASK)\n#define MPU_RGD_WORD2_M2SM_MASK                  0x18000u\n#define MPU_RGD_WORD2_M2SM_SHIFT                 15u\n#define MPU_RGD_WORD2_M2SM_WIDTH                 2u\n#define MPU_RGD_WORD2_M2SM(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M2SM_SHIFT))&MPU_RGD_WORD2_M2SM_MASK)\n#define MPU_RGD_WORD2_M3UM_MASK                  0x1C0000u\n#define MPU_RGD_WORD2_M3UM_SHIFT                 18u\n#define MPU_RGD_WORD2_M3UM_WIDTH                 3u\n#define MPU_RGD_WORD2_M3UM(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M3UM_SHIFT))&MPU_RGD_WORD2_M3UM_MASK)\n#define MPU_RGD_WORD2_M3SM_MASK                  0x600000u\n#define MPU_RGD_WORD2_M3SM_SHIFT                 21u\n#define MPU_RGD_WORD2_M3SM_WIDTH                 2u\n#define MPU_RGD_WORD2_M3SM(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M3SM_SHIFT))&MPU_RGD_WORD2_M3SM_MASK)\n#define MPU_RGD_WORD2_M4WE_MASK                  0x1000000u\n#define MPU_RGD_WORD2_M4WE_SHIFT                 24u\n#define MPU_RGD_WORD2_M4WE_WIDTH                 1u\n#define MPU_RGD_WORD2_M4WE(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M4WE_SHIFT))&MPU_RGD_WORD2_M4WE_MASK)\n#define MPU_RGD_WORD2_M4RE_MASK                  0x2000000u\n#define MPU_RGD_WORD2_M4RE_SHIFT                 25u\n#define MPU_RGD_WORD2_M4RE_WIDTH                 1u\n#define MPU_RGD_WORD2_M4RE(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M4RE_SHIFT))&MPU_RGD_WORD2_M4RE_MASK)\n#define MPU_RGD_WORD2_M5WE_MASK                  0x4000000u\n#define MPU_RGD_WORD2_M5WE_SHIFT                 26u\n#define MPU_RGD_WORD2_M5WE_WIDTH                 1u\n#define MPU_RGD_WORD2_M5WE(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M5WE_SHIFT))&MPU_RGD_WORD2_M5WE_MASK)\n#define MPU_RGD_WORD2_M5RE_MASK                  0x8000000u\n#define MPU_RGD_WORD2_M5RE_SHIFT                 27u\n#define MPU_RGD_WORD2_M5RE_WIDTH                 1u\n#define MPU_RGD_WORD2_M5RE(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M5RE_SHIFT))&MPU_RGD_WORD2_M5RE_MASK)\n#define MPU_RGD_WORD2_M6WE_MASK                  0x10000000u\n#define MPU_RGD_WORD2_M6WE_SHIFT                 28u\n#define MPU_RGD_WORD2_M6WE_WIDTH                 1u\n#define MPU_RGD_WORD2_M6WE(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M6WE_SHIFT))&MPU_RGD_WORD2_M6WE_MASK)\n#define MPU_RGD_WORD2_M6RE_MASK                  0x20000000u\n#define MPU_RGD_WORD2_M6RE_SHIFT                 29u\n#define MPU_RGD_WORD2_M6RE_WIDTH                 1u\n#define MPU_RGD_WORD2_M6RE(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M6RE_SHIFT))&MPU_RGD_WORD2_M6RE_MASK)\n#define MPU_RGD_WORD2_M7WE_MASK                  0x40000000u\n#define MPU_RGD_WORD2_M7WE_SHIFT                 30u\n#define MPU_RGD_WORD2_M7WE_WIDTH                 1u\n#define MPU_RGD_WORD2_M7WE(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M7WE_SHIFT))&MPU_RGD_WORD2_M7WE_MASK)\n#define MPU_RGD_WORD2_M7RE_MASK                  0x80000000u\n#define MPU_RGD_WORD2_M7RE_SHIFT                 31u\n#define MPU_RGD_WORD2_M7RE_WIDTH                 1u\n#define MPU_RGD_WORD2_M7RE(x)                    (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD2_M7RE_SHIFT))&MPU_RGD_WORD2_M7RE_MASK)\n/* RGD_WORD3 Bit Fields */\n#define MPU_RGD_WORD3_VLD_MASK                   0x1u\n#define MPU_RGD_WORD3_VLD_SHIFT                  0u\n#define MPU_RGD_WORD3_VLD_WIDTH                  1u\n#define MPU_RGD_WORD3_VLD(x)                     (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD3_VLD_SHIFT))&MPU_RGD_WORD3_VLD_MASK)\n#define MPU_RGD_WORD3_PIDMASK_MASK               0xFF0000u\n#define MPU_RGD_WORD3_PIDMASK_SHIFT              16u\n#define MPU_RGD_WORD3_PIDMASK_WIDTH              8u\n#define MPU_RGD_WORD3_PIDMASK(x)                 (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD3_PIDMASK_SHIFT))&MPU_RGD_WORD3_PIDMASK_MASK)\n#define MPU_RGD_WORD3_PID_MASK                   0xFF000000u\n#define MPU_RGD_WORD3_PID_SHIFT                  24u\n#define MPU_RGD_WORD3_PID_WIDTH                  8u\n#define MPU_RGD_WORD3_PID(x)                     (((uint32_t)(((uint32_t)(x))<<MPU_RGD_WORD3_PID_SHIFT))&MPU_RGD_WORD3_PID_MASK)\n/* RGDAAC Bit Fields */\n#define MPU_RGDAAC_M0UM_MASK                     0x7u\n#define MPU_RGDAAC_M0UM_SHIFT                    0u\n#define MPU_RGDAAC_M0UM_WIDTH                    3u\n#define MPU_RGDAAC_M0UM(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M0UM_SHIFT))&MPU_RGDAAC_M0UM_MASK)\n#define MPU_RGDAAC_M0SM_MASK                     0x18u\n#define MPU_RGDAAC_M0SM_SHIFT                    3u\n#define MPU_RGDAAC_M0SM_WIDTH                    2u\n#define MPU_RGDAAC_M0SM(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M0SM_SHIFT))&MPU_RGDAAC_M0SM_MASK)\n#define MPU_RGDAAC_M0PE_MASK                     0x20u\n#define MPU_RGDAAC_M0PE_SHIFT                    5u\n#define MPU_RGDAAC_M0PE_WIDTH                    1u\n#define MPU_RGDAAC_M0PE(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M0PE_SHIFT))&MPU_RGDAAC_M0PE_MASK)\n#define MPU_RGDAAC_M1UM_MASK                     0x1C0u\n#define MPU_RGDAAC_M1UM_SHIFT                    6u\n#define MPU_RGDAAC_M1UM_WIDTH                    3u\n#define MPU_RGDAAC_M1UM(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M1UM_SHIFT))&MPU_RGDAAC_M1UM_MASK)\n#define MPU_RGDAAC_M1SM_MASK                     0x600u\n#define MPU_RGDAAC_M1SM_SHIFT                    9u\n#define MPU_RGDAAC_M1SM_WIDTH                    2u\n#define MPU_RGDAAC_M1SM(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M1SM_SHIFT))&MPU_RGDAAC_M1SM_MASK)\n#define MPU_RGDAAC_M1PE_MASK                     0x800u\n#define MPU_RGDAAC_M1PE_SHIFT                    11u\n#define MPU_RGDAAC_M1PE_WIDTH                    1u\n#define MPU_RGDAAC_M1PE(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M1PE_SHIFT))&MPU_RGDAAC_M1PE_MASK)\n#define MPU_RGDAAC_M2UM_MASK                     0x7000u\n#define MPU_RGDAAC_M2UM_SHIFT                    12u\n#define MPU_RGDAAC_M2UM_WIDTH                    3u\n#define MPU_RGDAAC_M2UM(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M2UM_SHIFT))&MPU_RGDAAC_M2UM_MASK)\n#define MPU_RGDAAC_M2SM_MASK                     0x18000u\n#define MPU_RGDAAC_M2SM_SHIFT                    15u\n#define MPU_RGDAAC_M2SM_WIDTH                    2u\n#define MPU_RGDAAC_M2SM(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M2SM_SHIFT))&MPU_RGDAAC_M2SM_MASK)\n#define MPU_RGDAAC_M3UM_MASK                     0x1C0000u\n#define MPU_RGDAAC_M3UM_SHIFT                    18u\n#define MPU_RGDAAC_M3UM_WIDTH                    3u\n#define MPU_RGDAAC_M3UM(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M3UM_SHIFT))&MPU_RGDAAC_M3UM_MASK)\n#define MPU_RGDAAC_M3SM_MASK                     0x600000u\n#define MPU_RGDAAC_M3SM_SHIFT                    21u\n#define MPU_RGDAAC_M3SM_WIDTH                    2u\n#define MPU_RGDAAC_M3SM(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M3SM_SHIFT))&MPU_RGDAAC_M3SM_MASK)\n#define MPU_RGDAAC_M4WE_MASK                     0x1000000u\n#define MPU_RGDAAC_M4WE_SHIFT                    24u\n#define MPU_RGDAAC_M4WE_WIDTH                    1u\n#define MPU_RGDAAC_M4WE(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M4WE_SHIFT))&MPU_RGDAAC_M4WE_MASK)\n#define MPU_RGDAAC_M4RE_MASK                     0x2000000u\n#define MPU_RGDAAC_M4RE_SHIFT                    25u\n#define MPU_RGDAAC_M4RE_WIDTH                    1u\n#define MPU_RGDAAC_M4RE(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M4RE_SHIFT))&MPU_RGDAAC_M4RE_MASK)\n#define MPU_RGDAAC_M5WE_MASK                     0x4000000u\n#define MPU_RGDAAC_M5WE_SHIFT                    26u\n#define MPU_RGDAAC_M5WE_WIDTH                    1u\n#define MPU_RGDAAC_M5WE(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M5WE_SHIFT))&MPU_RGDAAC_M5WE_MASK)\n#define MPU_RGDAAC_M5RE_MASK                     0x8000000u\n#define MPU_RGDAAC_M5RE_SHIFT                    27u\n#define MPU_RGDAAC_M5RE_WIDTH                    1u\n#define MPU_RGDAAC_M5RE(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M5RE_SHIFT))&MPU_RGDAAC_M5RE_MASK)\n#define MPU_RGDAAC_M6WE_MASK                     0x10000000u\n#define MPU_RGDAAC_M6WE_SHIFT                    28u\n#define MPU_RGDAAC_M6WE_WIDTH                    1u\n#define MPU_RGDAAC_M6WE(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M6WE_SHIFT))&MPU_RGDAAC_M6WE_MASK)\n#define MPU_RGDAAC_M6RE_MASK                     0x20000000u\n#define MPU_RGDAAC_M6RE_SHIFT                    29u\n#define MPU_RGDAAC_M6RE_WIDTH                    1u\n#define MPU_RGDAAC_M6RE(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M6RE_SHIFT))&MPU_RGDAAC_M6RE_MASK)\n#define MPU_RGDAAC_M7WE_MASK                     0x40000000u\n#define MPU_RGDAAC_M7WE_SHIFT                    30u\n#define MPU_RGDAAC_M7WE_WIDTH                    1u\n#define MPU_RGDAAC_M7WE(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M7WE_SHIFT))&MPU_RGDAAC_M7WE_MASK)\n#define MPU_RGDAAC_M7RE_MASK                     0x80000000u\n#define MPU_RGDAAC_M7RE_SHIFT                    31u\n#define MPU_RGDAAC_M7RE_WIDTH                    1u\n#define MPU_RGDAAC_M7RE(x)                       (((uint32_t)(((uint32_t)(x))<<MPU_RGDAAC_M7RE_SHIFT))&MPU_RGDAAC_M7RE_MASK)\n\n/*!\n * @}\n */ /* end of group MPU_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group MPU_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- MSCM Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup MSCM_Peripheral_Access_Layer MSCM Peripheral Access Layer\n * @{\n */\n\n\n/** MSCM - Size of Registers Arrays */\n#define MSCM_OCMDR_COUNT                         3u\n\n/** MSCM - Register Layout Typedef */\ntypedef struct {\n  __I  uint32_t CPxTYPE;                           /**< Processor X Type Register, offset: 0x0 */\n  __I  uint32_t CPxNUM;                            /**< Processor X Number Register, offset: 0x4 */\n  __I  uint32_t CPxMASTER;                         /**< Processor X Master Register, offset: 0x8 */\n  __I  uint32_t CPxCOUNT;                          /**< Processor X Count Register, offset: 0xC */\n  __I  uint32_t CPxCFG0;                           /**< Processor X Configuration Register 0, offset: 0x10 */\n  __I  uint32_t CPxCFG1;                           /**< Processor X Configuration Register 1, offset: 0x14 */\n  __I  uint32_t CPxCFG2;                           /**< Processor X Configuration Register 2, offset: 0x18 */\n  __I  uint32_t CPxCFG3;                           /**< Processor X Configuration Register 3, offset: 0x1C */\n  __I  uint32_t CP0TYPE;                           /**< Processor 0 Type Register, offset: 0x20 */\n  __I  uint32_t CP0NUM;                            /**< Processor 0 Number Register, offset: 0x24 */\n  __I  uint32_t CP0MASTER;                         /**< Processor 0 Master Register, offset: 0x28 */\n  __I  uint32_t CP0COUNT;                          /**< Processor 0 Count Register, offset: 0x2C */\n  __I  uint32_t CP0CFG0;                           /**< Processor 0 Configuration Register 0, offset: 0x30 */\n  __I  uint32_t CP0CFG1;                           /**< Processor 0 Configuration Register 1, offset: 0x34 */\n  __I  uint32_t CP0CFG2;                           /**< Processor 0 Configuration Register 2, offset: 0x38 */\n  __I  uint32_t CP0CFG3;                           /**< Processor 0 Configuration Register 3, offset: 0x3C */\n       uint8_t RESERVED_0[960];\n  __IO uint32_t OCMDR[MSCM_OCMDR_COUNT];           /**< On-Chip Memory Descriptor Register, array offset: 0x400, array step: 0x4 */\n} MSCM_Type, *MSCM_MemMapPtr;\n\n /** Number of instances of the MSCM module. */\n#define MSCM_INSTANCE_COUNT                      (1u)\n\n\n/* MSCM - Peripheral instance base addresses */\n/** Peripheral MSCM base address */\n#define MSCM_BASE                                (0x40001000u)\n/** Peripheral MSCM base pointer */\n#define MSCM                                     ((MSCM_Type *)MSCM_BASE)\n/** Array initializer of MSCM peripheral base addresses */\n#define MSCM_BASE_ADDRS                          { MSCM_BASE }\n/** Array initializer of MSCM peripheral base pointers */\n#define MSCM_BASE_PTRS                           { MSCM }\n\n/* ----------------------------------------------------------------------------\n   -- MSCM Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup MSCM_Register_Masks MSCM Register Masks\n * @{\n */\n\n/* CPxTYPE Bit Fields */\n#define MSCM_CPxTYPE_RYPZ_MASK                   0xFFu\n#define MSCM_CPxTYPE_RYPZ_SHIFT                  0u\n#define MSCM_CPxTYPE_RYPZ_WIDTH                  8u\n#define MSCM_CPxTYPE_RYPZ(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CPxTYPE_RYPZ_SHIFT))&MSCM_CPxTYPE_RYPZ_MASK)\n#define MSCM_CPxTYPE_PERSONALITY_MASK            0xFFFFFF00u\n#define MSCM_CPxTYPE_PERSONALITY_SHIFT           8u\n#define MSCM_CPxTYPE_PERSONALITY_WIDTH           24u\n#define MSCM_CPxTYPE_PERSONALITY(x)              (((uint32_t)(((uint32_t)(x))<<MSCM_CPxTYPE_PERSONALITY_SHIFT))&MSCM_CPxTYPE_PERSONALITY_MASK)\n/* CPxNUM Bit Fields */\n#define MSCM_CPxNUM_CPN_MASK                     0x1u\n#define MSCM_CPxNUM_CPN_SHIFT                    0u\n#define MSCM_CPxNUM_CPN_WIDTH                    1u\n#define MSCM_CPxNUM_CPN(x)                       (((uint32_t)(((uint32_t)(x))<<MSCM_CPxNUM_CPN_SHIFT))&MSCM_CPxNUM_CPN_MASK)\n/* CPxMASTER Bit Fields */\n#define MSCM_CPxMASTER_PPMN_MASK                 0x3Fu\n#define MSCM_CPxMASTER_PPMN_SHIFT                0u\n#define MSCM_CPxMASTER_PPMN_WIDTH                6u\n#define MSCM_CPxMASTER_PPMN(x)                   (((uint32_t)(((uint32_t)(x))<<MSCM_CPxMASTER_PPMN_SHIFT))&MSCM_CPxMASTER_PPMN_MASK)\n/* CPxCOUNT Bit Fields */\n#define MSCM_CPxCOUNT_PCNT_MASK                  0x3u\n#define MSCM_CPxCOUNT_PCNT_SHIFT                 0u\n#define MSCM_CPxCOUNT_PCNT_WIDTH                 2u\n#define MSCM_CPxCOUNT_PCNT(x)                    (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCOUNT_PCNT_SHIFT))&MSCM_CPxCOUNT_PCNT_MASK)\n/* CPxCFG0 Bit Fields */\n#define MSCM_CPxCFG0_DCWY_MASK                   0xFFu\n#define MSCM_CPxCFG0_DCWY_SHIFT                  0u\n#define MSCM_CPxCFG0_DCWY_WIDTH                  8u\n#define MSCM_CPxCFG0_DCWY(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG0_DCWY_SHIFT))&MSCM_CPxCFG0_DCWY_MASK)\n#define MSCM_CPxCFG0_DCSZ_MASK                   0xFF00u\n#define MSCM_CPxCFG0_DCSZ_SHIFT                  8u\n#define MSCM_CPxCFG0_DCSZ_WIDTH                  8u\n#define MSCM_CPxCFG0_DCSZ(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG0_DCSZ_SHIFT))&MSCM_CPxCFG0_DCSZ_MASK)\n#define MSCM_CPxCFG0_ICWY_MASK                   0xFF0000u\n#define MSCM_CPxCFG0_ICWY_SHIFT                  16u\n#define MSCM_CPxCFG0_ICWY_WIDTH                  8u\n#define MSCM_CPxCFG0_ICWY(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG0_ICWY_SHIFT))&MSCM_CPxCFG0_ICWY_MASK)\n#define MSCM_CPxCFG0_ICSZ_MASK                   0xFF000000u\n#define MSCM_CPxCFG0_ICSZ_SHIFT                  24u\n#define MSCM_CPxCFG0_ICSZ_WIDTH                  8u\n#define MSCM_CPxCFG0_ICSZ(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG0_ICSZ_SHIFT))&MSCM_CPxCFG0_ICSZ_MASK)\n/* CPxCFG1 Bit Fields */\n#define MSCM_CPxCFG1_L2WY_MASK                   0xFF0000u\n#define MSCM_CPxCFG1_L2WY_SHIFT                  16u\n#define MSCM_CPxCFG1_L2WY_WIDTH                  8u\n#define MSCM_CPxCFG1_L2WY(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG1_L2WY_SHIFT))&MSCM_CPxCFG1_L2WY_MASK)\n#define MSCM_CPxCFG1_L2SZ_MASK                   0xFF000000u\n#define MSCM_CPxCFG1_L2SZ_SHIFT                  24u\n#define MSCM_CPxCFG1_L2SZ_WIDTH                  8u\n#define MSCM_CPxCFG1_L2SZ(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG1_L2SZ_SHIFT))&MSCM_CPxCFG1_L2SZ_MASK)\n/* CPxCFG2 Bit Fields */\n#define MSCM_CPxCFG2_TMUSZ_MASK                  0xFF00u\n#define MSCM_CPxCFG2_TMUSZ_SHIFT                 8u\n#define MSCM_CPxCFG2_TMUSZ_WIDTH                 8u\n#define MSCM_CPxCFG2_TMUSZ(x)                    (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG2_TMUSZ_SHIFT))&MSCM_CPxCFG2_TMUSZ_MASK)\n#define MSCM_CPxCFG2_TMLSZ_MASK                  0xFF000000u\n#define MSCM_CPxCFG2_TMLSZ_SHIFT                 24u\n#define MSCM_CPxCFG2_TMLSZ_WIDTH                 8u\n#define MSCM_CPxCFG2_TMLSZ(x)                    (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG2_TMLSZ_SHIFT))&MSCM_CPxCFG2_TMLSZ_MASK)\n/* CPxCFG3 Bit Fields */\n#define MSCM_CPxCFG3_FPU_MASK                    0x1u\n#define MSCM_CPxCFG3_FPU_SHIFT                   0u\n#define MSCM_CPxCFG3_FPU_WIDTH                   1u\n#define MSCM_CPxCFG3_FPU(x)                      (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG3_FPU_SHIFT))&MSCM_CPxCFG3_FPU_MASK)\n#define MSCM_CPxCFG3_SIMD_MASK                   0x2u\n#define MSCM_CPxCFG3_SIMD_SHIFT                  1u\n#define MSCM_CPxCFG3_SIMD_WIDTH                  1u\n#define MSCM_CPxCFG3_SIMD(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG3_SIMD_SHIFT))&MSCM_CPxCFG3_SIMD_MASK)\n#define MSCM_CPxCFG3_JAZ_MASK                    0x4u\n#define MSCM_CPxCFG3_JAZ_SHIFT                   2u\n#define MSCM_CPxCFG3_JAZ_WIDTH                   1u\n#define MSCM_CPxCFG3_JAZ(x)                      (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG3_JAZ_SHIFT))&MSCM_CPxCFG3_JAZ_MASK)\n#define MSCM_CPxCFG3_MMU_MASK                    0x8u\n#define MSCM_CPxCFG3_MMU_SHIFT                   3u\n#define MSCM_CPxCFG3_MMU_WIDTH                   1u\n#define MSCM_CPxCFG3_MMU(x)                      (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG3_MMU_SHIFT))&MSCM_CPxCFG3_MMU_MASK)\n#define MSCM_CPxCFG3_TZ_MASK                     0x10u\n#define MSCM_CPxCFG3_TZ_SHIFT                    4u\n#define MSCM_CPxCFG3_TZ_WIDTH                    1u\n#define MSCM_CPxCFG3_TZ(x)                       (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG3_TZ_SHIFT))&MSCM_CPxCFG3_TZ_MASK)\n#define MSCM_CPxCFG3_CMP_MASK                    0x20u\n#define MSCM_CPxCFG3_CMP_SHIFT                   5u\n#define MSCM_CPxCFG3_CMP_WIDTH                   1u\n#define MSCM_CPxCFG3_CMP(x)                      (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG3_CMP_SHIFT))&MSCM_CPxCFG3_CMP_MASK)\n#define MSCM_CPxCFG3_BB_MASK                     0x40u\n#define MSCM_CPxCFG3_BB_SHIFT                    6u\n#define MSCM_CPxCFG3_BB_WIDTH                    1u\n#define MSCM_CPxCFG3_BB(x)                       (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG3_BB_SHIFT))&MSCM_CPxCFG3_BB_MASK)\n#define MSCM_CPxCFG3_SBP_MASK                    0x300u\n#define MSCM_CPxCFG3_SBP_SHIFT                   8u\n#define MSCM_CPxCFG3_SBP_WIDTH                   2u\n#define MSCM_CPxCFG3_SBP(x)                      (((uint32_t)(((uint32_t)(x))<<MSCM_CPxCFG3_SBP_SHIFT))&MSCM_CPxCFG3_SBP_MASK)\n/* CP0TYPE Bit Fields */\n#define MSCM_CP0TYPE_RYPZ_MASK                   0xFFu\n#define MSCM_CP0TYPE_RYPZ_SHIFT                  0u\n#define MSCM_CP0TYPE_RYPZ_WIDTH                  8u\n#define MSCM_CP0TYPE_RYPZ(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CP0TYPE_RYPZ_SHIFT))&MSCM_CP0TYPE_RYPZ_MASK)\n#define MSCM_CP0TYPE_PERSONALITY_MASK            0xFFFFFF00u\n#define MSCM_CP0TYPE_PERSONALITY_SHIFT           8u\n#define MSCM_CP0TYPE_PERSONALITY_WIDTH           24u\n#define MSCM_CP0TYPE_PERSONALITY(x)              (((uint32_t)(((uint32_t)(x))<<MSCM_CP0TYPE_PERSONALITY_SHIFT))&MSCM_CP0TYPE_PERSONALITY_MASK)\n/* CP0NUM Bit Fields */\n#define MSCM_CP0NUM_CPN_MASK                     0x1u\n#define MSCM_CP0NUM_CPN_SHIFT                    0u\n#define MSCM_CP0NUM_CPN_WIDTH                    1u\n#define MSCM_CP0NUM_CPN(x)                       (((uint32_t)(((uint32_t)(x))<<MSCM_CP0NUM_CPN_SHIFT))&MSCM_CP0NUM_CPN_MASK)\n/* CP0MASTER Bit Fields */\n#define MSCM_CP0MASTER_PPMN_MASK                 0x3Fu\n#define MSCM_CP0MASTER_PPMN_SHIFT                0u\n#define MSCM_CP0MASTER_PPMN_WIDTH                6u\n#define MSCM_CP0MASTER_PPMN(x)                   (((uint32_t)(((uint32_t)(x))<<MSCM_CP0MASTER_PPMN_SHIFT))&MSCM_CP0MASTER_PPMN_MASK)\n/* CP0COUNT Bit Fields */\n#define MSCM_CP0COUNT_PCNT_MASK                  0x3u\n#define MSCM_CP0COUNT_PCNT_SHIFT                 0u\n#define MSCM_CP0COUNT_PCNT_WIDTH                 2u\n#define MSCM_CP0COUNT_PCNT(x)                    (((uint32_t)(((uint32_t)(x))<<MSCM_CP0COUNT_PCNT_SHIFT))&MSCM_CP0COUNT_PCNT_MASK)\n/* CP0CFG0 Bit Fields */\n#define MSCM_CP0CFG0_DCWY_MASK                   0xFFu\n#define MSCM_CP0CFG0_DCWY_SHIFT                  0u\n#define MSCM_CP0CFG0_DCWY_WIDTH                  8u\n#define MSCM_CP0CFG0_DCWY(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG0_DCWY_SHIFT))&MSCM_CP0CFG0_DCWY_MASK)\n#define MSCM_CP0CFG0_DCSZ_MASK                   0xFF00u\n#define MSCM_CP0CFG0_DCSZ_SHIFT                  8u\n#define MSCM_CP0CFG0_DCSZ_WIDTH                  8u\n#define MSCM_CP0CFG0_DCSZ(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG0_DCSZ_SHIFT))&MSCM_CP0CFG0_DCSZ_MASK)\n#define MSCM_CP0CFG0_ICWY_MASK                   0xFF0000u\n#define MSCM_CP0CFG0_ICWY_SHIFT                  16u\n#define MSCM_CP0CFG0_ICWY_WIDTH                  8u\n#define MSCM_CP0CFG0_ICWY(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG0_ICWY_SHIFT))&MSCM_CP0CFG0_ICWY_MASK)\n#define MSCM_CP0CFG0_ICSZ_MASK                   0xFF000000u\n#define MSCM_CP0CFG0_ICSZ_SHIFT                  24u\n#define MSCM_CP0CFG0_ICSZ_WIDTH                  8u\n#define MSCM_CP0CFG0_ICSZ(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG0_ICSZ_SHIFT))&MSCM_CP0CFG0_ICSZ_MASK)\n/* CP0CFG1 Bit Fields */\n#define MSCM_CP0CFG1_L2WY_MASK                   0xFF0000u\n#define MSCM_CP0CFG1_L2WY_SHIFT                  16u\n#define MSCM_CP0CFG1_L2WY_WIDTH                  8u\n#define MSCM_CP0CFG1_L2WY(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG1_L2WY_SHIFT))&MSCM_CP0CFG1_L2WY_MASK)\n#define MSCM_CP0CFG1_L2SZ_MASK                   0xFF000000u\n#define MSCM_CP0CFG1_L2SZ_SHIFT                  24u\n#define MSCM_CP0CFG1_L2SZ_WIDTH                  8u\n#define MSCM_CP0CFG1_L2SZ(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG1_L2SZ_SHIFT))&MSCM_CP0CFG1_L2SZ_MASK)\n/* CP0CFG2 Bit Fields */\n#define MSCM_CP0CFG2_TMUSZ_MASK                  0xFF00u\n#define MSCM_CP0CFG2_TMUSZ_SHIFT                 8u\n#define MSCM_CP0CFG2_TMUSZ_WIDTH                 8u\n#define MSCM_CP0CFG2_TMUSZ(x)                    (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG2_TMUSZ_SHIFT))&MSCM_CP0CFG2_TMUSZ_MASK)\n#define MSCM_CP0CFG2_TMLSZ_MASK                  0xFF000000u\n#define MSCM_CP0CFG2_TMLSZ_SHIFT                 24u\n#define MSCM_CP0CFG2_TMLSZ_WIDTH                 8u\n#define MSCM_CP0CFG2_TMLSZ(x)                    (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG2_TMLSZ_SHIFT))&MSCM_CP0CFG2_TMLSZ_MASK)\n/* CP0CFG3 Bit Fields */\n#define MSCM_CP0CFG3_FPU_MASK                    0x1u\n#define MSCM_CP0CFG3_FPU_SHIFT                   0u\n#define MSCM_CP0CFG3_FPU_WIDTH                   1u\n#define MSCM_CP0CFG3_FPU(x)                      (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG3_FPU_SHIFT))&MSCM_CP0CFG3_FPU_MASK)\n#define MSCM_CP0CFG3_SIMD_MASK                   0x2u\n#define MSCM_CP0CFG3_SIMD_SHIFT                  1u\n#define MSCM_CP0CFG3_SIMD_WIDTH                  1u\n#define MSCM_CP0CFG3_SIMD(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG3_SIMD_SHIFT))&MSCM_CP0CFG3_SIMD_MASK)\n#define MSCM_CP0CFG3_JAZ_MASK                    0x4u\n#define MSCM_CP0CFG3_JAZ_SHIFT                   2u\n#define MSCM_CP0CFG3_JAZ_WIDTH                   1u\n#define MSCM_CP0CFG3_JAZ(x)                      (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG3_JAZ_SHIFT))&MSCM_CP0CFG3_JAZ_MASK)\n#define MSCM_CP0CFG3_MMU_MASK                    0x8u\n#define MSCM_CP0CFG3_MMU_SHIFT                   3u\n#define MSCM_CP0CFG3_MMU_WIDTH                   1u\n#define MSCM_CP0CFG3_MMU(x)                      (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG3_MMU_SHIFT))&MSCM_CP0CFG3_MMU_MASK)\n#define MSCM_CP0CFG3_TZ_MASK                     0x10u\n#define MSCM_CP0CFG3_TZ_SHIFT                    4u\n#define MSCM_CP0CFG3_TZ_WIDTH                    1u\n#define MSCM_CP0CFG3_TZ(x)                       (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG3_TZ_SHIFT))&MSCM_CP0CFG3_TZ_MASK)\n#define MSCM_CP0CFG3_CMP_MASK                    0x20u\n#define MSCM_CP0CFG3_CMP_SHIFT                   5u\n#define MSCM_CP0CFG3_CMP_WIDTH                   1u\n#define MSCM_CP0CFG3_CMP(x)                      (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG3_CMP_SHIFT))&MSCM_CP0CFG3_CMP_MASK)\n#define MSCM_CP0CFG3_BB_MASK                     0x40u\n#define MSCM_CP0CFG3_BB_SHIFT                    6u\n#define MSCM_CP0CFG3_BB_WIDTH                    1u\n#define MSCM_CP0CFG3_BB(x)                       (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG3_BB_SHIFT))&MSCM_CP0CFG3_BB_MASK)\n#define MSCM_CP0CFG3_SBP_MASK                    0x300u\n#define MSCM_CP0CFG3_SBP_SHIFT                   8u\n#define MSCM_CP0CFG3_SBP_WIDTH                   2u\n#define MSCM_CP0CFG3_SBP(x)                      (((uint32_t)(((uint32_t)(x))<<MSCM_CP0CFG3_SBP_SHIFT))&MSCM_CP0CFG3_SBP_MASK)\n/* OCMDR Bit Fields */\n#define MSCM_OCMDR_OCM1_MASK                     0x30u\n#define MSCM_OCMDR_OCM1_SHIFT                    4u\n#define MSCM_OCMDR_OCM1_WIDTH                    2u\n#define MSCM_OCMDR_OCM1(x)                       (((uint32_t)(((uint32_t)(x))<<MSCM_OCMDR_OCM1_SHIFT))&MSCM_OCMDR_OCM1_MASK)\n#define MSCM_OCMDR_OCMPU_MASK                    0x1000u\n#define MSCM_OCMDR_OCMPU_SHIFT                   12u\n#define MSCM_OCMDR_OCMPU_WIDTH                   1u\n#define MSCM_OCMDR_OCMPU(x)                      (((uint32_t)(((uint32_t)(x))<<MSCM_OCMDR_OCMPU_SHIFT))&MSCM_OCMDR_OCMPU_MASK)\n#define MSCM_OCMDR_OCMT_MASK                     0xE000u\n#define MSCM_OCMDR_OCMT_SHIFT                    13u\n#define MSCM_OCMDR_OCMT_WIDTH                    3u\n#define MSCM_OCMDR_OCMT(x)                       (((uint32_t)(((uint32_t)(x))<<MSCM_OCMDR_OCMT_SHIFT))&MSCM_OCMDR_OCMT_MASK)\n#define MSCM_OCMDR_RO_MASK                       0x10000u\n#define MSCM_OCMDR_RO_SHIFT                      16u\n#define MSCM_OCMDR_RO_WIDTH                      1u\n#define MSCM_OCMDR_RO(x)                         (((uint32_t)(((uint32_t)(x))<<MSCM_OCMDR_RO_SHIFT))&MSCM_OCMDR_RO_MASK)\n#define MSCM_OCMDR_OCMW_MASK                     0xE0000u\n#define MSCM_OCMDR_OCMW_SHIFT                    17u\n#define MSCM_OCMDR_OCMW_WIDTH                    3u\n#define MSCM_OCMDR_OCMW(x)                       (((uint32_t)(((uint32_t)(x))<<MSCM_OCMDR_OCMW_SHIFT))&MSCM_OCMDR_OCMW_MASK)\n#define MSCM_OCMDR_OCMSZ_MASK                    0xF000000u\n#define MSCM_OCMDR_OCMSZ_SHIFT                   24u\n#define MSCM_OCMDR_OCMSZ_WIDTH                   4u\n#define MSCM_OCMDR_OCMSZ(x)                      (((uint32_t)(((uint32_t)(x))<<MSCM_OCMDR_OCMSZ_SHIFT))&MSCM_OCMDR_OCMSZ_MASK)\n#define MSCM_OCMDR_OCMSZH_MASK                   0x10000000u\n#define MSCM_OCMDR_OCMSZH_SHIFT                  28u\n#define MSCM_OCMDR_OCMSZH_WIDTH                  1u\n#define MSCM_OCMDR_OCMSZH(x)                     (((uint32_t)(((uint32_t)(x))<<MSCM_OCMDR_OCMSZH_SHIFT))&MSCM_OCMDR_OCMSZH_MASK)\n#define MSCM_OCMDR_V_MASK                        0x80000000u\n#define MSCM_OCMDR_V_SHIFT                       31u\n#define MSCM_OCMDR_V_WIDTH                       1u\n#define MSCM_OCMDR_V(x)                          (((uint32_t)(((uint32_t)(x))<<MSCM_OCMDR_V_SHIFT))&MSCM_OCMDR_V_MASK)\n\n/*!\n * @}\n */ /* end of group MSCM_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group MSCM_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- PCC Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup PCC_Peripheral_Access_Layer PCC Peripheral Access Layer\n * @{\n */\n\n\n/** PCC - Size of Registers Arrays */\n#define PCC_PCCn_COUNT                           116u\n\n/** PCC - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t PCCn[PCC_PCCn_COUNT];              /**< PCC Reserved Register 0..PCC CMP0 Register, array offset: 0x0, array step: 0x4 */\n} PCC_Type, *PCC_MemMapPtr;\n\n /** Number of instances of the PCC module. */\n#define PCC_INSTANCE_COUNT                       (1u)\n\n\n/* PCC - Peripheral instance base addresses */\n/** Peripheral PCC base address */\n#define PCC_BASE                                 (0x40065000u)\n/** Peripheral PCC base pointer */\n#define PCC                                      ((PCC_Type *)PCC_BASE)\n/** Array initializer of PCC peripheral base addresses */\n#define PCC_BASE_ADDRS                           { PCC_BASE }\n/** Array initializer of PCC peripheral base pointers */\n#define PCC_BASE_PTRS                            { PCC }\n\n/* PCC index offsets */\n#define PCC_FTFC_INDEX                           32\n#define PCC_DMAMUX_INDEX                         33\n#define PCC_FlexCAN0_INDEX                       36\n#define PCC_FlexCAN1_INDEX                       37\n#define PCC_FTM3_INDEX                           38\n#define PCC_ADC1_INDEX                           39\n#define PCC_FlexCAN2_INDEX                       43\n#define PCC_LPSPI0_INDEX                         44\n#define PCC_LPSPI1_INDEX                         45\n#define PCC_LPSPI2_INDEX                         46\n#define PCC_PDB1_INDEX                           49\n#define PCC_CRC_INDEX                            50\n#define PCC_PDB0_INDEX                           54\n#define PCC_LPIT_INDEX                           55\n#define PCC_FTM0_INDEX                           56\n#define PCC_FTM1_INDEX                           57\n#define PCC_FTM2_INDEX                           58\n#define PCC_ADC0_INDEX                           59\n#define PCC_RTC_INDEX                            61\n#define PCC_LPTMR0_INDEX                         64\n#define PCC_PORTA_INDEX                          73\n#define PCC_PORTB_INDEX                          74\n#define PCC_PORTC_INDEX                          75\n#define PCC_PORTD_INDEX                          76\n#define PCC_PORTE_INDEX                          77\n#define PCC_FlexIO_INDEX                         90\n#define PCC_EWM_INDEX                            97\n#define PCC_LPI2C0_INDEX                         102\n#define PCC_LPUART0_INDEX                        106\n#define PCC_LPUART1_INDEX                        107\n#define PCC_LPUART2_INDEX                        108\n#define PCC_CMP0_INDEX                           115\n\n/* ----------------------------------------------------------------------------\n   -- PCC Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup PCC_Register_Masks PCC Register Masks\n * @{\n */\n\n/* PCCn Bit Fields */\n#define PCC_PCCn_PCD_MASK                        0x7u\n#define PCC_PCCn_PCD_SHIFT                       0u\n#define PCC_PCCn_PCD_WIDTH                       3u\n#define PCC_PCCn_PCD(x)                          (((uint32_t)(((uint32_t)(x))<<PCC_PCCn_PCD_SHIFT))&PCC_PCCn_PCD_MASK)\n#define PCC_PCCn_FRAC_MASK                       0x8u\n#define PCC_PCCn_FRAC_SHIFT                      3u\n#define PCC_PCCn_FRAC_WIDTH                      1u\n#define PCC_PCCn_FRAC(x)                         (((uint32_t)(((uint32_t)(x))<<PCC_PCCn_FRAC_SHIFT))&PCC_PCCn_FRAC_MASK)\n#define PCC_PCCn_PCS_MASK                        0x7000000u\n#define PCC_PCCn_PCS_SHIFT                       24u\n#define PCC_PCCn_PCS_WIDTH                       3u\n#define PCC_PCCn_PCS(x)                          (((uint32_t)(((uint32_t)(x))<<PCC_PCCn_PCS_SHIFT))&PCC_PCCn_PCS_MASK)\n#define PCC_PCCn_CGC_MASK                        0x40000000u\n#define PCC_PCCn_CGC_SHIFT                       30u\n#define PCC_PCCn_CGC_WIDTH                       1u\n#define PCC_PCCn_CGC(x)                          (((uint32_t)(((uint32_t)(x))<<PCC_PCCn_CGC_SHIFT))&PCC_PCCn_CGC_MASK)\n#define PCC_PCCn_PR_MASK                         0x80000000u\n#define PCC_PCCn_PR_SHIFT                        31u\n#define PCC_PCCn_PR_WIDTH                        1u\n#define PCC_PCCn_PR(x)                           (((uint32_t)(((uint32_t)(x))<<PCC_PCCn_PR_SHIFT))&PCC_PCCn_PR_MASK)\n\n/*!\n * @}\n */ /* end of group PCC_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group PCC_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- PDB Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup PDB_Peripheral_Access_Layer PDB Peripheral Access Layer\n * @{\n */\n\n\n/** PDB - Size of Registers Arrays */\n#define PDB_CH_COUNT                             2u\n#define PDB_DLY_COUNT                            8u\n#define PDB_POnDLY_COUNT                         1u\n\n/** PDB - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t SC;                                /**< Status and Control register, offset: 0x0 */\n  __IO uint32_t MOD;                               /**< Modulus register, offset: 0x4 */\n  __I  uint32_t CNT;                               /**< Counter register, offset: 0x8 */\n  __IO uint32_t IDLY;                              /**< Interrupt Delay register, offset: 0xC */\n  struct {                                         /* offset: 0x10, array step: 0x28 */\n    __IO uint32_t C1;                                /**< Channel n Control register 1, array offset: 0x10, array step: 0x28 */\n    __IO uint32_t S;                                 /**< Channel n Status register, array offset: 0x14, array step: 0x28 */\n    __IO uint32_t DLY[PDB_DLY_COUNT];                /**< Channel n Delay 0 register..Channel n Delay 7 register, array offset: 0x18, array step: index*0x28, index2*0x4 */\n  } CH[PDB_CH_COUNT];\n       uint8_t RESERVED_0[304];\n  __IO uint32_t POEN;                              /**< Pulse-Out n Enable register, offset: 0x190 */\n  union {                                          /* offset: 0x194, array step: 0x4 */\n    __IO uint32_t PODLY;                             /**< Pulse-Out n Delay register, array offset: 0x194, array step: 0x4 */\n    struct {                                         /* offset: 0x194, array step: 0x4 */\n      __IO uint16_t DLY2;                              /**< PDB1_DLY2 register...PDB0_DLY2 register., array offset: 0x194, array step: 0x4 */\n      __IO uint16_t DLY1;                              /**< PDB1_DLY1 register...PDB0_DLY1 register., array offset: 0x196, array step: 0x4 */\n    } ACCESS16BIT;\n  } POnDLY[PDB_POnDLY_COUNT];\n} PDB_Type, *PDB_MemMapPtr;\n\n /** Number of instances of the PDB module. */\n#define PDB_INSTANCE_COUNT                       (2u)\n\n\n/* PDB - Peripheral instance base addresses */\n/** Peripheral PDB0 base address */\n#define PDB0_BASE                                (0x40036000u)\n/** Peripheral PDB0 base pointer */\n#define PDB0                                     ((PDB_Type *)PDB0_BASE)\n/** Peripheral PDB1 base address */\n#define PDB1_BASE                                (0x40031000u)\n/** Peripheral PDB1 base pointer */\n#define PDB1                                     ((PDB_Type *)PDB1_BASE)\n/** Array initializer of PDB peripheral base addresses */\n#define PDB_BASE_ADDRS                           { PDB0_BASE, PDB1_BASE }\n/** Array initializer of PDB peripheral base pointers */\n#define PDB_BASE_PTRS                            { PDB0, PDB1 }\n /** Number of interrupt vector arrays for the PDB module. */\n#define PDB_IRQS_ARR_COUNT                       (1u)\n /** Number of interrupt channels for the PDB module. */\n#define PDB_IRQS_CH_COUNT                        (1u)\n/** Interrupt vectors for the PDB peripheral type */\n#define PDB_IRQS                                 { PDB0_IRQn, PDB1_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- PDB Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup PDB_Register_Masks PDB Register Masks\n * @{\n */\n\n/* SC Bit Fields */\n#define PDB_SC_LDOK_MASK                         0x1u\n#define PDB_SC_LDOK_SHIFT                        0u\n#define PDB_SC_LDOK_WIDTH                        1u\n#define PDB_SC_LDOK(x)                           (((uint32_t)(((uint32_t)(x))<<PDB_SC_LDOK_SHIFT))&PDB_SC_LDOK_MASK)\n#define PDB_SC_CONT_MASK                         0x2u\n#define PDB_SC_CONT_SHIFT                        1u\n#define PDB_SC_CONT_WIDTH                        1u\n#define PDB_SC_CONT(x)                           (((uint32_t)(((uint32_t)(x))<<PDB_SC_CONT_SHIFT))&PDB_SC_CONT_MASK)\n#define PDB_SC_MULT_MASK                         0xCu\n#define PDB_SC_MULT_SHIFT                        2u\n#define PDB_SC_MULT_WIDTH                        2u\n#define PDB_SC_MULT(x)                           (((uint32_t)(((uint32_t)(x))<<PDB_SC_MULT_SHIFT))&PDB_SC_MULT_MASK)\n#define PDB_SC_PDBIE_MASK                        0x20u\n#define PDB_SC_PDBIE_SHIFT                       5u\n#define PDB_SC_PDBIE_WIDTH                       1u\n#define PDB_SC_PDBIE(x)                          (((uint32_t)(((uint32_t)(x))<<PDB_SC_PDBIE_SHIFT))&PDB_SC_PDBIE_MASK)\n#define PDB_SC_PDBIF_MASK                        0x40u\n#define PDB_SC_PDBIF_SHIFT                       6u\n#define PDB_SC_PDBIF_WIDTH                       1u\n#define PDB_SC_PDBIF(x)                          (((uint32_t)(((uint32_t)(x))<<PDB_SC_PDBIF_SHIFT))&PDB_SC_PDBIF_MASK)\n#define PDB_SC_PDBEN_MASK                        0x80u\n#define PDB_SC_PDBEN_SHIFT                       7u\n#define PDB_SC_PDBEN_WIDTH                       1u\n#define PDB_SC_PDBEN(x)                          (((uint32_t)(((uint32_t)(x))<<PDB_SC_PDBEN_SHIFT))&PDB_SC_PDBEN_MASK)\n#define PDB_SC_TRGSEL_MASK                       0xF00u\n#define PDB_SC_TRGSEL_SHIFT                      8u\n#define PDB_SC_TRGSEL_WIDTH                      4u\n#define PDB_SC_TRGSEL(x)                         (((uint32_t)(((uint32_t)(x))<<PDB_SC_TRGSEL_SHIFT))&PDB_SC_TRGSEL_MASK)\n#define PDB_SC_PRESCALER_MASK                    0x7000u\n#define PDB_SC_PRESCALER_SHIFT                   12u\n#define PDB_SC_PRESCALER_WIDTH                   3u\n#define PDB_SC_PRESCALER(x)                      (((uint32_t)(((uint32_t)(x))<<PDB_SC_PRESCALER_SHIFT))&PDB_SC_PRESCALER_MASK)\n#define PDB_SC_DMAEN_MASK                        0x8000u\n#define PDB_SC_DMAEN_SHIFT                       15u\n#define PDB_SC_DMAEN_WIDTH                       1u\n#define PDB_SC_DMAEN(x)                          (((uint32_t)(((uint32_t)(x))<<PDB_SC_DMAEN_SHIFT))&PDB_SC_DMAEN_MASK)\n#define PDB_SC_SWTRIG_MASK                       0x10000u\n#define PDB_SC_SWTRIG_SHIFT                      16u\n#define PDB_SC_SWTRIG_WIDTH                      1u\n#define PDB_SC_SWTRIG(x)                         (((uint32_t)(((uint32_t)(x))<<PDB_SC_SWTRIG_SHIFT))&PDB_SC_SWTRIG_MASK)\n#define PDB_SC_PDBEIE_MASK                       0x20000u\n#define PDB_SC_PDBEIE_SHIFT                      17u\n#define PDB_SC_PDBEIE_WIDTH                      1u\n#define PDB_SC_PDBEIE(x)                         (((uint32_t)(((uint32_t)(x))<<PDB_SC_PDBEIE_SHIFT))&PDB_SC_PDBEIE_MASK)\n#define PDB_SC_LDMOD_MASK                        0xC0000u\n#define PDB_SC_LDMOD_SHIFT                       18u\n#define PDB_SC_LDMOD_WIDTH                       2u\n#define PDB_SC_LDMOD(x)                          (((uint32_t)(((uint32_t)(x))<<PDB_SC_LDMOD_SHIFT))&PDB_SC_LDMOD_MASK)\n/* MOD Bit Fields */\n#define PDB_MOD_MOD_MASK                         0xFFFFu\n#define PDB_MOD_MOD_SHIFT                        0u\n#define PDB_MOD_MOD_WIDTH                        16u\n#define PDB_MOD_MOD(x)                           (((uint32_t)(((uint32_t)(x))<<PDB_MOD_MOD_SHIFT))&PDB_MOD_MOD_MASK)\n/* CNT Bit Fields */\n#define PDB_CNT_CNT_MASK                         0xFFFFu\n#define PDB_CNT_CNT_SHIFT                        0u\n#define PDB_CNT_CNT_WIDTH                        16u\n#define PDB_CNT_CNT(x)                           (((uint32_t)(((uint32_t)(x))<<PDB_CNT_CNT_SHIFT))&PDB_CNT_CNT_MASK)\n/* IDLY Bit Fields */\n#define PDB_IDLY_IDLY_MASK                       0xFFFFu\n#define PDB_IDLY_IDLY_SHIFT                      0u\n#define PDB_IDLY_IDLY_WIDTH                      16u\n#define PDB_IDLY_IDLY(x)                         (((uint32_t)(((uint32_t)(x))<<PDB_IDLY_IDLY_SHIFT))&PDB_IDLY_IDLY_MASK)\n/* C1 Bit Fields */\n#define PDB_C1_EN_MASK                           0xFFu\n#define PDB_C1_EN_SHIFT                          0u\n#define PDB_C1_EN_WIDTH                          8u\n#define PDB_C1_EN(x)                             (((uint32_t)(((uint32_t)(x))<<PDB_C1_EN_SHIFT))&PDB_C1_EN_MASK)\n#define PDB_C1_TOS_MASK                          0xFF00u\n#define PDB_C1_TOS_SHIFT                         8u\n#define PDB_C1_TOS_WIDTH                         8u\n#define PDB_C1_TOS(x)                            (((uint32_t)(((uint32_t)(x))<<PDB_C1_TOS_SHIFT))&PDB_C1_TOS_MASK)\n#define PDB_C1_BB_MASK                           0xFF0000u\n#define PDB_C1_BB_SHIFT                          16u\n#define PDB_C1_BB_WIDTH                          8u\n#define PDB_C1_BB(x)                             (((uint32_t)(((uint32_t)(x))<<PDB_C1_BB_SHIFT))&PDB_C1_BB_MASK)\n/* S Bit Fields */\n#define PDB_S_ERR_MASK                           0xFFu\n#define PDB_S_ERR_SHIFT                          0u\n#define PDB_S_ERR_WIDTH                          8u\n#define PDB_S_ERR(x)                             (((uint32_t)(((uint32_t)(x))<<PDB_S_ERR_SHIFT))&PDB_S_ERR_MASK)\n#define PDB_S_CF_MASK                            0xFF0000u\n#define PDB_S_CF_SHIFT                           16u\n#define PDB_S_CF_WIDTH                           8u\n#define PDB_S_CF(x)                              (((uint32_t)(((uint32_t)(x))<<PDB_S_CF_SHIFT))&PDB_S_CF_MASK)\n/* DLY Bit Fields */\n#define PDB_DLY_DLY_MASK                         0xFFFFu\n#define PDB_DLY_DLY_SHIFT                        0u\n#define PDB_DLY_DLY_WIDTH                        16u\n#define PDB_DLY_DLY(x)                           (((uint32_t)(((uint32_t)(x))<<PDB_DLY_DLY_SHIFT))&PDB_DLY_DLY_MASK)\n/* POEN Bit Fields */\n#define PDB_POEN_POEN_MASK                       0xFFu\n#define PDB_POEN_POEN_SHIFT                      0u\n#define PDB_POEN_POEN_WIDTH                      8u\n#define PDB_POEN_POEN(x)                         (((uint32_t)(((uint32_t)(x))<<PDB_POEN_POEN_SHIFT))&PDB_POEN_POEN_MASK)\n/* POnDLY_PODLY Bit Fields */\n#define PDB_POnDLY_PODLY_DLY2_MASK               0xFFFFu\n#define PDB_POnDLY_PODLY_DLY2_SHIFT              0u\n#define PDB_POnDLY_PODLY_DLY2_WIDTH              16u\n#define PDB_POnDLY_PODLY_DLY2(x)                 (((uint32_t)(((uint32_t)(x))<<PDB_POnDLY_PODLY_DLY2_SHIFT))&PDB_POnDLY_PODLY_DLY2_MASK)\n#define PDB_POnDLY_PODLY_DLY1_MASK               0xFFFF0000u\n#define PDB_POnDLY_PODLY_DLY1_SHIFT              16u\n#define PDB_POnDLY_PODLY_DLY1_WIDTH              16u\n#define PDB_POnDLY_PODLY_DLY1(x)                 (((uint32_t)(((uint32_t)(x))<<PDB_POnDLY_PODLY_DLY1_SHIFT))&PDB_POnDLY_PODLY_DLY1_MASK)\n/* POnDLY_ACCESS16BIT_DLY2 Bit Fields */\n#define PDB_POnDLY_ACCESS16BIT_DLY2_DLY2_MASK    0xFFFFu\n#define PDB_POnDLY_ACCESS16BIT_DLY2_DLY2_SHIFT   0u\n#define PDB_POnDLY_ACCESS16BIT_DLY2_DLY2_WIDTH   16u\n#define PDB_POnDLY_ACCESS16BIT_DLY2_DLY2(x)      (((uint16_t)(((uint16_t)(x))<<PDB_POnDLY_ACCESS16BIT_DLY2_DLY2_SHIFT))&PDB_POnDLY_ACCESS16BIT_DLY2_DLY2_MASK)\n/* POnDLY_ACCESS16BIT_DLY1 Bit Fields */\n#define PDB_POnDLY_ACCESS16BIT_DLY1_DLY1_MASK    0xFFFFu\n#define PDB_POnDLY_ACCESS16BIT_DLY1_DLY1_SHIFT   0u\n#define PDB_POnDLY_ACCESS16BIT_DLY1_DLY1_WIDTH   16u\n#define PDB_POnDLY_ACCESS16BIT_DLY1_DLY1(x)      (((uint16_t)(((uint16_t)(x))<<PDB_POnDLY_ACCESS16BIT_DLY1_DLY1_SHIFT))&PDB_POnDLY_ACCESS16BIT_DLY1_DLY1_MASK)\n\n/*!\n * @}\n */ /* end of group PDB_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group PDB_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- PMC Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup PMC_Peripheral_Access_Layer PMC Peripheral Access Layer\n * @{\n */\n\n\n/** PMC - Size of Registers Arrays */\n\n/** PMC - Register Layout Typedef */\ntypedef struct {\n  __IO uint8_t LVDSC1;                             /**< Low Voltage Detect Status and Control 1 Register, offset: 0x0 */\n  __IO uint8_t LVDSC2;                             /**< Low Voltage Detect Status and Control 2 Register, offset: 0x1 */\n  __IO uint8_t REGSC;                              /**< Regulator Status and Control Register, offset: 0x2 */\n       uint8_t RESERVED_0[1];\n  __IO uint8_t LPOTRIM;                            /**< Low Power Oscillator Trim Register, offset: 0x4 */\n} PMC_Type, *PMC_MemMapPtr;\n\n /** Number of instances of the PMC module. */\n#define PMC_INSTANCE_COUNT                       (1u)\n\n\n/* PMC - Peripheral instance base addresses */\n/** Peripheral PMC base address */\n#define PMC_BASE                                 (0x4007D000u)\n/** Peripheral PMC base pointer */\n#define PMC                                      ((PMC_Type *)PMC_BASE)\n/** Array initializer of PMC peripheral base addresses */\n#define PMC_BASE_ADDRS                           { PMC_BASE }\n/** Array initializer of PMC peripheral base pointers */\n#define PMC_BASE_PTRS                            { PMC }\n /** Number of interrupt vector arrays for the PMC module. */\n#define PMC_IRQS_ARR_COUNT                       (1u)\n /** Number of interrupt channels for the PMC module. */\n#define PMC_IRQS_CH_COUNT                        (1u)\n/** Interrupt vectors for the PMC peripheral type */\n#define PMC_IRQS                                 { LVD_LVW_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- PMC Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup PMC_Register_Masks PMC Register Masks\n * @{\n */\n\n/* LVDSC1 Bit Fields */\n#define PMC_LVDSC1_LVDRE_MASK                    0x10u\n#define PMC_LVDSC1_LVDRE_SHIFT                   4u\n#define PMC_LVDSC1_LVDRE_WIDTH                   1u\n#define PMC_LVDSC1_LVDRE(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDRE_SHIFT))&PMC_LVDSC1_LVDRE_MASK)\n#define PMC_LVDSC1_LVDIE_MASK                    0x20u\n#define PMC_LVDSC1_LVDIE_SHIFT                   5u\n#define PMC_LVDSC1_LVDIE_WIDTH                   1u\n#define PMC_LVDSC1_LVDIE(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDIE_SHIFT))&PMC_LVDSC1_LVDIE_MASK)\n#define PMC_LVDSC1_LVDACK_MASK                   0x40u\n#define PMC_LVDSC1_LVDACK_SHIFT                  6u\n#define PMC_LVDSC1_LVDACK_WIDTH                  1u\n#define PMC_LVDSC1_LVDACK(x)                     (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDACK_SHIFT))&PMC_LVDSC1_LVDACK_MASK)\n#define PMC_LVDSC1_LVDF_MASK                     0x80u\n#define PMC_LVDSC1_LVDF_SHIFT                    7u\n#define PMC_LVDSC1_LVDF_WIDTH                    1u\n#define PMC_LVDSC1_LVDF(x)                       (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDF_SHIFT))&PMC_LVDSC1_LVDF_MASK)\n/* LVDSC2 Bit Fields */\n#define PMC_LVDSC2_LVWIE_MASK                    0x20u\n#define PMC_LVDSC2_LVWIE_SHIFT                   5u\n#define PMC_LVDSC2_LVWIE_WIDTH                   1u\n#define PMC_LVDSC2_LVWIE(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWIE_SHIFT))&PMC_LVDSC2_LVWIE_MASK)\n#define PMC_LVDSC2_LVWACK_MASK                   0x40u\n#define PMC_LVDSC2_LVWACK_SHIFT                  6u\n#define PMC_LVDSC2_LVWACK_WIDTH                  1u\n#define PMC_LVDSC2_LVWACK(x)                     (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWACK_SHIFT))&PMC_LVDSC2_LVWACK_MASK)\n#define PMC_LVDSC2_LVWF_MASK                     0x80u\n#define PMC_LVDSC2_LVWF_SHIFT                    7u\n#define PMC_LVDSC2_LVWF_WIDTH                    1u\n#define PMC_LVDSC2_LVWF(x)                       (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWF_SHIFT))&PMC_LVDSC2_LVWF_MASK)\n/* REGSC Bit Fields */\n#define PMC_REGSC_BIASEN_MASK                    0x1u\n#define PMC_REGSC_BIASEN_SHIFT                   0u\n#define PMC_REGSC_BIASEN_WIDTH                   1u\n#define PMC_REGSC_BIASEN(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_BIASEN_SHIFT))&PMC_REGSC_BIASEN_MASK)\n#define PMC_REGSC_CLKBIASDIS_MASK                0x2u\n#define PMC_REGSC_CLKBIASDIS_SHIFT               1u\n#define PMC_REGSC_CLKBIASDIS_WIDTH               1u\n#define PMC_REGSC_CLKBIASDIS(x)                  (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_CLKBIASDIS_SHIFT))&PMC_REGSC_CLKBIASDIS_MASK)\n#define PMC_REGSC_REGFPM_MASK                    0x4u\n#define PMC_REGSC_REGFPM_SHIFT                   2u\n#define PMC_REGSC_REGFPM_WIDTH                   1u\n#define PMC_REGSC_REGFPM(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_REGFPM_SHIFT))&PMC_REGSC_REGFPM_MASK)\n#define PMC_REGSC_LPOSTAT_MASK                   0x40u\n#define PMC_REGSC_LPOSTAT_SHIFT                  6u\n#define PMC_REGSC_LPOSTAT_WIDTH                  1u\n#define PMC_REGSC_LPOSTAT(x)                     (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_LPOSTAT_SHIFT))&PMC_REGSC_LPOSTAT_MASK)\n#define PMC_REGSC_LPODIS_MASK                    0x80u\n#define PMC_REGSC_LPODIS_SHIFT                   7u\n#define PMC_REGSC_LPODIS_WIDTH                   1u\n#define PMC_REGSC_LPODIS(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_LPODIS_SHIFT))&PMC_REGSC_LPODIS_MASK)\n/* LPOTRIM Bit Fields */\n#define PMC_LPOTRIM_LPOTRIM_MASK                 0x1Fu\n#define PMC_LPOTRIM_LPOTRIM_SHIFT                0u\n#define PMC_LPOTRIM_LPOTRIM_WIDTH                5u\n#define PMC_LPOTRIM_LPOTRIM(x)                   (((uint8_t)(((uint8_t)(x))<<PMC_LPOTRIM_LPOTRIM_SHIFT))&PMC_LPOTRIM_LPOTRIM_MASK)\n\n/*!\n * @}\n */ /* end of group PMC_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group PMC_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- PORT Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup PORT_Peripheral_Access_Layer PORT Peripheral Access Layer\n * @{\n */\n\n\n/** PORT - Size of Registers Arrays */\n#define PORT_PCR_COUNT                           32u\n\n/** PORT - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t PCR[PORT_PCR_COUNT];               /**< Pin Control Register n, array offset: 0x0, array step: 0x4 */\n  __O  uint32_t GPCLR;                             /**< Global Pin Control Low Register, offset: 0x80 */\n  __O  uint32_t GPCHR;                             /**< Global Pin Control High Register, offset: 0x84 */\n  __O  uint32_t GICLR;                             /**< Global Interrupt Control Low Register, offset: 0x88 */\n  __O  uint32_t GICHR;                             /**< Global Interrupt Control High Register, offset: 0x8C */\n       uint8_t RESERVED_0[16];\n  __IO uint32_t ISFR;                              /**< Interrupt Status Flag Register, offset: 0xA0 */\n       uint8_t RESERVED_1[28];\n  __IO uint32_t DFER;                              /**< Digital Filter Enable Register, offset: 0xC0 */\n  __IO uint32_t DFCR;                              /**< Digital Filter Clock Register, offset: 0xC4 */\n  __IO uint32_t DFWR;                              /**< Digital Filter Width Register, offset: 0xC8 */\n} PORT_Type, *PORT_MemMapPtr;\n\n /** Number of instances of the PORT module. */\n#define PORT_INSTANCE_COUNT                      (5u)\n\n\n/* PORT - Peripheral instance base addresses */\n/** Peripheral PORTA base address */\n#define PORTA_BASE                               (0x40049000u)\n/** Peripheral PORTA base pointer */\n#define PORTA                                    ((PORT_Type *)PORTA_BASE)\n/** Peripheral PORTB base address */\n#define PORTB_BASE                               (0x4004A000u)\n/** Peripheral PORTB base pointer */\n#define PORTB                                    ((PORT_Type *)PORTB_BASE)\n/** Peripheral PORTC base address */\n#define PORTC_BASE                               (0x4004B000u)\n/** Peripheral PORTC base pointer */\n#define PORTC                                    ((PORT_Type *)PORTC_BASE)\n/** Peripheral PORTD base address */\n#define PORTD_BASE                               (0x4004C000u)\n/** Peripheral PORTD base pointer */\n#define PORTD                                    ((PORT_Type *)PORTD_BASE)\n/** Peripheral PORTE base address */\n#define PORTE_BASE                               (0x4004D000u)\n/** Peripheral PORTE base pointer */\n#define PORTE                                    ((PORT_Type *)PORTE_BASE)\n/** Array initializer of PORT peripheral base addresses */\n#define PORT_BASE_ADDRS                          { PORTA_BASE, PORTB_BASE, PORTC_BASE, PORTD_BASE, PORTE_BASE }\n/** Array initializer of PORT peripheral base pointers */\n#define PORT_BASE_PTRS                           { PORTA, PORTB, PORTC, PORTD, PORTE }\n /** Number of interrupt vector arrays for the PORT module. */\n#define PORT_IRQS_ARR_COUNT                      (1u)\n /** Number of interrupt channels for the PORT module. */\n#define PORT_IRQS_CH_COUNT                       (1u)\n/** Interrupt vectors for the PORT peripheral type */\n#define PORT_IRQS                                { PORTA_IRQn, PORTB_IRQn, PORTC_IRQn, PORTD_IRQn, PORTE_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- PORT Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup PORT_Register_Masks PORT Register Masks\n * @{\n */\n\n/* PCR Bit Fields */\n#define PORT_PCR_PS_MASK                         0x1u\n#define PORT_PCR_PS_SHIFT                        0u\n#define PORT_PCR_PS_WIDTH                        1u\n#define PORT_PCR_PS(x)                           (((uint32_t)(((uint32_t)(x))<<PORT_PCR_PS_SHIFT))&PORT_PCR_PS_MASK)\n#define PORT_PCR_PE_MASK                         0x2u\n#define PORT_PCR_PE_SHIFT                        1u\n#define PORT_PCR_PE_WIDTH                        1u\n#define PORT_PCR_PE(x)                           (((uint32_t)(((uint32_t)(x))<<PORT_PCR_PE_SHIFT))&PORT_PCR_PE_MASK)\n#define PORT_PCR_PFE_MASK                        0x10u\n#define PORT_PCR_PFE_SHIFT                       4u\n#define PORT_PCR_PFE_WIDTH                       1u\n#define PORT_PCR_PFE(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_PFE_SHIFT))&PORT_PCR_PFE_MASK)\n#define PORT_PCR_DSE_MASK                        0x40u\n#define PORT_PCR_DSE_SHIFT                       6u\n#define PORT_PCR_DSE_WIDTH                       1u\n#define PORT_PCR_DSE(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_DSE_SHIFT))&PORT_PCR_DSE_MASK)\n#define PORT_PCR_MUX_MASK                        0x700u\n#define PORT_PCR_MUX_SHIFT                       8u\n#define PORT_PCR_MUX_WIDTH                       3u\n#define PORT_PCR_MUX(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_MUX_SHIFT))&PORT_PCR_MUX_MASK)\n#define PORT_PCR_LK_MASK                         0x8000u\n#define PORT_PCR_LK_SHIFT                        15u\n#define PORT_PCR_LK_WIDTH                        1u\n#define PORT_PCR_LK(x)                           (((uint32_t)(((uint32_t)(x))<<PORT_PCR_LK_SHIFT))&PORT_PCR_LK_MASK)\n#define PORT_PCR_IRQC_MASK                       0xF0000u\n#define PORT_PCR_IRQC_SHIFT                      16u\n#define PORT_PCR_IRQC_WIDTH                      4u\n#define PORT_PCR_IRQC(x)                         (((uint32_t)(((uint32_t)(x))<<PORT_PCR_IRQC_SHIFT))&PORT_PCR_IRQC_MASK)\n#define PORT_PCR_ISF_MASK                        0x1000000u\n#define PORT_PCR_ISF_SHIFT                       24u\n#define PORT_PCR_ISF_WIDTH                       1u\n#define PORT_PCR_ISF(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_ISF_SHIFT))&PORT_PCR_ISF_MASK)\n/* GPCLR Bit Fields */\n#define PORT_GPCLR_GPWD_MASK                     0xFFFFu\n#define PORT_GPCLR_GPWD_SHIFT                    0u\n#define PORT_GPCLR_GPWD_WIDTH                    16u\n#define PORT_GPCLR_GPWD(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCLR_GPWD_SHIFT))&PORT_GPCLR_GPWD_MASK)\n#define PORT_GPCLR_GPWE_MASK                     0xFFFF0000u\n#define PORT_GPCLR_GPWE_SHIFT                    16u\n#define PORT_GPCLR_GPWE_WIDTH                    16u\n#define PORT_GPCLR_GPWE(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCLR_GPWE_SHIFT))&PORT_GPCLR_GPWE_MASK)\n/* GPCHR Bit Fields */\n#define PORT_GPCHR_GPWD_MASK                     0xFFFFu\n#define PORT_GPCHR_GPWD_SHIFT                    0u\n#define PORT_GPCHR_GPWD_WIDTH                    16u\n#define PORT_GPCHR_GPWD(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCHR_GPWD_SHIFT))&PORT_GPCHR_GPWD_MASK)\n#define PORT_GPCHR_GPWE_MASK                     0xFFFF0000u\n#define PORT_GPCHR_GPWE_SHIFT                    16u\n#define PORT_GPCHR_GPWE_WIDTH                    16u\n#define PORT_GPCHR_GPWE(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCHR_GPWE_SHIFT))&PORT_GPCHR_GPWE_MASK)\n/* GICLR Bit Fields */\n#define PORT_GICLR_GIWE_MASK                     0xFFFFu\n#define PORT_GICLR_GIWE_SHIFT                    0u\n#define PORT_GICLR_GIWE_WIDTH                    16u\n#define PORT_GICLR_GIWE(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GICLR_GIWE_SHIFT))&PORT_GICLR_GIWE_MASK)\n#define PORT_GICLR_GIWD_MASK                     0xFFFF0000u\n#define PORT_GICLR_GIWD_SHIFT                    16u\n#define PORT_GICLR_GIWD_WIDTH                    16u\n#define PORT_GICLR_GIWD(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GICLR_GIWD_SHIFT))&PORT_GICLR_GIWD_MASK)\n/* GICHR Bit Fields */\n#define PORT_GICHR_GIWE_MASK                     0xFFFFu\n#define PORT_GICHR_GIWE_SHIFT                    0u\n#define PORT_GICHR_GIWE_WIDTH                    16u\n#define PORT_GICHR_GIWE(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GICHR_GIWE_SHIFT))&PORT_GICHR_GIWE_MASK)\n#define PORT_GICHR_GIWD_MASK                     0xFFFF0000u\n#define PORT_GICHR_GIWD_SHIFT                    16u\n#define PORT_GICHR_GIWD_WIDTH                    16u\n#define PORT_GICHR_GIWD(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GICHR_GIWD_SHIFT))&PORT_GICHR_GIWD_MASK)\n/* ISFR Bit Fields */\n#define PORT_ISFR_ISF_MASK                       0xFFFFFFFFu\n#define PORT_ISFR_ISF_SHIFT                      0u\n#define PORT_ISFR_ISF_WIDTH                      32u\n#define PORT_ISFR_ISF(x)                         (((uint32_t)(((uint32_t)(x))<<PORT_ISFR_ISF_SHIFT))&PORT_ISFR_ISF_MASK)\n/* DFER Bit Fields */\n#define PORT_DFER_DFE_MASK                       0xFFFFFFFFu\n#define PORT_DFER_DFE_SHIFT                      0u\n#define PORT_DFER_DFE_WIDTH                      32u\n#define PORT_DFER_DFE(x)                         (((uint32_t)(((uint32_t)(x))<<PORT_DFER_DFE_SHIFT))&PORT_DFER_DFE_MASK)\n/* DFCR Bit Fields */\n#define PORT_DFCR_CS_MASK                        0x1u\n#define PORT_DFCR_CS_SHIFT                       0u\n#define PORT_DFCR_CS_WIDTH                       1u\n#define PORT_DFCR_CS(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_DFCR_CS_SHIFT))&PORT_DFCR_CS_MASK)\n/* DFWR Bit Fields */\n#define PORT_DFWR_FILT_MASK                      0x1Fu\n#define PORT_DFWR_FILT_SHIFT                     0u\n#define PORT_DFWR_FILT_WIDTH                     5u\n#define PORT_DFWR_FILT(x)                        (((uint32_t)(((uint32_t)(x))<<PORT_DFWR_FILT_SHIFT))&PORT_DFWR_FILT_MASK)\n\n/*!\n * @}\n */ /* end of group PORT_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group PORT_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- RCM Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup RCM_Peripheral_Access_Layer RCM Peripheral Access Layer\n * @{\n */\n\n\n/** RCM - Size of Registers Arrays */\n\n/** RCM - Register Layout Typedef */\ntypedef struct {\n  __I  uint32_t VERID;                             /**< Version ID Register, offset: 0x0 */\n  __I  uint32_t PARAM;                             /**< Parameter Register, offset: 0x4 */\n  __I  uint32_t SRS;                               /**< System Reset Status Register, offset: 0x8 */\n  __IO uint32_t RPC;                               /**< Reset Pin Control register, offset: 0xC */\n       uint8_t RESERVED_0[8];\n  __IO uint32_t SSRS;                              /**< Sticky System Reset Status Register, offset: 0x18 */\n  __IO uint32_t SRIE;                              /**< System Reset Interrupt Enable Register, offset: 0x1C */\n} RCM_Type, *RCM_MemMapPtr;\n\n /** Number of instances of the RCM module. */\n#define RCM_INSTANCE_COUNT                       (1u)\n\n\n/* RCM - Peripheral instance base addresses */\n/** Peripheral RCM base address */\n#define RCM_BASE                                 (0x4007F000u)\n/** Peripheral RCM base pointer */\n#define RCM                                      ((RCM_Type *)RCM_BASE)\n/** Array initializer of RCM peripheral base addresses */\n#define RCM_BASE_ADDRS                           { RCM_BASE }\n/** Array initializer of RCM peripheral base pointers */\n#define RCM_BASE_PTRS                            { RCM }\n /** Number of interrupt vector arrays for the RCM module. */\n#define RCM_IRQS_ARR_COUNT                       (1u)\n /** Number of interrupt channels for the RCM module. */\n#define RCM_IRQS_CH_COUNT                        (1u)\n/** Interrupt vectors for the RCM peripheral type */\n#define RCM_IRQS                                 { RCM_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- RCM Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup RCM_Register_Masks RCM Register Masks\n * @{\n */\n\n/* VERID Bit Fields */\n#define RCM_VERID_FEATURE_MASK                   0xFFFFu\n#define RCM_VERID_FEATURE_SHIFT                  0u\n#define RCM_VERID_FEATURE_WIDTH                  16u\n#define RCM_VERID_FEATURE(x)                     (((uint32_t)(((uint32_t)(x))<<RCM_VERID_FEATURE_SHIFT))&RCM_VERID_FEATURE_MASK)\n#define RCM_VERID_MINOR_MASK                     0xFF0000u\n#define RCM_VERID_MINOR_SHIFT                    16u\n#define RCM_VERID_MINOR_WIDTH                    8u\n#define RCM_VERID_MINOR(x)                       (((uint32_t)(((uint32_t)(x))<<RCM_VERID_MINOR_SHIFT))&RCM_VERID_MINOR_MASK)\n#define RCM_VERID_MAJOR_MASK                     0xFF000000u\n#define RCM_VERID_MAJOR_SHIFT                    24u\n#define RCM_VERID_MAJOR_WIDTH                    8u\n#define RCM_VERID_MAJOR(x)                       (((uint32_t)(((uint32_t)(x))<<RCM_VERID_MAJOR_SHIFT))&RCM_VERID_MAJOR_MASK)\n/* PARAM Bit Fields */\n#define RCM_PARAM_EWAKEUP_MASK                   0x1u\n#define RCM_PARAM_EWAKEUP_SHIFT                  0u\n#define RCM_PARAM_EWAKEUP_WIDTH                  1u\n#define RCM_PARAM_EWAKEUP(x)                     (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_EWAKEUP_SHIFT))&RCM_PARAM_EWAKEUP_MASK)\n#define RCM_PARAM_ELVD_MASK                      0x2u\n#define RCM_PARAM_ELVD_SHIFT                     1u\n#define RCM_PARAM_ELVD_WIDTH                     1u\n#define RCM_PARAM_ELVD(x)                        (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_ELVD_SHIFT))&RCM_PARAM_ELVD_MASK)\n#define RCM_PARAM_ELOC_MASK                      0x4u\n#define RCM_PARAM_ELOC_SHIFT                     2u\n#define RCM_PARAM_ELOC_WIDTH                     1u\n#define RCM_PARAM_ELOC(x)                        (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_ELOC_SHIFT))&RCM_PARAM_ELOC_MASK)\n#define RCM_PARAM_ELOL_MASK                      0x8u\n#define RCM_PARAM_ELOL_SHIFT                     3u\n#define RCM_PARAM_ELOL_WIDTH                     1u\n#define RCM_PARAM_ELOL(x)                        (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_ELOL_SHIFT))&RCM_PARAM_ELOL_MASK)\n#define RCM_PARAM_EWDOG_MASK                     0x20u\n#define RCM_PARAM_EWDOG_SHIFT                    5u\n#define RCM_PARAM_EWDOG_WIDTH                    1u\n#define RCM_PARAM_EWDOG(x)                       (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_EWDOG_SHIFT))&RCM_PARAM_EWDOG_MASK)\n#define RCM_PARAM_EPIN_MASK                      0x40u\n#define RCM_PARAM_EPIN_SHIFT                     6u\n#define RCM_PARAM_EPIN_WIDTH                     1u\n#define RCM_PARAM_EPIN(x)                        (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_EPIN_SHIFT))&RCM_PARAM_EPIN_MASK)\n#define RCM_PARAM_EPOR_MASK                      0x80u\n#define RCM_PARAM_EPOR_SHIFT                     7u\n#define RCM_PARAM_EPOR_WIDTH                     1u\n#define RCM_PARAM_EPOR(x)                        (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_EPOR_SHIFT))&RCM_PARAM_EPOR_MASK)\n#define RCM_PARAM_EJTAG_MASK                     0x100u\n#define RCM_PARAM_EJTAG_SHIFT                    8u\n#define RCM_PARAM_EJTAG_WIDTH                    1u\n#define RCM_PARAM_EJTAG(x)                       (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_EJTAG_SHIFT))&RCM_PARAM_EJTAG_MASK)\n#define RCM_PARAM_ELOCKUP_MASK                   0x200u\n#define RCM_PARAM_ELOCKUP_SHIFT                  9u\n#define RCM_PARAM_ELOCKUP_WIDTH                  1u\n#define RCM_PARAM_ELOCKUP(x)                     (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_ELOCKUP_SHIFT))&RCM_PARAM_ELOCKUP_MASK)\n#define RCM_PARAM_ESW_MASK                       0x400u\n#define RCM_PARAM_ESW_SHIFT                      10u\n#define RCM_PARAM_ESW_WIDTH                      1u\n#define RCM_PARAM_ESW(x)                         (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_ESW_SHIFT))&RCM_PARAM_ESW_MASK)\n#define RCM_PARAM_EMDM_AP_MASK                   0x800u\n#define RCM_PARAM_EMDM_AP_SHIFT                  11u\n#define RCM_PARAM_EMDM_AP_WIDTH                  1u\n#define RCM_PARAM_EMDM_AP(x)                     (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_EMDM_AP_SHIFT))&RCM_PARAM_EMDM_AP_MASK)\n#define RCM_PARAM_ESACKERR_MASK                  0x2000u\n#define RCM_PARAM_ESACKERR_SHIFT                 13u\n#define RCM_PARAM_ESACKERR_WIDTH                 1u\n#define RCM_PARAM_ESACKERR(x)                    (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_ESACKERR_SHIFT))&RCM_PARAM_ESACKERR_MASK)\n#define RCM_PARAM_ETAMPER_MASK                   0x8000u\n#define RCM_PARAM_ETAMPER_SHIFT                  15u\n#define RCM_PARAM_ETAMPER_WIDTH                  1u\n#define RCM_PARAM_ETAMPER(x)                     (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_ETAMPER_SHIFT))&RCM_PARAM_ETAMPER_MASK)\n#define RCM_PARAM_ECORE1_MASK                    0x10000u\n#define RCM_PARAM_ECORE1_SHIFT                   16u\n#define RCM_PARAM_ECORE1_WIDTH                   1u\n#define RCM_PARAM_ECORE1(x)                      (((uint32_t)(((uint32_t)(x))<<RCM_PARAM_ECORE1_SHIFT))&RCM_PARAM_ECORE1_MASK)\n/* SRS Bit Fields */\n#define RCM_SRS_LVD_MASK                         0x2u\n#define RCM_SRS_LVD_SHIFT                        1u\n#define RCM_SRS_LVD_WIDTH                        1u\n#define RCM_SRS_LVD(x)                           (((uint32_t)(((uint32_t)(x))<<RCM_SRS_LVD_SHIFT))&RCM_SRS_LVD_MASK)\n#define RCM_SRS_LOC_MASK                         0x4u\n#define RCM_SRS_LOC_SHIFT                        2u\n#define RCM_SRS_LOC_WIDTH                        1u\n#define RCM_SRS_LOC(x)                           (((uint32_t)(((uint32_t)(x))<<RCM_SRS_LOC_SHIFT))&RCM_SRS_LOC_MASK)\n#define RCM_SRS_LOL_MASK                         0x8u\n#define RCM_SRS_LOL_SHIFT                        3u\n#define RCM_SRS_LOL_WIDTH                        1u\n#define RCM_SRS_LOL(x)                           (((uint32_t)(((uint32_t)(x))<<RCM_SRS_LOL_SHIFT))&RCM_SRS_LOL_MASK)\n#define RCM_SRS_WDOG_MASK                        0x20u\n#define RCM_SRS_WDOG_SHIFT                       5u\n#define RCM_SRS_WDOG_WIDTH                       1u\n#define RCM_SRS_WDOG(x)                          (((uint32_t)(((uint32_t)(x))<<RCM_SRS_WDOG_SHIFT))&RCM_SRS_WDOG_MASK)\n#define RCM_SRS_PIN_MASK                         0x40u\n#define RCM_SRS_PIN_SHIFT                        6u\n#define RCM_SRS_PIN_WIDTH                        1u\n#define RCM_SRS_PIN(x)                           (((uint32_t)(((uint32_t)(x))<<RCM_SRS_PIN_SHIFT))&RCM_SRS_PIN_MASK)\n#define RCM_SRS_POR_MASK                         0x80u\n#define RCM_SRS_POR_SHIFT                        7u\n#define RCM_SRS_POR_WIDTH                        1u\n#define RCM_SRS_POR(x)                           (((uint32_t)(((uint32_t)(x))<<RCM_SRS_POR_SHIFT))&RCM_SRS_POR_MASK)\n#define RCM_SRS_JTAG_MASK                        0x100u\n#define RCM_SRS_JTAG_SHIFT                       8u\n#define RCM_SRS_JTAG_WIDTH                       1u\n#define RCM_SRS_JTAG(x)                          (((uint32_t)(((uint32_t)(x))<<RCM_SRS_JTAG_SHIFT))&RCM_SRS_JTAG_MASK)\n#define RCM_SRS_LOCKUP_MASK                      0x200u\n#define RCM_SRS_LOCKUP_SHIFT                     9u\n#define RCM_SRS_LOCKUP_WIDTH                     1u\n#define RCM_SRS_LOCKUP(x)                        (((uint32_t)(((uint32_t)(x))<<RCM_SRS_LOCKUP_SHIFT))&RCM_SRS_LOCKUP_MASK)\n#define RCM_SRS_SW_MASK                          0x400u\n#define RCM_SRS_SW_SHIFT                         10u\n#define RCM_SRS_SW_WIDTH                         1u\n#define RCM_SRS_SW(x)                            (((uint32_t)(((uint32_t)(x))<<RCM_SRS_SW_SHIFT))&RCM_SRS_SW_MASK)\n#define RCM_SRS_MDM_AP_MASK                      0x800u\n#define RCM_SRS_MDM_AP_SHIFT                     11u\n#define RCM_SRS_MDM_AP_WIDTH                     1u\n#define RCM_SRS_MDM_AP(x)                        (((uint32_t)(((uint32_t)(x))<<RCM_SRS_MDM_AP_SHIFT))&RCM_SRS_MDM_AP_MASK)\n#define RCM_SRS_SACKERR_MASK                     0x2000u\n#define RCM_SRS_SACKERR_SHIFT                    13u\n#define RCM_SRS_SACKERR_WIDTH                    1u\n#define RCM_SRS_SACKERR(x)                       (((uint32_t)(((uint32_t)(x))<<RCM_SRS_SACKERR_SHIFT))&RCM_SRS_SACKERR_MASK)\n/* RPC Bit Fields */\n#define RCM_RPC_RSTFLTSRW_MASK                   0x3u\n#define RCM_RPC_RSTFLTSRW_SHIFT                  0u\n#define RCM_RPC_RSTFLTSRW_WIDTH                  2u\n#define RCM_RPC_RSTFLTSRW(x)                     (((uint32_t)(((uint32_t)(x))<<RCM_RPC_RSTFLTSRW_SHIFT))&RCM_RPC_RSTFLTSRW_MASK)\n#define RCM_RPC_RSTFLTSS_MASK                    0x4u\n#define RCM_RPC_RSTFLTSS_SHIFT                   2u\n#define RCM_RPC_RSTFLTSS_WIDTH                   1u\n#define RCM_RPC_RSTFLTSS(x)                      (((uint32_t)(((uint32_t)(x))<<RCM_RPC_RSTFLTSS_SHIFT))&RCM_RPC_RSTFLTSS_MASK)\n#define RCM_RPC_RSTFLTSEL_MASK                   0x1F00u\n#define RCM_RPC_RSTFLTSEL_SHIFT                  8u\n#define RCM_RPC_RSTFLTSEL_WIDTH                  5u\n#define RCM_RPC_RSTFLTSEL(x)                     (((uint32_t)(((uint32_t)(x))<<RCM_RPC_RSTFLTSEL_SHIFT))&RCM_RPC_RSTFLTSEL_MASK)\n/* SSRS Bit Fields */\n#define RCM_SSRS_SLVD_MASK                       0x2u\n#define RCM_SSRS_SLVD_SHIFT                      1u\n#define RCM_SSRS_SLVD_WIDTH                      1u\n#define RCM_SSRS_SLVD(x)                         (((uint32_t)(((uint32_t)(x))<<RCM_SSRS_SLVD_SHIFT))&RCM_SSRS_SLVD_MASK)\n#define RCM_SSRS_SLOC_MASK                       0x4u\n#define RCM_SSRS_SLOC_SHIFT                      2u\n#define RCM_SSRS_SLOC_WIDTH                      1u\n#define RCM_SSRS_SLOC(x)                         (((uint32_t)(((uint32_t)(x))<<RCM_SSRS_SLOC_SHIFT))&RCM_SSRS_SLOC_MASK)\n#define RCM_SSRS_SLOL_MASK                       0x8u\n#define RCM_SSRS_SLOL_SHIFT                      3u\n#define RCM_SSRS_SLOL_WIDTH                      1u\n#define RCM_SSRS_SLOL(x)                         (((uint32_t)(((uint32_t)(x))<<RCM_SSRS_SLOL_SHIFT))&RCM_SSRS_SLOL_MASK)\n#define RCM_SSRS_SWDOG_MASK                      0x20u\n#define RCM_SSRS_SWDOG_SHIFT                     5u\n#define RCM_SSRS_SWDOG_WIDTH                     1u\n#define RCM_SSRS_SWDOG(x)                        (((uint32_t)(((uint32_t)(x))<<RCM_SSRS_SWDOG_SHIFT))&RCM_SSRS_SWDOG_MASK)\n#define RCM_SSRS_SPIN_MASK                       0x40u\n#define RCM_SSRS_SPIN_SHIFT                      6u\n#define RCM_SSRS_SPIN_WIDTH                      1u\n#define RCM_SSRS_SPIN(x)                         (((uint32_t)(((uint32_t)(x))<<RCM_SSRS_SPIN_SHIFT))&RCM_SSRS_SPIN_MASK)\n#define RCM_SSRS_SPOR_MASK                       0x80u\n#define RCM_SSRS_SPOR_SHIFT                      7u\n#define RCM_SSRS_SPOR_WIDTH                      1u\n#define RCM_SSRS_SPOR(x)                         (((uint32_t)(((uint32_t)(x))<<RCM_SSRS_SPOR_SHIFT))&RCM_SSRS_SPOR_MASK)\n#define RCM_SSRS_SJTAG_MASK                      0x100u\n#define RCM_SSRS_SJTAG_SHIFT                     8u\n#define RCM_SSRS_SJTAG_WIDTH                     1u\n#define RCM_SSRS_SJTAG(x)                        (((uint32_t)(((uint32_t)(x))<<RCM_SSRS_SJTAG_SHIFT))&RCM_SSRS_SJTAG_MASK)\n#define RCM_SSRS_SLOCKUP_MASK                    0x200u\n#define RCM_SSRS_SLOCKUP_SHIFT                   9u\n#define RCM_SSRS_SLOCKUP_WIDTH                   1u\n#define RCM_SSRS_SLOCKUP(x)                      (((uint32_t)(((uint32_t)(x))<<RCM_SSRS_SLOCKUP_SHIFT))&RCM_SSRS_SLOCKUP_MASK)\n#define RCM_SSRS_SSW_MASK                        0x400u\n#define RCM_SSRS_SSW_SHIFT                       10u\n#define RCM_SSRS_SSW_WIDTH                       1u\n#define RCM_SSRS_SSW(x)                          (((uint32_t)(((uint32_t)(x))<<RCM_SSRS_SSW_SHIFT))&RCM_SSRS_SSW_MASK)\n#define RCM_SSRS_SMDM_AP_MASK                    0x800u\n#define RCM_SSRS_SMDM_AP_SHIFT                   11u\n#define RCM_SSRS_SMDM_AP_WIDTH                   1u\n#define RCM_SSRS_SMDM_AP(x)                      (((uint32_t)(((uint32_t)(x))<<RCM_SSRS_SMDM_AP_SHIFT))&RCM_SSRS_SMDM_AP_MASK)\n#define RCM_SSRS_SSACKERR_MASK                   0x2000u\n#define RCM_SSRS_SSACKERR_SHIFT                  13u\n#define RCM_SSRS_SSACKERR_WIDTH                  1u\n#define RCM_SSRS_SSACKERR(x)                     (((uint32_t)(((uint32_t)(x))<<RCM_SSRS_SSACKERR_SHIFT))&RCM_SSRS_SSACKERR_MASK)\n/* SRIE Bit Fields */\n#define RCM_SRIE_DELAY_MASK                      0x3u\n#define RCM_SRIE_DELAY_SHIFT                     0u\n#define RCM_SRIE_DELAY_WIDTH                     2u\n#define RCM_SRIE_DELAY(x)                        (((uint32_t)(((uint32_t)(x))<<RCM_SRIE_DELAY_SHIFT))&RCM_SRIE_DELAY_MASK)\n#define RCM_SRIE_LOC_MASK                        0x4u\n#define RCM_SRIE_LOC_SHIFT                       2u\n#define RCM_SRIE_LOC_WIDTH                       1u\n#define RCM_SRIE_LOC(x)                          (((uint32_t)(((uint32_t)(x))<<RCM_SRIE_LOC_SHIFT))&RCM_SRIE_LOC_MASK)\n#define RCM_SRIE_LOL_MASK                        0x8u\n#define RCM_SRIE_LOL_SHIFT                       3u\n#define RCM_SRIE_LOL_WIDTH                       1u\n#define RCM_SRIE_LOL(x)                          (((uint32_t)(((uint32_t)(x))<<RCM_SRIE_LOL_SHIFT))&RCM_SRIE_LOL_MASK)\n#define RCM_SRIE_WDOG_MASK                       0x20u\n#define RCM_SRIE_WDOG_SHIFT                      5u\n#define RCM_SRIE_WDOG_WIDTH                      1u\n#define RCM_SRIE_WDOG(x)                         (((uint32_t)(((uint32_t)(x))<<RCM_SRIE_WDOG_SHIFT))&RCM_SRIE_WDOG_MASK)\n#define RCM_SRIE_PIN_MASK                        0x40u\n#define RCM_SRIE_PIN_SHIFT                       6u\n#define RCM_SRIE_PIN_WIDTH                       1u\n#define RCM_SRIE_PIN(x)                          (((uint32_t)(((uint32_t)(x))<<RCM_SRIE_PIN_SHIFT))&RCM_SRIE_PIN_MASK)\n#define RCM_SRIE_GIE_MASK                        0x80u\n#define RCM_SRIE_GIE_SHIFT                       7u\n#define RCM_SRIE_GIE_WIDTH                       1u\n#define RCM_SRIE_GIE(x)                          (((uint32_t)(((uint32_t)(x))<<RCM_SRIE_GIE_SHIFT))&RCM_SRIE_GIE_MASK)\n#define RCM_SRIE_JTAG_MASK                       0x100u\n#define RCM_SRIE_JTAG_SHIFT                      8u\n#define RCM_SRIE_JTAG_WIDTH                      1u\n#define RCM_SRIE_JTAG(x)                         (((uint32_t)(((uint32_t)(x))<<RCM_SRIE_JTAG_SHIFT))&RCM_SRIE_JTAG_MASK)\n#define RCM_SRIE_LOCKUP_MASK                     0x200u\n#define RCM_SRIE_LOCKUP_SHIFT                    9u\n#define RCM_SRIE_LOCKUP_WIDTH                    1u\n#define RCM_SRIE_LOCKUP(x)                       (((uint32_t)(((uint32_t)(x))<<RCM_SRIE_LOCKUP_SHIFT))&RCM_SRIE_LOCKUP_MASK)\n#define RCM_SRIE_SW_MASK                         0x400u\n#define RCM_SRIE_SW_SHIFT                        10u\n#define RCM_SRIE_SW_WIDTH                        1u\n#define RCM_SRIE_SW(x)                           (((uint32_t)(((uint32_t)(x))<<RCM_SRIE_SW_SHIFT))&RCM_SRIE_SW_MASK)\n#define RCM_SRIE_MDM_AP_MASK                     0x800u\n#define RCM_SRIE_MDM_AP_SHIFT                    11u\n#define RCM_SRIE_MDM_AP_WIDTH                    1u\n#define RCM_SRIE_MDM_AP(x)                       (((uint32_t)(((uint32_t)(x))<<RCM_SRIE_MDM_AP_SHIFT))&RCM_SRIE_MDM_AP_MASK)\n#define RCM_SRIE_SACKERR_MASK                    0x2000u\n#define RCM_SRIE_SACKERR_SHIFT                   13u\n#define RCM_SRIE_SACKERR_WIDTH                   1u\n#define RCM_SRIE_SACKERR(x)                      (((uint32_t)(((uint32_t)(x))<<RCM_SRIE_SACKERR_SHIFT))&RCM_SRIE_SACKERR_MASK)\n\n/*!\n * @}\n */ /* end of group RCM_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group RCM_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- RTC Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup RTC_Peripheral_Access_Layer RTC Peripheral Access Layer\n * @{\n */\n\n\n/** RTC - Size of Registers Arrays */\n\n/** RTC - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t TSR;                               /**< RTC Time Seconds Register, offset: 0x0 */\n  __IO uint32_t TPR;                               /**< RTC Time Prescaler Register, offset: 0x4 */\n  __IO uint32_t TAR;                               /**< RTC Time Alarm Register, offset: 0x8 */\n  __IO uint32_t TCR;                               /**< RTC Time Compensation Register, offset: 0xC */\n  __IO uint32_t CR;                                /**< RTC Control Register, offset: 0x10 */\n  __IO uint32_t SR;                                /**< RTC Status Register, offset: 0x14 */\n  __IO uint32_t LR;                                /**< RTC Lock Register, offset: 0x18 */\n  __IO uint32_t IER;                               /**< RTC Interrupt Enable Register, offset: 0x1C */\n} RTC_Type, *RTC_MemMapPtr;\n\n /** Number of instances of the RTC module. */\n#define RTC_INSTANCE_COUNT                       (1u)\n\n\n/* RTC - Peripheral instance base addresses */\n/** Peripheral RTC base address */\n#define RTC_BASE                                 (0x4003D000u)\n/** Peripheral RTC base pointer */\n#define RTC                                      ((RTC_Type *)RTC_BASE)\n/** Array initializer of RTC peripheral base addresses */\n#define RTC_BASE_ADDRS                           { RTC_BASE }\n/** Array initializer of RTC peripheral base pointers */\n#define RTC_BASE_PTRS                            { RTC }\n /** Number of interrupt vector arrays for the RTC module. */\n#define RTC_IRQS_ARR_COUNT                       (2u)\n /** Number of interrupt channels for the RTC module. */\n#define RTC_IRQS_CH_COUNT                        (1u)\n /** Number of interrupt channels for the SECONDS type of RTC module. */\n#define RTC_SECONDS_IRQS_CH_COUNT                (1u)\n/** Interrupt vectors for the RTC peripheral type */\n#define RTC_IRQS                                 { RTC_IRQn }\n#define RTC_SECONDS_IRQS                         { RTC_Seconds_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- RTC Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup RTC_Register_Masks RTC Register Masks\n * @{\n */\n\n/* TSR Bit Fields */\n#define RTC_TSR_TSR_MASK                         0xFFFFFFFFu\n#define RTC_TSR_TSR_SHIFT                        0u\n#define RTC_TSR_TSR_WIDTH                        32u\n#define RTC_TSR_TSR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TSR_TSR_SHIFT))&RTC_TSR_TSR_MASK)\n/* TPR Bit Fields */\n#define RTC_TPR_TPR_MASK                         0xFFFFu\n#define RTC_TPR_TPR_SHIFT                        0u\n#define RTC_TPR_TPR_WIDTH                        16u\n#define RTC_TPR_TPR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TPR_TPR_SHIFT))&RTC_TPR_TPR_MASK)\n/* TAR Bit Fields */\n#define RTC_TAR_TAR_MASK                         0xFFFFFFFFu\n#define RTC_TAR_TAR_SHIFT                        0u\n#define RTC_TAR_TAR_WIDTH                        32u\n#define RTC_TAR_TAR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TAR_TAR_SHIFT))&RTC_TAR_TAR_MASK)\n/* TCR Bit Fields */\n#define RTC_TCR_TCR_MASK                         0xFFu\n#define RTC_TCR_TCR_SHIFT                        0u\n#define RTC_TCR_TCR_WIDTH                        8u\n#define RTC_TCR_TCR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_TCR_SHIFT))&RTC_TCR_TCR_MASK)\n#define RTC_TCR_CIR_MASK                         0xFF00u\n#define RTC_TCR_CIR_SHIFT                        8u\n#define RTC_TCR_CIR_WIDTH                        8u\n#define RTC_TCR_CIR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_CIR_SHIFT))&RTC_TCR_CIR_MASK)\n#define RTC_TCR_TCV_MASK                         0xFF0000u\n#define RTC_TCR_TCV_SHIFT                        16u\n#define RTC_TCR_TCV_WIDTH                        8u\n#define RTC_TCR_TCV(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_TCV_SHIFT))&RTC_TCR_TCV_MASK)\n#define RTC_TCR_CIC_MASK                         0xFF000000u\n#define RTC_TCR_CIC_SHIFT                        24u\n#define RTC_TCR_CIC_WIDTH                        8u\n#define RTC_TCR_CIC(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_CIC_SHIFT))&RTC_TCR_CIC_MASK)\n/* CR Bit Fields */\n#define RTC_CR_SWR_MASK                          0x1u\n#define RTC_CR_SWR_SHIFT                         0u\n#define RTC_CR_SWR_WIDTH                         1u\n#define RTC_CR_SWR(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_CR_SWR_SHIFT))&RTC_CR_SWR_MASK)\n#define RTC_CR_SUP_MASK                          0x4u\n#define RTC_CR_SUP_SHIFT                         2u\n#define RTC_CR_SUP_WIDTH                         1u\n#define RTC_CR_SUP(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_CR_SUP_SHIFT))&RTC_CR_SUP_MASK)\n#define RTC_CR_UM_MASK                           0x8u\n#define RTC_CR_UM_SHIFT                          3u\n#define RTC_CR_UM_WIDTH                          1u\n#define RTC_CR_UM(x)                             (((uint32_t)(((uint32_t)(x))<<RTC_CR_UM_SHIFT))&RTC_CR_UM_MASK)\n#define RTC_CR_CPS_MASK                          0x20u\n#define RTC_CR_CPS_SHIFT                         5u\n#define RTC_CR_CPS_WIDTH                         1u\n#define RTC_CR_CPS(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_CR_CPS_SHIFT))&RTC_CR_CPS_MASK)\n#define RTC_CR_LPOS_MASK                         0x80u\n#define RTC_CR_LPOS_SHIFT                        7u\n#define RTC_CR_LPOS_WIDTH                        1u\n#define RTC_CR_LPOS(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_CR_LPOS_SHIFT))&RTC_CR_LPOS_MASK)\n#define RTC_CR_CLKO_MASK                         0x200u\n#define RTC_CR_CLKO_SHIFT                        9u\n#define RTC_CR_CLKO_WIDTH                        1u\n#define RTC_CR_CLKO(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_CR_CLKO_SHIFT))&RTC_CR_CLKO_MASK)\n#define RTC_CR_CPE_MASK                          0x1000000u\n#define RTC_CR_CPE_SHIFT                         24u\n#define RTC_CR_CPE_WIDTH                         1u\n#define RTC_CR_CPE(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_CR_CPE_SHIFT))&RTC_CR_CPE_MASK)\n/* SR Bit Fields */\n#define RTC_SR_TIF_MASK                          0x1u\n#define RTC_SR_TIF_SHIFT                         0u\n#define RTC_SR_TIF_WIDTH                         1u\n#define RTC_SR_TIF(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_SR_TIF_SHIFT))&RTC_SR_TIF_MASK)\n#define RTC_SR_TOF_MASK                          0x2u\n#define RTC_SR_TOF_SHIFT                         1u\n#define RTC_SR_TOF_WIDTH                         1u\n#define RTC_SR_TOF(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_SR_TOF_SHIFT))&RTC_SR_TOF_MASK)\n#define RTC_SR_TAF_MASK                          0x4u\n#define RTC_SR_TAF_SHIFT                         2u\n#define RTC_SR_TAF_WIDTH                         1u\n#define RTC_SR_TAF(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_SR_TAF_SHIFT))&RTC_SR_TAF_MASK)\n#define RTC_SR_TCE_MASK                          0x10u\n#define RTC_SR_TCE_SHIFT                         4u\n#define RTC_SR_TCE_WIDTH                         1u\n#define RTC_SR_TCE(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_SR_TCE_SHIFT))&RTC_SR_TCE_MASK)\n/* LR Bit Fields */\n#define RTC_LR_TCL_MASK                          0x8u\n#define RTC_LR_TCL_SHIFT                         3u\n#define RTC_LR_TCL_WIDTH                         1u\n#define RTC_LR_TCL(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_LR_TCL_SHIFT))&RTC_LR_TCL_MASK)\n#define RTC_LR_CRL_MASK                          0x10u\n#define RTC_LR_CRL_SHIFT                         4u\n#define RTC_LR_CRL_WIDTH                         1u\n#define RTC_LR_CRL(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_LR_CRL_SHIFT))&RTC_LR_CRL_MASK)\n#define RTC_LR_SRL_MASK                          0x20u\n#define RTC_LR_SRL_SHIFT                         5u\n#define RTC_LR_SRL_WIDTH                         1u\n#define RTC_LR_SRL(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_LR_SRL_SHIFT))&RTC_LR_SRL_MASK)\n#define RTC_LR_LRL_MASK                          0x40u\n#define RTC_LR_LRL_SHIFT                         6u\n#define RTC_LR_LRL_WIDTH                         1u\n#define RTC_LR_LRL(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_LR_LRL_SHIFT))&RTC_LR_LRL_MASK)\n/* IER Bit Fields */\n#define RTC_IER_TIIE_MASK                        0x1u\n#define RTC_IER_TIIE_SHIFT                       0u\n#define RTC_IER_TIIE_WIDTH                       1u\n#define RTC_IER_TIIE(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TIIE_SHIFT))&RTC_IER_TIIE_MASK)\n#define RTC_IER_TOIE_MASK                        0x2u\n#define RTC_IER_TOIE_SHIFT                       1u\n#define RTC_IER_TOIE_WIDTH                       1u\n#define RTC_IER_TOIE(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TOIE_SHIFT))&RTC_IER_TOIE_MASK)\n#define RTC_IER_TAIE_MASK                        0x4u\n#define RTC_IER_TAIE_SHIFT                       2u\n#define RTC_IER_TAIE_WIDTH                       1u\n#define RTC_IER_TAIE(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TAIE_SHIFT))&RTC_IER_TAIE_MASK)\n#define RTC_IER_TSIE_MASK                        0x10u\n#define RTC_IER_TSIE_SHIFT                       4u\n#define RTC_IER_TSIE_WIDTH                       1u\n#define RTC_IER_TSIE(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TSIE_SHIFT))&RTC_IER_TSIE_MASK)\n#define RTC_IER_TSIC_MASK                        0x70000u\n#define RTC_IER_TSIC_SHIFT                       16u\n#define RTC_IER_TSIC_WIDTH                       3u\n#define RTC_IER_TSIC(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TSIC_SHIFT))&RTC_IER_TSIC_MASK)\n\n/*!\n * @}\n */ /* end of group RTC_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group RTC_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- S32_NVIC Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup S32_NVIC_Peripheral_Access_Layer S32_NVIC Peripheral Access Layer\n * @{\n */\n\n\n/** S32_NVIC - Size of Registers Arrays */\n#define S32_NVIC_ISER_COUNT                      8u\n#define S32_NVIC_ICER_COUNT                      8u\n#define S32_NVIC_ISPR_COUNT                      8u\n#define S32_NVIC_ICPR_COUNT                      8u\n#define S32_NVIC_IABR_COUNT                      8u\n#define S32_NVIC_IP_COUNT                        240u\n\n/** S32_NVIC - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t ISER[S32_NVIC_ISER_COUNT];         /**< Interrupt Set Enable Register n, array offset: 0x0, array step: 0x4 */\n       uint8_t RESERVED_0[96];\n  __IO uint32_t ICER[S32_NVIC_ICER_COUNT];         /**< Interrupt Clear Enable Register n, array offset: 0x80, array step: 0x4 */\n       uint8_t RESERVED_1[96];\n  __IO uint32_t ISPR[S32_NVIC_ISPR_COUNT];         /**< Interrupt Set Pending Register n, array offset: 0x100, array step: 0x4 */\n       uint8_t RESERVED_2[96];\n  __IO uint32_t ICPR[S32_NVIC_ICPR_COUNT];         /**< Interrupt Clear Pending Register n, array offset: 0x180, array step: 0x4 */\n       uint8_t RESERVED_3[96];\n  __IO uint32_t IABR[S32_NVIC_IABR_COUNT];         /**< Interrupt Active bit Register n, array offset: 0x200, array step: 0x4 */\n       uint8_t RESERVED_4[224];\n  __IO uint8_t IP[S32_NVIC_IP_COUNT];              /**< Interrupt Priority Register n, array offset: 0x300, array step: 0x1 */\n       uint8_t RESERVED_5[2576];\n  __O  uint32_t STIR;                              /**< Software Trigger Interrupt Register, offset: 0xE00 */\n} S32_NVIC_Type, *S32_NVIC_MemMapPtr;\n\n /** Number of instances of the S32_NVIC module. */\n#define S32_NVIC_INSTANCE_COUNT                  (1u)\n\n\n/* S32_NVIC - Peripheral instance base addresses */\n/** Peripheral S32_NVIC base address */\n#define S32_NVIC_BASE                            (0xE000E100u)\n/** Peripheral S32_NVIC base pointer */\n#define S32_NVIC                                 ((S32_NVIC_Type *)S32_NVIC_BASE)\n/** Array initializer of S32_NVIC peripheral base addresses */\n#define S32_NVIC_BASE_ADDRS                      { S32_NVIC_BASE }\n/** Array initializer of S32_NVIC peripheral base pointers */\n#define S32_NVIC_BASE_PTRS                       { S32_NVIC }\n /** Number of interrupt vector arrays for the S32_NVIC module. */\n#define S32_NVIC_IRQS_ARR_COUNT                  (1u)\n /** Number of interrupt channels for the S32_NVIC module. */\n#define S32_NVIC_IRQS_CH_COUNT                   (1u)\n/** Interrupt vectors for the S32_NVIC peripheral type */\n#define S32_NVIC_IRQS                            { SWI_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- S32_NVIC Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup S32_NVIC_Register_Masks S32_NVIC Register Masks\n * @{\n */\n\n/* ISER Bit Fields */\n#define S32_NVIC_ISER_SETENA_MASK                0xFFFFFFFFu\n#define S32_NVIC_ISER_SETENA_SHIFT               0u\n#define S32_NVIC_ISER_SETENA_WIDTH               32u\n#define S32_NVIC_ISER_SETENA(x)                  (((uint32_t)(((uint32_t)(x))<<S32_NVIC_ISER_SETENA_SHIFT))&S32_NVIC_ISER_SETENA_MASK)\n/* ICER Bit Fields */\n#define S32_NVIC_ICER_CLRENA_MASK                0xFFFFFFFFu\n#define S32_NVIC_ICER_CLRENA_SHIFT               0u\n#define S32_NVIC_ICER_CLRENA_WIDTH               32u\n#define S32_NVIC_ICER_CLRENA(x)                  (((uint32_t)(((uint32_t)(x))<<S32_NVIC_ICER_CLRENA_SHIFT))&S32_NVIC_ICER_CLRENA_MASK)\n/* ISPR Bit Fields */\n#define S32_NVIC_ISPR_SETPEND_MASK               0xFFFFFFFFu\n#define S32_NVIC_ISPR_SETPEND_SHIFT              0u\n#define S32_NVIC_ISPR_SETPEND_WIDTH              32u\n#define S32_NVIC_ISPR_SETPEND(x)                 (((uint32_t)(((uint32_t)(x))<<S32_NVIC_ISPR_SETPEND_SHIFT))&S32_NVIC_ISPR_SETPEND_MASK)\n/* ICPR Bit Fields */\n#define S32_NVIC_ICPR_CLRPEND_MASK               0xFFFFFFFFu\n#define S32_NVIC_ICPR_CLRPEND_SHIFT              0u\n#define S32_NVIC_ICPR_CLRPEND_WIDTH              32u\n#define S32_NVIC_ICPR_CLRPEND(x)                 (((uint32_t)(((uint32_t)(x))<<S32_NVIC_ICPR_CLRPEND_SHIFT))&S32_NVIC_ICPR_CLRPEND_MASK)\n/* IABR Bit Fields */\n#define S32_NVIC_IABR_ACTIVE_MASK                0xFFFFFFFFu\n#define S32_NVIC_IABR_ACTIVE_SHIFT               0u\n#define S32_NVIC_IABR_ACTIVE_WIDTH               32u\n#define S32_NVIC_IABR_ACTIVE(x)                  (((uint32_t)(((uint32_t)(x))<<S32_NVIC_IABR_ACTIVE_SHIFT))&S32_NVIC_IABR_ACTIVE_MASK)\n/* IP Bit Fields */\n#define S32_NVIC_IP_PRI0_MASK                    0xFFu\n#define S32_NVIC_IP_PRI0_SHIFT                   0u\n#define S32_NVIC_IP_PRI0_WIDTH                   8u\n#define S32_NVIC_IP_PRI0(x)                      (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI0_SHIFT))&S32_NVIC_IP_PRI0_MASK)\n#define S32_NVIC_IP_PRI1_MASK                    0xFFu\n#define S32_NVIC_IP_PRI1_SHIFT                   0u\n#define S32_NVIC_IP_PRI1_WIDTH                   8u\n#define S32_NVIC_IP_PRI1(x)                      (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI1_SHIFT))&S32_NVIC_IP_PRI1_MASK)\n#define S32_NVIC_IP_PRI2_MASK                    0xFFu\n#define S32_NVIC_IP_PRI2_SHIFT                   0u\n#define S32_NVIC_IP_PRI2_WIDTH                   8u\n#define S32_NVIC_IP_PRI2(x)                      (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI2_SHIFT))&S32_NVIC_IP_PRI2_MASK)\n#define S32_NVIC_IP_PRI3_MASK                    0xFFu\n#define S32_NVIC_IP_PRI3_SHIFT                   0u\n#define S32_NVIC_IP_PRI3_WIDTH                   8u\n#define S32_NVIC_IP_PRI3(x)                      (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI3_SHIFT))&S32_NVIC_IP_PRI3_MASK)\n#define S32_NVIC_IP_PRI4_MASK                    0xFFu\n#define S32_NVIC_IP_PRI4_SHIFT                   0u\n#define S32_NVIC_IP_PRI4_WIDTH                   8u\n#define S32_NVIC_IP_PRI4(x)                      (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI4_SHIFT))&S32_NVIC_IP_PRI4_MASK)\n#define S32_NVIC_IP_PRI5_MASK                    0xFFu\n#define S32_NVIC_IP_PRI5_SHIFT                   0u\n#define S32_NVIC_IP_PRI5_WIDTH                   8u\n#define S32_NVIC_IP_PRI5(x)                      (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI5_SHIFT))&S32_NVIC_IP_PRI5_MASK)\n#define S32_NVIC_IP_PRI6_MASK                    0xFFu\n#define S32_NVIC_IP_PRI6_SHIFT                   0u\n#define S32_NVIC_IP_PRI6_WIDTH                   8u\n#define S32_NVIC_IP_PRI6(x)                      (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI6_SHIFT))&S32_NVIC_IP_PRI6_MASK)\n#define S32_NVIC_IP_PRI7_MASK                    0xFFu\n#define S32_NVIC_IP_PRI7_SHIFT                   0u\n#define S32_NVIC_IP_PRI7_WIDTH                   8u\n#define S32_NVIC_IP_PRI7(x)                      (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI7_SHIFT))&S32_NVIC_IP_PRI7_MASK)\n#define S32_NVIC_IP_PRI8_MASK                    0xFFu\n#define S32_NVIC_IP_PRI8_SHIFT                   0u\n#define S32_NVIC_IP_PRI8_WIDTH                   8u\n#define S32_NVIC_IP_PRI8(x)                      (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI8_SHIFT))&S32_NVIC_IP_PRI8_MASK)\n#define S32_NVIC_IP_PRI9_MASK                    0xFFu\n#define S32_NVIC_IP_PRI9_SHIFT                   0u\n#define S32_NVIC_IP_PRI9_WIDTH                   8u\n#define S32_NVIC_IP_PRI9(x)                      (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI9_SHIFT))&S32_NVIC_IP_PRI9_MASK)\n#define S32_NVIC_IP_PRI10_MASK                   0xFFu\n#define S32_NVIC_IP_PRI10_SHIFT                  0u\n#define S32_NVIC_IP_PRI10_WIDTH                  8u\n#define S32_NVIC_IP_PRI10(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI10_SHIFT))&S32_NVIC_IP_PRI10_MASK)\n#define S32_NVIC_IP_PRI11_MASK                   0xFFu\n#define S32_NVIC_IP_PRI11_SHIFT                  0u\n#define S32_NVIC_IP_PRI11_WIDTH                  8u\n#define S32_NVIC_IP_PRI11(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI11_SHIFT))&S32_NVIC_IP_PRI11_MASK)\n#define S32_NVIC_IP_PRI12_MASK                   0xFFu\n#define S32_NVIC_IP_PRI12_SHIFT                  0u\n#define S32_NVIC_IP_PRI12_WIDTH                  8u\n#define S32_NVIC_IP_PRI12(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI12_SHIFT))&S32_NVIC_IP_PRI12_MASK)\n#define S32_NVIC_IP_PRI13_MASK                   0xFFu\n#define S32_NVIC_IP_PRI13_SHIFT                  0u\n#define S32_NVIC_IP_PRI13_WIDTH                  8u\n#define S32_NVIC_IP_PRI13(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI13_SHIFT))&S32_NVIC_IP_PRI13_MASK)\n#define S32_NVIC_IP_PRI14_MASK                   0xFFu\n#define S32_NVIC_IP_PRI14_SHIFT                  0u\n#define S32_NVIC_IP_PRI14_WIDTH                  8u\n#define S32_NVIC_IP_PRI14(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI14_SHIFT))&S32_NVIC_IP_PRI14_MASK)\n#define S32_NVIC_IP_PRI15_MASK                   0xFFu\n#define S32_NVIC_IP_PRI15_SHIFT                  0u\n#define S32_NVIC_IP_PRI15_WIDTH                  8u\n#define S32_NVIC_IP_PRI15(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI15_SHIFT))&S32_NVIC_IP_PRI15_MASK)\n#define S32_NVIC_IP_PRI16_MASK                   0xFFu\n#define S32_NVIC_IP_PRI16_SHIFT                  0u\n#define S32_NVIC_IP_PRI16_WIDTH                  8u\n#define S32_NVIC_IP_PRI16(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI16_SHIFT))&S32_NVIC_IP_PRI16_MASK)\n#define S32_NVIC_IP_PRI17_MASK                   0xFFu\n#define S32_NVIC_IP_PRI17_SHIFT                  0u\n#define S32_NVIC_IP_PRI17_WIDTH                  8u\n#define S32_NVIC_IP_PRI17(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI17_SHIFT))&S32_NVIC_IP_PRI17_MASK)\n#define S32_NVIC_IP_PRI18_MASK                   0xFFu\n#define S32_NVIC_IP_PRI18_SHIFT                  0u\n#define S32_NVIC_IP_PRI18_WIDTH                  8u\n#define S32_NVIC_IP_PRI18(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI18_SHIFT))&S32_NVIC_IP_PRI18_MASK)\n#define S32_NVIC_IP_PRI19_MASK                   0xFFu\n#define S32_NVIC_IP_PRI19_SHIFT                  0u\n#define S32_NVIC_IP_PRI19_WIDTH                  8u\n#define S32_NVIC_IP_PRI19(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI19_SHIFT))&S32_NVIC_IP_PRI19_MASK)\n#define S32_NVIC_IP_PRI20_MASK                   0xFFu\n#define S32_NVIC_IP_PRI20_SHIFT                  0u\n#define S32_NVIC_IP_PRI20_WIDTH                  8u\n#define S32_NVIC_IP_PRI20(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI20_SHIFT))&S32_NVIC_IP_PRI20_MASK)\n#define S32_NVIC_IP_PRI21_MASK                   0xFFu\n#define S32_NVIC_IP_PRI21_SHIFT                  0u\n#define S32_NVIC_IP_PRI21_WIDTH                  8u\n#define S32_NVIC_IP_PRI21(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI21_SHIFT))&S32_NVIC_IP_PRI21_MASK)\n#define S32_NVIC_IP_PRI22_MASK                   0xFFu\n#define S32_NVIC_IP_PRI22_SHIFT                  0u\n#define S32_NVIC_IP_PRI22_WIDTH                  8u\n#define S32_NVIC_IP_PRI22(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI22_SHIFT))&S32_NVIC_IP_PRI22_MASK)\n#define S32_NVIC_IP_PRI23_MASK                   0xFFu\n#define S32_NVIC_IP_PRI23_SHIFT                  0u\n#define S32_NVIC_IP_PRI23_WIDTH                  8u\n#define S32_NVIC_IP_PRI23(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI23_SHIFT))&S32_NVIC_IP_PRI23_MASK)\n#define S32_NVIC_IP_PRI24_MASK                   0xFFu\n#define S32_NVIC_IP_PRI24_SHIFT                  0u\n#define S32_NVIC_IP_PRI24_WIDTH                  8u\n#define S32_NVIC_IP_PRI24(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI24_SHIFT))&S32_NVIC_IP_PRI24_MASK)\n#define S32_NVIC_IP_PRI25_MASK                   0xFFu\n#define S32_NVIC_IP_PRI25_SHIFT                  0u\n#define S32_NVIC_IP_PRI25_WIDTH                  8u\n#define S32_NVIC_IP_PRI25(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI25_SHIFT))&S32_NVIC_IP_PRI25_MASK)\n#define S32_NVIC_IP_PRI26_MASK                   0xFFu\n#define S32_NVIC_IP_PRI26_SHIFT                  0u\n#define S32_NVIC_IP_PRI26_WIDTH                  8u\n#define S32_NVIC_IP_PRI26(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI26_SHIFT))&S32_NVIC_IP_PRI26_MASK)\n#define S32_NVIC_IP_PRI27_MASK                   0xFFu\n#define S32_NVIC_IP_PRI27_SHIFT                  0u\n#define S32_NVIC_IP_PRI27_WIDTH                  8u\n#define S32_NVIC_IP_PRI27(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI27_SHIFT))&S32_NVIC_IP_PRI27_MASK)\n#define S32_NVIC_IP_PRI28_MASK                   0xFFu\n#define S32_NVIC_IP_PRI28_SHIFT                  0u\n#define S32_NVIC_IP_PRI28_WIDTH                  8u\n#define S32_NVIC_IP_PRI28(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI28_SHIFT))&S32_NVIC_IP_PRI28_MASK)\n#define S32_NVIC_IP_PRI29_MASK                   0xFFu\n#define S32_NVIC_IP_PRI29_SHIFT                  0u\n#define S32_NVIC_IP_PRI29_WIDTH                  8u\n#define S32_NVIC_IP_PRI29(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI29_SHIFT))&S32_NVIC_IP_PRI29_MASK)\n#define S32_NVIC_IP_PRI30_MASK                   0xFFu\n#define S32_NVIC_IP_PRI30_SHIFT                  0u\n#define S32_NVIC_IP_PRI30_WIDTH                  8u\n#define S32_NVIC_IP_PRI30(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI30_SHIFT))&S32_NVIC_IP_PRI30_MASK)\n#define S32_NVIC_IP_PRI31_MASK                   0xFFu\n#define S32_NVIC_IP_PRI31_SHIFT                  0u\n#define S32_NVIC_IP_PRI31_WIDTH                  8u\n#define S32_NVIC_IP_PRI31(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI31_SHIFT))&S32_NVIC_IP_PRI31_MASK)\n#define S32_NVIC_IP_PRI32_MASK                   0xFFu\n#define S32_NVIC_IP_PRI32_SHIFT                  0u\n#define S32_NVIC_IP_PRI32_WIDTH                  8u\n#define S32_NVIC_IP_PRI32(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI32_SHIFT))&S32_NVIC_IP_PRI32_MASK)\n#define S32_NVIC_IP_PRI33_MASK                   0xFFu\n#define S32_NVIC_IP_PRI33_SHIFT                  0u\n#define S32_NVIC_IP_PRI33_WIDTH                  8u\n#define S32_NVIC_IP_PRI33(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI33_SHIFT))&S32_NVIC_IP_PRI33_MASK)\n#define S32_NVIC_IP_PRI34_MASK                   0xFFu\n#define S32_NVIC_IP_PRI34_SHIFT                  0u\n#define S32_NVIC_IP_PRI34_WIDTH                  8u\n#define S32_NVIC_IP_PRI34(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI34_SHIFT))&S32_NVIC_IP_PRI34_MASK)\n#define S32_NVIC_IP_PRI35_MASK                   0xFFu\n#define S32_NVIC_IP_PRI35_SHIFT                  0u\n#define S32_NVIC_IP_PRI35_WIDTH                  8u\n#define S32_NVIC_IP_PRI35(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI35_SHIFT))&S32_NVIC_IP_PRI35_MASK)\n#define S32_NVIC_IP_PRI36_MASK                   0xFFu\n#define S32_NVIC_IP_PRI36_SHIFT                  0u\n#define S32_NVIC_IP_PRI36_WIDTH                  8u\n#define S32_NVIC_IP_PRI36(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI36_SHIFT))&S32_NVIC_IP_PRI36_MASK)\n#define S32_NVIC_IP_PRI37_MASK                   0xFFu\n#define S32_NVIC_IP_PRI37_SHIFT                  0u\n#define S32_NVIC_IP_PRI37_WIDTH                  8u\n#define S32_NVIC_IP_PRI37(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI37_SHIFT))&S32_NVIC_IP_PRI37_MASK)\n#define S32_NVIC_IP_PRI38_MASK                   0xFFu\n#define S32_NVIC_IP_PRI38_SHIFT                  0u\n#define S32_NVIC_IP_PRI38_WIDTH                  8u\n#define S32_NVIC_IP_PRI38(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI38_SHIFT))&S32_NVIC_IP_PRI38_MASK)\n#define S32_NVIC_IP_PRI39_MASK                   0xFFu\n#define S32_NVIC_IP_PRI39_SHIFT                  0u\n#define S32_NVIC_IP_PRI39_WIDTH                  8u\n#define S32_NVIC_IP_PRI39(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI39_SHIFT))&S32_NVIC_IP_PRI39_MASK)\n#define S32_NVIC_IP_PRI40_MASK                   0xFFu\n#define S32_NVIC_IP_PRI40_SHIFT                  0u\n#define S32_NVIC_IP_PRI40_WIDTH                  8u\n#define S32_NVIC_IP_PRI40(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI40_SHIFT))&S32_NVIC_IP_PRI40_MASK)\n#define S32_NVIC_IP_PRI41_MASK                   0xFFu\n#define S32_NVIC_IP_PRI41_SHIFT                  0u\n#define S32_NVIC_IP_PRI41_WIDTH                  8u\n#define S32_NVIC_IP_PRI41(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI41_SHIFT))&S32_NVIC_IP_PRI41_MASK)\n#define S32_NVIC_IP_PRI42_MASK                   0xFFu\n#define S32_NVIC_IP_PRI42_SHIFT                  0u\n#define S32_NVIC_IP_PRI42_WIDTH                  8u\n#define S32_NVIC_IP_PRI42(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI42_SHIFT))&S32_NVIC_IP_PRI42_MASK)\n#define S32_NVIC_IP_PRI43_MASK                   0xFFu\n#define S32_NVIC_IP_PRI43_SHIFT                  0u\n#define S32_NVIC_IP_PRI43_WIDTH                  8u\n#define S32_NVIC_IP_PRI43(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI43_SHIFT))&S32_NVIC_IP_PRI43_MASK)\n#define S32_NVIC_IP_PRI44_MASK                   0xFFu\n#define S32_NVIC_IP_PRI44_SHIFT                  0u\n#define S32_NVIC_IP_PRI44_WIDTH                  8u\n#define S32_NVIC_IP_PRI44(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI44_SHIFT))&S32_NVIC_IP_PRI44_MASK)\n#define S32_NVIC_IP_PRI45_MASK                   0xFFu\n#define S32_NVIC_IP_PRI45_SHIFT                  0u\n#define S32_NVIC_IP_PRI45_WIDTH                  8u\n#define S32_NVIC_IP_PRI45(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI45_SHIFT))&S32_NVIC_IP_PRI45_MASK)\n#define S32_NVIC_IP_PRI46_MASK                   0xFFu\n#define S32_NVIC_IP_PRI46_SHIFT                  0u\n#define S32_NVIC_IP_PRI46_WIDTH                  8u\n#define S32_NVIC_IP_PRI46(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI46_SHIFT))&S32_NVIC_IP_PRI46_MASK)\n#define S32_NVIC_IP_PRI47_MASK                   0xFFu\n#define S32_NVIC_IP_PRI47_SHIFT                  0u\n#define S32_NVIC_IP_PRI47_WIDTH                  8u\n#define S32_NVIC_IP_PRI47(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI47_SHIFT))&S32_NVIC_IP_PRI47_MASK)\n#define S32_NVIC_IP_PRI48_MASK                   0xFFu\n#define S32_NVIC_IP_PRI48_SHIFT                  0u\n#define S32_NVIC_IP_PRI48_WIDTH                  8u\n#define S32_NVIC_IP_PRI48(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI48_SHIFT))&S32_NVIC_IP_PRI48_MASK)\n#define S32_NVIC_IP_PRI49_MASK                   0xFFu\n#define S32_NVIC_IP_PRI49_SHIFT                  0u\n#define S32_NVIC_IP_PRI49_WIDTH                  8u\n#define S32_NVIC_IP_PRI49(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI49_SHIFT))&S32_NVIC_IP_PRI49_MASK)\n#define S32_NVIC_IP_PRI50_MASK                   0xFFu\n#define S32_NVIC_IP_PRI50_SHIFT                  0u\n#define S32_NVIC_IP_PRI50_WIDTH                  8u\n#define S32_NVIC_IP_PRI50(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI50_SHIFT))&S32_NVIC_IP_PRI50_MASK)\n#define S32_NVIC_IP_PRI51_MASK                   0xFFu\n#define S32_NVIC_IP_PRI51_SHIFT                  0u\n#define S32_NVIC_IP_PRI51_WIDTH                  8u\n#define S32_NVIC_IP_PRI51(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI51_SHIFT))&S32_NVIC_IP_PRI51_MASK)\n#define S32_NVIC_IP_PRI52_MASK                   0xFFu\n#define S32_NVIC_IP_PRI52_SHIFT                  0u\n#define S32_NVIC_IP_PRI52_WIDTH                  8u\n#define S32_NVIC_IP_PRI52(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI52_SHIFT))&S32_NVIC_IP_PRI52_MASK)\n#define S32_NVIC_IP_PRI53_MASK                   0xFFu\n#define S32_NVIC_IP_PRI53_SHIFT                  0u\n#define S32_NVIC_IP_PRI53_WIDTH                  8u\n#define S32_NVIC_IP_PRI53(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI53_SHIFT))&S32_NVIC_IP_PRI53_MASK)\n#define S32_NVIC_IP_PRI54_MASK                   0xFFu\n#define S32_NVIC_IP_PRI54_SHIFT                  0u\n#define S32_NVIC_IP_PRI54_WIDTH                  8u\n#define S32_NVIC_IP_PRI54(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI54_SHIFT))&S32_NVIC_IP_PRI54_MASK)\n#define S32_NVIC_IP_PRI55_MASK                   0xFFu\n#define S32_NVIC_IP_PRI55_SHIFT                  0u\n#define S32_NVIC_IP_PRI55_WIDTH                  8u\n#define S32_NVIC_IP_PRI55(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI55_SHIFT))&S32_NVIC_IP_PRI55_MASK)\n#define S32_NVIC_IP_PRI56_MASK                   0xFFu\n#define S32_NVIC_IP_PRI56_SHIFT                  0u\n#define S32_NVIC_IP_PRI56_WIDTH                  8u\n#define S32_NVIC_IP_PRI56(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI56_SHIFT))&S32_NVIC_IP_PRI56_MASK)\n#define S32_NVIC_IP_PRI57_MASK                   0xFFu\n#define S32_NVIC_IP_PRI57_SHIFT                  0u\n#define S32_NVIC_IP_PRI57_WIDTH                  8u\n#define S32_NVIC_IP_PRI57(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI57_SHIFT))&S32_NVIC_IP_PRI57_MASK)\n#define S32_NVIC_IP_PRI58_MASK                   0xFFu\n#define S32_NVIC_IP_PRI58_SHIFT                  0u\n#define S32_NVIC_IP_PRI58_WIDTH                  8u\n#define S32_NVIC_IP_PRI58(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI58_SHIFT))&S32_NVIC_IP_PRI58_MASK)\n#define S32_NVIC_IP_PRI59_MASK                   0xFFu\n#define S32_NVIC_IP_PRI59_SHIFT                  0u\n#define S32_NVIC_IP_PRI59_WIDTH                  8u\n#define S32_NVIC_IP_PRI59(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI59_SHIFT))&S32_NVIC_IP_PRI59_MASK)\n#define S32_NVIC_IP_PRI60_MASK                   0xFFu\n#define S32_NVIC_IP_PRI60_SHIFT                  0u\n#define S32_NVIC_IP_PRI60_WIDTH                  8u\n#define S32_NVIC_IP_PRI60(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI60_SHIFT))&S32_NVIC_IP_PRI60_MASK)\n#define S32_NVIC_IP_PRI61_MASK                   0xFFu\n#define S32_NVIC_IP_PRI61_SHIFT                  0u\n#define S32_NVIC_IP_PRI61_WIDTH                  8u\n#define S32_NVIC_IP_PRI61(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI61_SHIFT))&S32_NVIC_IP_PRI61_MASK)\n#define S32_NVIC_IP_PRI62_MASK                   0xFFu\n#define S32_NVIC_IP_PRI62_SHIFT                  0u\n#define S32_NVIC_IP_PRI62_WIDTH                  8u\n#define S32_NVIC_IP_PRI62(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI62_SHIFT))&S32_NVIC_IP_PRI62_MASK)\n#define S32_NVIC_IP_PRI63_MASK                   0xFFu\n#define S32_NVIC_IP_PRI63_SHIFT                  0u\n#define S32_NVIC_IP_PRI63_WIDTH                  8u\n#define S32_NVIC_IP_PRI63(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI63_SHIFT))&S32_NVIC_IP_PRI63_MASK)\n#define S32_NVIC_IP_PRI64_MASK                   0xFFu\n#define S32_NVIC_IP_PRI64_SHIFT                  0u\n#define S32_NVIC_IP_PRI64_WIDTH                  8u\n#define S32_NVIC_IP_PRI64(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI64_SHIFT))&S32_NVIC_IP_PRI64_MASK)\n#define S32_NVIC_IP_PRI65_MASK                   0xFFu\n#define S32_NVIC_IP_PRI65_SHIFT                  0u\n#define S32_NVIC_IP_PRI65_WIDTH                  8u\n#define S32_NVIC_IP_PRI65(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI65_SHIFT))&S32_NVIC_IP_PRI65_MASK)\n#define S32_NVIC_IP_PRI66_MASK                   0xFFu\n#define S32_NVIC_IP_PRI66_SHIFT                  0u\n#define S32_NVIC_IP_PRI66_WIDTH                  8u\n#define S32_NVIC_IP_PRI66(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI66_SHIFT))&S32_NVIC_IP_PRI66_MASK)\n#define S32_NVIC_IP_PRI67_MASK                   0xFFu\n#define S32_NVIC_IP_PRI67_SHIFT                  0u\n#define S32_NVIC_IP_PRI67_WIDTH                  8u\n#define S32_NVIC_IP_PRI67(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI67_SHIFT))&S32_NVIC_IP_PRI67_MASK)\n#define S32_NVIC_IP_PRI68_MASK                   0xFFu\n#define S32_NVIC_IP_PRI68_SHIFT                  0u\n#define S32_NVIC_IP_PRI68_WIDTH                  8u\n#define S32_NVIC_IP_PRI68(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI68_SHIFT))&S32_NVIC_IP_PRI68_MASK)\n#define S32_NVIC_IP_PRI69_MASK                   0xFFu\n#define S32_NVIC_IP_PRI69_SHIFT                  0u\n#define S32_NVIC_IP_PRI69_WIDTH                  8u\n#define S32_NVIC_IP_PRI69(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI69_SHIFT))&S32_NVIC_IP_PRI69_MASK)\n#define S32_NVIC_IP_PRI70_MASK                   0xFFu\n#define S32_NVIC_IP_PRI70_SHIFT                  0u\n#define S32_NVIC_IP_PRI70_WIDTH                  8u\n#define S32_NVIC_IP_PRI70(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI70_SHIFT))&S32_NVIC_IP_PRI70_MASK)\n#define S32_NVIC_IP_PRI71_MASK                   0xFFu\n#define S32_NVIC_IP_PRI71_SHIFT                  0u\n#define S32_NVIC_IP_PRI71_WIDTH                  8u\n#define S32_NVIC_IP_PRI71(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI71_SHIFT))&S32_NVIC_IP_PRI71_MASK)\n#define S32_NVIC_IP_PRI72_MASK                   0xFFu\n#define S32_NVIC_IP_PRI72_SHIFT                  0u\n#define S32_NVIC_IP_PRI72_WIDTH                  8u\n#define S32_NVIC_IP_PRI72(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI72_SHIFT))&S32_NVIC_IP_PRI72_MASK)\n#define S32_NVIC_IP_PRI73_MASK                   0xFFu\n#define S32_NVIC_IP_PRI73_SHIFT                  0u\n#define S32_NVIC_IP_PRI73_WIDTH                  8u\n#define S32_NVIC_IP_PRI73(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI73_SHIFT))&S32_NVIC_IP_PRI73_MASK)\n#define S32_NVIC_IP_PRI74_MASK                   0xFFu\n#define S32_NVIC_IP_PRI74_SHIFT                  0u\n#define S32_NVIC_IP_PRI74_WIDTH                  8u\n#define S32_NVIC_IP_PRI74(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI74_SHIFT))&S32_NVIC_IP_PRI74_MASK)\n#define S32_NVIC_IP_PRI75_MASK                   0xFFu\n#define S32_NVIC_IP_PRI75_SHIFT                  0u\n#define S32_NVIC_IP_PRI75_WIDTH                  8u\n#define S32_NVIC_IP_PRI75(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI75_SHIFT))&S32_NVIC_IP_PRI75_MASK)\n#define S32_NVIC_IP_PRI76_MASK                   0xFFu\n#define S32_NVIC_IP_PRI76_SHIFT                  0u\n#define S32_NVIC_IP_PRI76_WIDTH                  8u\n#define S32_NVIC_IP_PRI76(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI76_SHIFT))&S32_NVIC_IP_PRI76_MASK)\n#define S32_NVIC_IP_PRI77_MASK                   0xFFu\n#define S32_NVIC_IP_PRI77_SHIFT                  0u\n#define S32_NVIC_IP_PRI77_WIDTH                  8u\n#define S32_NVIC_IP_PRI77(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI77_SHIFT))&S32_NVIC_IP_PRI77_MASK)\n#define S32_NVIC_IP_PRI78_MASK                   0xFFu\n#define S32_NVIC_IP_PRI78_SHIFT                  0u\n#define S32_NVIC_IP_PRI78_WIDTH                  8u\n#define S32_NVIC_IP_PRI78(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI78_SHIFT))&S32_NVIC_IP_PRI78_MASK)\n#define S32_NVIC_IP_PRI79_MASK                   0xFFu\n#define S32_NVIC_IP_PRI79_SHIFT                  0u\n#define S32_NVIC_IP_PRI79_WIDTH                  8u\n#define S32_NVIC_IP_PRI79(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI79_SHIFT))&S32_NVIC_IP_PRI79_MASK)\n#define S32_NVIC_IP_PRI80_MASK                   0xFFu\n#define S32_NVIC_IP_PRI80_SHIFT                  0u\n#define S32_NVIC_IP_PRI80_WIDTH                  8u\n#define S32_NVIC_IP_PRI80(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI80_SHIFT))&S32_NVIC_IP_PRI80_MASK)\n#define S32_NVIC_IP_PRI81_MASK                   0xFFu\n#define S32_NVIC_IP_PRI81_SHIFT                  0u\n#define S32_NVIC_IP_PRI81_WIDTH                  8u\n#define S32_NVIC_IP_PRI81(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI81_SHIFT))&S32_NVIC_IP_PRI81_MASK)\n#define S32_NVIC_IP_PRI82_MASK                   0xFFu\n#define S32_NVIC_IP_PRI82_SHIFT                  0u\n#define S32_NVIC_IP_PRI82_WIDTH                  8u\n#define S32_NVIC_IP_PRI82(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI82_SHIFT))&S32_NVIC_IP_PRI82_MASK)\n#define S32_NVIC_IP_PRI83_MASK                   0xFFu\n#define S32_NVIC_IP_PRI83_SHIFT                  0u\n#define S32_NVIC_IP_PRI83_WIDTH                  8u\n#define S32_NVIC_IP_PRI83(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI83_SHIFT))&S32_NVIC_IP_PRI83_MASK)\n#define S32_NVIC_IP_PRI84_MASK                   0xFFu\n#define S32_NVIC_IP_PRI84_SHIFT                  0u\n#define S32_NVIC_IP_PRI84_WIDTH                  8u\n#define S32_NVIC_IP_PRI84(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI84_SHIFT))&S32_NVIC_IP_PRI84_MASK)\n#define S32_NVIC_IP_PRI85_MASK                   0xFFu\n#define S32_NVIC_IP_PRI85_SHIFT                  0u\n#define S32_NVIC_IP_PRI85_WIDTH                  8u\n#define S32_NVIC_IP_PRI85(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI85_SHIFT))&S32_NVIC_IP_PRI85_MASK)\n#define S32_NVIC_IP_PRI86_MASK                   0xFFu\n#define S32_NVIC_IP_PRI86_SHIFT                  0u\n#define S32_NVIC_IP_PRI86_WIDTH                  8u\n#define S32_NVIC_IP_PRI86(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI86_SHIFT))&S32_NVIC_IP_PRI86_MASK)\n#define S32_NVIC_IP_PRI87_MASK                   0xFFu\n#define S32_NVIC_IP_PRI87_SHIFT                  0u\n#define S32_NVIC_IP_PRI87_WIDTH                  8u\n#define S32_NVIC_IP_PRI87(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI87_SHIFT))&S32_NVIC_IP_PRI87_MASK)\n#define S32_NVIC_IP_PRI88_MASK                   0xFFu\n#define S32_NVIC_IP_PRI88_SHIFT                  0u\n#define S32_NVIC_IP_PRI88_WIDTH                  8u\n#define S32_NVIC_IP_PRI88(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI88_SHIFT))&S32_NVIC_IP_PRI88_MASK)\n#define S32_NVIC_IP_PRI89_MASK                   0xFFu\n#define S32_NVIC_IP_PRI89_SHIFT                  0u\n#define S32_NVIC_IP_PRI89_WIDTH                  8u\n#define S32_NVIC_IP_PRI89(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI89_SHIFT))&S32_NVIC_IP_PRI89_MASK)\n#define S32_NVIC_IP_PRI90_MASK                   0xFFu\n#define S32_NVIC_IP_PRI90_SHIFT                  0u\n#define S32_NVIC_IP_PRI90_WIDTH                  8u\n#define S32_NVIC_IP_PRI90(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI90_SHIFT))&S32_NVIC_IP_PRI90_MASK)\n#define S32_NVIC_IP_PRI91_MASK                   0xFFu\n#define S32_NVIC_IP_PRI91_SHIFT                  0u\n#define S32_NVIC_IP_PRI91_WIDTH                  8u\n#define S32_NVIC_IP_PRI91(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI91_SHIFT))&S32_NVIC_IP_PRI91_MASK)\n#define S32_NVIC_IP_PRI92_MASK                   0xFFu\n#define S32_NVIC_IP_PRI92_SHIFT                  0u\n#define S32_NVIC_IP_PRI92_WIDTH                  8u\n#define S32_NVIC_IP_PRI92(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI92_SHIFT))&S32_NVIC_IP_PRI92_MASK)\n#define S32_NVIC_IP_PRI93_MASK                   0xFFu\n#define S32_NVIC_IP_PRI93_SHIFT                  0u\n#define S32_NVIC_IP_PRI93_WIDTH                  8u\n#define S32_NVIC_IP_PRI93(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI93_SHIFT))&S32_NVIC_IP_PRI93_MASK)\n#define S32_NVIC_IP_PRI94_MASK                   0xFFu\n#define S32_NVIC_IP_PRI94_SHIFT                  0u\n#define S32_NVIC_IP_PRI94_WIDTH                  8u\n#define S32_NVIC_IP_PRI94(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI94_SHIFT))&S32_NVIC_IP_PRI94_MASK)\n#define S32_NVIC_IP_PRI95_MASK                   0xFFu\n#define S32_NVIC_IP_PRI95_SHIFT                  0u\n#define S32_NVIC_IP_PRI95_WIDTH                  8u\n#define S32_NVIC_IP_PRI95(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI95_SHIFT))&S32_NVIC_IP_PRI95_MASK)\n#define S32_NVIC_IP_PRI96_MASK                   0xFFu\n#define S32_NVIC_IP_PRI96_SHIFT                  0u\n#define S32_NVIC_IP_PRI96_WIDTH                  8u\n#define S32_NVIC_IP_PRI96(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI96_SHIFT))&S32_NVIC_IP_PRI96_MASK)\n#define S32_NVIC_IP_PRI97_MASK                   0xFFu\n#define S32_NVIC_IP_PRI97_SHIFT                  0u\n#define S32_NVIC_IP_PRI97_WIDTH                  8u\n#define S32_NVIC_IP_PRI97(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI97_SHIFT))&S32_NVIC_IP_PRI97_MASK)\n#define S32_NVIC_IP_PRI98_MASK                   0xFFu\n#define S32_NVIC_IP_PRI98_SHIFT                  0u\n#define S32_NVIC_IP_PRI98_WIDTH                  8u\n#define S32_NVIC_IP_PRI98(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI98_SHIFT))&S32_NVIC_IP_PRI98_MASK)\n#define S32_NVIC_IP_PRI99_MASK                   0xFFu\n#define S32_NVIC_IP_PRI99_SHIFT                  0u\n#define S32_NVIC_IP_PRI99_WIDTH                  8u\n#define S32_NVIC_IP_PRI99(x)                     (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI99_SHIFT))&S32_NVIC_IP_PRI99_MASK)\n#define S32_NVIC_IP_PRI100_MASK                  0xFFu\n#define S32_NVIC_IP_PRI100_SHIFT                 0u\n#define S32_NVIC_IP_PRI100_WIDTH                 8u\n#define S32_NVIC_IP_PRI100(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI100_SHIFT))&S32_NVIC_IP_PRI100_MASK)\n#define S32_NVIC_IP_PRI101_MASK                  0xFFu\n#define S32_NVIC_IP_PRI101_SHIFT                 0u\n#define S32_NVIC_IP_PRI101_WIDTH                 8u\n#define S32_NVIC_IP_PRI101(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI101_SHIFT))&S32_NVIC_IP_PRI101_MASK)\n#define S32_NVIC_IP_PRI102_MASK                  0xFFu\n#define S32_NVIC_IP_PRI102_SHIFT                 0u\n#define S32_NVIC_IP_PRI102_WIDTH                 8u\n#define S32_NVIC_IP_PRI102(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI102_SHIFT))&S32_NVIC_IP_PRI102_MASK)\n#define S32_NVIC_IP_PRI103_MASK                  0xFFu\n#define S32_NVIC_IP_PRI103_SHIFT                 0u\n#define S32_NVIC_IP_PRI103_WIDTH                 8u\n#define S32_NVIC_IP_PRI103(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI103_SHIFT))&S32_NVIC_IP_PRI103_MASK)\n#define S32_NVIC_IP_PRI104_MASK                  0xFFu\n#define S32_NVIC_IP_PRI104_SHIFT                 0u\n#define S32_NVIC_IP_PRI104_WIDTH                 8u\n#define S32_NVIC_IP_PRI104(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI104_SHIFT))&S32_NVIC_IP_PRI104_MASK)\n#define S32_NVIC_IP_PRI105_MASK                  0xFFu\n#define S32_NVIC_IP_PRI105_SHIFT                 0u\n#define S32_NVIC_IP_PRI105_WIDTH                 8u\n#define S32_NVIC_IP_PRI105(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI105_SHIFT))&S32_NVIC_IP_PRI105_MASK)\n#define S32_NVIC_IP_PRI106_MASK                  0xFFu\n#define S32_NVIC_IP_PRI106_SHIFT                 0u\n#define S32_NVIC_IP_PRI106_WIDTH                 8u\n#define S32_NVIC_IP_PRI106(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI106_SHIFT))&S32_NVIC_IP_PRI106_MASK)\n#define S32_NVIC_IP_PRI107_MASK                  0xFFu\n#define S32_NVIC_IP_PRI107_SHIFT                 0u\n#define S32_NVIC_IP_PRI107_WIDTH                 8u\n#define S32_NVIC_IP_PRI107(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI107_SHIFT))&S32_NVIC_IP_PRI107_MASK)\n#define S32_NVIC_IP_PRI108_MASK                  0xFFu\n#define S32_NVIC_IP_PRI108_SHIFT                 0u\n#define S32_NVIC_IP_PRI108_WIDTH                 8u\n#define S32_NVIC_IP_PRI108(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI108_SHIFT))&S32_NVIC_IP_PRI108_MASK)\n#define S32_NVIC_IP_PRI109_MASK                  0xFFu\n#define S32_NVIC_IP_PRI109_SHIFT                 0u\n#define S32_NVIC_IP_PRI109_WIDTH                 8u\n#define S32_NVIC_IP_PRI109(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI109_SHIFT))&S32_NVIC_IP_PRI109_MASK)\n#define S32_NVIC_IP_PRI110_MASK                  0xFFu\n#define S32_NVIC_IP_PRI110_SHIFT                 0u\n#define S32_NVIC_IP_PRI110_WIDTH                 8u\n#define S32_NVIC_IP_PRI110(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI110_SHIFT))&S32_NVIC_IP_PRI110_MASK)\n#define S32_NVIC_IP_PRI111_MASK                  0xFFu\n#define S32_NVIC_IP_PRI111_SHIFT                 0u\n#define S32_NVIC_IP_PRI111_WIDTH                 8u\n#define S32_NVIC_IP_PRI111(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI111_SHIFT))&S32_NVIC_IP_PRI111_MASK)\n#define S32_NVIC_IP_PRI112_MASK                  0xFFu\n#define S32_NVIC_IP_PRI112_SHIFT                 0u\n#define S32_NVIC_IP_PRI112_WIDTH                 8u\n#define S32_NVIC_IP_PRI112(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI112_SHIFT))&S32_NVIC_IP_PRI112_MASK)\n#define S32_NVIC_IP_PRI113_MASK                  0xFFu\n#define S32_NVIC_IP_PRI113_SHIFT                 0u\n#define S32_NVIC_IP_PRI113_WIDTH                 8u\n#define S32_NVIC_IP_PRI113(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI113_SHIFT))&S32_NVIC_IP_PRI113_MASK)\n#define S32_NVIC_IP_PRI114_MASK                  0xFFu\n#define S32_NVIC_IP_PRI114_SHIFT                 0u\n#define S32_NVIC_IP_PRI114_WIDTH                 8u\n#define S32_NVIC_IP_PRI114(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI114_SHIFT))&S32_NVIC_IP_PRI114_MASK)\n#define S32_NVIC_IP_PRI115_MASK                  0xFFu\n#define S32_NVIC_IP_PRI115_SHIFT                 0u\n#define S32_NVIC_IP_PRI115_WIDTH                 8u\n#define S32_NVIC_IP_PRI115(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI115_SHIFT))&S32_NVIC_IP_PRI115_MASK)\n#define S32_NVIC_IP_PRI116_MASK                  0xFFu\n#define S32_NVIC_IP_PRI116_SHIFT                 0u\n#define S32_NVIC_IP_PRI116_WIDTH                 8u\n#define S32_NVIC_IP_PRI116(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI116_SHIFT))&S32_NVIC_IP_PRI116_MASK)\n#define S32_NVIC_IP_PRI117_MASK                  0xFFu\n#define S32_NVIC_IP_PRI117_SHIFT                 0u\n#define S32_NVIC_IP_PRI117_WIDTH                 8u\n#define S32_NVIC_IP_PRI117(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI117_SHIFT))&S32_NVIC_IP_PRI117_MASK)\n#define S32_NVIC_IP_PRI118_MASK                  0xFFu\n#define S32_NVIC_IP_PRI118_SHIFT                 0u\n#define S32_NVIC_IP_PRI118_WIDTH                 8u\n#define S32_NVIC_IP_PRI118(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI118_SHIFT))&S32_NVIC_IP_PRI118_MASK)\n#define S32_NVIC_IP_PRI119_MASK                  0xFFu\n#define S32_NVIC_IP_PRI119_SHIFT                 0u\n#define S32_NVIC_IP_PRI119_WIDTH                 8u\n#define S32_NVIC_IP_PRI119(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI119_SHIFT))&S32_NVIC_IP_PRI119_MASK)\n#define S32_NVIC_IP_PRI120_MASK                  0xFFu\n#define S32_NVIC_IP_PRI120_SHIFT                 0u\n#define S32_NVIC_IP_PRI120_WIDTH                 8u\n#define S32_NVIC_IP_PRI120(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI120_SHIFT))&S32_NVIC_IP_PRI120_MASK)\n#define S32_NVIC_IP_PRI121_MASK                  0xFFu\n#define S32_NVIC_IP_PRI121_SHIFT                 0u\n#define S32_NVIC_IP_PRI121_WIDTH                 8u\n#define S32_NVIC_IP_PRI121(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI121_SHIFT))&S32_NVIC_IP_PRI121_MASK)\n#define S32_NVIC_IP_PRI122_MASK                  0xFFu\n#define S32_NVIC_IP_PRI122_SHIFT                 0u\n#define S32_NVIC_IP_PRI122_WIDTH                 8u\n#define S32_NVIC_IP_PRI122(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI122_SHIFT))&S32_NVIC_IP_PRI122_MASK)\n#define S32_NVIC_IP_PRI123_MASK                  0xFFu\n#define S32_NVIC_IP_PRI123_SHIFT                 0u\n#define S32_NVIC_IP_PRI123_WIDTH                 8u\n#define S32_NVIC_IP_PRI123(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI123_SHIFT))&S32_NVIC_IP_PRI123_MASK)\n#define S32_NVIC_IP_PRI124_MASK                  0xFFu\n#define S32_NVIC_IP_PRI124_SHIFT                 0u\n#define S32_NVIC_IP_PRI124_WIDTH                 8u\n#define S32_NVIC_IP_PRI124(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI124_SHIFT))&S32_NVIC_IP_PRI124_MASK)\n#define S32_NVIC_IP_PRI125_MASK                  0xFFu\n#define S32_NVIC_IP_PRI125_SHIFT                 0u\n#define S32_NVIC_IP_PRI125_WIDTH                 8u\n#define S32_NVIC_IP_PRI125(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI125_SHIFT))&S32_NVIC_IP_PRI125_MASK)\n#define S32_NVIC_IP_PRI126_MASK                  0xFFu\n#define S32_NVIC_IP_PRI126_SHIFT                 0u\n#define S32_NVIC_IP_PRI126_WIDTH                 8u\n#define S32_NVIC_IP_PRI126(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI126_SHIFT))&S32_NVIC_IP_PRI126_MASK)\n#define S32_NVIC_IP_PRI127_MASK                  0xFFu\n#define S32_NVIC_IP_PRI127_SHIFT                 0u\n#define S32_NVIC_IP_PRI127_WIDTH                 8u\n#define S32_NVIC_IP_PRI127(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI127_SHIFT))&S32_NVIC_IP_PRI127_MASK)\n#define S32_NVIC_IP_PRI128_MASK                  0xFFu\n#define S32_NVIC_IP_PRI128_SHIFT                 0u\n#define S32_NVIC_IP_PRI128_WIDTH                 8u\n#define S32_NVIC_IP_PRI128(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI128_SHIFT))&S32_NVIC_IP_PRI128_MASK)\n#define S32_NVIC_IP_PRI129_MASK                  0xFFu\n#define S32_NVIC_IP_PRI129_SHIFT                 0u\n#define S32_NVIC_IP_PRI129_WIDTH                 8u\n#define S32_NVIC_IP_PRI129(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI129_SHIFT))&S32_NVIC_IP_PRI129_MASK)\n#define S32_NVIC_IP_PRI130_MASK                  0xFFu\n#define S32_NVIC_IP_PRI130_SHIFT                 0u\n#define S32_NVIC_IP_PRI130_WIDTH                 8u\n#define S32_NVIC_IP_PRI130(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI130_SHIFT))&S32_NVIC_IP_PRI130_MASK)\n#define S32_NVIC_IP_PRI131_MASK                  0xFFu\n#define S32_NVIC_IP_PRI131_SHIFT                 0u\n#define S32_NVIC_IP_PRI131_WIDTH                 8u\n#define S32_NVIC_IP_PRI131(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI131_SHIFT))&S32_NVIC_IP_PRI131_MASK)\n#define S32_NVIC_IP_PRI132_MASK                  0xFFu\n#define S32_NVIC_IP_PRI132_SHIFT                 0u\n#define S32_NVIC_IP_PRI132_WIDTH                 8u\n#define S32_NVIC_IP_PRI132(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI132_SHIFT))&S32_NVIC_IP_PRI132_MASK)\n#define S32_NVIC_IP_PRI133_MASK                  0xFFu\n#define S32_NVIC_IP_PRI133_SHIFT                 0u\n#define S32_NVIC_IP_PRI133_WIDTH                 8u\n#define S32_NVIC_IP_PRI133(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI133_SHIFT))&S32_NVIC_IP_PRI133_MASK)\n#define S32_NVIC_IP_PRI134_MASK                  0xFFu\n#define S32_NVIC_IP_PRI134_SHIFT                 0u\n#define S32_NVIC_IP_PRI134_WIDTH                 8u\n#define S32_NVIC_IP_PRI134(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI134_SHIFT))&S32_NVIC_IP_PRI134_MASK)\n#define S32_NVIC_IP_PRI135_MASK                  0xFFu\n#define S32_NVIC_IP_PRI135_SHIFT                 0u\n#define S32_NVIC_IP_PRI135_WIDTH                 8u\n#define S32_NVIC_IP_PRI135(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI135_SHIFT))&S32_NVIC_IP_PRI135_MASK)\n#define S32_NVIC_IP_PRI136_MASK                  0xFFu\n#define S32_NVIC_IP_PRI136_SHIFT                 0u\n#define S32_NVIC_IP_PRI136_WIDTH                 8u\n#define S32_NVIC_IP_PRI136(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI136_SHIFT))&S32_NVIC_IP_PRI136_MASK)\n#define S32_NVIC_IP_PRI137_MASK                  0xFFu\n#define S32_NVIC_IP_PRI137_SHIFT                 0u\n#define S32_NVIC_IP_PRI137_WIDTH                 8u\n#define S32_NVIC_IP_PRI137(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI137_SHIFT))&S32_NVIC_IP_PRI137_MASK)\n#define S32_NVIC_IP_PRI138_MASK                  0xFFu\n#define S32_NVIC_IP_PRI138_SHIFT                 0u\n#define S32_NVIC_IP_PRI138_WIDTH                 8u\n#define S32_NVIC_IP_PRI138(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI138_SHIFT))&S32_NVIC_IP_PRI138_MASK)\n#define S32_NVIC_IP_PRI139_MASK                  0xFFu\n#define S32_NVIC_IP_PRI139_SHIFT                 0u\n#define S32_NVIC_IP_PRI139_WIDTH                 8u\n#define S32_NVIC_IP_PRI139(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI139_SHIFT))&S32_NVIC_IP_PRI139_MASK)\n#define S32_NVIC_IP_PRI140_MASK                  0xFFu\n#define S32_NVIC_IP_PRI140_SHIFT                 0u\n#define S32_NVIC_IP_PRI140_WIDTH                 8u\n#define S32_NVIC_IP_PRI140(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI140_SHIFT))&S32_NVIC_IP_PRI140_MASK)\n#define S32_NVIC_IP_PRI141_MASK                  0xFFu\n#define S32_NVIC_IP_PRI141_SHIFT                 0u\n#define S32_NVIC_IP_PRI141_WIDTH                 8u\n#define S32_NVIC_IP_PRI141(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI141_SHIFT))&S32_NVIC_IP_PRI141_MASK)\n#define S32_NVIC_IP_PRI142_MASK                  0xFFu\n#define S32_NVIC_IP_PRI142_SHIFT                 0u\n#define S32_NVIC_IP_PRI142_WIDTH                 8u\n#define S32_NVIC_IP_PRI142(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI142_SHIFT))&S32_NVIC_IP_PRI142_MASK)\n#define S32_NVIC_IP_PRI143_MASK                  0xFFu\n#define S32_NVIC_IP_PRI143_SHIFT                 0u\n#define S32_NVIC_IP_PRI143_WIDTH                 8u\n#define S32_NVIC_IP_PRI143(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI143_SHIFT))&S32_NVIC_IP_PRI143_MASK)\n#define S32_NVIC_IP_PRI144_MASK                  0xFFu\n#define S32_NVIC_IP_PRI144_SHIFT                 0u\n#define S32_NVIC_IP_PRI144_WIDTH                 8u\n#define S32_NVIC_IP_PRI144(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI144_SHIFT))&S32_NVIC_IP_PRI144_MASK)\n#define S32_NVIC_IP_PRI145_MASK                  0xFFu\n#define S32_NVIC_IP_PRI145_SHIFT                 0u\n#define S32_NVIC_IP_PRI145_WIDTH                 8u\n#define S32_NVIC_IP_PRI145(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI145_SHIFT))&S32_NVIC_IP_PRI145_MASK)\n#define S32_NVIC_IP_PRI146_MASK                  0xFFu\n#define S32_NVIC_IP_PRI146_SHIFT                 0u\n#define S32_NVIC_IP_PRI146_WIDTH                 8u\n#define S32_NVIC_IP_PRI146(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI146_SHIFT))&S32_NVIC_IP_PRI146_MASK)\n#define S32_NVIC_IP_PRI147_MASK                  0xFFu\n#define S32_NVIC_IP_PRI147_SHIFT                 0u\n#define S32_NVIC_IP_PRI147_WIDTH                 8u\n#define S32_NVIC_IP_PRI147(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI147_SHIFT))&S32_NVIC_IP_PRI147_MASK)\n#define S32_NVIC_IP_PRI148_MASK                  0xFFu\n#define S32_NVIC_IP_PRI148_SHIFT                 0u\n#define S32_NVIC_IP_PRI148_WIDTH                 8u\n#define S32_NVIC_IP_PRI148(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI148_SHIFT))&S32_NVIC_IP_PRI148_MASK)\n#define S32_NVIC_IP_PRI149_MASK                  0xFFu\n#define S32_NVIC_IP_PRI149_SHIFT                 0u\n#define S32_NVIC_IP_PRI149_WIDTH                 8u\n#define S32_NVIC_IP_PRI149(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI149_SHIFT))&S32_NVIC_IP_PRI149_MASK)\n#define S32_NVIC_IP_PRI150_MASK                  0xFFu\n#define S32_NVIC_IP_PRI150_SHIFT                 0u\n#define S32_NVIC_IP_PRI150_WIDTH                 8u\n#define S32_NVIC_IP_PRI150(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI150_SHIFT))&S32_NVIC_IP_PRI150_MASK)\n#define S32_NVIC_IP_PRI151_MASK                  0xFFu\n#define S32_NVIC_IP_PRI151_SHIFT                 0u\n#define S32_NVIC_IP_PRI151_WIDTH                 8u\n#define S32_NVIC_IP_PRI151(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI151_SHIFT))&S32_NVIC_IP_PRI151_MASK)\n#define S32_NVIC_IP_PRI152_MASK                  0xFFu\n#define S32_NVIC_IP_PRI152_SHIFT                 0u\n#define S32_NVIC_IP_PRI152_WIDTH                 8u\n#define S32_NVIC_IP_PRI152(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI152_SHIFT))&S32_NVIC_IP_PRI152_MASK)\n#define S32_NVIC_IP_PRI153_MASK                  0xFFu\n#define S32_NVIC_IP_PRI153_SHIFT                 0u\n#define S32_NVIC_IP_PRI153_WIDTH                 8u\n#define S32_NVIC_IP_PRI153(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI153_SHIFT))&S32_NVIC_IP_PRI153_MASK)\n#define S32_NVIC_IP_PRI154_MASK                  0xFFu\n#define S32_NVIC_IP_PRI154_SHIFT                 0u\n#define S32_NVIC_IP_PRI154_WIDTH                 8u\n#define S32_NVIC_IP_PRI154(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI154_SHIFT))&S32_NVIC_IP_PRI154_MASK)\n#define S32_NVIC_IP_PRI155_MASK                  0xFFu\n#define S32_NVIC_IP_PRI155_SHIFT                 0u\n#define S32_NVIC_IP_PRI155_WIDTH                 8u\n#define S32_NVIC_IP_PRI155(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI155_SHIFT))&S32_NVIC_IP_PRI155_MASK)\n#define S32_NVIC_IP_PRI156_MASK                  0xFFu\n#define S32_NVIC_IP_PRI156_SHIFT                 0u\n#define S32_NVIC_IP_PRI156_WIDTH                 8u\n#define S32_NVIC_IP_PRI156(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI156_SHIFT))&S32_NVIC_IP_PRI156_MASK)\n#define S32_NVIC_IP_PRI157_MASK                  0xFFu\n#define S32_NVIC_IP_PRI157_SHIFT                 0u\n#define S32_NVIC_IP_PRI157_WIDTH                 8u\n#define S32_NVIC_IP_PRI157(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI157_SHIFT))&S32_NVIC_IP_PRI157_MASK)\n#define S32_NVIC_IP_PRI158_MASK                  0xFFu\n#define S32_NVIC_IP_PRI158_SHIFT                 0u\n#define S32_NVIC_IP_PRI158_WIDTH                 8u\n#define S32_NVIC_IP_PRI158(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI158_SHIFT))&S32_NVIC_IP_PRI158_MASK)\n#define S32_NVIC_IP_PRI159_MASK                  0xFFu\n#define S32_NVIC_IP_PRI159_SHIFT                 0u\n#define S32_NVIC_IP_PRI159_WIDTH                 8u\n#define S32_NVIC_IP_PRI159(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI159_SHIFT))&S32_NVIC_IP_PRI159_MASK)\n#define S32_NVIC_IP_PRI160_MASK                  0xFFu\n#define S32_NVIC_IP_PRI160_SHIFT                 0u\n#define S32_NVIC_IP_PRI160_WIDTH                 8u\n#define S32_NVIC_IP_PRI160(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI160_SHIFT))&S32_NVIC_IP_PRI160_MASK)\n#define S32_NVIC_IP_PRI161_MASK                  0xFFu\n#define S32_NVIC_IP_PRI161_SHIFT                 0u\n#define S32_NVIC_IP_PRI161_WIDTH                 8u\n#define S32_NVIC_IP_PRI161(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI161_SHIFT))&S32_NVIC_IP_PRI161_MASK)\n#define S32_NVIC_IP_PRI162_MASK                  0xFFu\n#define S32_NVIC_IP_PRI162_SHIFT                 0u\n#define S32_NVIC_IP_PRI162_WIDTH                 8u\n#define S32_NVIC_IP_PRI162(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI162_SHIFT))&S32_NVIC_IP_PRI162_MASK)\n#define S32_NVIC_IP_PRI163_MASK                  0xFFu\n#define S32_NVIC_IP_PRI163_SHIFT                 0u\n#define S32_NVIC_IP_PRI163_WIDTH                 8u\n#define S32_NVIC_IP_PRI163(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI163_SHIFT))&S32_NVIC_IP_PRI163_MASK)\n#define S32_NVIC_IP_PRI164_MASK                  0xFFu\n#define S32_NVIC_IP_PRI164_SHIFT                 0u\n#define S32_NVIC_IP_PRI164_WIDTH                 8u\n#define S32_NVIC_IP_PRI164(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI164_SHIFT))&S32_NVIC_IP_PRI164_MASK)\n#define S32_NVIC_IP_PRI165_MASK                  0xFFu\n#define S32_NVIC_IP_PRI165_SHIFT                 0u\n#define S32_NVIC_IP_PRI165_WIDTH                 8u\n#define S32_NVIC_IP_PRI165(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI165_SHIFT))&S32_NVIC_IP_PRI165_MASK)\n#define S32_NVIC_IP_PRI166_MASK                  0xFFu\n#define S32_NVIC_IP_PRI166_SHIFT                 0u\n#define S32_NVIC_IP_PRI166_WIDTH                 8u\n#define S32_NVIC_IP_PRI166(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI166_SHIFT))&S32_NVIC_IP_PRI166_MASK)\n#define S32_NVIC_IP_PRI167_MASK                  0xFFu\n#define S32_NVIC_IP_PRI167_SHIFT                 0u\n#define S32_NVIC_IP_PRI167_WIDTH                 8u\n#define S32_NVIC_IP_PRI167(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI167_SHIFT))&S32_NVIC_IP_PRI167_MASK)\n#define S32_NVIC_IP_PRI168_MASK                  0xFFu\n#define S32_NVIC_IP_PRI168_SHIFT                 0u\n#define S32_NVIC_IP_PRI168_WIDTH                 8u\n#define S32_NVIC_IP_PRI168(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI168_SHIFT))&S32_NVIC_IP_PRI168_MASK)\n#define S32_NVIC_IP_PRI169_MASK                  0xFFu\n#define S32_NVIC_IP_PRI169_SHIFT                 0u\n#define S32_NVIC_IP_PRI169_WIDTH                 8u\n#define S32_NVIC_IP_PRI169(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI169_SHIFT))&S32_NVIC_IP_PRI169_MASK)\n#define S32_NVIC_IP_PRI170_MASK                  0xFFu\n#define S32_NVIC_IP_PRI170_SHIFT                 0u\n#define S32_NVIC_IP_PRI170_WIDTH                 8u\n#define S32_NVIC_IP_PRI170(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI170_SHIFT))&S32_NVIC_IP_PRI170_MASK)\n#define S32_NVIC_IP_PRI171_MASK                  0xFFu\n#define S32_NVIC_IP_PRI171_SHIFT                 0u\n#define S32_NVIC_IP_PRI171_WIDTH                 8u\n#define S32_NVIC_IP_PRI171(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI171_SHIFT))&S32_NVIC_IP_PRI171_MASK)\n#define S32_NVIC_IP_PRI172_MASK                  0xFFu\n#define S32_NVIC_IP_PRI172_SHIFT                 0u\n#define S32_NVIC_IP_PRI172_WIDTH                 8u\n#define S32_NVIC_IP_PRI172(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI172_SHIFT))&S32_NVIC_IP_PRI172_MASK)\n#define S32_NVIC_IP_PRI173_MASK                  0xFFu\n#define S32_NVIC_IP_PRI173_SHIFT                 0u\n#define S32_NVIC_IP_PRI173_WIDTH                 8u\n#define S32_NVIC_IP_PRI173(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI173_SHIFT))&S32_NVIC_IP_PRI173_MASK)\n#define S32_NVIC_IP_PRI174_MASK                  0xFFu\n#define S32_NVIC_IP_PRI174_SHIFT                 0u\n#define S32_NVIC_IP_PRI174_WIDTH                 8u\n#define S32_NVIC_IP_PRI174(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI174_SHIFT))&S32_NVIC_IP_PRI174_MASK)\n#define S32_NVIC_IP_PRI175_MASK                  0xFFu\n#define S32_NVIC_IP_PRI175_SHIFT                 0u\n#define S32_NVIC_IP_PRI175_WIDTH                 8u\n#define S32_NVIC_IP_PRI175(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI175_SHIFT))&S32_NVIC_IP_PRI175_MASK)\n#define S32_NVIC_IP_PRI176_MASK                  0xFFu\n#define S32_NVIC_IP_PRI176_SHIFT                 0u\n#define S32_NVIC_IP_PRI176_WIDTH                 8u\n#define S32_NVIC_IP_PRI176(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI176_SHIFT))&S32_NVIC_IP_PRI176_MASK)\n#define S32_NVIC_IP_PRI177_MASK                  0xFFu\n#define S32_NVIC_IP_PRI177_SHIFT                 0u\n#define S32_NVIC_IP_PRI177_WIDTH                 8u\n#define S32_NVIC_IP_PRI177(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI177_SHIFT))&S32_NVIC_IP_PRI177_MASK)\n#define S32_NVIC_IP_PRI178_MASK                  0xFFu\n#define S32_NVIC_IP_PRI178_SHIFT                 0u\n#define S32_NVIC_IP_PRI178_WIDTH                 8u\n#define S32_NVIC_IP_PRI178(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI178_SHIFT))&S32_NVIC_IP_PRI178_MASK)\n#define S32_NVIC_IP_PRI179_MASK                  0xFFu\n#define S32_NVIC_IP_PRI179_SHIFT                 0u\n#define S32_NVIC_IP_PRI179_WIDTH                 8u\n#define S32_NVIC_IP_PRI179(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI179_SHIFT))&S32_NVIC_IP_PRI179_MASK)\n#define S32_NVIC_IP_PRI180_MASK                  0xFFu\n#define S32_NVIC_IP_PRI180_SHIFT                 0u\n#define S32_NVIC_IP_PRI180_WIDTH                 8u\n#define S32_NVIC_IP_PRI180(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI180_SHIFT))&S32_NVIC_IP_PRI180_MASK)\n#define S32_NVIC_IP_PRI181_MASK                  0xFFu\n#define S32_NVIC_IP_PRI181_SHIFT                 0u\n#define S32_NVIC_IP_PRI181_WIDTH                 8u\n#define S32_NVIC_IP_PRI181(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI181_SHIFT))&S32_NVIC_IP_PRI181_MASK)\n#define S32_NVIC_IP_PRI182_MASK                  0xFFu\n#define S32_NVIC_IP_PRI182_SHIFT                 0u\n#define S32_NVIC_IP_PRI182_WIDTH                 8u\n#define S32_NVIC_IP_PRI182(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI182_SHIFT))&S32_NVIC_IP_PRI182_MASK)\n#define S32_NVIC_IP_PRI183_MASK                  0xFFu\n#define S32_NVIC_IP_PRI183_SHIFT                 0u\n#define S32_NVIC_IP_PRI183_WIDTH                 8u\n#define S32_NVIC_IP_PRI183(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI183_SHIFT))&S32_NVIC_IP_PRI183_MASK)\n#define S32_NVIC_IP_PRI184_MASK                  0xFFu\n#define S32_NVIC_IP_PRI184_SHIFT                 0u\n#define S32_NVIC_IP_PRI184_WIDTH                 8u\n#define S32_NVIC_IP_PRI184(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI184_SHIFT))&S32_NVIC_IP_PRI184_MASK)\n#define S32_NVIC_IP_PRI185_MASK                  0xFFu\n#define S32_NVIC_IP_PRI185_SHIFT                 0u\n#define S32_NVIC_IP_PRI185_WIDTH                 8u\n#define S32_NVIC_IP_PRI185(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI185_SHIFT))&S32_NVIC_IP_PRI185_MASK)\n#define S32_NVIC_IP_PRI186_MASK                  0xFFu\n#define S32_NVIC_IP_PRI186_SHIFT                 0u\n#define S32_NVIC_IP_PRI186_WIDTH                 8u\n#define S32_NVIC_IP_PRI186(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI186_SHIFT))&S32_NVIC_IP_PRI186_MASK)\n#define S32_NVIC_IP_PRI187_MASK                  0xFFu\n#define S32_NVIC_IP_PRI187_SHIFT                 0u\n#define S32_NVIC_IP_PRI187_WIDTH                 8u\n#define S32_NVIC_IP_PRI187(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI187_SHIFT))&S32_NVIC_IP_PRI187_MASK)\n#define S32_NVIC_IP_PRI188_MASK                  0xFFu\n#define S32_NVIC_IP_PRI188_SHIFT                 0u\n#define S32_NVIC_IP_PRI188_WIDTH                 8u\n#define S32_NVIC_IP_PRI188(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI188_SHIFT))&S32_NVIC_IP_PRI188_MASK)\n#define S32_NVIC_IP_PRI189_MASK                  0xFFu\n#define S32_NVIC_IP_PRI189_SHIFT                 0u\n#define S32_NVIC_IP_PRI189_WIDTH                 8u\n#define S32_NVIC_IP_PRI189(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI189_SHIFT))&S32_NVIC_IP_PRI189_MASK)\n#define S32_NVIC_IP_PRI190_MASK                  0xFFu\n#define S32_NVIC_IP_PRI190_SHIFT                 0u\n#define S32_NVIC_IP_PRI190_WIDTH                 8u\n#define S32_NVIC_IP_PRI190(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI190_SHIFT))&S32_NVIC_IP_PRI190_MASK)\n#define S32_NVIC_IP_PRI191_MASK                  0xFFu\n#define S32_NVIC_IP_PRI191_SHIFT                 0u\n#define S32_NVIC_IP_PRI191_WIDTH                 8u\n#define S32_NVIC_IP_PRI191(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI191_SHIFT))&S32_NVIC_IP_PRI191_MASK)\n#define S32_NVIC_IP_PRI192_MASK                  0xFFu\n#define S32_NVIC_IP_PRI192_SHIFT                 0u\n#define S32_NVIC_IP_PRI192_WIDTH                 8u\n#define S32_NVIC_IP_PRI192(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI192_SHIFT))&S32_NVIC_IP_PRI192_MASK)\n#define S32_NVIC_IP_PRI193_MASK                  0xFFu\n#define S32_NVIC_IP_PRI193_SHIFT                 0u\n#define S32_NVIC_IP_PRI193_WIDTH                 8u\n#define S32_NVIC_IP_PRI193(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI193_SHIFT))&S32_NVIC_IP_PRI193_MASK)\n#define S32_NVIC_IP_PRI194_MASK                  0xFFu\n#define S32_NVIC_IP_PRI194_SHIFT                 0u\n#define S32_NVIC_IP_PRI194_WIDTH                 8u\n#define S32_NVIC_IP_PRI194(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI194_SHIFT))&S32_NVIC_IP_PRI194_MASK)\n#define S32_NVIC_IP_PRI195_MASK                  0xFFu\n#define S32_NVIC_IP_PRI195_SHIFT                 0u\n#define S32_NVIC_IP_PRI195_WIDTH                 8u\n#define S32_NVIC_IP_PRI195(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI195_SHIFT))&S32_NVIC_IP_PRI195_MASK)\n#define S32_NVIC_IP_PRI196_MASK                  0xFFu\n#define S32_NVIC_IP_PRI196_SHIFT                 0u\n#define S32_NVIC_IP_PRI196_WIDTH                 8u\n#define S32_NVIC_IP_PRI196(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI196_SHIFT))&S32_NVIC_IP_PRI196_MASK)\n#define S32_NVIC_IP_PRI197_MASK                  0xFFu\n#define S32_NVIC_IP_PRI197_SHIFT                 0u\n#define S32_NVIC_IP_PRI197_WIDTH                 8u\n#define S32_NVIC_IP_PRI197(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI197_SHIFT))&S32_NVIC_IP_PRI197_MASK)\n#define S32_NVIC_IP_PRI198_MASK                  0xFFu\n#define S32_NVIC_IP_PRI198_SHIFT                 0u\n#define S32_NVIC_IP_PRI198_WIDTH                 8u\n#define S32_NVIC_IP_PRI198(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI198_SHIFT))&S32_NVIC_IP_PRI198_MASK)\n#define S32_NVIC_IP_PRI199_MASK                  0xFFu\n#define S32_NVIC_IP_PRI199_SHIFT                 0u\n#define S32_NVIC_IP_PRI199_WIDTH                 8u\n#define S32_NVIC_IP_PRI199(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI199_SHIFT))&S32_NVIC_IP_PRI199_MASK)\n#define S32_NVIC_IP_PRI200_MASK                  0xFFu\n#define S32_NVIC_IP_PRI200_SHIFT                 0u\n#define S32_NVIC_IP_PRI200_WIDTH                 8u\n#define S32_NVIC_IP_PRI200(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI200_SHIFT))&S32_NVIC_IP_PRI200_MASK)\n#define S32_NVIC_IP_PRI201_MASK                  0xFFu\n#define S32_NVIC_IP_PRI201_SHIFT                 0u\n#define S32_NVIC_IP_PRI201_WIDTH                 8u\n#define S32_NVIC_IP_PRI201(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI201_SHIFT))&S32_NVIC_IP_PRI201_MASK)\n#define S32_NVIC_IP_PRI202_MASK                  0xFFu\n#define S32_NVIC_IP_PRI202_SHIFT                 0u\n#define S32_NVIC_IP_PRI202_WIDTH                 8u\n#define S32_NVIC_IP_PRI202(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI202_SHIFT))&S32_NVIC_IP_PRI202_MASK)\n#define S32_NVIC_IP_PRI203_MASK                  0xFFu\n#define S32_NVIC_IP_PRI203_SHIFT                 0u\n#define S32_NVIC_IP_PRI203_WIDTH                 8u\n#define S32_NVIC_IP_PRI203(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI203_SHIFT))&S32_NVIC_IP_PRI203_MASK)\n#define S32_NVIC_IP_PRI204_MASK                  0xFFu\n#define S32_NVIC_IP_PRI204_SHIFT                 0u\n#define S32_NVIC_IP_PRI204_WIDTH                 8u\n#define S32_NVIC_IP_PRI204(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI204_SHIFT))&S32_NVIC_IP_PRI204_MASK)\n#define S32_NVIC_IP_PRI205_MASK                  0xFFu\n#define S32_NVIC_IP_PRI205_SHIFT                 0u\n#define S32_NVIC_IP_PRI205_WIDTH                 8u\n#define S32_NVIC_IP_PRI205(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI205_SHIFT))&S32_NVIC_IP_PRI205_MASK)\n#define S32_NVIC_IP_PRI206_MASK                  0xFFu\n#define S32_NVIC_IP_PRI206_SHIFT                 0u\n#define S32_NVIC_IP_PRI206_WIDTH                 8u\n#define S32_NVIC_IP_PRI206(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI206_SHIFT))&S32_NVIC_IP_PRI206_MASK)\n#define S32_NVIC_IP_PRI207_MASK                  0xFFu\n#define S32_NVIC_IP_PRI207_SHIFT                 0u\n#define S32_NVIC_IP_PRI207_WIDTH                 8u\n#define S32_NVIC_IP_PRI207(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI207_SHIFT))&S32_NVIC_IP_PRI207_MASK)\n#define S32_NVIC_IP_PRI208_MASK                  0xFFu\n#define S32_NVIC_IP_PRI208_SHIFT                 0u\n#define S32_NVIC_IP_PRI208_WIDTH                 8u\n#define S32_NVIC_IP_PRI208(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI208_SHIFT))&S32_NVIC_IP_PRI208_MASK)\n#define S32_NVIC_IP_PRI209_MASK                  0xFFu\n#define S32_NVIC_IP_PRI209_SHIFT                 0u\n#define S32_NVIC_IP_PRI209_WIDTH                 8u\n#define S32_NVIC_IP_PRI209(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI209_SHIFT))&S32_NVIC_IP_PRI209_MASK)\n#define S32_NVIC_IP_PRI210_MASK                  0xFFu\n#define S32_NVIC_IP_PRI210_SHIFT                 0u\n#define S32_NVIC_IP_PRI210_WIDTH                 8u\n#define S32_NVIC_IP_PRI210(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI210_SHIFT))&S32_NVIC_IP_PRI210_MASK)\n#define S32_NVIC_IP_PRI211_MASK                  0xFFu\n#define S32_NVIC_IP_PRI211_SHIFT                 0u\n#define S32_NVIC_IP_PRI211_WIDTH                 8u\n#define S32_NVIC_IP_PRI211(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI211_SHIFT))&S32_NVIC_IP_PRI211_MASK)\n#define S32_NVIC_IP_PRI212_MASK                  0xFFu\n#define S32_NVIC_IP_PRI212_SHIFT                 0u\n#define S32_NVIC_IP_PRI212_WIDTH                 8u\n#define S32_NVIC_IP_PRI212(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI212_SHIFT))&S32_NVIC_IP_PRI212_MASK)\n#define S32_NVIC_IP_PRI213_MASK                  0xFFu\n#define S32_NVIC_IP_PRI213_SHIFT                 0u\n#define S32_NVIC_IP_PRI213_WIDTH                 8u\n#define S32_NVIC_IP_PRI213(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI213_SHIFT))&S32_NVIC_IP_PRI213_MASK)\n#define S32_NVIC_IP_PRI214_MASK                  0xFFu\n#define S32_NVIC_IP_PRI214_SHIFT                 0u\n#define S32_NVIC_IP_PRI214_WIDTH                 8u\n#define S32_NVIC_IP_PRI214(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI214_SHIFT))&S32_NVIC_IP_PRI214_MASK)\n#define S32_NVIC_IP_PRI215_MASK                  0xFFu\n#define S32_NVIC_IP_PRI215_SHIFT                 0u\n#define S32_NVIC_IP_PRI215_WIDTH                 8u\n#define S32_NVIC_IP_PRI215(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI215_SHIFT))&S32_NVIC_IP_PRI215_MASK)\n#define S32_NVIC_IP_PRI216_MASK                  0xFFu\n#define S32_NVIC_IP_PRI216_SHIFT                 0u\n#define S32_NVIC_IP_PRI216_WIDTH                 8u\n#define S32_NVIC_IP_PRI216(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI216_SHIFT))&S32_NVIC_IP_PRI216_MASK)\n#define S32_NVIC_IP_PRI217_MASK                  0xFFu\n#define S32_NVIC_IP_PRI217_SHIFT                 0u\n#define S32_NVIC_IP_PRI217_WIDTH                 8u\n#define S32_NVIC_IP_PRI217(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI217_SHIFT))&S32_NVIC_IP_PRI217_MASK)\n#define S32_NVIC_IP_PRI218_MASK                  0xFFu\n#define S32_NVIC_IP_PRI218_SHIFT                 0u\n#define S32_NVIC_IP_PRI218_WIDTH                 8u\n#define S32_NVIC_IP_PRI218(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI218_SHIFT))&S32_NVIC_IP_PRI218_MASK)\n#define S32_NVIC_IP_PRI219_MASK                  0xFFu\n#define S32_NVIC_IP_PRI219_SHIFT                 0u\n#define S32_NVIC_IP_PRI219_WIDTH                 8u\n#define S32_NVIC_IP_PRI219(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI219_SHIFT))&S32_NVIC_IP_PRI219_MASK)\n#define S32_NVIC_IP_PRI220_MASK                  0xFFu\n#define S32_NVIC_IP_PRI220_SHIFT                 0u\n#define S32_NVIC_IP_PRI220_WIDTH                 8u\n#define S32_NVIC_IP_PRI220(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI220_SHIFT))&S32_NVIC_IP_PRI220_MASK)\n#define S32_NVIC_IP_PRI221_MASK                  0xFFu\n#define S32_NVIC_IP_PRI221_SHIFT                 0u\n#define S32_NVIC_IP_PRI221_WIDTH                 8u\n#define S32_NVIC_IP_PRI221(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI221_SHIFT))&S32_NVIC_IP_PRI221_MASK)\n#define S32_NVIC_IP_PRI222_MASK                  0xFFu\n#define S32_NVIC_IP_PRI222_SHIFT                 0u\n#define S32_NVIC_IP_PRI222_WIDTH                 8u\n#define S32_NVIC_IP_PRI222(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI222_SHIFT))&S32_NVIC_IP_PRI222_MASK)\n#define S32_NVIC_IP_PRI223_MASK                  0xFFu\n#define S32_NVIC_IP_PRI223_SHIFT                 0u\n#define S32_NVIC_IP_PRI223_WIDTH                 8u\n#define S32_NVIC_IP_PRI223(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI223_SHIFT))&S32_NVIC_IP_PRI223_MASK)\n#define S32_NVIC_IP_PRI224_MASK                  0xFFu\n#define S32_NVIC_IP_PRI224_SHIFT                 0u\n#define S32_NVIC_IP_PRI224_WIDTH                 8u\n#define S32_NVIC_IP_PRI224(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI224_SHIFT))&S32_NVIC_IP_PRI224_MASK)\n#define S32_NVIC_IP_PRI225_MASK                  0xFFu\n#define S32_NVIC_IP_PRI225_SHIFT                 0u\n#define S32_NVIC_IP_PRI225_WIDTH                 8u\n#define S32_NVIC_IP_PRI225(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI225_SHIFT))&S32_NVIC_IP_PRI225_MASK)\n#define S32_NVIC_IP_PRI226_MASK                  0xFFu\n#define S32_NVIC_IP_PRI226_SHIFT                 0u\n#define S32_NVIC_IP_PRI226_WIDTH                 8u\n#define S32_NVIC_IP_PRI226(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI226_SHIFT))&S32_NVIC_IP_PRI226_MASK)\n#define S32_NVIC_IP_PRI227_MASK                  0xFFu\n#define S32_NVIC_IP_PRI227_SHIFT                 0u\n#define S32_NVIC_IP_PRI227_WIDTH                 8u\n#define S32_NVIC_IP_PRI227(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI227_SHIFT))&S32_NVIC_IP_PRI227_MASK)\n#define S32_NVIC_IP_PRI228_MASK                  0xFFu\n#define S32_NVIC_IP_PRI228_SHIFT                 0u\n#define S32_NVIC_IP_PRI228_WIDTH                 8u\n#define S32_NVIC_IP_PRI228(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI228_SHIFT))&S32_NVIC_IP_PRI228_MASK)\n#define S32_NVIC_IP_PRI229_MASK                  0xFFu\n#define S32_NVIC_IP_PRI229_SHIFT                 0u\n#define S32_NVIC_IP_PRI229_WIDTH                 8u\n#define S32_NVIC_IP_PRI229(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI229_SHIFT))&S32_NVIC_IP_PRI229_MASK)\n#define S32_NVIC_IP_PRI230_MASK                  0xFFu\n#define S32_NVIC_IP_PRI230_SHIFT                 0u\n#define S32_NVIC_IP_PRI230_WIDTH                 8u\n#define S32_NVIC_IP_PRI230(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI230_SHIFT))&S32_NVIC_IP_PRI230_MASK)\n#define S32_NVIC_IP_PRI231_MASK                  0xFFu\n#define S32_NVIC_IP_PRI231_SHIFT                 0u\n#define S32_NVIC_IP_PRI231_WIDTH                 8u\n#define S32_NVIC_IP_PRI231(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI231_SHIFT))&S32_NVIC_IP_PRI231_MASK)\n#define S32_NVIC_IP_PRI232_MASK                  0xFFu\n#define S32_NVIC_IP_PRI232_SHIFT                 0u\n#define S32_NVIC_IP_PRI232_WIDTH                 8u\n#define S32_NVIC_IP_PRI232(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI232_SHIFT))&S32_NVIC_IP_PRI232_MASK)\n#define S32_NVIC_IP_PRI233_MASK                  0xFFu\n#define S32_NVIC_IP_PRI233_SHIFT                 0u\n#define S32_NVIC_IP_PRI233_WIDTH                 8u\n#define S32_NVIC_IP_PRI233(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI233_SHIFT))&S32_NVIC_IP_PRI233_MASK)\n#define S32_NVIC_IP_PRI234_MASK                  0xFFu\n#define S32_NVIC_IP_PRI234_SHIFT                 0u\n#define S32_NVIC_IP_PRI234_WIDTH                 8u\n#define S32_NVIC_IP_PRI234(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI234_SHIFT))&S32_NVIC_IP_PRI234_MASK)\n#define S32_NVIC_IP_PRI235_MASK                  0xFFu\n#define S32_NVIC_IP_PRI235_SHIFT                 0u\n#define S32_NVIC_IP_PRI235_WIDTH                 8u\n#define S32_NVIC_IP_PRI235(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI235_SHIFT))&S32_NVIC_IP_PRI235_MASK)\n#define S32_NVIC_IP_PRI236_MASK                  0xFFu\n#define S32_NVIC_IP_PRI236_SHIFT                 0u\n#define S32_NVIC_IP_PRI236_WIDTH                 8u\n#define S32_NVIC_IP_PRI236(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI236_SHIFT))&S32_NVIC_IP_PRI236_MASK)\n#define S32_NVIC_IP_PRI237_MASK                  0xFFu\n#define S32_NVIC_IP_PRI237_SHIFT                 0u\n#define S32_NVIC_IP_PRI237_WIDTH                 8u\n#define S32_NVIC_IP_PRI237(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI237_SHIFT))&S32_NVIC_IP_PRI237_MASK)\n#define S32_NVIC_IP_PRI238_MASK                  0xFFu\n#define S32_NVIC_IP_PRI238_SHIFT                 0u\n#define S32_NVIC_IP_PRI238_WIDTH                 8u\n#define S32_NVIC_IP_PRI238(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI238_SHIFT))&S32_NVIC_IP_PRI238_MASK)\n#define S32_NVIC_IP_PRI239_MASK                  0xFFu\n#define S32_NVIC_IP_PRI239_SHIFT                 0u\n#define S32_NVIC_IP_PRI239_WIDTH                 8u\n#define S32_NVIC_IP_PRI239(x)                    (((uint8_t)(((uint8_t)(x))<<S32_NVIC_IP_PRI239_SHIFT))&S32_NVIC_IP_PRI239_MASK)\n/* STIR Bit Fields */\n#define S32_NVIC_STIR_INTID_MASK                 0x1FFu\n#define S32_NVIC_STIR_INTID_SHIFT                0u\n#define S32_NVIC_STIR_INTID_WIDTH                9u\n#define S32_NVIC_STIR_INTID(x)                   (((uint32_t)(((uint32_t)(x))<<S32_NVIC_STIR_INTID_SHIFT))&S32_NVIC_STIR_INTID_MASK)\n\n/*!\n * @}\n */ /* end of group S32_NVIC_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group S32_NVIC_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- S32_SCB Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup S32_SCB_Peripheral_Access_Layer S32_SCB Peripheral Access Layer\n * @{\n */\n\n\n/** S32_SCB - Size of Registers Arrays */\n\n/** S32_SCB - Register Layout Typedef */\ntypedef struct {\n       uint8_t RESERVED_0[8];\n  __IO uint32_t ACTLR;                             /**< Auxiliary Control Register,, offset: 0x8 */\n       uint8_t RESERVED_1[3316];\n  __I  uint32_t CPUID;                             /**< CPUID Base Register, offset: 0xD00 */\n  __IO uint32_t ICSR;                              /**< Interrupt Control and State Register, offset: 0xD04 */\n  __IO uint32_t VTOR;                              /**< Vector Table Offset Register, offset: 0xD08 */\n  __IO uint32_t AIRCR;                             /**< Application Interrupt and Reset Control Register, offset: 0xD0C */\n  __IO uint32_t SCR;                               /**< System Control Register, offset: 0xD10 */\n  __IO uint32_t CCR;                               /**< Configuration and Control Register, offset: 0xD14 */\n  __IO uint32_t SHPR1;                             /**< System Handler Priority Register 1, offset: 0xD18 */\n  __IO uint32_t SHPR2;                             /**< System Handler Priority Register 2, offset: 0xD1C */\n  __IO uint32_t SHPR3;                             /**< System Handler Priority Register 3, offset: 0xD20 */\n  __IO uint32_t SHCSR;                             /**< System Handler Control and State Register, offset: 0xD24 */\n  __IO uint32_t CFSR;                              /**< Configurable Fault Status Registers, offset: 0xD28 */\n  __IO uint32_t HFSR;                              /**< HardFault Status register, offset: 0xD2C */\n  __IO uint32_t DFSR;                              /**< Debug Fault Status Register, offset: 0xD30 */\n  __IO uint32_t MMFAR;                             /**< MemManage Address Register, offset: 0xD34 */\n  __IO uint32_t BFAR;                              /**< BusFault Address Register, offset: 0xD38 */\n  __IO uint32_t AFSR;                              /**< Auxiliary Fault Status Register, offset: 0xD3C */\n       uint8_t RESERVED_2[72];\n  __IO uint32_t CPACR;                             /**< Coprocessor Access Control Register, offset: 0xD88 */\n       uint8_t RESERVED_3[424];\n  __IO uint32_t FPCCR;                             /**< Floating-point Context Control Register, offset: 0xF34 */\n  __IO uint32_t FPCAR;                             /**< Floating-point Context Address Register, offset: 0xF38 */\n  __IO uint32_t FPDSCR;                            /**< Floating-point Default Status Control Register, offset: 0xF3C */\n} S32_SCB_Type, *S32_SCB_MemMapPtr;\n\n /** Number of instances of the S32_SCB module. */\n#define S32_SCB_INSTANCE_COUNT                   (1u)\n\n\n/* S32_SCB - Peripheral instance base addresses */\n/** Peripheral S32_SCB base address */\n#define S32_SCB_BASE                             (0xE000E000u)\n/** Peripheral S32_SCB base pointer */\n#define S32_SCB                                  ((S32_SCB_Type *)S32_SCB_BASE)\n/** Array initializer of S32_SCB peripheral base addresses */\n#define S32_SCB_BASE_ADDRS                       { S32_SCB_BASE }\n/** Array initializer of S32_SCB peripheral base pointers */\n#define S32_SCB_BASE_PTRS                        { S32_SCB }\n\n/* ----------------------------------------------------------------------------\n   -- S32_SCB Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup S32_SCB_Register_Masks S32_SCB Register Masks\n * @{\n */\n\n/* ACTLR Bit Fields */\n#define S32_SCB_ACTLR_DISMCYCINT_MASK            0x1u\n#define S32_SCB_ACTLR_DISMCYCINT_SHIFT           0u\n#define S32_SCB_ACTLR_DISMCYCINT_WIDTH           1u\n#define S32_SCB_ACTLR_DISMCYCINT(x)              (((uint32_t)(((uint32_t)(x))<<S32_SCB_ACTLR_DISMCYCINT_SHIFT))&S32_SCB_ACTLR_DISMCYCINT_MASK)\n#define S32_SCB_ACTLR_DISDEFWBUF_MASK            0x2u\n#define S32_SCB_ACTLR_DISDEFWBUF_SHIFT           1u\n#define S32_SCB_ACTLR_DISDEFWBUF_WIDTH           1u\n#define S32_SCB_ACTLR_DISDEFWBUF(x)              (((uint32_t)(((uint32_t)(x))<<S32_SCB_ACTLR_DISDEFWBUF_SHIFT))&S32_SCB_ACTLR_DISDEFWBUF_MASK)\n#define S32_SCB_ACTLR_DISFOLD_MASK               0x4u\n#define S32_SCB_ACTLR_DISFOLD_SHIFT              2u\n#define S32_SCB_ACTLR_DISFOLD_WIDTH              1u\n#define S32_SCB_ACTLR_DISFOLD(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_ACTLR_DISFOLD_SHIFT))&S32_SCB_ACTLR_DISFOLD_MASK)\n#define S32_SCB_ACTLR_DISFPCA_MASK               0x100u\n#define S32_SCB_ACTLR_DISFPCA_SHIFT              8u\n#define S32_SCB_ACTLR_DISFPCA_WIDTH              1u\n#define S32_SCB_ACTLR_DISFPCA(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_ACTLR_DISFPCA_SHIFT))&S32_SCB_ACTLR_DISFPCA_MASK)\n#define S32_SCB_ACTLR_DISOOFP_MASK               0x200u\n#define S32_SCB_ACTLR_DISOOFP_SHIFT              9u\n#define S32_SCB_ACTLR_DISOOFP_WIDTH              1u\n#define S32_SCB_ACTLR_DISOOFP(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_ACTLR_DISOOFP_SHIFT))&S32_SCB_ACTLR_DISOOFP_MASK)\n/* CPUID Bit Fields */\n#define S32_SCB_CPUID_REVISION_MASK              0xFu\n#define S32_SCB_CPUID_REVISION_SHIFT             0u\n#define S32_SCB_CPUID_REVISION_WIDTH             4u\n#define S32_SCB_CPUID_REVISION(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_CPUID_REVISION_SHIFT))&S32_SCB_CPUID_REVISION_MASK)\n#define S32_SCB_CPUID_PARTNO_MASK                0xFFF0u\n#define S32_SCB_CPUID_PARTNO_SHIFT               4u\n#define S32_SCB_CPUID_PARTNO_WIDTH               12u\n#define S32_SCB_CPUID_PARTNO(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_CPUID_PARTNO_SHIFT))&S32_SCB_CPUID_PARTNO_MASK)\n#define S32_SCB_CPUID_VARIANT_MASK               0xF00000u\n#define S32_SCB_CPUID_VARIANT_SHIFT              20u\n#define S32_SCB_CPUID_VARIANT_WIDTH              4u\n#define S32_SCB_CPUID_VARIANT(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_CPUID_VARIANT_SHIFT))&S32_SCB_CPUID_VARIANT_MASK)\n#define S32_SCB_CPUID_IMPLEMENTER_MASK           0xFF000000u\n#define S32_SCB_CPUID_IMPLEMENTER_SHIFT          24u\n#define S32_SCB_CPUID_IMPLEMENTER_WIDTH          8u\n#define S32_SCB_CPUID_IMPLEMENTER(x)             (((uint32_t)(((uint32_t)(x))<<S32_SCB_CPUID_IMPLEMENTER_SHIFT))&S32_SCB_CPUID_IMPLEMENTER_MASK)\n/* ICSR Bit Fields */\n#define S32_SCB_ICSR_VECTACTIVE_MASK             0x1FFu\n#define S32_SCB_ICSR_VECTACTIVE_SHIFT            0u\n#define S32_SCB_ICSR_VECTACTIVE_WIDTH            9u\n#define S32_SCB_ICSR_VECTACTIVE(x)               (((uint32_t)(((uint32_t)(x))<<S32_SCB_ICSR_VECTACTIVE_SHIFT))&S32_SCB_ICSR_VECTACTIVE_MASK)\n#define S32_SCB_ICSR_RETTOBASE_MASK              0x800u\n#define S32_SCB_ICSR_RETTOBASE_SHIFT             11u\n#define S32_SCB_ICSR_RETTOBASE_WIDTH             1u\n#define S32_SCB_ICSR_RETTOBASE(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_ICSR_RETTOBASE_SHIFT))&S32_SCB_ICSR_RETTOBASE_MASK)\n#define S32_SCB_ICSR_VECTPENDING_MASK            0x3F000u\n#define S32_SCB_ICSR_VECTPENDING_SHIFT           12u\n#define S32_SCB_ICSR_VECTPENDING_WIDTH           6u\n#define S32_SCB_ICSR_VECTPENDING(x)              (((uint32_t)(((uint32_t)(x))<<S32_SCB_ICSR_VECTPENDING_SHIFT))&S32_SCB_ICSR_VECTPENDING_MASK)\n#define S32_SCB_ICSR_ISRPENDING_MASK             0x400000u\n#define S32_SCB_ICSR_ISRPENDING_SHIFT            22u\n#define S32_SCB_ICSR_ISRPENDING_WIDTH            1u\n#define S32_SCB_ICSR_ISRPENDING(x)               (((uint32_t)(((uint32_t)(x))<<S32_SCB_ICSR_ISRPENDING_SHIFT))&S32_SCB_ICSR_ISRPENDING_MASK)\n#define S32_SCB_ICSR_ISRPREEMPT_MASK             0x800000u\n#define S32_SCB_ICSR_ISRPREEMPT_SHIFT            23u\n#define S32_SCB_ICSR_ISRPREEMPT_WIDTH            1u\n#define S32_SCB_ICSR_ISRPREEMPT(x)               (((uint32_t)(((uint32_t)(x))<<S32_SCB_ICSR_ISRPREEMPT_SHIFT))&S32_SCB_ICSR_ISRPREEMPT_MASK)\n#define S32_SCB_ICSR_PENDSTCLR_MASK              0x2000000u\n#define S32_SCB_ICSR_PENDSTCLR_SHIFT             25u\n#define S32_SCB_ICSR_PENDSTCLR_WIDTH             1u\n#define S32_SCB_ICSR_PENDSTCLR(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_ICSR_PENDSTCLR_SHIFT))&S32_SCB_ICSR_PENDSTCLR_MASK)\n#define S32_SCB_ICSR_PENDSTSET_MASK              0x4000000u\n#define S32_SCB_ICSR_PENDSTSET_SHIFT             26u\n#define S32_SCB_ICSR_PENDSTSET_WIDTH             1u\n#define S32_SCB_ICSR_PENDSTSET(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_ICSR_PENDSTSET_SHIFT))&S32_SCB_ICSR_PENDSTSET_MASK)\n#define S32_SCB_ICSR_PENDSVCLR_MASK              0x8000000u\n#define S32_SCB_ICSR_PENDSVCLR_SHIFT             27u\n#define S32_SCB_ICSR_PENDSVCLR_WIDTH             1u\n#define S32_SCB_ICSR_PENDSVCLR(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_ICSR_PENDSVCLR_SHIFT))&S32_SCB_ICSR_PENDSVCLR_MASK)\n#define S32_SCB_ICSR_PENDSVSET_MASK              0x10000000u\n#define S32_SCB_ICSR_PENDSVSET_SHIFT             28u\n#define S32_SCB_ICSR_PENDSVSET_WIDTH             1u\n#define S32_SCB_ICSR_PENDSVSET(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_ICSR_PENDSVSET_SHIFT))&S32_SCB_ICSR_PENDSVSET_MASK)\n#define S32_SCB_ICSR_NMIPENDSET_MASK             0x80000000u\n#define S32_SCB_ICSR_NMIPENDSET_SHIFT            31u\n#define S32_SCB_ICSR_NMIPENDSET_WIDTH            1u\n#define S32_SCB_ICSR_NMIPENDSET(x)               (((uint32_t)(((uint32_t)(x))<<S32_SCB_ICSR_NMIPENDSET_SHIFT))&S32_SCB_ICSR_NMIPENDSET_MASK)\n/* VTOR Bit Fields */\n#define S32_SCB_VTOR_TBLOFF_MASK                 0xFFFFFF80u\n#define S32_SCB_VTOR_TBLOFF_SHIFT                7u\n#define S32_SCB_VTOR_TBLOFF_WIDTH                25u\n#define S32_SCB_VTOR_TBLOFF(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_VTOR_TBLOFF_SHIFT))&S32_SCB_VTOR_TBLOFF_MASK)\n/* AIRCR Bit Fields */\n#define S32_SCB_AIRCR_VECTRESET_MASK             0x1u\n#define S32_SCB_AIRCR_VECTRESET_SHIFT            0u\n#define S32_SCB_AIRCR_VECTRESET_WIDTH            1u\n#define S32_SCB_AIRCR_VECTRESET(x)               (((uint32_t)(((uint32_t)(x))<<S32_SCB_AIRCR_VECTRESET_SHIFT))&S32_SCB_AIRCR_VECTRESET_MASK)\n#define S32_SCB_AIRCR_VECTCLRACTIVE_MASK         0x2u\n#define S32_SCB_AIRCR_VECTCLRACTIVE_SHIFT        1u\n#define S32_SCB_AIRCR_VECTCLRACTIVE_WIDTH        1u\n#define S32_SCB_AIRCR_VECTCLRACTIVE(x)           (((uint32_t)(((uint32_t)(x))<<S32_SCB_AIRCR_VECTCLRACTIVE_SHIFT))&S32_SCB_AIRCR_VECTCLRACTIVE_MASK)\n#define S32_SCB_AIRCR_SYSRESETREQ_MASK           0x4u\n#define S32_SCB_AIRCR_SYSRESETREQ_SHIFT          2u\n#define S32_SCB_AIRCR_SYSRESETREQ_WIDTH          1u\n#define S32_SCB_AIRCR_SYSRESETREQ(x)             (((uint32_t)(((uint32_t)(x))<<S32_SCB_AIRCR_SYSRESETREQ_SHIFT))&S32_SCB_AIRCR_SYSRESETREQ_MASK)\n#define S32_SCB_AIRCR_PRIGROUP_MASK              0x700u\n#define S32_SCB_AIRCR_PRIGROUP_SHIFT             8u\n#define S32_SCB_AIRCR_PRIGROUP_WIDTH             3u\n#define S32_SCB_AIRCR_PRIGROUP(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_AIRCR_PRIGROUP_SHIFT))&S32_SCB_AIRCR_PRIGROUP_MASK)\n#define S32_SCB_AIRCR_ENDIANNESS_MASK            0x8000u\n#define S32_SCB_AIRCR_ENDIANNESS_SHIFT           15u\n#define S32_SCB_AIRCR_ENDIANNESS_WIDTH           1u\n#define S32_SCB_AIRCR_ENDIANNESS(x)              (((uint32_t)(((uint32_t)(x))<<S32_SCB_AIRCR_ENDIANNESS_SHIFT))&S32_SCB_AIRCR_ENDIANNESS_MASK)\n#define S32_SCB_AIRCR_VECTKEY_MASK               0xFFFF0000u\n#define S32_SCB_AIRCR_VECTKEY_SHIFT              16u\n#define S32_SCB_AIRCR_VECTKEY_WIDTH              16u\n#define S32_SCB_AIRCR_VECTKEY(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_AIRCR_VECTKEY_SHIFT))&S32_SCB_AIRCR_VECTKEY_MASK)\n/* SCR Bit Fields */\n#define S32_SCB_SCR_SLEEPONEXIT_MASK             0x2u\n#define S32_SCB_SCR_SLEEPONEXIT_SHIFT            1u\n#define S32_SCB_SCR_SLEEPONEXIT_WIDTH            1u\n#define S32_SCB_SCR_SLEEPONEXIT(x)               (((uint32_t)(((uint32_t)(x))<<S32_SCB_SCR_SLEEPONEXIT_SHIFT))&S32_SCB_SCR_SLEEPONEXIT_MASK)\n#define S32_SCB_SCR_SLEEPDEEP_MASK               0x4u\n#define S32_SCB_SCR_SLEEPDEEP_SHIFT              2u\n#define S32_SCB_SCR_SLEEPDEEP_WIDTH              1u\n#define S32_SCB_SCR_SLEEPDEEP(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_SCR_SLEEPDEEP_SHIFT))&S32_SCB_SCR_SLEEPDEEP_MASK)\n#define S32_SCB_SCR_SEVONPEND_MASK               0x10u\n#define S32_SCB_SCR_SEVONPEND_SHIFT              4u\n#define S32_SCB_SCR_SEVONPEND_WIDTH              1u\n#define S32_SCB_SCR_SEVONPEND(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_SCR_SEVONPEND_SHIFT))&S32_SCB_SCR_SEVONPEND_MASK)\n/* CCR Bit Fields */\n#define S32_SCB_CCR_NONBASETHRDENA_MASK          0x1u\n#define S32_SCB_CCR_NONBASETHRDENA_SHIFT         0u\n#define S32_SCB_CCR_NONBASETHRDENA_WIDTH         1u\n#define S32_SCB_CCR_NONBASETHRDENA(x)            (((uint32_t)(((uint32_t)(x))<<S32_SCB_CCR_NONBASETHRDENA_SHIFT))&S32_SCB_CCR_NONBASETHRDENA_MASK)\n#define S32_SCB_CCR_USERSETMPEND_MASK            0x2u\n#define S32_SCB_CCR_USERSETMPEND_SHIFT           1u\n#define S32_SCB_CCR_USERSETMPEND_WIDTH           1u\n#define S32_SCB_CCR_USERSETMPEND(x)              (((uint32_t)(((uint32_t)(x))<<S32_SCB_CCR_USERSETMPEND_SHIFT))&S32_SCB_CCR_USERSETMPEND_MASK)\n#define S32_SCB_CCR_UNALIGN_TRP_MASK             0x8u\n#define S32_SCB_CCR_UNALIGN_TRP_SHIFT            3u\n#define S32_SCB_CCR_UNALIGN_TRP_WIDTH            1u\n#define S32_SCB_CCR_UNALIGN_TRP(x)               (((uint32_t)(((uint32_t)(x))<<S32_SCB_CCR_UNALIGN_TRP_SHIFT))&S32_SCB_CCR_UNALIGN_TRP_MASK)\n#define S32_SCB_CCR_DIV_0_TRP_MASK               0x10u\n#define S32_SCB_CCR_DIV_0_TRP_SHIFT              4u\n#define S32_SCB_CCR_DIV_0_TRP_WIDTH              1u\n#define S32_SCB_CCR_DIV_0_TRP(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_CCR_DIV_0_TRP_SHIFT))&S32_SCB_CCR_DIV_0_TRP_MASK)\n#define S32_SCB_CCR_BFHFNMIGN_MASK               0x100u\n#define S32_SCB_CCR_BFHFNMIGN_SHIFT              8u\n#define S32_SCB_CCR_BFHFNMIGN_WIDTH              1u\n#define S32_SCB_CCR_BFHFNMIGN(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_CCR_BFHFNMIGN_SHIFT))&S32_SCB_CCR_BFHFNMIGN_MASK)\n#define S32_SCB_CCR_STKALIGN_MASK                0x200u\n#define S32_SCB_CCR_STKALIGN_SHIFT               9u\n#define S32_SCB_CCR_STKALIGN_WIDTH               1u\n#define S32_SCB_CCR_STKALIGN(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_CCR_STKALIGN_SHIFT))&S32_SCB_CCR_STKALIGN_MASK)\n/* SHPR1 Bit Fields */\n#define S32_SCB_SHPR1_PRI_4_MASK                 0xFFu\n#define S32_SCB_SHPR1_PRI_4_SHIFT                0u\n#define S32_SCB_SHPR1_PRI_4_WIDTH                8u\n#define S32_SCB_SHPR1_PRI_4(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHPR1_PRI_4_SHIFT))&S32_SCB_SHPR1_PRI_4_MASK)\n#define S32_SCB_SHPR1_PRI_5_MASK                 0xFF00u\n#define S32_SCB_SHPR1_PRI_5_SHIFT                8u\n#define S32_SCB_SHPR1_PRI_5_WIDTH                8u\n#define S32_SCB_SHPR1_PRI_5(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHPR1_PRI_5_SHIFT))&S32_SCB_SHPR1_PRI_5_MASK)\n#define S32_SCB_SHPR1_PRI_6_MASK                 0xFF0000u\n#define S32_SCB_SHPR1_PRI_6_SHIFT                16u\n#define S32_SCB_SHPR1_PRI_6_WIDTH                8u\n#define S32_SCB_SHPR1_PRI_6(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHPR1_PRI_6_SHIFT))&S32_SCB_SHPR1_PRI_6_MASK)\n/* SHPR2 Bit Fields */\n#define S32_SCB_SHPR2_PRI_11_MASK                0xFF000000u\n#define S32_SCB_SHPR2_PRI_11_SHIFT               24u\n#define S32_SCB_SHPR2_PRI_11_WIDTH               8u\n#define S32_SCB_SHPR2_PRI_11(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHPR2_PRI_11_SHIFT))&S32_SCB_SHPR2_PRI_11_MASK)\n/* SHPR3 Bit Fields */\n#define S32_SCB_SHPR3_PRI_12_MASK                0xFFu\n#define S32_SCB_SHPR3_PRI_12_SHIFT               0u\n#define S32_SCB_SHPR3_PRI_12_WIDTH               8u\n#define S32_SCB_SHPR3_PRI_12(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHPR3_PRI_12_SHIFT))&S32_SCB_SHPR3_PRI_12_MASK)\n#define S32_SCB_SHPR3_PRI_14_MASK                0xFF0000u\n#define S32_SCB_SHPR3_PRI_14_SHIFT               16u\n#define S32_SCB_SHPR3_PRI_14_WIDTH               8u\n#define S32_SCB_SHPR3_PRI_14(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHPR3_PRI_14_SHIFT))&S32_SCB_SHPR3_PRI_14_MASK)\n#define S32_SCB_SHPR3_PRI_15_MASK                0xFF000000u\n#define S32_SCB_SHPR3_PRI_15_SHIFT               24u\n#define S32_SCB_SHPR3_PRI_15_WIDTH               8u\n#define S32_SCB_SHPR3_PRI_15(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHPR3_PRI_15_SHIFT))&S32_SCB_SHPR3_PRI_15_MASK)\n/* SHCSR Bit Fields */\n#define S32_SCB_SHCSR_MEMFAULTACT_MASK           0x1u\n#define S32_SCB_SHCSR_MEMFAULTACT_SHIFT          0u\n#define S32_SCB_SHCSR_MEMFAULTACT_WIDTH          1u\n#define S32_SCB_SHCSR_MEMFAULTACT(x)             (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_MEMFAULTACT_SHIFT))&S32_SCB_SHCSR_MEMFAULTACT_MASK)\n#define S32_SCB_SHCSR_BUSFAULTACT_MASK           0x2u\n#define S32_SCB_SHCSR_BUSFAULTACT_SHIFT          1u\n#define S32_SCB_SHCSR_BUSFAULTACT_WIDTH          1u\n#define S32_SCB_SHCSR_BUSFAULTACT(x)             (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_BUSFAULTACT_SHIFT))&S32_SCB_SHCSR_BUSFAULTACT_MASK)\n#define S32_SCB_SHCSR_USGFAULTACT_MASK           0x8u\n#define S32_SCB_SHCSR_USGFAULTACT_SHIFT          3u\n#define S32_SCB_SHCSR_USGFAULTACT_WIDTH          1u\n#define S32_SCB_SHCSR_USGFAULTACT(x)             (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_USGFAULTACT_SHIFT))&S32_SCB_SHCSR_USGFAULTACT_MASK)\n#define S32_SCB_SHCSR_SVCALLACT_MASK             0x80u\n#define S32_SCB_SHCSR_SVCALLACT_SHIFT            7u\n#define S32_SCB_SHCSR_SVCALLACT_WIDTH            1u\n#define S32_SCB_SHCSR_SVCALLACT(x)               (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_SVCALLACT_SHIFT))&S32_SCB_SHCSR_SVCALLACT_MASK)\n#define S32_SCB_SHCSR_MONITORACT_MASK            0x100u\n#define S32_SCB_SHCSR_MONITORACT_SHIFT           8u\n#define S32_SCB_SHCSR_MONITORACT_WIDTH           1u\n#define S32_SCB_SHCSR_MONITORACT(x)              (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_MONITORACT_SHIFT))&S32_SCB_SHCSR_MONITORACT_MASK)\n#define S32_SCB_SHCSR_PENDSVACT_MASK             0x400u\n#define S32_SCB_SHCSR_PENDSVACT_SHIFT            10u\n#define S32_SCB_SHCSR_PENDSVACT_WIDTH            1u\n#define S32_SCB_SHCSR_PENDSVACT(x)               (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_PENDSVACT_SHIFT))&S32_SCB_SHCSR_PENDSVACT_MASK)\n#define S32_SCB_SHCSR_SYSTICKACT_MASK            0x800u\n#define S32_SCB_SHCSR_SYSTICKACT_SHIFT           11u\n#define S32_SCB_SHCSR_SYSTICKACT_WIDTH           1u\n#define S32_SCB_SHCSR_SYSTICKACT(x)              (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_SYSTICKACT_SHIFT))&S32_SCB_SHCSR_SYSTICKACT_MASK)\n#define S32_SCB_SHCSR_USGFAULTPENDED_MASK        0x1000u\n#define S32_SCB_SHCSR_USGFAULTPENDED_SHIFT       12u\n#define S32_SCB_SHCSR_USGFAULTPENDED_WIDTH       1u\n#define S32_SCB_SHCSR_USGFAULTPENDED(x)          (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_USGFAULTPENDED_SHIFT))&S32_SCB_SHCSR_USGFAULTPENDED_MASK)\n#define S32_SCB_SHCSR_MEMFAULTPENDED_MASK        0x2000u\n#define S32_SCB_SHCSR_MEMFAULTPENDED_SHIFT       13u\n#define S32_SCB_SHCSR_MEMFAULTPENDED_WIDTH       1u\n#define S32_SCB_SHCSR_MEMFAULTPENDED(x)          (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_MEMFAULTPENDED_SHIFT))&S32_SCB_SHCSR_MEMFAULTPENDED_MASK)\n#define S32_SCB_SHCSR_BUSFAULTPENDED_MASK        0x4000u\n#define S32_SCB_SHCSR_BUSFAULTPENDED_SHIFT       14u\n#define S32_SCB_SHCSR_BUSFAULTPENDED_WIDTH       1u\n#define S32_SCB_SHCSR_BUSFAULTPENDED(x)          (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_BUSFAULTPENDED_SHIFT))&S32_SCB_SHCSR_BUSFAULTPENDED_MASK)\n#define S32_SCB_SHCSR_SVCALLPENDED_MASK          0x8000u\n#define S32_SCB_SHCSR_SVCALLPENDED_SHIFT         15u\n#define S32_SCB_SHCSR_SVCALLPENDED_WIDTH         1u\n#define S32_SCB_SHCSR_SVCALLPENDED(x)            (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_SVCALLPENDED_SHIFT))&S32_SCB_SHCSR_SVCALLPENDED_MASK)\n#define S32_SCB_SHCSR_MEMFAULTENA_MASK           0x10000u\n#define S32_SCB_SHCSR_MEMFAULTENA_SHIFT          16u\n#define S32_SCB_SHCSR_MEMFAULTENA_WIDTH          1u\n#define S32_SCB_SHCSR_MEMFAULTENA(x)             (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_MEMFAULTENA_SHIFT))&S32_SCB_SHCSR_MEMFAULTENA_MASK)\n#define S32_SCB_SHCSR_BUSFAULTENA_MASK           0x20000u\n#define S32_SCB_SHCSR_BUSFAULTENA_SHIFT          17u\n#define S32_SCB_SHCSR_BUSFAULTENA_WIDTH          1u\n#define S32_SCB_SHCSR_BUSFAULTENA(x)             (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_BUSFAULTENA_SHIFT))&S32_SCB_SHCSR_BUSFAULTENA_MASK)\n#define S32_SCB_SHCSR_USGFAULTENA_MASK           0x40000u\n#define S32_SCB_SHCSR_USGFAULTENA_SHIFT          18u\n#define S32_SCB_SHCSR_USGFAULTENA_WIDTH          1u\n#define S32_SCB_SHCSR_USGFAULTENA(x)             (((uint32_t)(((uint32_t)(x))<<S32_SCB_SHCSR_USGFAULTENA_SHIFT))&S32_SCB_SHCSR_USGFAULTENA_MASK)\n/* CFSR Bit Fields */\n#define S32_SCB_CFSR_IACCVIOL_MASK               0x1u\n#define S32_SCB_CFSR_IACCVIOL_SHIFT              0u\n#define S32_SCB_CFSR_IACCVIOL_WIDTH              1u\n#define S32_SCB_CFSR_IACCVIOL(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_IACCVIOL_SHIFT))&S32_SCB_CFSR_IACCVIOL_MASK)\n#define S32_SCB_CFSR_DACCVIOL_MASK               0x2u\n#define S32_SCB_CFSR_DACCVIOL_SHIFT              1u\n#define S32_SCB_CFSR_DACCVIOL_WIDTH              1u\n#define S32_SCB_CFSR_DACCVIOL(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_DACCVIOL_SHIFT))&S32_SCB_CFSR_DACCVIOL_MASK)\n#define S32_SCB_CFSR_MUNSTKERR_MASK              0x8u\n#define S32_SCB_CFSR_MUNSTKERR_SHIFT             3u\n#define S32_SCB_CFSR_MUNSTKERR_WIDTH             1u\n#define S32_SCB_CFSR_MUNSTKERR(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_MUNSTKERR_SHIFT))&S32_SCB_CFSR_MUNSTKERR_MASK)\n#define S32_SCB_CFSR_MSTKERR_MASK                0x10u\n#define S32_SCB_CFSR_MSTKERR_SHIFT               4u\n#define S32_SCB_CFSR_MSTKERR_WIDTH               1u\n#define S32_SCB_CFSR_MSTKERR(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_MSTKERR_SHIFT))&S32_SCB_CFSR_MSTKERR_MASK)\n#define S32_SCB_CFSR_MLSPERR_MASK                0x20u\n#define S32_SCB_CFSR_MLSPERR_SHIFT               5u\n#define S32_SCB_CFSR_MLSPERR_WIDTH               1u\n#define S32_SCB_CFSR_MLSPERR(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_MLSPERR_SHIFT))&S32_SCB_CFSR_MLSPERR_MASK)\n#define S32_SCB_CFSR_MMARVALID_MASK              0x80u\n#define S32_SCB_CFSR_MMARVALID_SHIFT             7u\n#define S32_SCB_CFSR_MMARVALID_WIDTH             1u\n#define S32_SCB_CFSR_MMARVALID(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_MMARVALID_SHIFT))&S32_SCB_CFSR_MMARVALID_MASK)\n#define S32_SCB_CFSR_IBUSERR_MASK                0x100u\n#define S32_SCB_CFSR_IBUSERR_SHIFT               8u\n#define S32_SCB_CFSR_IBUSERR_WIDTH               1u\n#define S32_SCB_CFSR_IBUSERR(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_IBUSERR_SHIFT))&S32_SCB_CFSR_IBUSERR_MASK)\n#define S32_SCB_CFSR_PRECISERR_MASK              0x200u\n#define S32_SCB_CFSR_PRECISERR_SHIFT             9u\n#define S32_SCB_CFSR_PRECISERR_WIDTH             1u\n#define S32_SCB_CFSR_PRECISERR(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_PRECISERR_SHIFT))&S32_SCB_CFSR_PRECISERR_MASK)\n#define S32_SCB_CFSR_IMPRECISERR_MASK            0x400u\n#define S32_SCB_CFSR_IMPRECISERR_SHIFT           10u\n#define S32_SCB_CFSR_IMPRECISERR_WIDTH           1u\n#define S32_SCB_CFSR_IMPRECISERR(x)              (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_IMPRECISERR_SHIFT))&S32_SCB_CFSR_IMPRECISERR_MASK)\n#define S32_SCB_CFSR_UNSTKERR_MASK               0x800u\n#define S32_SCB_CFSR_UNSTKERR_SHIFT              11u\n#define S32_SCB_CFSR_UNSTKERR_WIDTH              1u\n#define S32_SCB_CFSR_UNSTKERR(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_UNSTKERR_SHIFT))&S32_SCB_CFSR_UNSTKERR_MASK)\n#define S32_SCB_CFSR_STKERR_MASK                 0x1000u\n#define S32_SCB_CFSR_STKERR_SHIFT                12u\n#define S32_SCB_CFSR_STKERR_WIDTH                1u\n#define S32_SCB_CFSR_STKERR(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_STKERR_SHIFT))&S32_SCB_CFSR_STKERR_MASK)\n#define S32_SCB_CFSR_LSPERR_MASK                 0x2000u\n#define S32_SCB_CFSR_LSPERR_SHIFT                13u\n#define S32_SCB_CFSR_LSPERR_WIDTH                1u\n#define S32_SCB_CFSR_LSPERR(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_LSPERR_SHIFT))&S32_SCB_CFSR_LSPERR_MASK)\n#define S32_SCB_CFSR_BFARVALID_MASK              0x8000u\n#define S32_SCB_CFSR_BFARVALID_SHIFT             15u\n#define S32_SCB_CFSR_BFARVALID_WIDTH             1u\n#define S32_SCB_CFSR_BFARVALID(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_BFARVALID_SHIFT))&S32_SCB_CFSR_BFARVALID_MASK)\n#define S32_SCB_CFSR_UNDEFINSTR_MASK             0x10000u\n#define S32_SCB_CFSR_UNDEFINSTR_SHIFT            16u\n#define S32_SCB_CFSR_UNDEFINSTR_WIDTH            1u\n#define S32_SCB_CFSR_UNDEFINSTR(x)               (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_UNDEFINSTR_SHIFT))&S32_SCB_CFSR_UNDEFINSTR_MASK)\n#define S32_SCB_CFSR_INVSTATE_MASK               0x20000u\n#define S32_SCB_CFSR_INVSTATE_SHIFT              17u\n#define S32_SCB_CFSR_INVSTATE_WIDTH              1u\n#define S32_SCB_CFSR_INVSTATE(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_INVSTATE_SHIFT))&S32_SCB_CFSR_INVSTATE_MASK)\n#define S32_SCB_CFSR_INVPC_MASK                  0x40000u\n#define S32_SCB_CFSR_INVPC_SHIFT                 18u\n#define S32_SCB_CFSR_INVPC_WIDTH                 1u\n#define S32_SCB_CFSR_INVPC(x)                    (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_INVPC_SHIFT))&S32_SCB_CFSR_INVPC_MASK)\n#define S32_SCB_CFSR_NOCP_MASK                   0x80000u\n#define S32_SCB_CFSR_NOCP_SHIFT                  19u\n#define S32_SCB_CFSR_NOCP_WIDTH                  1u\n#define S32_SCB_CFSR_NOCP(x)                     (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_NOCP_SHIFT))&S32_SCB_CFSR_NOCP_MASK)\n#define S32_SCB_CFSR_UNALIGNED_MASK              0x1000000u\n#define S32_SCB_CFSR_UNALIGNED_SHIFT             24u\n#define S32_SCB_CFSR_UNALIGNED_WIDTH             1u\n#define S32_SCB_CFSR_UNALIGNED(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_UNALIGNED_SHIFT))&S32_SCB_CFSR_UNALIGNED_MASK)\n#define S32_SCB_CFSR_DIVBYZERO_MASK              0x2000000u\n#define S32_SCB_CFSR_DIVBYZERO_SHIFT             25u\n#define S32_SCB_CFSR_DIVBYZERO_WIDTH             1u\n#define S32_SCB_CFSR_DIVBYZERO(x)                (((uint32_t)(((uint32_t)(x))<<S32_SCB_CFSR_DIVBYZERO_SHIFT))&S32_SCB_CFSR_DIVBYZERO_MASK)\n/* HFSR Bit Fields */\n#define S32_SCB_HFSR_VECTTBL_MASK                0x2u\n#define S32_SCB_HFSR_VECTTBL_SHIFT               1u\n#define S32_SCB_HFSR_VECTTBL_WIDTH               1u\n#define S32_SCB_HFSR_VECTTBL(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_HFSR_VECTTBL_SHIFT))&S32_SCB_HFSR_VECTTBL_MASK)\n#define S32_SCB_HFSR_FORCED_MASK                 0x40000000u\n#define S32_SCB_HFSR_FORCED_SHIFT                30u\n#define S32_SCB_HFSR_FORCED_WIDTH                1u\n#define S32_SCB_HFSR_FORCED(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_HFSR_FORCED_SHIFT))&S32_SCB_HFSR_FORCED_MASK)\n#define S32_SCB_HFSR_DEBUGEVT_MASK               0x80000000u\n#define S32_SCB_HFSR_DEBUGEVT_SHIFT              31u\n#define S32_SCB_HFSR_DEBUGEVT_WIDTH              1u\n#define S32_SCB_HFSR_DEBUGEVT(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_HFSR_DEBUGEVT_SHIFT))&S32_SCB_HFSR_DEBUGEVT_MASK)\n/* DFSR Bit Fields */\n#define S32_SCB_DFSR_HALTED_MASK                 0x1u\n#define S32_SCB_DFSR_HALTED_SHIFT                0u\n#define S32_SCB_DFSR_HALTED_WIDTH                1u\n#define S32_SCB_DFSR_HALTED(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_DFSR_HALTED_SHIFT))&S32_SCB_DFSR_HALTED_MASK)\n#define S32_SCB_DFSR_BKPT_MASK                   0x2u\n#define S32_SCB_DFSR_BKPT_SHIFT                  1u\n#define S32_SCB_DFSR_BKPT_WIDTH                  1u\n#define S32_SCB_DFSR_BKPT(x)                     (((uint32_t)(((uint32_t)(x))<<S32_SCB_DFSR_BKPT_SHIFT))&S32_SCB_DFSR_BKPT_MASK)\n#define S32_SCB_DFSR_DWTTRAP_MASK                0x4u\n#define S32_SCB_DFSR_DWTTRAP_SHIFT               2u\n#define S32_SCB_DFSR_DWTTRAP_WIDTH               1u\n#define S32_SCB_DFSR_DWTTRAP(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_DFSR_DWTTRAP_SHIFT))&S32_SCB_DFSR_DWTTRAP_MASK)\n#define S32_SCB_DFSR_VCATCH_MASK                 0x8u\n#define S32_SCB_DFSR_VCATCH_SHIFT                3u\n#define S32_SCB_DFSR_VCATCH_WIDTH                1u\n#define S32_SCB_DFSR_VCATCH(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_DFSR_VCATCH_SHIFT))&S32_SCB_DFSR_VCATCH_MASK)\n#define S32_SCB_DFSR_EXTERNAL_MASK               0x10u\n#define S32_SCB_DFSR_EXTERNAL_SHIFT              4u\n#define S32_SCB_DFSR_EXTERNAL_WIDTH              1u\n#define S32_SCB_DFSR_EXTERNAL(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_DFSR_EXTERNAL_SHIFT))&S32_SCB_DFSR_EXTERNAL_MASK)\n/* MMFAR Bit Fields */\n#define S32_SCB_MMFAR_ADDRESS_MASK               0xFFFFFFFFu\n#define S32_SCB_MMFAR_ADDRESS_SHIFT              0u\n#define S32_SCB_MMFAR_ADDRESS_WIDTH              32u\n#define S32_SCB_MMFAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_MMFAR_ADDRESS_SHIFT))&S32_SCB_MMFAR_ADDRESS_MASK)\n/* BFAR Bit Fields */\n#define S32_SCB_BFAR_ADDRESS_MASK                0xFFFFFFFFu\n#define S32_SCB_BFAR_ADDRESS_SHIFT               0u\n#define S32_SCB_BFAR_ADDRESS_WIDTH               32u\n#define S32_SCB_BFAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_BFAR_ADDRESS_SHIFT))&S32_SCB_BFAR_ADDRESS_MASK)\n/* AFSR Bit Fields */\n#define S32_SCB_AFSR_AUXFAULT_MASK               0xFFFFFFFFu\n#define S32_SCB_AFSR_AUXFAULT_SHIFT              0u\n#define S32_SCB_AFSR_AUXFAULT_WIDTH              32u\n#define S32_SCB_AFSR_AUXFAULT(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_AFSR_AUXFAULT_SHIFT))&S32_SCB_AFSR_AUXFAULT_MASK)\n/* CPACR Bit Fields */\n#define S32_SCB_CPACR_CP10_MASK                  0x300000u\n#define S32_SCB_CPACR_CP10_SHIFT                 20u\n#define S32_SCB_CPACR_CP10_WIDTH                 2u\n#define S32_SCB_CPACR_CP10(x)                    (((uint32_t)(((uint32_t)(x))<<S32_SCB_CPACR_CP10_SHIFT))&S32_SCB_CPACR_CP10_MASK)\n#define S32_SCB_CPACR_CP11_MASK                  0xC00000u\n#define S32_SCB_CPACR_CP11_SHIFT                 22u\n#define S32_SCB_CPACR_CP11_WIDTH                 2u\n#define S32_SCB_CPACR_CP11(x)                    (((uint32_t)(((uint32_t)(x))<<S32_SCB_CPACR_CP11_SHIFT))&S32_SCB_CPACR_CP11_MASK)\n/* FPCCR Bit Fields */\n#define S32_SCB_FPCCR_LSPACT_MASK                0x1u\n#define S32_SCB_FPCCR_LSPACT_SHIFT               0u\n#define S32_SCB_FPCCR_LSPACT_WIDTH               1u\n#define S32_SCB_FPCCR_LSPACT(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPCCR_LSPACT_SHIFT))&S32_SCB_FPCCR_LSPACT_MASK)\n#define S32_SCB_FPCCR_USER_MASK                  0x2u\n#define S32_SCB_FPCCR_USER_SHIFT                 1u\n#define S32_SCB_FPCCR_USER_WIDTH                 1u\n#define S32_SCB_FPCCR_USER(x)                    (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPCCR_USER_SHIFT))&S32_SCB_FPCCR_USER_MASK)\n#define S32_SCB_FPCCR_THREAD_MASK                0x8u\n#define S32_SCB_FPCCR_THREAD_SHIFT               3u\n#define S32_SCB_FPCCR_THREAD_WIDTH               1u\n#define S32_SCB_FPCCR_THREAD(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPCCR_THREAD_SHIFT))&S32_SCB_FPCCR_THREAD_MASK)\n#define S32_SCB_FPCCR_HFRDY_MASK                 0x10u\n#define S32_SCB_FPCCR_HFRDY_SHIFT                4u\n#define S32_SCB_FPCCR_HFRDY_WIDTH                1u\n#define S32_SCB_FPCCR_HFRDY(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPCCR_HFRDY_SHIFT))&S32_SCB_FPCCR_HFRDY_MASK)\n#define S32_SCB_FPCCR_MMRDY_MASK                 0x20u\n#define S32_SCB_FPCCR_MMRDY_SHIFT                5u\n#define S32_SCB_FPCCR_MMRDY_WIDTH                1u\n#define S32_SCB_FPCCR_MMRDY(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPCCR_MMRDY_SHIFT))&S32_SCB_FPCCR_MMRDY_MASK)\n#define S32_SCB_FPCCR_BFRDY_MASK                 0x40u\n#define S32_SCB_FPCCR_BFRDY_SHIFT                6u\n#define S32_SCB_FPCCR_BFRDY_WIDTH                1u\n#define S32_SCB_FPCCR_BFRDY(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPCCR_BFRDY_SHIFT))&S32_SCB_FPCCR_BFRDY_MASK)\n#define S32_SCB_FPCCR_MONRDY_MASK                0x100u\n#define S32_SCB_FPCCR_MONRDY_SHIFT               8u\n#define S32_SCB_FPCCR_MONRDY_WIDTH               1u\n#define S32_SCB_FPCCR_MONRDY(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPCCR_MONRDY_SHIFT))&S32_SCB_FPCCR_MONRDY_MASK)\n#define S32_SCB_FPCCR_LSPEN_MASK                 0x40000000u\n#define S32_SCB_FPCCR_LSPEN_SHIFT                30u\n#define S32_SCB_FPCCR_LSPEN_WIDTH                1u\n#define S32_SCB_FPCCR_LSPEN(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPCCR_LSPEN_SHIFT))&S32_SCB_FPCCR_LSPEN_MASK)\n#define S32_SCB_FPCCR_ASPEN_MASK                 0x80000000u\n#define S32_SCB_FPCCR_ASPEN_SHIFT                31u\n#define S32_SCB_FPCCR_ASPEN_WIDTH                1u\n#define S32_SCB_FPCCR_ASPEN(x)                   (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPCCR_ASPEN_SHIFT))&S32_SCB_FPCCR_ASPEN_MASK)\n/* FPCAR Bit Fields */\n#define S32_SCB_FPCAR_ADDRESS_MASK               0xFFFFFFF8u\n#define S32_SCB_FPCAR_ADDRESS_SHIFT              3u\n#define S32_SCB_FPCAR_ADDRESS_WIDTH              29u\n#define S32_SCB_FPCAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPCAR_ADDRESS_SHIFT))&S32_SCB_FPCAR_ADDRESS_MASK)\n/* FPDSCR Bit Fields */\n#define S32_SCB_FPDSCR_RMode_MASK                0xC00000u\n#define S32_SCB_FPDSCR_RMode_SHIFT               22u\n#define S32_SCB_FPDSCR_RMode_WIDTH               2u\n#define S32_SCB_FPDSCR_RMode(x)                  (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPDSCR_RMode_SHIFT))&S32_SCB_FPDSCR_RMode_MASK)\n#define S32_SCB_FPDSCR_FZ_MASK                   0x1000000u\n#define S32_SCB_FPDSCR_FZ_SHIFT                  24u\n#define S32_SCB_FPDSCR_FZ_WIDTH                  1u\n#define S32_SCB_FPDSCR_FZ(x)                     (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPDSCR_FZ_SHIFT))&S32_SCB_FPDSCR_FZ_MASK)\n#define S32_SCB_FPDSCR_DN_MASK                   0x2000000u\n#define S32_SCB_FPDSCR_DN_SHIFT                  25u\n#define S32_SCB_FPDSCR_DN_WIDTH                  1u\n#define S32_SCB_FPDSCR_DN(x)                     (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPDSCR_DN_SHIFT))&S32_SCB_FPDSCR_DN_MASK)\n#define S32_SCB_FPDSCR_AHP_MASK                  0x4000000u\n#define S32_SCB_FPDSCR_AHP_SHIFT                 26u\n#define S32_SCB_FPDSCR_AHP_WIDTH                 1u\n#define S32_SCB_FPDSCR_AHP(x)                    (((uint32_t)(((uint32_t)(x))<<S32_SCB_FPDSCR_AHP_SHIFT))&S32_SCB_FPDSCR_AHP_MASK)\n\n/*!\n * @}\n */ /* end of group S32_SCB_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group S32_SCB_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- S32_SysTick Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup S32_SysTick_Peripheral_Access_Layer S32_SysTick Peripheral Access Layer\n * @{\n */\n\n\n/** S32_SysTick - Size of Registers Arrays */\n\n/** S32_SysTick - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t CSR;                               /**< SysTick Control and Status Register, offset: 0x0 */\n  __IO uint32_t RVR;                               /**< SysTick Reload Value Register, offset: 0x4 */\n  __IO uint32_t CVR;                               /**< SysTick Current Value Register, offset: 0x8 */\n  __I  uint32_t CALIB;                             /**< SysTick Calibration Value Register, offset: 0xC */\n} S32_SysTick_Type, *S32_SysTick_MemMapPtr;\n\n /** Number of instances of the S32_SysTick module. */\n#define S32_SysTick_INSTANCE_COUNT               (1u)\n\n\n/* S32_SysTick - Peripheral instance base addresses */\n/** Peripheral S32_SysTick base address */\n#define S32_SysTick_BASE                         (0xE000E010u)\n/** Peripheral S32_SysTick base pointer */\n#define S32_SysTick                              ((S32_SysTick_Type *)S32_SysTick_BASE)\n/** Array initializer of S32_SysTick peripheral base addresses */\n#define S32_SysTick_BASE_ADDRS                   { S32_SysTick_BASE }\n/** Array initializer of S32_SysTick peripheral base pointers */\n#define S32_SysTick_BASE_PTRS                    { S32_SysTick }\n /** Number of interrupt vector arrays for the S32_SysTick module. */\n#define S32_SysTick_IRQS_ARR_COUNT               (1u)\n /** Number of interrupt channels for the S32_SysTick module. */\n#define S32_SysTick_IRQS_CH_COUNT                (1u)\n/** Interrupt vectors for the S32_SysTick peripheral type */\n#define S32_SysTick_IRQS                         { SysTick_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- S32_SysTick Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup S32_SysTick_Register_Masks S32_SysTick Register Masks\n * @{\n */\n\n/* CSR Bit Fields */\n#define S32_SysTick_CSR_ENABLE_MASK              0x1u\n#define S32_SysTick_CSR_ENABLE_SHIFT             0u\n#define S32_SysTick_CSR_ENABLE_WIDTH             1u\n#define S32_SysTick_CSR_ENABLE(x)                (((uint32_t)(((uint32_t)(x))<<S32_SysTick_CSR_ENABLE_SHIFT))&S32_SysTick_CSR_ENABLE_MASK)\n#define S32_SysTick_CSR_TICKINT_MASK             0x2u\n#define S32_SysTick_CSR_TICKINT_SHIFT            1u\n#define S32_SysTick_CSR_TICKINT_WIDTH            1u\n#define S32_SysTick_CSR_TICKINT(x)               (((uint32_t)(((uint32_t)(x))<<S32_SysTick_CSR_TICKINT_SHIFT))&S32_SysTick_CSR_TICKINT_MASK)\n#define S32_SysTick_CSR_CLKSOURCE_MASK           0x4u\n#define S32_SysTick_CSR_CLKSOURCE_SHIFT          2u\n#define S32_SysTick_CSR_CLKSOURCE_WIDTH          1u\n#define S32_SysTick_CSR_CLKSOURCE(x)             (((uint32_t)(((uint32_t)(x))<<S32_SysTick_CSR_CLKSOURCE_SHIFT))&S32_SysTick_CSR_CLKSOURCE_MASK)\n#define S32_SysTick_CSR_COUNTFLAG_MASK           0x10000u\n#define S32_SysTick_CSR_COUNTFLAG_SHIFT          16u\n#define S32_SysTick_CSR_COUNTFLAG_WIDTH          1u\n#define S32_SysTick_CSR_COUNTFLAG(x)             (((uint32_t)(((uint32_t)(x))<<S32_SysTick_CSR_COUNTFLAG_SHIFT))&S32_SysTick_CSR_COUNTFLAG_MASK)\n/* RVR Bit Fields */\n#define S32_SysTick_RVR_RELOAD_MASK              0xFFFFFFu\n#define S32_SysTick_RVR_RELOAD_SHIFT             0u\n#define S32_SysTick_RVR_RELOAD_WIDTH             24u\n#define S32_SysTick_RVR_RELOAD(x)                (((uint32_t)(((uint32_t)(x))<<S32_SysTick_RVR_RELOAD_SHIFT))&S32_SysTick_RVR_RELOAD_MASK)\n/* CVR Bit Fields */\n#define S32_SysTick_CVR_CURRENT_MASK             0xFFFFFFu\n#define S32_SysTick_CVR_CURRENT_SHIFT            0u\n#define S32_SysTick_CVR_CURRENT_WIDTH            24u\n#define S32_SysTick_CVR_CURRENT(x)               (((uint32_t)(((uint32_t)(x))<<S32_SysTick_CVR_CURRENT_SHIFT))&S32_SysTick_CVR_CURRENT_MASK)\n/* CALIB Bit Fields */\n#define S32_SysTick_CALIB_TENMS_MASK             0xFFFFFFu\n#define S32_SysTick_CALIB_TENMS_SHIFT            0u\n#define S32_SysTick_CALIB_TENMS_WIDTH            24u\n#define S32_SysTick_CALIB_TENMS(x)               (((uint32_t)(((uint32_t)(x))<<S32_SysTick_CALIB_TENMS_SHIFT))&S32_SysTick_CALIB_TENMS_MASK)\n#define S32_SysTick_CALIB_SKEW_MASK              0x40000000u\n#define S32_SysTick_CALIB_SKEW_SHIFT             30u\n#define S32_SysTick_CALIB_SKEW_WIDTH             1u\n#define S32_SysTick_CALIB_SKEW(x)                (((uint32_t)(((uint32_t)(x))<<S32_SysTick_CALIB_SKEW_SHIFT))&S32_SysTick_CALIB_SKEW_MASK)\n#define S32_SysTick_CALIB_NOREF_MASK             0x80000000u\n#define S32_SysTick_CALIB_NOREF_SHIFT            31u\n#define S32_SysTick_CALIB_NOREF_WIDTH            1u\n#define S32_SysTick_CALIB_NOREF(x)               (((uint32_t)(((uint32_t)(x))<<S32_SysTick_CALIB_NOREF_SHIFT))&S32_SysTick_CALIB_NOREF_MASK)\n\n/*!\n * @}\n */ /* end of group S32_SysTick_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group S32_SysTick_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- SCG Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup SCG_Peripheral_Access_Layer SCG Peripheral Access Layer\n * @{\n */\n\n\n/** SCG - Size of Registers Arrays */\n\n/** SCG - Register Layout Typedef */\ntypedef struct {\n  __I  uint32_t VERID;                             /**< Version ID Register, offset: 0x0 */\n  __I  uint32_t PARAM;                             /**< Parameter Register, offset: 0x4 */\n       uint8_t RESERVED_0[8];\n  __I  uint32_t CSR;                               /**< Clock Status Register, offset: 0x10 */\n  __IO uint32_t RCCR;                              /**< Run Clock Control Register, offset: 0x14 */\n  __IO uint32_t VCCR;                              /**< VLPR Clock Control Register, offset: 0x18 */\n  __IO uint32_t HCCR;                              /**< HSRUN Clock Control Register, offset: 0x1C */\n  __IO uint32_t CLKOUTCNFG;                        /**< SCG CLKOUT Configuration Register, offset: 0x20 */\n       uint8_t RESERVED_1[220];\n  __IO uint32_t SOSCCSR;                           /**< System OSC Control Status Register, offset: 0x100 */\n  __IO uint32_t SOSCDIV;                           /**< System OSC Divide Register, offset: 0x104 */\n  __IO uint32_t SOSCCFG;                           /**< System Oscillator Configuration Register, offset: 0x108 */\n       uint8_t RESERVED_2[244];\n  __IO uint32_t SIRCCSR;                           /**< Slow IRC Control Status Register, offset: 0x200 */\n  __IO uint32_t SIRCDIV;                           /**< Slow IRC Divide Register, offset: 0x204 */\n  __IO uint32_t SIRCCFG;                           /**< Slow IRC Configuration Register, offset: 0x208 */\n       uint8_t RESERVED_3[244];\n  __IO uint32_t FIRCCSR;                           /**< Fast IRC Control Status Register, offset: 0x300 */\n  __IO uint32_t FIRCDIV;                           /**< Fast IRC Divide Register, offset: 0x304 */\n  __IO uint32_t FIRCCFG;                           /**< Fast IRC Configuration Register, offset: 0x308 */\n       uint8_t RESERVED_4[756];\n  __IO uint32_t SPLLCSR;                           /**< System PLL Control Status Register, offset: 0x600 */\n  __IO uint32_t SPLLDIV;                           /**< System PLL Divide Register, offset: 0x604 */\n  __IO uint32_t SPLLCFG;                           /**< System PLL Configuration Register, offset: 0x608 */\n} SCG_Type, *SCG_MemMapPtr;\n\n /** Number of instances of the SCG module. */\n#define SCG_INSTANCE_COUNT                       (1u)\n\n\n/* SCG - Peripheral instance base addresses */\n/** Peripheral SCG base address */\n#define SCG_BASE                                 (0x40064000u)\n/** Peripheral SCG base pointer */\n#define SCG                                      ((SCG_Type *)SCG_BASE)\n/** Array initializer of SCG peripheral base addresses */\n#define SCG_BASE_ADDRS                           { SCG_BASE }\n/** Array initializer of SCG peripheral base pointers */\n#define SCG_BASE_PTRS                            { SCG }\n /** Number of interrupt vector arrays for the SCG module. */\n#define SCG_IRQS_ARR_COUNT                       (1u)\n /** Number of interrupt channels for the SCG module. */\n#define SCG_IRQS_CH_COUNT                        (1u)\n/** Interrupt vectors for the SCG peripheral type */\n#define SCG_IRQS                                 { SCG_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- SCG Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup SCG_Register_Masks SCG Register Masks\n * @{\n */\n\n/* VERID Bit Fields */\n#define SCG_VERID_VERSION_MASK                   0xFFFFFFFFu\n#define SCG_VERID_VERSION_SHIFT                  0u\n#define SCG_VERID_VERSION_WIDTH                  32u\n#define SCG_VERID_VERSION(x)                     (((uint32_t)(((uint32_t)(x))<<SCG_VERID_VERSION_SHIFT))&SCG_VERID_VERSION_MASK)\n/* PARAM Bit Fields */\n#define SCG_PARAM_CLKPRES_MASK                   0xFFu\n#define SCG_PARAM_CLKPRES_SHIFT                  0u\n#define SCG_PARAM_CLKPRES_WIDTH                  8u\n#define SCG_PARAM_CLKPRES(x)                     (((uint32_t)(((uint32_t)(x))<<SCG_PARAM_CLKPRES_SHIFT))&SCG_PARAM_CLKPRES_MASK)\n#define SCG_PARAM_DIVPRES_MASK                   0xF8000000u\n#define SCG_PARAM_DIVPRES_SHIFT                  27u\n#define SCG_PARAM_DIVPRES_WIDTH                  5u\n#define SCG_PARAM_DIVPRES(x)                     (((uint32_t)(((uint32_t)(x))<<SCG_PARAM_DIVPRES_SHIFT))&SCG_PARAM_DIVPRES_MASK)\n/* CSR Bit Fields */\n#define SCG_CSR_DIVSLOW_MASK                     0xFu\n#define SCG_CSR_DIVSLOW_SHIFT                    0u\n#define SCG_CSR_DIVSLOW_WIDTH                    4u\n#define SCG_CSR_DIVSLOW(x)                       (((uint32_t)(((uint32_t)(x))<<SCG_CSR_DIVSLOW_SHIFT))&SCG_CSR_DIVSLOW_MASK)\n#define SCG_CSR_DIVBUS_MASK                      0xF0u\n#define SCG_CSR_DIVBUS_SHIFT                     4u\n#define SCG_CSR_DIVBUS_WIDTH                     4u\n#define SCG_CSR_DIVBUS(x)                        (((uint32_t)(((uint32_t)(x))<<SCG_CSR_DIVBUS_SHIFT))&SCG_CSR_DIVBUS_MASK)\n#define SCG_CSR_DIVCORE_MASK                     0xF0000u\n#define SCG_CSR_DIVCORE_SHIFT                    16u\n#define SCG_CSR_DIVCORE_WIDTH                    4u\n#define SCG_CSR_DIVCORE(x)                       (((uint32_t)(((uint32_t)(x))<<SCG_CSR_DIVCORE_SHIFT))&SCG_CSR_DIVCORE_MASK)\n#define SCG_CSR_SCS_MASK                         0xF000000u\n#define SCG_CSR_SCS_SHIFT                        24u\n#define SCG_CSR_SCS_WIDTH                        4u\n#define SCG_CSR_SCS(x)                           (((uint32_t)(((uint32_t)(x))<<SCG_CSR_SCS_SHIFT))&SCG_CSR_SCS_MASK)\n/* RCCR Bit Fields */\n#define SCG_RCCR_DIVSLOW_MASK                    0xFu\n#define SCG_RCCR_DIVSLOW_SHIFT                   0u\n#define SCG_RCCR_DIVSLOW_WIDTH                   4u\n#define SCG_RCCR_DIVSLOW(x)                      (((uint32_t)(((uint32_t)(x))<<SCG_RCCR_DIVSLOW_SHIFT))&SCG_RCCR_DIVSLOW_MASK)\n#define SCG_RCCR_DIVBUS_MASK                     0xF0u\n#define SCG_RCCR_DIVBUS_SHIFT                    4u\n#define SCG_RCCR_DIVBUS_WIDTH                    4u\n#define SCG_RCCR_DIVBUS(x)                       (((uint32_t)(((uint32_t)(x))<<SCG_RCCR_DIVBUS_SHIFT))&SCG_RCCR_DIVBUS_MASK)\n#define SCG_RCCR_DIVCORE_MASK                    0xF0000u\n#define SCG_RCCR_DIVCORE_SHIFT                   16u\n#define SCG_RCCR_DIVCORE_WIDTH                   4u\n#define SCG_RCCR_DIVCORE(x)                      (((uint32_t)(((uint32_t)(x))<<SCG_RCCR_DIVCORE_SHIFT))&SCG_RCCR_DIVCORE_MASK)\n#define SCG_RCCR_SCS_MASK                        0xF000000u\n#define SCG_RCCR_SCS_SHIFT                       24u\n#define SCG_RCCR_SCS_WIDTH                       4u\n#define SCG_RCCR_SCS(x)                          (((uint32_t)(((uint32_t)(x))<<SCG_RCCR_SCS_SHIFT))&SCG_RCCR_SCS_MASK)\n/* VCCR Bit Fields */\n#define SCG_VCCR_DIVSLOW_MASK                    0xFu\n#define SCG_VCCR_DIVSLOW_SHIFT                   0u\n#define SCG_VCCR_DIVSLOW_WIDTH                   4u\n#define SCG_VCCR_DIVSLOW(x)                      (((uint32_t)(((uint32_t)(x))<<SCG_VCCR_DIVSLOW_SHIFT))&SCG_VCCR_DIVSLOW_MASK)\n#define SCG_VCCR_DIVBUS_MASK                     0xF0u\n#define SCG_VCCR_DIVBUS_SHIFT                    4u\n#define SCG_VCCR_DIVBUS_WIDTH                    4u\n#define SCG_VCCR_DIVBUS(x)                       (((uint32_t)(((uint32_t)(x))<<SCG_VCCR_DIVBUS_SHIFT))&SCG_VCCR_DIVBUS_MASK)\n#define SCG_VCCR_DIVCORE_MASK                    0xF0000u\n#define SCG_VCCR_DIVCORE_SHIFT                   16u\n#define SCG_VCCR_DIVCORE_WIDTH                   4u\n#define SCG_VCCR_DIVCORE(x)                      (((uint32_t)(((uint32_t)(x))<<SCG_VCCR_DIVCORE_SHIFT))&SCG_VCCR_DIVCORE_MASK)\n#define SCG_VCCR_SCS_MASK                        0xF000000u\n#define SCG_VCCR_SCS_SHIFT                       24u\n#define SCG_VCCR_SCS_WIDTH                       4u\n#define SCG_VCCR_SCS(x)                          (((uint32_t)(((uint32_t)(x))<<SCG_VCCR_SCS_SHIFT))&SCG_VCCR_SCS_MASK)\n/* HCCR Bit Fields */\n#define SCG_HCCR_DIVSLOW_MASK                    0xFu\n#define SCG_HCCR_DIVSLOW_SHIFT                   0u\n#define SCG_HCCR_DIVSLOW_WIDTH                   4u\n#define SCG_HCCR_DIVSLOW(x)                      (((uint32_t)(((uint32_t)(x))<<SCG_HCCR_DIVSLOW_SHIFT))&SCG_HCCR_DIVSLOW_MASK)\n#define SCG_HCCR_DIVBUS_MASK                     0xF0u\n#define SCG_HCCR_DIVBUS_SHIFT                    4u\n#define SCG_HCCR_DIVBUS_WIDTH                    4u\n#define SCG_HCCR_DIVBUS(x)                       (((uint32_t)(((uint32_t)(x))<<SCG_HCCR_DIVBUS_SHIFT))&SCG_HCCR_DIVBUS_MASK)\n#define SCG_HCCR_DIVCORE_MASK                    0xF0000u\n#define SCG_HCCR_DIVCORE_SHIFT                   16u\n#define SCG_HCCR_DIVCORE_WIDTH                   4u\n#define SCG_HCCR_DIVCORE(x)                      (((uint32_t)(((uint32_t)(x))<<SCG_HCCR_DIVCORE_SHIFT))&SCG_HCCR_DIVCORE_MASK)\n#define SCG_HCCR_SCS_MASK                        0xF000000u\n#define SCG_HCCR_SCS_SHIFT                       24u\n#define SCG_HCCR_SCS_WIDTH                       4u\n#define SCG_HCCR_SCS(x)                          (((uint32_t)(((uint32_t)(x))<<SCG_HCCR_SCS_SHIFT))&SCG_HCCR_SCS_MASK)\n/* CLKOUTCNFG Bit Fields */\n#define SCG_CLKOUTCNFG_CLKOUTSEL_MASK            0xF000000u\n#define SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT           24u\n#define SCG_CLKOUTCNFG_CLKOUTSEL_WIDTH           4u\n#define SCG_CLKOUTCNFG_CLKOUTSEL(x)              (((uint32_t)(((uint32_t)(x))<<SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT))&SCG_CLKOUTCNFG_CLKOUTSEL_MASK)\n/* SOSCCSR Bit Fields */\n#define SCG_SOSCCSR_SOSCEN_MASK                  0x1u\n#define SCG_SOSCCSR_SOSCEN_SHIFT                 0u\n#define SCG_SOSCCSR_SOSCEN_WIDTH                 1u\n#define SCG_SOSCCSR_SOSCEN(x)                    (((uint32_t)(((uint32_t)(x))<<SCG_SOSCCSR_SOSCEN_SHIFT))&SCG_SOSCCSR_SOSCEN_MASK)\n#define SCG_SOSCCSR_SOSCCM_MASK                  0x10000u\n#define SCG_SOSCCSR_SOSCCM_SHIFT                 16u\n#define SCG_SOSCCSR_SOSCCM_WIDTH                 1u\n#define SCG_SOSCCSR_SOSCCM(x)                    (((uint32_t)(((uint32_t)(x))<<SCG_SOSCCSR_SOSCCM_SHIFT))&SCG_SOSCCSR_SOSCCM_MASK)\n#define SCG_SOSCCSR_SOSCCMRE_MASK                0x20000u\n#define SCG_SOSCCSR_SOSCCMRE_SHIFT               17u\n#define SCG_SOSCCSR_SOSCCMRE_WIDTH               1u\n#define SCG_SOSCCSR_SOSCCMRE(x)                  (((uint32_t)(((uint32_t)(x))<<SCG_SOSCCSR_SOSCCMRE_SHIFT))&SCG_SOSCCSR_SOSCCMRE_MASK)\n#define SCG_SOSCCSR_LK_MASK                      0x800000u\n#define SCG_SOSCCSR_LK_SHIFT                     23u\n#define SCG_SOSCCSR_LK_WIDTH                     1u\n#define SCG_SOSCCSR_LK(x)                        (((uint32_t)(((uint32_t)(x))<<SCG_SOSCCSR_LK_SHIFT))&SCG_SOSCCSR_LK_MASK)\n#define SCG_SOSCCSR_SOSCVLD_MASK                 0x1000000u\n#define SCG_SOSCCSR_SOSCVLD_SHIFT                24u\n#define SCG_SOSCCSR_SOSCVLD_WIDTH                1u\n#define SCG_SOSCCSR_SOSCVLD(x)                   (((uint32_t)(((uint32_t)(x))<<SCG_SOSCCSR_SOSCVLD_SHIFT))&SCG_SOSCCSR_SOSCVLD_MASK)\n#define SCG_SOSCCSR_SOSCSEL_MASK                 0x2000000u\n#define SCG_SOSCCSR_SOSCSEL_SHIFT                25u\n#define SCG_SOSCCSR_SOSCSEL_WIDTH                1u\n#define SCG_SOSCCSR_SOSCSEL(x)                   (((uint32_t)(((uint32_t)(x))<<SCG_SOSCCSR_SOSCSEL_SHIFT))&SCG_SOSCCSR_SOSCSEL_MASK)\n#define SCG_SOSCCSR_SOSCERR_MASK                 0x4000000u\n#define SCG_SOSCCSR_SOSCERR_SHIFT                26u\n#define SCG_SOSCCSR_SOSCERR_WIDTH                1u\n#define SCG_SOSCCSR_SOSCERR(x)                   (((uint32_t)(((uint32_t)(x))<<SCG_SOSCCSR_SOSCERR_SHIFT))&SCG_SOSCCSR_SOSCERR_MASK)\n/* SOSCDIV Bit Fields */\n#define SCG_SOSCDIV_SOSCDIV1_MASK                0x7u\n#define SCG_SOSCDIV_SOSCDIV1_SHIFT               0u\n#define SCG_SOSCDIV_SOSCDIV1_WIDTH               3u\n#define SCG_SOSCDIV_SOSCDIV1(x)                  (((uint32_t)(((uint32_t)(x))<<SCG_SOSCDIV_SOSCDIV1_SHIFT))&SCG_SOSCDIV_SOSCDIV1_MASK)\n#define SCG_SOSCDIV_SOSCDIV2_MASK                0x700u\n#define SCG_SOSCDIV_SOSCDIV2_SHIFT               8u\n#define SCG_SOSCDIV_SOSCDIV2_WIDTH               3u\n#define SCG_SOSCDIV_SOSCDIV2(x)                  (((uint32_t)(((uint32_t)(x))<<SCG_SOSCDIV_SOSCDIV2_SHIFT))&SCG_SOSCDIV_SOSCDIV2_MASK)\n/* SOSCCFG Bit Fields */\n#define SCG_SOSCCFG_EREFS_MASK                   0x4u\n#define SCG_SOSCCFG_EREFS_SHIFT                  2u\n#define SCG_SOSCCFG_EREFS_WIDTH                  1u\n#define SCG_SOSCCFG_EREFS(x)                     (((uint32_t)(((uint32_t)(x))<<SCG_SOSCCFG_EREFS_SHIFT))&SCG_SOSCCFG_EREFS_MASK)\n#define SCG_SOSCCFG_HGO_MASK                     0x8u\n#define SCG_SOSCCFG_HGO_SHIFT                    3u\n#define SCG_SOSCCFG_HGO_WIDTH                    1u\n#define SCG_SOSCCFG_HGO(x)                       (((uint32_t)(((uint32_t)(x))<<SCG_SOSCCFG_HGO_SHIFT))&SCG_SOSCCFG_HGO_MASK)\n#define SCG_SOSCCFG_RANGE_MASK                   0x30u\n#define SCG_SOSCCFG_RANGE_SHIFT                  4u\n#define SCG_SOSCCFG_RANGE_WIDTH                  2u\n#define SCG_SOSCCFG_RANGE(x)                     (((uint32_t)(((uint32_t)(x))<<SCG_SOSCCFG_RANGE_SHIFT))&SCG_SOSCCFG_RANGE_MASK)\n/* SIRCCSR Bit Fields */\n#define SCG_SIRCCSR_SIRCEN_MASK                  0x1u\n#define SCG_SIRCCSR_SIRCEN_SHIFT                 0u\n#define SCG_SIRCCSR_SIRCEN_WIDTH                 1u\n#define SCG_SIRCCSR_SIRCEN(x)                    (((uint32_t)(((uint32_t)(x))<<SCG_SIRCCSR_SIRCEN_SHIFT))&SCG_SIRCCSR_SIRCEN_MASK)\n#define SCG_SIRCCSR_SIRCSTEN_MASK                0x2u\n#define SCG_SIRCCSR_SIRCSTEN_SHIFT               1u\n#define SCG_SIRCCSR_SIRCSTEN_WIDTH               1u\n#define SCG_SIRCCSR_SIRCSTEN(x)                  (((uint32_t)(((uint32_t)(x))<<SCG_SIRCCSR_SIRCSTEN_SHIFT))&SCG_SIRCCSR_SIRCSTEN_MASK)\n#define SCG_SIRCCSR_SIRCLPEN_MASK                0x4u\n#define SCG_SIRCCSR_SIRCLPEN_SHIFT               2u\n#define SCG_SIRCCSR_SIRCLPEN_WIDTH               1u\n#define SCG_SIRCCSR_SIRCLPEN(x)                  (((uint32_t)(((uint32_t)(x))<<SCG_SIRCCSR_SIRCLPEN_SHIFT))&SCG_SIRCCSR_SIRCLPEN_MASK)\n#define SCG_SIRCCSR_LK_MASK                      0x800000u\n#define SCG_SIRCCSR_LK_SHIFT                     23u\n#define SCG_SIRCCSR_LK_WIDTH                     1u\n#define SCG_SIRCCSR_LK(x)                        (((uint32_t)(((uint32_t)(x))<<SCG_SIRCCSR_LK_SHIFT))&SCG_SIRCCSR_LK_MASK)\n#define SCG_SIRCCSR_SIRCVLD_MASK                 0x1000000u\n#define SCG_SIRCCSR_SIRCVLD_SHIFT                24u\n#define SCG_SIRCCSR_SIRCVLD_WIDTH                1u\n#define SCG_SIRCCSR_SIRCVLD(x)                   (((uint32_t)(((uint32_t)(x))<<SCG_SIRCCSR_SIRCVLD_SHIFT))&SCG_SIRCCSR_SIRCVLD_MASK)\n#define SCG_SIRCCSR_SIRCSEL_MASK                 0x2000000u\n#define SCG_SIRCCSR_SIRCSEL_SHIFT                25u\n#define SCG_SIRCCSR_SIRCSEL_WIDTH                1u\n#define SCG_SIRCCSR_SIRCSEL(x)                   (((uint32_t)(((uint32_t)(x))<<SCG_SIRCCSR_SIRCSEL_SHIFT))&SCG_SIRCCSR_SIRCSEL_MASK)\n/* SIRCDIV Bit Fields */\n#define SCG_SIRCDIV_SIRCDIV1_MASK                0x7u\n#define SCG_SIRCDIV_SIRCDIV1_SHIFT               0u\n#define SCG_SIRCDIV_SIRCDIV1_WIDTH               3u\n#define SCG_SIRCDIV_SIRCDIV1(x)                  (((uint32_t)(((uint32_t)(x))<<SCG_SIRCDIV_SIRCDIV1_SHIFT))&SCG_SIRCDIV_SIRCDIV1_MASK)\n#define SCG_SIRCDIV_SIRCDIV2_MASK                0x700u\n#define SCG_SIRCDIV_SIRCDIV2_SHIFT               8u\n#define SCG_SIRCDIV_SIRCDIV2_WIDTH               3u\n#define SCG_SIRCDIV_SIRCDIV2(x)                  (((uint32_t)(((uint32_t)(x))<<SCG_SIRCDIV_SIRCDIV2_SHIFT))&SCG_SIRCDIV_SIRCDIV2_MASK)\n/* SIRCCFG Bit Fields */\n#define SCG_SIRCCFG_RANGE_MASK                   0x1u\n#define SCG_SIRCCFG_RANGE_SHIFT                  0u\n#define SCG_SIRCCFG_RANGE_WIDTH                  1u\n#define SCG_SIRCCFG_RANGE(x)                     (((uint32_t)(((uint32_t)(x))<<SCG_SIRCCFG_RANGE_SHIFT))&SCG_SIRCCFG_RANGE_MASK)\n/* FIRCCSR Bit Fields */\n#define SCG_FIRCCSR_FIRCEN_MASK                  0x1u\n#define SCG_FIRCCSR_FIRCEN_SHIFT                 0u\n#define SCG_FIRCCSR_FIRCEN_WIDTH                 1u\n#define SCG_FIRCCSR_FIRCEN(x)                    (((uint32_t)(((uint32_t)(x))<<SCG_FIRCCSR_FIRCEN_SHIFT))&SCG_FIRCCSR_FIRCEN_MASK)\n#define SCG_FIRCCSR_FIRCREGOFF_MASK              0x8u\n#define SCG_FIRCCSR_FIRCREGOFF_SHIFT             3u\n#define SCG_FIRCCSR_FIRCREGOFF_WIDTH             1u\n#define SCG_FIRCCSR_FIRCREGOFF(x)                (((uint32_t)(((uint32_t)(x))<<SCG_FIRCCSR_FIRCREGOFF_SHIFT))&SCG_FIRCCSR_FIRCREGOFF_MASK)\n#define SCG_FIRCCSR_LK_MASK                      0x800000u\n#define SCG_FIRCCSR_LK_SHIFT                     23u\n#define SCG_FIRCCSR_LK_WIDTH                     1u\n#define SCG_FIRCCSR_LK(x)                        (((uint32_t)(((uint32_t)(x))<<SCG_FIRCCSR_LK_SHIFT))&SCG_FIRCCSR_LK_MASK)\n#define SCG_FIRCCSR_FIRCVLD_MASK                 0x1000000u\n#define SCG_FIRCCSR_FIRCVLD_SHIFT                24u\n#define SCG_FIRCCSR_FIRCVLD_WIDTH                1u\n#define SCG_FIRCCSR_FIRCVLD(x)                   (((uint32_t)(((uint32_t)(x))<<SCG_FIRCCSR_FIRCVLD_SHIFT))&SCG_FIRCCSR_FIRCVLD_MASK)\n#define SCG_FIRCCSR_FIRCSEL_MASK                 0x2000000u\n#define SCG_FIRCCSR_FIRCSEL_SHIFT                25u\n#define SCG_FIRCCSR_FIRCSEL_WIDTH                1u\n#define SCG_FIRCCSR_FIRCSEL(x)                   (((uint32_t)(((uint32_t)(x))<<SCG_FIRCCSR_FIRCSEL_SHIFT))&SCG_FIRCCSR_FIRCSEL_MASK)\n#define SCG_FIRCCSR_FIRCERR_MASK                 0x4000000u\n#define SCG_FIRCCSR_FIRCERR_SHIFT                26u\n#define SCG_FIRCCSR_FIRCERR_WIDTH                1u\n#define SCG_FIRCCSR_FIRCERR(x)                   (((uint32_t)(((uint32_t)(x))<<SCG_FIRCCSR_FIRCERR_SHIFT))&SCG_FIRCCSR_FIRCERR_MASK)\n/* FIRCDIV Bit Fields */\n#define SCG_FIRCDIV_FIRCDIV1_MASK                0x7u\n#define SCG_FIRCDIV_FIRCDIV1_SHIFT               0u\n#define SCG_FIRCDIV_FIRCDIV1_WIDTH               3u\n#define SCG_FIRCDIV_FIRCDIV1(x)                  (((uint32_t)(((uint32_t)(x))<<SCG_FIRCDIV_FIRCDIV1_SHIFT))&SCG_FIRCDIV_FIRCDIV1_MASK)\n#define SCG_FIRCDIV_FIRCDIV2_MASK                0x700u\n#define SCG_FIRCDIV_FIRCDIV2_SHIFT               8u\n#define SCG_FIRCDIV_FIRCDIV2_WIDTH               3u\n#define SCG_FIRCDIV_FIRCDIV2(x)                  (((uint32_t)(((uint32_t)(x))<<SCG_FIRCDIV_FIRCDIV2_SHIFT))&SCG_FIRCDIV_FIRCDIV2_MASK)\n/* FIRCCFG Bit Fields */\n#define SCG_FIRCCFG_RANGE_MASK                   0x3u\n#define SCG_FIRCCFG_RANGE_SHIFT                  0u\n#define SCG_FIRCCFG_RANGE_WIDTH                  2u\n#define SCG_FIRCCFG_RANGE(x)                     (((uint32_t)(((uint32_t)(x))<<SCG_FIRCCFG_RANGE_SHIFT))&SCG_FIRCCFG_RANGE_MASK)\n/* SPLLCSR Bit Fields */\n#define SCG_SPLLCSR_SPLLEN_MASK                  0x1u\n#define SCG_SPLLCSR_SPLLEN_SHIFT                 0u\n#define SCG_SPLLCSR_SPLLEN_WIDTH                 1u\n#define SCG_SPLLCSR_SPLLEN(x)                    (((uint32_t)(((uint32_t)(x))<<SCG_SPLLCSR_SPLLEN_SHIFT))&SCG_SPLLCSR_SPLLEN_MASK)\n#define SCG_SPLLCSR_SPLLCM_MASK                  0x10000u\n#define SCG_SPLLCSR_SPLLCM_SHIFT                 16u\n#define SCG_SPLLCSR_SPLLCM_WIDTH                 1u\n#define SCG_SPLLCSR_SPLLCM(x)                    (((uint32_t)(((uint32_t)(x))<<SCG_SPLLCSR_SPLLCM_SHIFT))&SCG_SPLLCSR_SPLLCM_MASK)\n#define SCG_SPLLCSR_SPLLCMRE_MASK                0x20000u\n#define SCG_SPLLCSR_SPLLCMRE_SHIFT               17u\n#define SCG_SPLLCSR_SPLLCMRE_WIDTH               1u\n#define SCG_SPLLCSR_SPLLCMRE(x)                  (((uint32_t)(((uint32_t)(x))<<SCG_SPLLCSR_SPLLCMRE_SHIFT))&SCG_SPLLCSR_SPLLCMRE_MASK)\n#define SCG_SPLLCSR_LK_MASK                      0x800000u\n#define SCG_SPLLCSR_LK_SHIFT                     23u\n#define SCG_SPLLCSR_LK_WIDTH                     1u\n#define SCG_SPLLCSR_LK(x)                        (((uint32_t)(((uint32_t)(x))<<SCG_SPLLCSR_LK_SHIFT))&SCG_SPLLCSR_LK_MASK)\n#define SCG_SPLLCSR_SPLLVLD_MASK                 0x1000000u\n#define SCG_SPLLCSR_SPLLVLD_SHIFT                24u\n#define SCG_SPLLCSR_SPLLVLD_WIDTH                1u\n#define SCG_SPLLCSR_SPLLVLD(x)                   (((uint32_t)(((uint32_t)(x))<<SCG_SPLLCSR_SPLLVLD_SHIFT))&SCG_SPLLCSR_SPLLVLD_MASK)\n#define SCG_SPLLCSR_SPLLSEL_MASK                 0x2000000u\n#define SCG_SPLLCSR_SPLLSEL_SHIFT                25u\n#define SCG_SPLLCSR_SPLLSEL_WIDTH                1u\n#define SCG_SPLLCSR_SPLLSEL(x)                   (((uint32_t)(((uint32_t)(x))<<SCG_SPLLCSR_SPLLSEL_SHIFT))&SCG_SPLLCSR_SPLLSEL_MASK)\n#define SCG_SPLLCSR_SPLLERR_MASK                 0x4000000u\n#define SCG_SPLLCSR_SPLLERR_SHIFT                26u\n#define SCG_SPLLCSR_SPLLERR_WIDTH                1u\n#define SCG_SPLLCSR_SPLLERR(x)                   (((uint32_t)(((uint32_t)(x))<<SCG_SPLLCSR_SPLLERR_SHIFT))&SCG_SPLLCSR_SPLLERR_MASK)\n/* SPLLDIV Bit Fields */\n#define SCG_SPLLDIV_SPLLDIV1_MASK                0x7u\n#define SCG_SPLLDIV_SPLLDIV1_SHIFT               0u\n#define SCG_SPLLDIV_SPLLDIV1_WIDTH               3u\n#define SCG_SPLLDIV_SPLLDIV1(x)                  (((uint32_t)(((uint32_t)(x))<<SCG_SPLLDIV_SPLLDIV1_SHIFT))&SCG_SPLLDIV_SPLLDIV1_MASK)\n#define SCG_SPLLDIV_SPLLDIV2_MASK                0x700u\n#define SCG_SPLLDIV_SPLLDIV2_SHIFT               8u\n#define SCG_SPLLDIV_SPLLDIV2_WIDTH               3u\n#define SCG_SPLLDIV_SPLLDIV2(x)                  (((uint32_t)(((uint32_t)(x))<<SCG_SPLLDIV_SPLLDIV2_SHIFT))&SCG_SPLLDIV_SPLLDIV2_MASK)\n/* SPLLCFG Bit Fields */\n#define SCG_SPLLCFG_PREDIV_MASK                  0x700u\n#define SCG_SPLLCFG_PREDIV_SHIFT                 8u\n#define SCG_SPLLCFG_PREDIV_WIDTH                 3u\n#define SCG_SPLLCFG_PREDIV(x)                    (((uint32_t)(((uint32_t)(x))<<SCG_SPLLCFG_PREDIV_SHIFT))&SCG_SPLLCFG_PREDIV_MASK)\n#define SCG_SPLLCFG_MULT_MASK                    0x1F0000u\n#define SCG_SPLLCFG_MULT_SHIFT                   16u\n#define SCG_SPLLCFG_MULT_WIDTH                   5u\n#define SCG_SPLLCFG_MULT(x)                      (((uint32_t)(((uint32_t)(x))<<SCG_SPLLCFG_MULT_SHIFT))&SCG_SPLLCFG_MULT_MASK)\n\n/*!\n * @}\n */ /* end of group SCG_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group SCG_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- SIM Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup SIM_Peripheral_Access_Layer SIM Peripheral Access Layer\n * @{\n */\n\n\n/** SIM - Size of Registers Arrays */\n\n/** SIM - Register Layout Typedef */\ntypedef struct {\n       uint8_t RESERVED_0[4];\n  __IO uint32_t CHIPCTL;                           /**< Chip Control register, offset: 0x4 */\n       uint8_t RESERVED_1[4];\n  __IO uint32_t FTMOPT0;                           /**< FTM Option Register 0, offset: 0xC */\n  __IO uint32_t LPOCLKS;                           /**< LPO Clock Select Register, offset: 0x10 */\n       uint8_t RESERVED_2[4];\n  __IO uint32_t ADCOPT;                            /**< ADC Options Register, offset: 0x18 */\n  __IO uint32_t FTMOPT1;                           /**< FTM Option Register 1, offset: 0x1C */\n  __IO uint32_t MISCTRL0;                          /**< Miscellaneous control register 0, offset: 0x20 */\n  __I  uint32_t SDID;                              /**< System Device Identification Register, offset: 0x24 */\n       uint8_t RESERVED_3[24];\n  __IO uint32_t PLATCGC;                           /**< Platform Clock Gating Control Register, offset: 0x40 */\n       uint8_t RESERVED_4[8];\n  __IO uint32_t FCFG1;                             /**< Flash Configuration Register 1, offset: 0x4C */\n       uint8_t RESERVED_5[4];\n  __I  uint32_t UIDH;                              /**< Unique Identification Register High, offset: 0x54 */\n  __I  uint32_t UIDMH;                             /**< Unique Identification Register Mid-High, offset: 0x58 */\n  __I  uint32_t UIDML;                             /**< Unique Identification Register Mid Low, offset: 0x5C */\n  __I  uint32_t UIDL;                              /**< Unique Identification Register Low, offset: 0x60 */\n       uint8_t RESERVED_6[4];\n  __IO uint32_t CLKDIV4;                           /**< System Clock Divider Register 4, offset: 0x68 */\n  __IO uint32_t MISCTRL1;                          /**< Miscellaneous Control register 1, offset: 0x6C */\n} SIM_Type, *SIM_MemMapPtr;\n\n /** Number of instances of the SIM module. */\n#define SIM_INSTANCE_COUNT                       (1u)\n\n\n/* SIM - Peripheral instance base addresses */\n/** Peripheral SIM base address */\n#define SIM_BASE                                 (0x40048000u)\n/** Peripheral SIM base pointer */\n#define SIM                                      ((SIM_Type *)SIM_BASE)\n/** Array initializer of SIM peripheral base addresses */\n#define SIM_BASE_ADDRS                           { SIM_BASE }\n/** Array initializer of SIM peripheral base pointers */\n#define SIM_BASE_PTRS                            { SIM }\n\n/* ----------------------------------------------------------------------------\n   -- SIM Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup SIM_Register_Masks SIM Register Masks\n * @{\n */\n\n/* CHIPCTL Bit Fields */\n#define SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK       0xFu\n#define SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT      0u\n#define SIM_CHIPCTL_ADC_INTERLEAVE_EN_WIDTH      4u\n#define SIM_CHIPCTL_ADC_INTERLEAVE_EN(x)         (((uint32_t)(((uint32_t)(x))<<SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT))&SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK)\n#define SIM_CHIPCTL_CLKOUTSEL_MASK               0xF0u\n#define SIM_CHIPCTL_CLKOUTSEL_SHIFT              4u\n#define SIM_CHIPCTL_CLKOUTSEL_WIDTH              4u\n#define SIM_CHIPCTL_CLKOUTSEL(x)                 (((uint32_t)(((uint32_t)(x))<<SIM_CHIPCTL_CLKOUTSEL_SHIFT))&SIM_CHIPCTL_CLKOUTSEL_MASK)\n#define SIM_CHIPCTL_CLKOUTDIV_MASK               0x700u\n#define SIM_CHIPCTL_CLKOUTDIV_SHIFT              8u\n#define SIM_CHIPCTL_CLKOUTDIV_WIDTH              3u\n#define SIM_CHIPCTL_CLKOUTDIV(x)                 (((uint32_t)(((uint32_t)(x))<<SIM_CHIPCTL_CLKOUTDIV_SHIFT))&SIM_CHIPCTL_CLKOUTDIV_MASK)\n#define SIM_CHIPCTL_CLKOUTEN_MASK                0x800u\n#define SIM_CHIPCTL_CLKOUTEN_SHIFT               11u\n#define SIM_CHIPCTL_CLKOUTEN_WIDTH               1u\n#define SIM_CHIPCTL_CLKOUTEN(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_CHIPCTL_CLKOUTEN_SHIFT))&SIM_CHIPCTL_CLKOUTEN_MASK)\n#define SIM_CHIPCTL_TRACECLK_SEL_MASK            0x1000u\n#define SIM_CHIPCTL_TRACECLK_SEL_SHIFT           12u\n#define SIM_CHIPCTL_TRACECLK_SEL_WIDTH           1u\n#define SIM_CHIPCTL_TRACECLK_SEL(x)              (((uint32_t)(((uint32_t)(x))<<SIM_CHIPCTL_TRACECLK_SEL_SHIFT))&SIM_CHIPCTL_TRACECLK_SEL_MASK)\n#define SIM_CHIPCTL_PDB_BB_SEL_MASK              0x2000u\n#define SIM_CHIPCTL_PDB_BB_SEL_SHIFT             13u\n#define SIM_CHIPCTL_PDB_BB_SEL_WIDTH             1u\n#define SIM_CHIPCTL_PDB_BB_SEL(x)                (((uint32_t)(((uint32_t)(x))<<SIM_CHIPCTL_PDB_BB_SEL_SHIFT))&SIM_CHIPCTL_PDB_BB_SEL_MASK)\n#define SIM_CHIPCTL_ADC_SUPPLY_MASK              0x70000u\n#define SIM_CHIPCTL_ADC_SUPPLY_SHIFT             16u\n#define SIM_CHIPCTL_ADC_SUPPLY_WIDTH             3u\n#define SIM_CHIPCTL_ADC_SUPPLY(x)                (((uint32_t)(((uint32_t)(x))<<SIM_CHIPCTL_ADC_SUPPLY_SHIFT))&SIM_CHIPCTL_ADC_SUPPLY_MASK)\n#define SIM_CHIPCTL_ADC_SUPPLYEN_MASK            0x80000u\n#define SIM_CHIPCTL_ADC_SUPPLYEN_SHIFT           19u\n#define SIM_CHIPCTL_ADC_SUPPLYEN_WIDTH           1u\n#define SIM_CHIPCTL_ADC_SUPPLYEN(x)              (((uint32_t)(((uint32_t)(x))<<SIM_CHIPCTL_ADC_SUPPLYEN_SHIFT))&SIM_CHIPCTL_ADC_SUPPLYEN_MASK)\n#define SIM_CHIPCTL_SRAMU_RETEN_MASK             0x100000u\n#define SIM_CHIPCTL_SRAMU_RETEN_SHIFT            20u\n#define SIM_CHIPCTL_SRAMU_RETEN_WIDTH            1u\n#define SIM_CHIPCTL_SRAMU_RETEN(x)               (((uint32_t)(((uint32_t)(x))<<SIM_CHIPCTL_SRAMU_RETEN_SHIFT))&SIM_CHIPCTL_SRAMU_RETEN_MASK)\n#define SIM_CHIPCTL_SRAML_RETEN_MASK             0x200000u\n#define SIM_CHIPCTL_SRAML_RETEN_SHIFT            21u\n#define SIM_CHIPCTL_SRAML_RETEN_WIDTH            1u\n#define SIM_CHIPCTL_SRAML_RETEN(x)               (((uint32_t)(((uint32_t)(x))<<SIM_CHIPCTL_SRAML_RETEN_SHIFT))&SIM_CHIPCTL_SRAML_RETEN_MASK)\n/* FTMOPT0 Bit Fields */\n#define SIM_FTMOPT0_FTM0FLTxSEL_MASK             0x7u\n#define SIM_FTMOPT0_FTM0FLTxSEL_SHIFT            0u\n#define SIM_FTMOPT0_FTM0FLTxSEL_WIDTH            3u\n#define SIM_FTMOPT0_FTM0FLTxSEL(x)               (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT0_FTM0FLTxSEL_SHIFT))&SIM_FTMOPT0_FTM0FLTxSEL_MASK)\n#define SIM_FTMOPT0_FTM1FLTxSEL_MASK             0x70u\n#define SIM_FTMOPT0_FTM1FLTxSEL_SHIFT            4u\n#define SIM_FTMOPT0_FTM1FLTxSEL_WIDTH            3u\n#define SIM_FTMOPT0_FTM1FLTxSEL(x)               (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT0_FTM1FLTxSEL_SHIFT))&SIM_FTMOPT0_FTM1FLTxSEL_MASK)\n#define SIM_FTMOPT0_FTM2FLTxSEL_MASK             0x700u\n#define SIM_FTMOPT0_FTM2FLTxSEL_SHIFT            8u\n#define SIM_FTMOPT0_FTM2FLTxSEL_WIDTH            3u\n#define SIM_FTMOPT0_FTM2FLTxSEL(x)               (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT0_FTM2FLTxSEL_SHIFT))&SIM_FTMOPT0_FTM2FLTxSEL_MASK)\n#define SIM_FTMOPT0_FTM3FLTxSEL_MASK             0x7000u\n#define SIM_FTMOPT0_FTM3FLTxSEL_SHIFT            12u\n#define SIM_FTMOPT0_FTM3FLTxSEL_WIDTH            3u\n#define SIM_FTMOPT0_FTM3FLTxSEL(x)               (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT0_FTM3FLTxSEL_SHIFT))&SIM_FTMOPT0_FTM3FLTxSEL_MASK)\n#define SIM_FTMOPT0_FTM0CLKSEL_MASK              0x3000000u\n#define SIM_FTMOPT0_FTM0CLKSEL_SHIFT             24u\n#define SIM_FTMOPT0_FTM0CLKSEL_WIDTH             2u\n#define SIM_FTMOPT0_FTM0CLKSEL(x)                (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT0_FTM0CLKSEL_SHIFT))&SIM_FTMOPT0_FTM0CLKSEL_MASK)\n#define SIM_FTMOPT0_FTM1CLKSEL_MASK              0xC000000u\n#define SIM_FTMOPT0_FTM1CLKSEL_SHIFT             26u\n#define SIM_FTMOPT0_FTM1CLKSEL_WIDTH             2u\n#define SIM_FTMOPT0_FTM1CLKSEL(x)                (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT0_FTM1CLKSEL_SHIFT))&SIM_FTMOPT0_FTM1CLKSEL_MASK)\n#define SIM_FTMOPT0_FTM2CLKSEL_MASK              0x30000000u\n#define SIM_FTMOPT0_FTM2CLKSEL_SHIFT             28u\n#define SIM_FTMOPT0_FTM2CLKSEL_WIDTH             2u\n#define SIM_FTMOPT0_FTM2CLKSEL(x)                (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT0_FTM2CLKSEL_SHIFT))&SIM_FTMOPT0_FTM2CLKSEL_MASK)\n#define SIM_FTMOPT0_FTM3CLKSEL_MASK              0xC0000000u\n#define SIM_FTMOPT0_FTM3CLKSEL_SHIFT             30u\n#define SIM_FTMOPT0_FTM3CLKSEL_WIDTH             2u\n#define SIM_FTMOPT0_FTM3CLKSEL(x)                (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT0_FTM3CLKSEL_SHIFT))&SIM_FTMOPT0_FTM3CLKSEL_MASK)\n/* LPOCLKS Bit Fields */\n#define SIM_LPOCLKS_LPO1KCLKEN_MASK              0x1u\n#define SIM_LPOCLKS_LPO1KCLKEN_SHIFT             0u\n#define SIM_LPOCLKS_LPO1KCLKEN_WIDTH             1u\n#define SIM_LPOCLKS_LPO1KCLKEN(x)                (((uint32_t)(((uint32_t)(x))<<SIM_LPOCLKS_LPO1KCLKEN_SHIFT))&SIM_LPOCLKS_LPO1KCLKEN_MASK)\n#define SIM_LPOCLKS_LPO32KCLKEN_MASK             0x2u\n#define SIM_LPOCLKS_LPO32KCLKEN_SHIFT            1u\n#define SIM_LPOCLKS_LPO32KCLKEN_WIDTH            1u\n#define SIM_LPOCLKS_LPO32KCLKEN(x)               (((uint32_t)(((uint32_t)(x))<<SIM_LPOCLKS_LPO32KCLKEN_SHIFT))&SIM_LPOCLKS_LPO32KCLKEN_MASK)\n#define SIM_LPOCLKS_LPOCLKSEL_MASK               0xCu\n#define SIM_LPOCLKS_LPOCLKSEL_SHIFT              2u\n#define SIM_LPOCLKS_LPOCLKSEL_WIDTH              2u\n#define SIM_LPOCLKS_LPOCLKSEL(x)                 (((uint32_t)(((uint32_t)(x))<<SIM_LPOCLKS_LPOCLKSEL_SHIFT))&SIM_LPOCLKS_LPOCLKSEL_MASK)\n#define SIM_LPOCLKS_RTCCLKSEL_MASK               0x30u\n#define SIM_LPOCLKS_RTCCLKSEL_SHIFT              4u\n#define SIM_LPOCLKS_RTCCLKSEL_WIDTH              2u\n#define SIM_LPOCLKS_RTCCLKSEL(x)                 (((uint32_t)(((uint32_t)(x))<<SIM_LPOCLKS_RTCCLKSEL_SHIFT))&SIM_LPOCLKS_RTCCLKSEL_MASK)\n/* ADCOPT Bit Fields */\n#define SIM_ADCOPT_ADC0TRGSEL_MASK               0x1u\n#define SIM_ADCOPT_ADC0TRGSEL_SHIFT              0u\n#define SIM_ADCOPT_ADC0TRGSEL_WIDTH              1u\n#define SIM_ADCOPT_ADC0TRGSEL(x)                 (((uint32_t)(((uint32_t)(x))<<SIM_ADCOPT_ADC0TRGSEL_SHIFT))&SIM_ADCOPT_ADC0TRGSEL_MASK)\n#define SIM_ADCOPT_ADC0SWPRETRG_MASK             0xEu\n#define SIM_ADCOPT_ADC0SWPRETRG_SHIFT            1u\n#define SIM_ADCOPT_ADC0SWPRETRG_WIDTH            3u\n#define SIM_ADCOPT_ADC0SWPRETRG(x)               (((uint32_t)(((uint32_t)(x))<<SIM_ADCOPT_ADC0SWPRETRG_SHIFT))&SIM_ADCOPT_ADC0SWPRETRG_MASK)\n#define SIM_ADCOPT_ADC0PRETRGSEL_MASK            0x30u\n#define SIM_ADCOPT_ADC0PRETRGSEL_SHIFT           4u\n#define SIM_ADCOPT_ADC0PRETRGSEL_WIDTH           2u\n#define SIM_ADCOPT_ADC0PRETRGSEL(x)              (((uint32_t)(((uint32_t)(x))<<SIM_ADCOPT_ADC0PRETRGSEL_SHIFT))&SIM_ADCOPT_ADC0PRETRGSEL_MASK)\n#define SIM_ADCOPT_ADC1TRGSEL_MASK               0x100u\n#define SIM_ADCOPT_ADC1TRGSEL_SHIFT              8u\n#define SIM_ADCOPT_ADC1TRGSEL_WIDTH              1u\n#define SIM_ADCOPT_ADC1TRGSEL(x)                 (((uint32_t)(((uint32_t)(x))<<SIM_ADCOPT_ADC1TRGSEL_SHIFT))&SIM_ADCOPT_ADC1TRGSEL_MASK)\n#define SIM_ADCOPT_ADC1SWPRETRG_MASK             0xE00u\n#define SIM_ADCOPT_ADC1SWPRETRG_SHIFT            9u\n#define SIM_ADCOPT_ADC1SWPRETRG_WIDTH            3u\n#define SIM_ADCOPT_ADC1SWPRETRG(x)               (((uint32_t)(((uint32_t)(x))<<SIM_ADCOPT_ADC1SWPRETRG_SHIFT))&SIM_ADCOPT_ADC1SWPRETRG_MASK)\n#define SIM_ADCOPT_ADC1PRETRGSEL_MASK            0x3000u\n#define SIM_ADCOPT_ADC1PRETRGSEL_SHIFT           12u\n#define SIM_ADCOPT_ADC1PRETRGSEL_WIDTH           2u\n#define SIM_ADCOPT_ADC1PRETRGSEL(x)              (((uint32_t)(((uint32_t)(x))<<SIM_ADCOPT_ADC1PRETRGSEL_SHIFT))&SIM_ADCOPT_ADC1PRETRGSEL_MASK)\n/* FTMOPT1 Bit Fields */\n#define SIM_FTMOPT1_FTM0SYNCBIT_MASK             0x1u\n#define SIM_FTMOPT1_FTM0SYNCBIT_SHIFT            0u\n#define SIM_FTMOPT1_FTM0SYNCBIT_WIDTH            1u\n#define SIM_FTMOPT1_FTM0SYNCBIT(x)               (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT1_FTM0SYNCBIT_SHIFT))&SIM_FTMOPT1_FTM0SYNCBIT_MASK)\n#define SIM_FTMOPT1_FTM1SYNCBIT_MASK             0x2u\n#define SIM_FTMOPT1_FTM1SYNCBIT_SHIFT            1u\n#define SIM_FTMOPT1_FTM1SYNCBIT_WIDTH            1u\n#define SIM_FTMOPT1_FTM1SYNCBIT(x)               (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT1_FTM1SYNCBIT_SHIFT))&SIM_FTMOPT1_FTM1SYNCBIT_MASK)\n#define SIM_FTMOPT1_FTM2SYNCBIT_MASK             0x4u\n#define SIM_FTMOPT1_FTM2SYNCBIT_SHIFT            2u\n#define SIM_FTMOPT1_FTM2SYNCBIT_WIDTH            1u\n#define SIM_FTMOPT1_FTM2SYNCBIT(x)               (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT1_FTM2SYNCBIT_SHIFT))&SIM_FTMOPT1_FTM2SYNCBIT_MASK)\n#define SIM_FTMOPT1_FTM3SYNCBIT_MASK             0x8u\n#define SIM_FTMOPT1_FTM3SYNCBIT_SHIFT            3u\n#define SIM_FTMOPT1_FTM3SYNCBIT_WIDTH            1u\n#define SIM_FTMOPT1_FTM3SYNCBIT(x)               (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT1_FTM3SYNCBIT_SHIFT))&SIM_FTMOPT1_FTM3SYNCBIT_MASK)\n#define SIM_FTMOPT1_FTM1CH0SEL_MASK              0x30u\n#define SIM_FTMOPT1_FTM1CH0SEL_SHIFT             4u\n#define SIM_FTMOPT1_FTM1CH0SEL_WIDTH             2u\n#define SIM_FTMOPT1_FTM1CH0SEL(x)                (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT1_FTM1CH0SEL_SHIFT))&SIM_FTMOPT1_FTM1CH0SEL_MASK)\n#define SIM_FTMOPT1_FTM2CH0SEL_MASK              0xC0u\n#define SIM_FTMOPT1_FTM2CH0SEL_SHIFT             6u\n#define SIM_FTMOPT1_FTM2CH0SEL_WIDTH             2u\n#define SIM_FTMOPT1_FTM2CH0SEL(x)                (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT1_FTM2CH0SEL_SHIFT))&SIM_FTMOPT1_FTM2CH0SEL_MASK)\n#define SIM_FTMOPT1_FTM2CH1SEL_MASK              0x100u\n#define SIM_FTMOPT1_FTM2CH1SEL_SHIFT             8u\n#define SIM_FTMOPT1_FTM2CH1SEL_WIDTH             1u\n#define SIM_FTMOPT1_FTM2CH1SEL(x)                (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT1_FTM2CH1SEL_SHIFT))&SIM_FTMOPT1_FTM2CH1SEL_MASK)\n#define SIM_FTMOPT1_FTMGLDOK_MASK                0x8000u\n#define SIM_FTMOPT1_FTMGLDOK_SHIFT               15u\n#define SIM_FTMOPT1_FTMGLDOK_WIDTH               1u\n#define SIM_FTMOPT1_FTMGLDOK(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT1_FTMGLDOK_SHIFT))&SIM_FTMOPT1_FTMGLDOK_MASK)\n#define SIM_FTMOPT1_FTM0_OUTSEL_MASK             0xFF0000u\n#define SIM_FTMOPT1_FTM0_OUTSEL_SHIFT            16u\n#define SIM_FTMOPT1_FTM0_OUTSEL_WIDTH            8u\n#define SIM_FTMOPT1_FTM0_OUTSEL(x)               (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT1_FTM0_OUTSEL_SHIFT))&SIM_FTMOPT1_FTM0_OUTSEL_MASK)\n#define SIM_FTMOPT1_FTM3_OUTSEL_MASK             0xFF000000u\n#define SIM_FTMOPT1_FTM3_OUTSEL_SHIFT            24u\n#define SIM_FTMOPT1_FTM3_OUTSEL_WIDTH            8u\n#define SIM_FTMOPT1_FTM3_OUTSEL(x)               (((uint32_t)(((uint32_t)(x))<<SIM_FTMOPT1_FTM3_OUTSEL_SHIFT))&SIM_FTMOPT1_FTM3_OUTSEL_MASK)\n/* MISCTRL0 Bit Fields */\n#define SIM_MISCTRL0_STOP1_MONITOR_MASK          0x200u\n#define SIM_MISCTRL0_STOP1_MONITOR_SHIFT         9u\n#define SIM_MISCTRL0_STOP1_MONITOR_WIDTH         1u\n#define SIM_MISCTRL0_STOP1_MONITOR(x)            (((uint32_t)(((uint32_t)(x))<<SIM_MISCTRL0_STOP1_MONITOR_SHIFT))&SIM_MISCTRL0_STOP1_MONITOR_MASK)\n#define SIM_MISCTRL0_STOP2_MONITOR_MASK          0x400u\n#define SIM_MISCTRL0_STOP2_MONITOR_SHIFT         10u\n#define SIM_MISCTRL0_STOP2_MONITOR_WIDTH         1u\n#define SIM_MISCTRL0_STOP2_MONITOR(x)            (((uint32_t)(((uint32_t)(x))<<SIM_MISCTRL0_STOP2_MONITOR_SHIFT))&SIM_MISCTRL0_STOP2_MONITOR_MASK)\n#define SIM_MISCTRL0_FTM0_OBE_CTRL_MASK          0x10000u\n#define SIM_MISCTRL0_FTM0_OBE_CTRL_SHIFT         16u\n#define SIM_MISCTRL0_FTM0_OBE_CTRL_WIDTH         1u\n#define SIM_MISCTRL0_FTM0_OBE_CTRL(x)            (((uint32_t)(((uint32_t)(x))<<SIM_MISCTRL0_FTM0_OBE_CTRL_SHIFT))&SIM_MISCTRL0_FTM0_OBE_CTRL_MASK)\n#define SIM_MISCTRL0_FTM1_OBE_CTRL_MASK          0x20000u\n#define SIM_MISCTRL0_FTM1_OBE_CTRL_SHIFT         17u\n#define SIM_MISCTRL0_FTM1_OBE_CTRL_WIDTH         1u\n#define SIM_MISCTRL0_FTM1_OBE_CTRL(x)            (((uint32_t)(((uint32_t)(x))<<SIM_MISCTRL0_FTM1_OBE_CTRL_SHIFT))&SIM_MISCTRL0_FTM1_OBE_CTRL_MASK)\n#define SIM_MISCTRL0_FTM2_OBE_CTRL_MASK          0x40000u\n#define SIM_MISCTRL0_FTM2_OBE_CTRL_SHIFT         18u\n#define SIM_MISCTRL0_FTM2_OBE_CTRL_WIDTH         1u\n#define SIM_MISCTRL0_FTM2_OBE_CTRL(x)            (((uint32_t)(((uint32_t)(x))<<SIM_MISCTRL0_FTM2_OBE_CTRL_SHIFT))&SIM_MISCTRL0_FTM2_OBE_CTRL_MASK)\n#define SIM_MISCTRL0_FTM3_OBE_CTRL_MASK          0x80000u\n#define SIM_MISCTRL0_FTM3_OBE_CTRL_SHIFT         19u\n#define SIM_MISCTRL0_FTM3_OBE_CTRL_WIDTH         1u\n#define SIM_MISCTRL0_FTM3_OBE_CTRL(x)            (((uint32_t)(((uint32_t)(x))<<SIM_MISCTRL0_FTM3_OBE_CTRL_SHIFT))&SIM_MISCTRL0_FTM3_OBE_CTRL_MASK)\n/* SDID Bit Fields */\n#define SIM_SDID_FEATURES_MASK                   0xFFu\n#define SIM_SDID_FEATURES_SHIFT                  0u\n#define SIM_SDID_FEATURES_WIDTH                  8u\n#define SIM_SDID_FEATURES(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SDID_FEATURES_SHIFT))&SIM_SDID_FEATURES_MASK)\n#define SIM_SDID_PACKAGE_MASK                    0xF00u\n#define SIM_SDID_PACKAGE_SHIFT                   8u\n#define SIM_SDID_PACKAGE_WIDTH                   4u\n#define SIM_SDID_PACKAGE(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_SDID_PACKAGE_SHIFT))&SIM_SDID_PACKAGE_MASK)\n#define SIM_SDID_REVID_MASK                      0xF000u\n#define SIM_SDID_REVID_SHIFT                     12u\n#define SIM_SDID_REVID_WIDTH                     4u\n#define SIM_SDID_REVID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_REVID_SHIFT))&SIM_SDID_REVID_MASK)\n#define SIM_SDID_RAMSIZE_MASK                    0xF0000u\n#define SIM_SDID_RAMSIZE_SHIFT                   16u\n#define SIM_SDID_RAMSIZE_WIDTH                   4u\n#define SIM_SDID_RAMSIZE(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_SDID_RAMSIZE_SHIFT))&SIM_SDID_RAMSIZE_MASK)\n#define SIM_SDID_DERIVATE_MASK                   0xF00000u\n#define SIM_SDID_DERIVATE_SHIFT                  20u\n#define SIM_SDID_DERIVATE_WIDTH                  4u\n#define SIM_SDID_DERIVATE(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SDID_DERIVATE_SHIFT))&SIM_SDID_DERIVATE_MASK)\n#define SIM_SDID_SUBSERIES_MASK                  0xF000000u\n#define SIM_SDID_SUBSERIES_SHIFT                 24u\n#define SIM_SDID_SUBSERIES_WIDTH                 4u\n#define SIM_SDID_SUBSERIES(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SUBSERIES_SHIFT))&SIM_SDID_SUBSERIES_MASK)\n#define SIM_SDID_GENERATION_MASK                 0xF0000000u\n#define SIM_SDID_GENERATION_SHIFT                28u\n#define SIM_SDID_GENERATION_WIDTH                4u\n#define SIM_SDID_GENERATION(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_SDID_GENERATION_SHIFT))&SIM_SDID_GENERATION_MASK)\n/* PLATCGC Bit Fields */\n#define SIM_PLATCGC_CGCMSCM_MASK                 0x1u\n#define SIM_PLATCGC_CGCMSCM_SHIFT                0u\n#define SIM_PLATCGC_CGCMSCM_WIDTH                1u\n#define SIM_PLATCGC_CGCMSCM(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_PLATCGC_CGCMSCM_SHIFT))&SIM_PLATCGC_CGCMSCM_MASK)\n#define SIM_PLATCGC_CGCMPU_MASK                  0x2u\n#define SIM_PLATCGC_CGCMPU_SHIFT                 1u\n#define SIM_PLATCGC_CGCMPU_WIDTH                 1u\n#define SIM_PLATCGC_CGCMPU(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_PLATCGC_CGCMPU_SHIFT))&SIM_PLATCGC_CGCMPU_MASK)\n#define SIM_PLATCGC_CGCDMA_MASK                  0x4u\n#define SIM_PLATCGC_CGCDMA_SHIFT                 2u\n#define SIM_PLATCGC_CGCDMA_WIDTH                 1u\n#define SIM_PLATCGC_CGCDMA(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_PLATCGC_CGCDMA_SHIFT))&SIM_PLATCGC_CGCDMA_MASK)\n#define SIM_PLATCGC_CGCERM_MASK                  0x8u\n#define SIM_PLATCGC_CGCERM_SHIFT                 3u\n#define SIM_PLATCGC_CGCERM_WIDTH                 1u\n#define SIM_PLATCGC_CGCERM(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_PLATCGC_CGCERM_SHIFT))&SIM_PLATCGC_CGCERM_MASK)\n#define SIM_PLATCGC_CGCEIM_MASK                  0x10u\n#define SIM_PLATCGC_CGCEIM_SHIFT                 4u\n#define SIM_PLATCGC_CGCEIM_WIDTH                 1u\n#define SIM_PLATCGC_CGCEIM(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_PLATCGC_CGCEIM_SHIFT))&SIM_PLATCGC_CGCEIM_MASK)\n/* FCFG1 Bit Fields */\n#define SIM_FCFG1_DEPART_MASK                    0xF000u\n#define SIM_FCFG1_DEPART_SHIFT                   12u\n#define SIM_FCFG1_DEPART_WIDTH                   4u\n#define SIM_FCFG1_DEPART(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_FCFG1_DEPART_SHIFT))&SIM_FCFG1_DEPART_MASK)\n#define SIM_FCFG1_EEERAMSIZE_MASK                0xF0000u\n#define SIM_FCFG1_EEERAMSIZE_SHIFT               16u\n#define SIM_FCFG1_EEERAMSIZE_WIDTH               4u\n#define SIM_FCFG1_EEERAMSIZE(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_FCFG1_EEERAMSIZE_SHIFT))&SIM_FCFG1_EEERAMSIZE_MASK)\n/* UIDH Bit Fields */\n#define SIM_UIDH_UID127_96_MASK                  0xFFFFFFFFu\n#define SIM_UIDH_UID127_96_SHIFT                 0u\n#define SIM_UIDH_UID127_96_WIDTH                 32u\n#define SIM_UIDH_UID127_96(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_UIDH_UID127_96_SHIFT))&SIM_UIDH_UID127_96_MASK)\n/* UIDMH Bit Fields */\n#define SIM_UIDMH_UID95_64_MASK                  0xFFFFFFFFu\n#define SIM_UIDMH_UID95_64_SHIFT                 0u\n#define SIM_UIDMH_UID95_64_WIDTH                 32u\n#define SIM_UIDMH_UID95_64(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_UIDMH_UID95_64_SHIFT))&SIM_UIDMH_UID95_64_MASK)\n/* UIDML Bit Fields */\n#define SIM_UIDML_UID63_32_MASK                  0xFFFFFFFFu\n#define SIM_UIDML_UID63_32_SHIFT                 0u\n#define SIM_UIDML_UID63_32_WIDTH                 32u\n#define SIM_UIDML_UID63_32(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_UIDML_UID63_32_SHIFT))&SIM_UIDML_UID63_32_MASK)\n/* UIDL Bit Fields */\n#define SIM_UIDL_UID31_0_MASK                    0xFFFFFFFFu\n#define SIM_UIDL_UID31_0_SHIFT                   0u\n#define SIM_UIDL_UID31_0_WIDTH                   32u\n#define SIM_UIDL_UID31_0(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_UIDL_UID31_0_SHIFT))&SIM_UIDL_UID31_0_MASK)\n/* CLKDIV4 Bit Fields */\n#define SIM_CLKDIV4_TRACEFRAC_MASK               0x1u\n#define SIM_CLKDIV4_TRACEFRAC_SHIFT              0u\n#define SIM_CLKDIV4_TRACEFRAC_WIDTH              1u\n#define SIM_CLKDIV4_TRACEFRAC(x)                 (((uint32_t)(((uint32_t)(x))<<SIM_CLKDIV4_TRACEFRAC_SHIFT))&SIM_CLKDIV4_TRACEFRAC_MASK)\n#define SIM_CLKDIV4_TRACEDIV_MASK                0xEu\n#define SIM_CLKDIV4_TRACEDIV_SHIFT               1u\n#define SIM_CLKDIV4_TRACEDIV_WIDTH               3u\n#define SIM_CLKDIV4_TRACEDIV(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_CLKDIV4_TRACEDIV_SHIFT))&SIM_CLKDIV4_TRACEDIV_MASK)\n#define SIM_CLKDIV4_TRACEDIVEN_MASK              0x10000000u\n#define SIM_CLKDIV4_TRACEDIVEN_SHIFT             28u\n#define SIM_CLKDIV4_TRACEDIVEN_WIDTH             1u\n#define SIM_CLKDIV4_TRACEDIVEN(x)                (((uint32_t)(((uint32_t)(x))<<SIM_CLKDIV4_TRACEDIVEN_SHIFT))&SIM_CLKDIV4_TRACEDIVEN_MASK)\n/* MISCTRL1 Bit Fields */\n#define SIM_MISCTRL1_SW_TRG_MASK                 0x1u\n#define SIM_MISCTRL1_SW_TRG_SHIFT                0u\n#define SIM_MISCTRL1_SW_TRG_WIDTH                1u\n#define SIM_MISCTRL1_SW_TRG(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_MISCTRL1_SW_TRG_SHIFT))&SIM_MISCTRL1_SW_TRG_MASK)\n\n/*!\n * @}\n */ /* end of group SIM_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group SIM_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- SMC Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup SMC_Peripheral_Access_Layer SMC Peripheral Access Layer\n * @{\n */\n\n\n/** SMC - Size of Registers Arrays */\n\n/** SMC - Register Layout Typedef */\ntypedef struct {\n  __I  uint32_t VERID;                             /**< SMC Version ID Register, offset: 0x0 */\n  __I  uint32_t PARAM;                             /**< SMC Parameter Register, offset: 0x4 */\n  __IO uint32_t PMPROT;                            /**< Power Mode Protection register, offset: 0x8 */\n  __IO uint32_t PMCTRL;                            /**< Power Mode Control register, offset: 0xC */\n  __IO uint32_t STOPCTRL;                          /**< Stop Control Register, offset: 0x10 */\n  __I  uint32_t PMSTAT;                            /**< Power Mode Status register, offset: 0x14 */\n} SMC_Type, *SMC_MemMapPtr;\n\n /** Number of instances of the SMC module. */\n#define SMC_INSTANCE_COUNT                       (1u)\n\n\n/* SMC - Peripheral instance base addresses */\n/** Peripheral SMC base address */\n#define SMC_BASE                                 (0x4007E000u)\n/** Peripheral SMC base pointer */\n#define SMC                                      ((SMC_Type *)SMC_BASE)\n/** Array initializer of SMC peripheral base addresses */\n#define SMC_BASE_ADDRS                           { SMC_BASE }\n/** Array initializer of SMC peripheral base pointers */\n#define SMC_BASE_PTRS                            { SMC }\n\n/* ----------------------------------------------------------------------------\n   -- SMC Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup SMC_Register_Masks SMC Register Masks\n * @{\n */\n\n/* VERID Bit Fields */\n#define SMC_VERID_FEATURE_MASK                   0xFFFFu\n#define SMC_VERID_FEATURE_SHIFT                  0u\n#define SMC_VERID_FEATURE_WIDTH                  16u\n#define SMC_VERID_FEATURE(x)                     (((uint32_t)(((uint32_t)(x))<<SMC_VERID_FEATURE_SHIFT))&SMC_VERID_FEATURE_MASK)\n#define SMC_VERID_MINOR_MASK                     0xFF0000u\n#define SMC_VERID_MINOR_SHIFT                    16u\n#define SMC_VERID_MINOR_WIDTH                    8u\n#define SMC_VERID_MINOR(x)                       (((uint32_t)(((uint32_t)(x))<<SMC_VERID_MINOR_SHIFT))&SMC_VERID_MINOR_MASK)\n#define SMC_VERID_MAJOR_MASK                     0xFF000000u\n#define SMC_VERID_MAJOR_SHIFT                    24u\n#define SMC_VERID_MAJOR_WIDTH                    8u\n#define SMC_VERID_MAJOR(x)                       (((uint32_t)(((uint32_t)(x))<<SMC_VERID_MAJOR_SHIFT))&SMC_VERID_MAJOR_MASK)\n/* PARAM Bit Fields */\n#define SMC_PARAM_EHSRUN_MASK                    0x1u\n#define SMC_PARAM_EHSRUN_SHIFT                   0u\n#define SMC_PARAM_EHSRUN_WIDTH                   1u\n#define SMC_PARAM_EHSRUN(x)                      (((uint32_t)(((uint32_t)(x))<<SMC_PARAM_EHSRUN_SHIFT))&SMC_PARAM_EHSRUN_MASK)\n#define SMC_PARAM_ELLS_MASK                      0x8u\n#define SMC_PARAM_ELLS_SHIFT                     3u\n#define SMC_PARAM_ELLS_WIDTH                     1u\n#define SMC_PARAM_ELLS(x)                        (((uint32_t)(((uint32_t)(x))<<SMC_PARAM_ELLS_SHIFT))&SMC_PARAM_ELLS_MASK)\n#define SMC_PARAM_ELLS2_MASK                     0x20u\n#define SMC_PARAM_ELLS2_SHIFT                    5u\n#define SMC_PARAM_ELLS2_WIDTH                    1u\n#define SMC_PARAM_ELLS2(x)                       (((uint32_t)(((uint32_t)(x))<<SMC_PARAM_ELLS2_SHIFT))&SMC_PARAM_ELLS2_MASK)\n#define SMC_PARAM_EVLLS0_MASK                    0x40u\n#define SMC_PARAM_EVLLS0_SHIFT                   6u\n#define SMC_PARAM_EVLLS0_WIDTH                   1u\n#define SMC_PARAM_EVLLS0(x)                      (((uint32_t)(((uint32_t)(x))<<SMC_PARAM_EVLLS0_SHIFT))&SMC_PARAM_EVLLS0_MASK)\n/* PMPROT Bit Fields */\n#define SMC_PMPROT_AVLP_MASK                     0x20u\n#define SMC_PMPROT_AVLP_SHIFT                    5u\n#define SMC_PMPROT_AVLP_WIDTH                    1u\n#define SMC_PMPROT_AVLP(x)                       (((uint32_t)(((uint32_t)(x))<<SMC_PMPROT_AVLP_SHIFT))&SMC_PMPROT_AVLP_MASK)\n#define SMC_PMPROT_AHSRUN_MASK                   0x80u\n#define SMC_PMPROT_AHSRUN_SHIFT                  7u\n#define SMC_PMPROT_AHSRUN_WIDTH                  1u\n#define SMC_PMPROT_AHSRUN(x)                     (((uint32_t)(((uint32_t)(x))<<SMC_PMPROT_AHSRUN_SHIFT))&SMC_PMPROT_AHSRUN_MASK)\n/* PMCTRL Bit Fields */\n#define SMC_PMCTRL_STOPM_MASK                    0x7u\n#define SMC_PMCTRL_STOPM_SHIFT                   0u\n#define SMC_PMCTRL_STOPM_WIDTH                   3u\n#define SMC_PMCTRL_STOPM(x)                      (((uint32_t)(((uint32_t)(x))<<SMC_PMCTRL_STOPM_SHIFT))&SMC_PMCTRL_STOPM_MASK)\n#define SMC_PMCTRL_VLPSA_MASK                    0x8u\n#define SMC_PMCTRL_VLPSA_SHIFT                   3u\n#define SMC_PMCTRL_VLPSA_WIDTH                   1u\n#define SMC_PMCTRL_VLPSA(x)                      (((uint32_t)(((uint32_t)(x))<<SMC_PMCTRL_VLPSA_SHIFT))&SMC_PMCTRL_VLPSA_MASK)\n#define SMC_PMCTRL_RUNM_MASK                     0x60u\n#define SMC_PMCTRL_RUNM_SHIFT                    5u\n#define SMC_PMCTRL_RUNM_WIDTH                    2u\n#define SMC_PMCTRL_RUNM(x)                       (((uint32_t)(((uint32_t)(x))<<SMC_PMCTRL_RUNM_SHIFT))&SMC_PMCTRL_RUNM_MASK)\n/* STOPCTRL Bit Fields */\n#define SMC_STOPCTRL_STOPO_MASK                  0xC0u\n#define SMC_STOPCTRL_STOPO_SHIFT                 6u\n#define SMC_STOPCTRL_STOPO_WIDTH                 2u\n#define SMC_STOPCTRL_STOPO(x)                    (((uint32_t)(((uint32_t)(x))<<SMC_STOPCTRL_STOPO_SHIFT))&SMC_STOPCTRL_STOPO_MASK)\n/* PMSTAT Bit Fields */\n#define SMC_PMSTAT_PMSTAT_MASK                   0xFFu\n#define SMC_PMSTAT_PMSTAT_SHIFT                  0u\n#define SMC_PMSTAT_PMSTAT_WIDTH                  8u\n#define SMC_PMSTAT_PMSTAT(x)                     (((uint32_t)(((uint32_t)(x))<<SMC_PMSTAT_PMSTAT_SHIFT))&SMC_PMSTAT_PMSTAT_MASK)\n\n/*!\n * @}\n */ /* end of group SMC_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group SMC_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- TRGMUX Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup TRGMUX_Peripheral_Access_Layer TRGMUX Peripheral Access Layer\n * @{\n */\n\n\n/** TRGMUX - Size of Registers Arrays */\n#define TRGMUX_TRGMUXn_COUNT                     26u\n\n/** TRGMUX - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t TRGMUXn[TRGMUX_TRGMUXn_COUNT];     /**< TRGMUX DMAMUX0 Register..TRGMUX LPTMR0 Register, array offset: 0x0, array step: 0x4 */\n} TRGMUX_Type, *TRGMUX_MemMapPtr;\n\n /** Number of instances of the TRGMUX module. */\n#define TRGMUX_INSTANCE_COUNT                    (1u)\n\n\n/* TRGMUX - Peripheral instance base addresses */\n/** Peripheral TRGMUX base address */\n#define TRGMUX_BASE                              (0x40063000u)\n/** Peripheral TRGMUX base pointer */\n#define TRGMUX                                   ((TRGMUX_Type *)TRGMUX_BASE)\n/** Array initializer of TRGMUX peripheral base addresses */\n#define TRGMUX_BASE_ADDRS                        { TRGMUX_BASE }\n/** Array initializer of TRGMUX peripheral base pointers */\n#define TRGMUX_BASE_PTRS                         { TRGMUX }\n\n/* TRGMUX index offsets */\n#define TRGMUX_DMAMUX0_INDEX                     0\n#define TRGMUX_EXTOUT0_INDEX                     1\n#define TRGMUX_EXTOUT1_INDEX                     2\n#define TRGMUX_ADC0_INDEX                        3\n#define TRGMUX_ADC1_INDEX                        4\n#define TRGMUX_CMP0_INDEX                        7\n#define TRGMUX_FTM0_INDEX                        10\n#define TRGMUX_FTM1_INDEX                        11\n#define TRGMUX_FTM2_INDEX                        12\n#define TRGMUX_FTM3_INDEX                        13\n#define TRGMUX_PDB0_INDEX                        14\n#define TRGMUX_PDB1_INDEX                        15\n#define TRGMUX_FLEXIO_INDEX                      17\n#define TRGMUX_LPIT0_INDEX                       18\n#define TRGMUX_LPUART0_INDEX                     19\n#define TRGMUX_LPUART1_INDEX                     20\n#define TRGMUX_LPI2C0_INDEX                      21\n#define TRGMUX_LPSPI0_INDEX                      23\n#define TRGMUX_LPSPI1_INDEX                      24\n#define TRGMUX_LPTMR0_INDEX                      25\n\n/* ----------------------------------------------------------------------------\n   -- TRGMUX Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup TRGMUX_Register_Masks TRGMUX Register Masks\n * @{\n */\n\n/* TRGMUXn Bit Fields */\n#define TRGMUX_TRGMUXn_SEL0_MASK                 0x3Fu\n#define TRGMUX_TRGMUXn_SEL0_SHIFT                0u\n#define TRGMUX_TRGMUXn_SEL0_WIDTH                6u\n#define TRGMUX_TRGMUXn_SEL0(x)                   (((uint32_t)(((uint32_t)(x))<<TRGMUX_TRGMUXn_SEL0_SHIFT))&TRGMUX_TRGMUXn_SEL0_MASK)\n#define TRGMUX_TRGMUXn_SEL1_MASK                 0x3F00u\n#define TRGMUX_TRGMUXn_SEL1_SHIFT                8u\n#define TRGMUX_TRGMUXn_SEL1_WIDTH                6u\n#define TRGMUX_TRGMUXn_SEL1(x)                   (((uint32_t)(((uint32_t)(x))<<TRGMUX_TRGMUXn_SEL1_SHIFT))&TRGMUX_TRGMUXn_SEL1_MASK)\n#define TRGMUX_TRGMUXn_SEL2_MASK                 0x3F0000u\n#define TRGMUX_TRGMUXn_SEL2_SHIFT                16u\n#define TRGMUX_TRGMUXn_SEL2_WIDTH                6u\n#define TRGMUX_TRGMUXn_SEL2(x)                   (((uint32_t)(((uint32_t)(x))<<TRGMUX_TRGMUXn_SEL2_SHIFT))&TRGMUX_TRGMUXn_SEL2_MASK)\n#define TRGMUX_TRGMUXn_SEL3_MASK                 0x3F000000u\n#define TRGMUX_TRGMUXn_SEL3_SHIFT                24u\n#define TRGMUX_TRGMUXn_SEL3_WIDTH                6u\n#define TRGMUX_TRGMUXn_SEL3(x)                   (((uint32_t)(((uint32_t)(x))<<TRGMUX_TRGMUXn_SEL3_SHIFT))&TRGMUX_TRGMUXn_SEL3_MASK)\n#define TRGMUX_TRGMUXn_LK_MASK                   0x80000000u\n#define TRGMUX_TRGMUXn_LK_SHIFT                  31u\n#define TRGMUX_TRGMUXn_LK_WIDTH                  1u\n#define TRGMUX_TRGMUXn_LK(x)                     (((uint32_t)(((uint32_t)(x))<<TRGMUX_TRGMUXn_LK_SHIFT))&TRGMUX_TRGMUXn_LK_MASK)\n\n/*!\n * @}\n */ /* end of group TRGMUX_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group TRGMUX_Peripheral_Access_Layer */\n\n\n/* ----------------------------------------------------------------------------\n   -- WDOG Peripheral Access Layer\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup WDOG_Peripheral_Access_Layer WDOG Peripheral Access Layer\n * @{\n */\n\n\n/** WDOG - Size of Registers Arrays */\n\n/** WDOG - Register Layout Typedef */\ntypedef struct {\n  __IO uint32_t CS;                                /**< Watchdog Control and Status Register, offset: 0x0 */\n  __IO uint32_t CNT;                               /**< Watchdog Counter Register, offset: 0x4 */\n  __IO uint32_t TOVAL;                             /**< Watchdog Timeout Value Register, offset: 0x8 */\n  __IO uint32_t WIN;                               /**< Watchdog Window Register, offset: 0xC */\n} WDOG_Type, *WDOG_MemMapPtr;\n\n /** Number of instances of the WDOG module. */\n#define WDOG_INSTANCE_COUNT                      (1u)\n\n\n/* WDOG - Peripheral instance base addresses */\n/** Peripheral WDOG base address */\n#define WDOG_BASE                                (0x40052000u)\n/** Peripheral WDOG base pointer */\n#define WDOG                                     ((WDOG_Type *)WDOG_BASE)\n/** Array initializer of WDOG peripheral base addresses */\n#define WDOG_BASE_ADDRS                          { WDOG_BASE }\n/** Array initializer of WDOG peripheral base pointers */\n#define WDOG_BASE_PTRS                           { WDOG }\n /** Number of interrupt vector arrays for the WDOG module. */\n#define WDOG_IRQS_ARR_COUNT                      (1u)\n /** Number of interrupt channels for the WDOG module. */\n#define WDOG_IRQS_CH_COUNT                       (1u)\n/** Interrupt vectors for the WDOG peripheral type */\n#define WDOG_IRQS                                { WDOG_EWM_IRQn }\n\n/* ----------------------------------------------------------------------------\n   -- WDOG Register Masks\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup WDOG_Register_Masks WDOG Register Masks\n * @{\n */\n\n/* CS Bit Fields */\n#define WDOG_CS_STOP_MASK                        0x1u\n#define WDOG_CS_STOP_SHIFT                       0u\n#define WDOG_CS_STOP_WIDTH                       1u\n#define WDOG_CS_STOP(x)                          (((uint32_t)(((uint32_t)(x))<<WDOG_CS_STOP_SHIFT))&WDOG_CS_STOP_MASK)\n#define WDOG_CS_WAIT_MASK                        0x2u\n#define WDOG_CS_WAIT_SHIFT                       1u\n#define WDOG_CS_WAIT_WIDTH                       1u\n#define WDOG_CS_WAIT(x)                          (((uint32_t)(((uint32_t)(x))<<WDOG_CS_WAIT_SHIFT))&WDOG_CS_WAIT_MASK)\n#define WDOG_CS_DBG_MASK                         0x4u\n#define WDOG_CS_DBG_SHIFT                        2u\n#define WDOG_CS_DBG_WIDTH                        1u\n#define WDOG_CS_DBG(x)                           (((uint32_t)(((uint32_t)(x))<<WDOG_CS_DBG_SHIFT))&WDOG_CS_DBG_MASK)\n#define WDOG_CS_TST_MASK                         0x18u\n#define WDOG_CS_TST_SHIFT                        3u\n#define WDOG_CS_TST_WIDTH                        2u\n#define WDOG_CS_TST(x)                           (((uint32_t)(((uint32_t)(x))<<WDOG_CS_TST_SHIFT))&WDOG_CS_TST_MASK)\n#define WDOG_CS_UPDATE_MASK                      0x20u\n#define WDOG_CS_UPDATE_SHIFT                     5u\n#define WDOG_CS_UPDATE_WIDTH                     1u\n#define WDOG_CS_UPDATE(x)                        (((uint32_t)(((uint32_t)(x))<<WDOG_CS_UPDATE_SHIFT))&WDOG_CS_UPDATE_MASK)\n#define WDOG_CS_INT_MASK                         0x40u\n#define WDOG_CS_INT_SHIFT                        6u\n#define WDOG_CS_INT_WIDTH                        1u\n#define WDOG_CS_INT(x)                           (((uint32_t)(((uint32_t)(x))<<WDOG_CS_INT_SHIFT))&WDOG_CS_INT_MASK)\n#define WDOG_CS_EN_MASK                          0x80u\n#define WDOG_CS_EN_SHIFT                         7u\n#define WDOG_CS_EN_WIDTH                         1u\n#define WDOG_CS_EN(x)                            (((uint32_t)(((uint32_t)(x))<<WDOG_CS_EN_SHIFT))&WDOG_CS_EN_MASK)\n#define WDOG_CS_CLK_MASK                         0x300u\n#define WDOG_CS_CLK_SHIFT                        8u\n#define WDOG_CS_CLK_WIDTH                        2u\n#define WDOG_CS_CLK(x)                           (((uint32_t)(((uint32_t)(x))<<WDOG_CS_CLK_SHIFT))&WDOG_CS_CLK_MASK)\n#define WDOG_CS_RCS_MASK                         0x400u\n#define WDOG_CS_RCS_SHIFT                        10u\n#define WDOG_CS_RCS_WIDTH                        1u\n#define WDOG_CS_RCS(x)                           (((uint32_t)(((uint32_t)(x))<<WDOG_CS_RCS_SHIFT))&WDOG_CS_RCS_MASK)\n#define WDOG_CS_ULK_MASK                         0x800u\n#define WDOG_CS_ULK_SHIFT                        11u\n#define WDOG_CS_ULK_WIDTH                        1u\n#define WDOG_CS_ULK(x)                           (((uint32_t)(((uint32_t)(x))<<WDOG_CS_ULK_SHIFT))&WDOG_CS_ULK_MASK)\n#define WDOG_CS_PRES_MASK                        0x1000u\n#define WDOG_CS_PRES_SHIFT                       12u\n#define WDOG_CS_PRES_WIDTH                       1u\n#define WDOG_CS_PRES(x)                          (((uint32_t)(((uint32_t)(x))<<WDOG_CS_PRES_SHIFT))&WDOG_CS_PRES_MASK)\n#define WDOG_CS_CMD32EN_MASK                     0x2000u\n#define WDOG_CS_CMD32EN_SHIFT                    13u\n#define WDOG_CS_CMD32EN_WIDTH                    1u\n#define WDOG_CS_CMD32EN(x)                       (((uint32_t)(((uint32_t)(x))<<WDOG_CS_CMD32EN_SHIFT))&WDOG_CS_CMD32EN_MASK)\n#define WDOG_CS_FLG_MASK                         0x4000u\n#define WDOG_CS_FLG_SHIFT                        14u\n#define WDOG_CS_FLG_WIDTH                        1u\n#define WDOG_CS_FLG(x)                           (((uint32_t)(((uint32_t)(x))<<WDOG_CS_FLG_SHIFT))&WDOG_CS_FLG_MASK)\n#define WDOG_CS_WIN_MASK                         0x8000u\n#define WDOG_CS_WIN_SHIFT                        15u\n#define WDOG_CS_WIN_WIDTH                        1u\n#define WDOG_CS_WIN(x)                           (((uint32_t)(((uint32_t)(x))<<WDOG_CS_WIN_SHIFT))&WDOG_CS_WIN_MASK)\n/* CNT Bit Fields */\n#define WDOG_CNT_CNTLOW_MASK                     0xFFu\n#define WDOG_CNT_CNTLOW_SHIFT                    0u\n#define WDOG_CNT_CNTLOW_WIDTH                    8u\n#define WDOG_CNT_CNTLOW(x)                       (((uint32_t)(((uint32_t)(x))<<WDOG_CNT_CNTLOW_SHIFT))&WDOG_CNT_CNTLOW_MASK)\n#define WDOG_CNT_CNTHIGH_MASK                    0xFF00u\n#define WDOG_CNT_CNTHIGH_SHIFT                   8u\n#define WDOG_CNT_CNTHIGH_WIDTH                   8u\n#define WDOG_CNT_CNTHIGH(x)                      (((uint32_t)(((uint32_t)(x))<<WDOG_CNT_CNTHIGH_SHIFT))&WDOG_CNT_CNTHIGH_MASK)\n/* TOVAL Bit Fields */\n#define WDOG_TOVAL_TOVALLOW_MASK                 0xFFu\n#define WDOG_TOVAL_TOVALLOW_SHIFT                0u\n#define WDOG_TOVAL_TOVALLOW_WIDTH                8u\n#define WDOG_TOVAL_TOVALLOW(x)                   (((uint32_t)(((uint32_t)(x))<<WDOG_TOVAL_TOVALLOW_SHIFT))&WDOG_TOVAL_TOVALLOW_MASK)\n#define WDOG_TOVAL_TOVALHIGH_MASK                0xFF00u\n#define WDOG_TOVAL_TOVALHIGH_SHIFT               8u\n#define WDOG_TOVAL_TOVALHIGH_WIDTH               8u\n#define WDOG_TOVAL_TOVALHIGH(x)                  (((uint32_t)(((uint32_t)(x))<<WDOG_TOVAL_TOVALHIGH_SHIFT))&WDOG_TOVAL_TOVALHIGH_MASK)\n/* WIN Bit Fields */\n#define WDOG_WIN_WINLOW_MASK                     0xFFu\n#define WDOG_WIN_WINLOW_SHIFT                    0u\n#define WDOG_WIN_WINLOW_WIDTH                    8u\n#define WDOG_WIN_WINLOW(x)                       (((uint32_t)(((uint32_t)(x))<<WDOG_WIN_WINLOW_SHIFT))&WDOG_WIN_WINLOW_MASK)\n#define WDOG_WIN_WINHIGH_MASK                    0xFF00u\n#define WDOG_WIN_WINHIGH_SHIFT                   8u\n#define WDOG_WIN_WINHIGH_WIDTH                   8u\n#define WDOG_WIN_WINHIGH(x)                      (((uint32_t)(((uint32_t)(x))<<WDOG_WIN_WINHIGH_SHIFT))&WDOG_WIN_WINHIGH_MASK)\n\n/*!\n * @}\n */ /* end of group WDOG_Register_Masks */\n\n\n/*!\n * @}\n */ /* end of group WDOG_Peripheral_Access_Layer */\n\n\n/*!\n * @}\n */ /* end of group Peripheral_access_layer_S32K144 */\n\n\n/* ----------------------------------------------------------------------------\n   -- Backward Compatibility for S32K144\n   ---------------------------------------------------------------------------- */\n\n/*!\n * @addtogroup Backward_Compatibility_Symbols_S32K144 Backward Compatibility for S32K144\n * @{\n */\n\n/* No backward compatibility issues. */\n\n/*!\n * @}\n */ /* end of group Backward_Compatibility_Symbols_S32K144 */\n\n\n#else /* #if !defined(S32K144_H_) */\n  /* There is already included the same memory map. Check if it is compatible (has the same major version) */\n  #if (MCU_MEM_MAP_VERSION != 0x0400u)\n    #if (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING))\n      #warning There are included two not compatible versions of memory maps. Please check possible differences.\n    #endif /* (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING)) */\n  #endif /* (MCU_MEM_MAP_VERSION != 0x0400u) */\n#endif  /* #if !defined(S32K144_H_) */\n\n/* S32K144.h, eof. */\n"},{"name":"S32K144_features.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\S32K144\\include","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2015 Freescale Semiconductor, Inc.\n * Copyright 2016-2017 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n/*!\n * @file S32K144_features.h\n * @brief Chip specific module features\n *\n * @page misra_violations MISRA-C:2012 violations\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.3, Global typedef not referenced.\n * Type used only in some modules of the SDK.\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.4, tag unused outside of typedefs\n * Tag defined specifically for typedef\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.\n * The macros defined are used to define features for each driver, so this might be reported\n * when the analysis is made only on one driver.\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Directive 4.9, Function-like macro\n * These are very simple macros used for abstracting hw implementation.\n * They help make the code easy to understand.\n *\n * @section [global]\n * Violates MISRA 2012 Required Rule 5.1, identifier clash\n * The supported compilers use more than 31 significant characters for identifiers.\n *\n * @section [global]\n * Violates MISRA 2012 Required Rule 5.2, identifier clash\n * The supported compilers use more than 31 significant characters for identifiers.\n *\n * @section [global]\n * Violates MISRA 2012 Required Rule 5.4, identifier clash\n * The supported compilers use more than 31 significant characters for identifiers.\n *\n * @section [global]\n * Violates MISRA 2012 Required Rule 5.5, identifier clash\n * The supported compilers use more than 31 significant characters for identifiers.\n *\n */\n\n#if !defined(S32K144_FEATURES_H)\n#define S32K144_FEATURES_H\n\n/* ERRATA sections*/\n\n/* @brief ARM Errata 838869: Store immediate overlapping exception return operation might vector to\n * incorrect interrupt. */\n#define ERRATA_E9005\n\n/* @brief ARM Errata 709718: VDIV or VSQRT instructions might not complete correctly when very\n * short ISRs are used. */\n#define ERRATA_E6940\n\n/* @brief E10655: When using LPSPI in master mode and the SR[MBF] bit is read as a one, then, the\n * flag is set. If it is read as a zero, it must be read second time and this second read will be\n * the correct state of the bit.​ */\n#define ERRATA_E10655\n\n/* @brief E10792: LPI2C: Slave Transmit Data Flag may incorrectly read as one when TXCFG is zero.\n * Interrupts for transfer data should be enabled after the address valid event is detected and\n * disabled at the end of the transfer. */\n#define ERRATA_E10792\n\n/* @brief Errata workaround: System clock status register may be a erroneous status during the system clock switch.\n * Read system clock source twice. */\n#define ERRATA_E10777\n\n/* @brief E10856: FTM: Safe state is not removed from channel outputs after fault condition\n * ends if SWOCTRL is being used to control the pin */\n#define ERRATA_E10856\n\n/* @brief Number of cores. */\n#define NUMBER_OF_CORES (1u)\n\n/* @brief Number of alternative clocks available */\n#define NUMBER_OF_ALT_CLOCKS  ADC_CLK_ALT_1\n\n/* PCC module features */\n\n/* @brief Has InUse feature (register bit PCC[INUSE]). */\n#define FEATURE_PCC_HAS_IN_USE_FEATURE (0)\n\n/* PORT module features */\n/*! @brief PORT Used for setting Pins */\n#define FEATURE_PINS_DRIVER_USING_PORT (1)\n/* @brief Has control lock (register bit PCR[LK]). */\n#define FEATURE_PORT_HAS_PIN_CONTROL_LOCK (1)\n/* @brief Has open drain control (register bit PCR[ODE]). */\n#define FEATURE_PINS_HAS_OPEN_DRAIN (0)\n/* @brief Has digital filter (registers DFER, DFCR and DFWR). */\n#define FEATURE_PORT_HAS_DIGITAL_FILTER (1)\n/* @brief Has trigger output to trigger other peripherals (register bit field PCR[IRQC] values). */\n#define FEATURE_PORT_HAS_TRIGGER_OUT (0)\n/* @brief Has setting flag only (register bit field PCR[IRQC] values). */\n#define FEATURE_PORT_HAS_FLAG_SET_ONLY (0)\n/* @brief Has over-current feature (register bit field PCR[OCIE] values). */\n#define FEATURE_PINS_HAS_OVER_CURRENT (0)\n/* @brief Has pull resistor selection available. */\n#define FEATURE_PINS_HAS_PULL_SELECTION (1)\n/* @brief Has slew rate control (register bit PCR[SRE]). */\n#define FEATURE_PINS_HAS_SLEW_RATE (0)\n/* @brief Has passive filter (register bit field PCR[PFE]). */\n#define FEATURE_PORT_HAS_PASSIVE_FILTER (1)\n/* @brief Has drive strength (register bit PCR[DSE]). */\n#define FEATURE_PINS_HAS_DRIVE_STRENGTH (1)\n/* @brief Has drive strength control bits*/\n#define FEATURE_PINS_HAS_DRIVE_STRENGTH_CONTROL (0)\n/* @brief Has port input disable control bits*/\n#define FEATURE_PORT_HAS_INPUT_DISABLE (1)\n/* @brief SIM_CHIPCTL_ADC_INTERLEAVE_EN bit is available */\n#define FEATURE_PINS_HAS_ADC_INTERLEAVE_EN (1)\n\n/* SOC module features */\n\n/* @brief PORT availability on the SoC. */\n#define FEATURE_SOC_PORT_COUNT (5)\n\n#define FEATURE_SOC_SCG_COUNT (1)\n\n/* @brief Slow IRC high range clock frequency. */\n#define FEATURE_SCG_SIRC_HIGH_RANGE_FREQ (8000000U)\n\n/* @brief Fast IRC trimmed clock frequency(48MHz). */\n#define FEATURE_SCG_FIRC_FREQ0  (48000000U)\n\n/* CMP module features */\n\n/* @brief Comparator hard block offset control */\n#define FEATURE_CMP_HAS_HARD_BLOCK_OFFSET   (1)\n/* @brief Comparator fix DAC input to mux side */\n#define FEATURE_CMP_DAC_FIX_SELECTION       (0)\n/* @brief Comparator initialization delay */\n#define FEATURE_CMP_HAS_INIT_DELAY          (1)\n\n#define C0_RESET_VALUE (CMP_C0_DMAEN(0U) | CMP_C0_IER(0U) | CMP_C0_IEF(0U) | CMP_C0_CFR(1U) |                     \\\n                        CMP_C0_CFF(1U) | CMP_C0_FPR(0U) | CMP_C0_SE(0U) | CMP_C0_WE(0U) |                         \\\n                        CMP_C0_PMODE(0U) | CMP_C0_INVT(0U) | CMP_C0_COS(0U) | CMP_C0_OPE(0U) |                    \\\n                        CMP_C0_EN(0U) | CMP_C0_FILTER_CNT(0U) | CMP_C0_OFFSET(0U) | CMP_C0_HYSTCTR(0U))\n\n#define C1_RESET_VALUE (CMP_C1_INPSEL(0U) | CMP_C1_INNSEL(0U) | CMP_C1_CHN7(0U) | CMP_C1_CHN6(0U) |               \\\n                        CMP_C1_CHN5(0U) | CMP_C1_CHN4(0U) | CMP_C1_CHN3(0U) | CMP_C1_CHN2(0U) |                   \\\n                        CMP_C1_CHN1(0U) | CMP_C1_CHN0(0U) | CMP_C1_DACEN(0U) | CMP_C1_VRSEL(0U) |                 \\\n                        CMP_C1_PSEL(0U) | CMP_C1_MSEL(0U) |  CMP_C1_VOSEL(0U))\n\n#define C2_RESET_VALUE (CMP_C2_RRE(0U) | CMP_C2_RRIE(0U) | CMP_C2_FXMP(0U) | CMP_C2_FXMXCH(0U) | CMP_C2_CH7F(1U) |    \\\n                        CMP_C2_CH6F(1U) | CMP_C2_CH5F(1U) | CMP_C2_CH4F(1U) | CMP_C2_CH3F(1U) | CMP_C2_CH2F(1U) |     \\\n                        CMP_C2_CH1F(1U) | CMP_C2_CH0F(1U) | CMP_C2_NSAM(0U) | CMP_C2_NSAM(0U) | CMP_C2_INITMOD(0U) |  \\\n                        CMP_C2_ACOn(0U))\n\n#define CMP_DAC_SOURCE          0U\n#define CMP_MUX_SOURCE          1U\n#define CMP_DAC_RESOLUTION      255U\n\n/* FLASH module features */\n\n/* @brief Is of type FTFA. */\n#define FEATURE_FLS_IS_FTFA (0u)\n/* @brief Is of type FTFC. */\n#define FEATURE_FLS_IS_FTFC (1u)\n/* @brief Is of type FTFE. */\n#define FEATURE_FLS_IS_FTFE (0u)\n/* @brief Is of type FTFL. */\n#define FEATURE_FLS_IS_FTFL (0u)\n/* @brief Is of type FTFM. */\n#define FEATURE_FLS_IS_FTFM (0u)\n/* @brief Has flags indicating the status of the FlexRAM (register bits FCNFG[EEERDY], FCNFG[RAMRDY] and FCNFG[PFLSH]). */\n#define FEATURE_FLS_HAS_FLEX_RAM_FLAGS (1u)\n/* @brief Has program flash swapping status flag (register bit FCNFG[SWAP]). */\n#define FEATURE_FLS_HAS_PF_SWAPPING_STATUS_FLAG (0u)\n/* @brief Has EEPROM region protection (register FEPROT). */\n#define FEATURE_FLS_HAS_EEROM_REGION_PROTECTION (1u)\n/* @brief Has data flash region protection (register FDPROT). */\n#define FEATURE_FLS_HAS_DATA_FLS_REGION_PROTECTION (1u)\n/* @brief P-Flash block count. */\n#define FEATURE_FLS_PF_BLOCK_COUNT (1u)\n/* @brief P-Flash block size. */\n#define FEATURE_FLS_PF_BLOCK_SIZE (0x80000U)\n/* @brief P-Flash sector size. */\n#define FEATURE_FLS_PF_BLOCK_SECTOR_SIZE (4096u)\n/* @brief P-Flash write unit size. */\n#define FEATURE_FLS_PF_BLOCK_WRITE_UNIT_SIZE (8u)\n/* @brief P-Flash block swap feature. */\n#define FEATURE_FLS_HAS_PF_BLOCK_SWAP (0u)\n/* @brief Has FlexNVM memory. */\n#define FEATURE_FLS_HAS_FLEX_NVM (1u)\n/* @brief FlexNVM block count. */\n#define FEATURE_FLS_DF_BLOCK_COUNT (1u)\n/* @brief FlexNVM block size. */\n#define FEATURE_FLS_DF_BLOCK_SIZE (65536u)\n/* @brief FlexNVM sector size. */\n#define FEATURE_FLS_DF_BLOCK_SECTOR_SIZE (2048u)\n/* @brief FlexNVM write unit size. */\n#define FEATURE_FLS_DF_BLOCK_WRITE_UNIT_SIZE (8u)\n/* @brief FlexNVM start address. (Valid only if FlexNVM is available.) */\n#define FEATURE_FLS_DF_START_ADDRESS (0x10000000u)\n/* @brief Has FlexRAM memory. */\n#define FEATURE_FLS_HAS_FLEX_RAM (1u)\n/* @brief FlexRAM size. */\n#define FEATURE_FLS_FLEX_RAM_SIZE (4096u)\n/* @brief FlexRAM start address. (Valid only if FlexRAM is available.) */\n#define FEATURE_FLS_FLEX_RAM_START_ADDRESS (0x14000000u)\n/* @brief Has 0x00 Read 1s Block command. */\n#define FEATURE_FLS_HAS_READ_1S_BLOCK_CMD (1u)\n/* @brief Has 0x01 Read 1s Section command. */\n#define FEATURE_FLS_HAS_READ_1S_SECTION_CMD (1u)\n/* @brief Has 0x02 Program Check command. */\n#define FEATURE_FLS_HAS_PROGRAM_CHECK_CMD (1u)\n/* @brief Has 0x03 Read Resource command. */\n#define FEATURE_FLS_HAS_READ_RESOURCE_CMD (0u)\n/* @brief Has 0x06 Program Longword command. */\n#define FEATURE_FLS_HAS_PROGRAM_LONGWORD_CMD (0u)\n/* @brief Has 0x07 Program Phrase command. */\n#define FEATURE_FLS_HAS_PROGRAM_PHRASE_CMD (1u)\n/* @brief Has 0x08 Erase Flash Block command. */\n#define FEATURE_FLS_HAS_ERASE_BLOCK_CMD (1u)\n/* @brief Has 0x09 Erase Flash Sector command. */\n#define FEATURE_FLS_HAS_ERASE_SECTOR_CMD (1u)\n/* @brief Has 0x0B Program Section command. */\n#define FEATURE_FLS_HAS_PROGRAM_SECTION_CMD (1u)\n/* @brief Has 0x40 Read 1s All Blocks command. */\n#define FEATURE_FLS_HAS_READ_1S_ALL_BLOCKS_CMD (1u)\n/* @brief Has 0x41 Read Once command. */\n#define FEATURE_FLS_HAS_READ_ONCE_CMD (1u)\n/* @brief Has 0x43 Program Once command. */\n#define FEATURE_FLS_HAS_PROGRAM_ONCE_CMD (1u)\n/* @brief Has 0x44 Erase All Blocks command. */\n#define FEATURE_FLS_HAS_ERASE_ALL_CMD (1u)\n/* @brief Has 0x45 Verify Backdoor Access Key command. */\n#define FEATURE_FLS_HAS_VERIFY_BACKDOOR_ACCESS_KEY_CMD (1u)\n/* @brief Has 0x46 Swap Control command. */\n#define FEATURE_FLS_HAS_SWAP_CONTROL_CMD (0u)\n/* @brief Has 0x49 Erase All Blocks unsecure command. */\n#define FEATURE_FLS_HAS_ERASE_ALL_BLOCKS_UNSECURE_CMD (1u)\n/* @brief Has 0x80 Program Partition command. */\n#define FEATURE_FLS_HAS_PROGRAM_PARTITION_CMD (1u)\n/* @brief Has 0x81 Set FlexRAM Function command. */\n#define FEATURE_FLS_HAS_SET_FLEXRAM_FUNCTION_CMD (1u)\n/* @brief P-Flash Erase/Read 1st all block command address alignment. */\n#define FEATURE_FLS_PF_BLOCK_CMD_ADDRESS_ALIGMENT (16u)\n/* @brief P-Flash Erase sector command address alignment. */\n#define FEATURE_FLS_PF_SECTOR_CMD_ADDRESS_ALIGMENT (16u)\n/* @brief P-Flash Program/Verify section command address alignment. */\n#define FEATURE_FLS_PF_SECTION_CMD_ADDRESS_ALIGMENT (16u)\n/* @brief P-Flash Read resource command address alignment. */\n#define FEATURE_FLS_PF_RESOURCE_CMD_ADDRESS_ALIGMENT (8u)\n/* @brief P-Flash Program check command address alignment. */\n#define FEATURE_FLS_PF_CHECK_CMD_ADDRESS_ALIGMENT (4u)\n/* @brief P-Flash Program check command address alignment. */\n#define FEATURE_FLS_PF_SWAP_CONTROL_CMD_ADDRESS_ALIGMENT (0u)\n/* @brief FlexNVM Erase/Read 1st all block command address alignment. */\n#define FEATURE_FLS_DF_BLOCK_CMD_ADDRESS_ALIGMENT (8u)\n/* @brief FlexNVM Erase sector command address alignment. */\n#define FEATURE_FLS_DF_SECTOR_CMD_ADDRESS_ALIGMENT (8u)\n/* @brief FlexNVM Program/Verify section command address alignment. */\n#define FEATURE_FLS_DF_SECTION_CMD_ADDRESS_ALIGMENT (8u)\n/* @brief FlexNVM Read resource command address alignment. */\n#define FEATURE_FLS_DF_RESOURCE_CMD_ADDRESS_ALIGMENT (8u)\n/* @brief FlexNVM Program check command address alignment. */\n#define FEATURE_FLS_DF_CHECK_CMD_ADDRESS_ALIGMENT (4u)\n/* @brief FlexNVM partition code 0000 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_0000 (0x00010000u)\n/* @brief FlexNVM partition code 0001 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_0001 (0xFFFFFFFFu)\n/* @brief FlexNVM partition code 0010 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_0010 (0xFFFFFFFFu)\n/* @brief FlexNVM partition code 0011 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_0011 (0x00008000u)\n/* @brief FlexNVM partition code 0100 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_0100 (0x00000000u)\n/* @brief FlexNVM partition code 0101 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_0101 (0xFFFFFFFFu)\n/* @brief FlexNVM partition code 0110 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_0110 (0xFFFFFFFFu)\n/* @brief FlexNVM partition code 0111 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_0111 (0xFFFFFFFFu)\n/* @brief FlexNVM partition code 1000 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_1000 (0x00000000u)\n/* @brief FlexNVM partition code 1001 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_1001 (0xFFFFFFFFu)\n/* @brief FlexNVM partition code 1010 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_1010 (0x00004000u)\n/* @brief FlexNVM partition code 1011 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_1011 (0x00008000u)\n/* @brief FlexNVM partition code 1100 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_1100 (0x00010000u)\n/* @brief FlexNVM partition code 1101 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_1101 (0xFFFFFFFFu)\n/* @brief FlexNVM partition code 1110 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_1110 (0xFFFFFFFFu)\n/* @brief FlexNVM partition code 1111 mapping to data flash size in bytes (0xFFFFFFFF = reserved). */\n#define FEATURE_FLS_DF_SIZE_1111 (0x00010000u)\n/* @brief Emulated EEPROM size code 0000 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_0000 (0xFFFFu)\n/* @brief Emulated EEPROM size code 0001 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_0001 (0xFFFFu)\n/* @brief Emulated EEPROM size code 0010 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_0010 (0x1000u)\n/* @brief Emulated EEPROM size code 0011 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_0011 (0xFFFFu)\n/* @brief Emulated EEPROM size code 0100 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_0100 (0xFFFFu)\n/* @brief Emulated EEPROM size code 0101 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_0101 (0xFFFFu)\n/* @brief Emulated EEPROM size code 0110 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_0110 (0xFFFFu)\n/* @brief Emulated EEPROM size code 0111 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_0111 (0xFFFFu)\n/* @brief Emulated EEPROM size code 1000 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_1000 (0xFFFFu)\n/* @brief Emulated EEPROM size code 1001 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_1001 (0xFFFFu)\n/* @brief Emulated EEPROM size code 1010 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_1010 (0xFFFFu)\n/* @brief Emulated EEPROM size code 1011 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_1011 (0xFFFFu)\n/* @brief Emulated EEPROM size code 1100 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_1100 (0xFFFFu)\n/* @brief Emulated EEPROM size code 1101 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_1101 (0xFFFFu)\n/* @brief Emulated EEPROM size code 1110 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_1110 (0xFFFFu)\n/* @brief Emulated EEPROM size code 1111 mapping to emulated EEPROM size in bytes (0xFFFF = reserved). */\n#define FEATURE_FLS_EE_SIZE_1111 (0x0000u)\n/* @brief Has the detection of uncorrected ECC errors. */\n#define FEATURE_FLS_HAS_DETECT_ECC_ERROR (1)\n/* @brief Has the interrupt double bit fault detect. */\n#define FEATURE_FLS_HAS_INTERRUPT_DOUBLE_BIT_FAULT_IRQ (1)\n\n/* CAN module features */\n\n/* @brief Frames available in Rx FIFO flag shift */\n#define FEATURE_CAN_RXFIFO_FRAME_AVAILABLE  (5U)\n/* @brief Rx FIFO warning flag shift */\n#define FEATURE_CAN_RXFIFO_WARNING          (6U)\n/* @brief Rx FIFO overflow flag shift */\n#define FEATURE_CAN_RXFIFO_OVERFLOW         (7U)\n/* @brief The list contains definitions of the FD feature support on all instances */\n#define FEATURE_CAN_INSTANCES_HAS_FD        {true, false, false}\n/* @brief Has Flexible Data Rate for CAN0 */\n#define FEATURE_CAN0_HAS_FD                 (1)\n/* @brief Has Flexible Data Rate for CAN1 */\n#define FEATURE_CAN1_HAS_FD                 (0)\n/* @brief Has Flexible Data Rate for CAN2 */\n#define FEATURE_CAN2_HAS_FD                 (0)\n/* @brief Maximum number of Message Buffers supported for payload size 8 for CAN0 */\n#define FEATURE_CAN0_MAX_MB_NUM             (32U)\n/* @brief Maximum number of Message Buffers supported for payload size 8 for CAN1 */\n#define FEATURE_CAN1_MAX_MB_NUM             (16U)\n/* @brief Maximum number of Message Buffers supported for payload size 8 for CAN2 */\n#define FEATURE_CAN2_MAX_MB_NUM             (16U)\n/* @brief Has PE clock source select (bit field CAN_CTRL1[CLKSRC]). */\n#define FEATURE_CAN_HAS_PE_CLKSRC_SELECT    (1)\n/* @brief Has DMA enable (bit field MCR[DMA]). */\n#define FEATURE_CAN_HAS_DMA_ENABLE          (1)\n/* @brief Maximum number of Message Buffers supported for payload size 8 for any of the CAN instances */\n#define FEATURE_CAN_MAX_MB_NUM              (32U)\n/* @brief Maximum number of Message Buffers supported for payload size 8 for any of the CAN instances */\n#define FEATURE_CAN_MAX_MB_NUM_ARRAY        { FEATURE_CAN0_MAX_MB_NUM, \\\n                                              FEATURE_CAN1_MAX_MB_NUM, \\\n                                              FEATURE_CAN2_MAX_MB_NUM }\n/* @brief Has Pretending Networking mode */\n#define FEATURE_CAN_HAS_PRETENDED_NETWORKING    (1)\n/* @brief Has Stuff Bit Count Enable Bit */\n#define FEATURE_CAN_HAS_STFCNTEN_ENABLE         (0)\n/* @brief Has ISO CAN FD Enable Bit */\n#define FEATURE_CAN_HAS_ISOCANFDEN_ENABLE       (1)\n/* @brief Has Message Buffer Data Size Region 1 */\n#define FEATURE_CAN_HAS_MBDSR1                  (0)\n/* @brief Has Message Buffer Data Size Region 2 */\n#define FEATURE_CAN_HAS_MBDSR2                  (0)\n/* @brief DMA hardware requests for all FlexCAN instances */\n#define FEATURE_CAN_EDMA_REQUESTS              { EDMA_REQ_FLEXCAN0, \\\n                                                 EDMA_REQ_FLEXCAN1, \\\n                                                 EDMA_REQ_FLEXCAN2 }\n\n\n/* @brief Maximum number of Message Buffers IRQs */\n#define FEATURE_CAN_MB_IRQS_MAX_COUNT       (2U)\n/* @brief Message Buffers IRQs */\n#define FEATURE_CAN_MB_IRQS                 { CAN_ORed_0_15_MB_IRQS, \\\n                                              CAN_ORed_16_31_MB_IRQS }\n/* @brief Has Wake Up Irq channels (CAN_Wake_Up_IRQS_CH_COUNT > 0u) */\n#define FEATURE_CAN_HAS_WAKE_UP_IRQ         (1)\n/* @brief Has Self Wake Up mode */\n#define FEATURE_CAN_HAS_SELF_WAKE_UP        (0)\n/* @brief Has Flexible Data Rate */\n#define FEATURE_CAN_HAS_FD                  (1)\n/* @brief Clock name for the PE oscillator clock source */\n#define FEATURE_CAN_PE_OSC_CLK_NAME         SOSC_CLK\n/* @bried FlexCAN has Detection And Correction of Memory Errors */\n#define FEATURE_CAN_HAS_MEM_ERR_DET\t\t\t(0)\n\n/* LPUART module features */\n\n/* @brief Has extended data register ED. */\n#define FEATURE_LPUART_HAS_EXTENDED_DATA_REGISTER_FLAGS (1)\n/* @brief Hardware flow control (RTS, CTS) is supported. */\n#define FEATURE_LPUART_HAS_MODEM_SUPPORT (1)\n/* @brief Baud rate oversampling is available. */\n#define FEATURE_LPUART_HAS_BAUD_RATE_OVER_SAMPLING_SUPPORT (1)\n/* @brief Baud rate oversampling is available. */\n#define FEATURE_LPUART_HAS_BOTH_EDGE_SAMPLING_SUPPORT (1)\n/* @brief Capacity (number of entries) of the transmit/receive FIFO (or zero if no FIFO is available). */\n#define FEATURE_LPUART_FIFO_SIZE (4U)\n/* @brief Supports two match addresses to filter incoming frames. */\n#define FEATURE_LPUART_HAS_ADDRESS_MATCHING (1)\n/* @brief Has transmitter/receiver DMA enable bits. */\n#define FEATURE_LPUART_HAS_DMA_ENABLE (1)\n/* @brief Flag clearance mask for STAT register. */\n#define FEATURE_LPUART_STAT_REG_FLAGS_MASK (0xC01FC000U)\n/* @brief Flag clearance mask for FIFO register. */\n#define FEATURE_LPUART_FIFO_REG_FLAGS_MASK (0x00030000U)\n/* @brief Reset mask for FIFO register. */\n#define FEATURE_LPUART_FIFO_RESET_MASK (0x0003C000U)\n/* @brief Default oversampling ratio. */\n#define FEATURE_LPUART_DEFAULT_OSR (0x0FUL)\n/* @brief Default baud rate modulo divisor. */\n#define FEATURE_LPUART_DEFAULT_SBR (0x04UL)\n/* @brief Clock names for LPUART. */\n#define LPUART_CLOCK_NAMES {LPUART0_CLK, LPUART1_CLK, LPUART2_CLK}\n\n/* FlexIO module features */\n\n/* @brief Define the maximum number of shifters for any FlexIO instance. */\n#define FEATURE_FLEXIO_MAX_SHIFTER_COUNT  (4U)\n/* @brief Define DMA request names for Flexio. */\n#define FEATURE_FLEXIO_DMA_REQ_0    EDMA_REQ_FLEXIO_SHIFTER0\n#define FEATURE_FLEXIO_DMA_REQ_1    EDMA_REQ_FLEXIO_SHIFTER1\n#define FEATURE_FLEXIO_DMA_REQ_2    EDMA_REQ_FLEXIO_SHIFTER2\n#define FEATURE_FLEXIO_DMA_REQ_3    EDMA_REQ_FLEXIO_SHIFTER3\n\n/* LPSPI module features */\n\n/* @brief DMA instance used for LPSPI module */\n#define LPSPI_DMA_INSTANCE 0U\n\n/* LPI2C module features */\n\n/* @brief DMA instance used for LPI2C module */\n#define LPI2C_DMA_INSTANCE 0U\n\n/* @brief EDMA requests for LPI2C module. */\n#define LPI2C_EDMA_REQ                           {{(uint8_t)EDMA_REQ_LPI2C0_TX, (uint8_t)EDMA_REQ_LPI2C0_RX}}\n/* @brief PCC clocks for LPI2C module. */\n#define LPI2C_PCC_CLOCKS                         {LPI2C0_CLK}\n\n/* Interrupt module features */\n\n/* @brief Lowest interrupt request number. */\n#define FEATURE_INTERRUPT_IRQ_MIN         (NonMaskableInt_IRQn)\n/* @brief Highest interrupt request number. */\n#define FEATURE_INTERRUPT_IRQ_MAX         (FTM3_Ovf_Reload_IRQn)\n/**< Number of priority bits implemented in the NVIC */\n#define FEATURE_NVIC_PRIO_BITS            (4U)\n/* @brief Has software interrupt. */\n#define FEATURE_INTERRUPT_HAS_SOFTWARE_IRQ  (0u)\n/* @brief Has pending interrupt state. */\n#define FEATURE_INTERRUPT_HAS_PENDING_STATE (1u)\n/* @brief Has active interrupt state. */\n#define FEATURE_INTERRUPT_HAS_ACTIVE_STATE  (1u)\n/* @brief Multicore support for interrupts */\n#define FEATURE_INTERRUPT_MULTICORE_SUPPORT  (0u)\n/* @brief Registers in which the start of interrupt vector table needs to be configured */\n#define FEATURE_INTERRUPT_INT_VECTORS {&S32_SCB->VTOR}\n\n\n/* System Control Block module features */\n\n/* @brief VECTKEY value so that AIRCR register write is not ignored. */\n#define FEATURE_SCB_VECTKEY               (0x05FAU)\n\n\n/* SMC module features */\n\n/* @brief Has stop option (register bit STOPCTRL[STOPO]). */\n#define FEATURE_SMC_HAS_STOPO (1U)\n/* @brief Has partial stop option (register bit STOPCTRL[PSTOPO]). */\n#define FEATURE_SMC_HAS_PSTOPO (0U)\n/* @brief Has WAIT and VLPW options. */\n#define FEATURE_SMC_HAS_WAIT_VLPW (0U)\n/* @brief Has high speed run mode (register bit PMPROT[AHSRUN]). */\n#define FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE (1U)\n/* @brief Value of SPLL source clock in the SCG_HCCR register */\n#define FEATURE_SCG_SPLL_VALUE (6U)\n/* RCM module feature */\n\n/* @brief Has existence of CMU loss of clock as reset source */\n#define FEATURE_RCM_HAS_EXISTENCE_CMU_LOSS_OF_CLOCK (0)\n/* @brief Has CMU loss of clock as reset source */\n#define FEATURE_RCM_HAS_CMU_LOSS_OF_CLOCK (0)\n/* @brief Has sticky CMU loss of clock as reset source */\n#define FEATURE_RCM_HAS_STICKY_CMU_LOSS_OF_CLOCK (0)\n\n/* MPU module features */\n\n/* @brief Specifies hardware revision level. */\n#define FEATURE_MPU_HARDWARE_REVISION_LEVEL   (1U)\n/* @brief Has process identifier support. */\n#define FEATURE_MPU_HAS_PROCESS_IDENTIFIER    (1U)\n/* @brief The number of master has process identifier. */\n#define FEATURE_MPU_NUM_MASTER_HAS_PROCESS_IDENTIFIER    (2U)\n/* @brief Specifies total number of bus masters. */\n#define FEATURE_MPU_MASTER_COUNT              (3U)\n/* @brief Specifies maximum number of masters which have separated\nprivilege rights for user and supervisor mode accesses (e.g. master0~3 in S32K14x).\n*/\n#define FEATURE_MPU_MAX_LOW_MASTER_NUMBER     (3U)\n/* @brief Specifies maximum number of masters which have only\nread and write permissions (e.g. master4~7 in S32K14x).\n*/\n#define FEATURE_MPU_MAX_HIGH_MASTER_NUMBER    (7U)\n\n/* @brief Specifies number of set access control right bits for\n   masters which have separated privilege rights for user and\n   supervisor mode accesses (e.g. master0~3 in S32K14x).\n*/\n#define FEATURE_MPU_LOW_MASTER_CONTROL_WIDTH  (6U)\n/* @brief Specifies number of set access control right bits for\n   masters which have only read and write permissions(e.g. master4~7 in S32K14x).\n*/\n#define FEATURE_MPU_HIGH_MASTER_CONTROL_WIDTH (2U)\n\n/* @brief The MPU Logical Bus Master Number for core bus master. */\n#define FEATURE_MPU_MASTER_CORE               (0U)\n/* @brief The MPU Logical Bus Master Number for Debugger master. */\n#define FEATURE_MPU_MASTER_DEBUGGER           (1U)\n/* @brief The MPU Logical Bus Master Number for DMA master. */\n#define FEATURE_MPU_MASTER_DMA                (2U)\n/* @brief Specifies master number. */\n#define FEATURE_MPU_MASTER                        \\\n{                                                 \\\n    FEATURE_MPU_MASTER_CORE,     /*!< CORE */     \\\n    FEATURE_MPU_MASTER_DEBUGGER, /*!< DEBUGGER */ \\\n    FEATURE_MPU_MASTER_DMA,      /*!< DMA */      \\\n}\n\n/* @brief Specifies total number of slave ports. */\n#define FEATURE_MPU_SLAVE_COUNT               (4U)\n/* @brief The MPU Slave Port Assignment for Flash Controller and boot ROM. */\n#define FEATURE_MPU_SLAVE_FLASH_BOOTROM       (0U)\n/* @brief The MPU Slave Port Assignment for SRAM back door. */\n#define FEATURE_MPU_SLAVE_SRAM_BACKDOOR       (1U)\n/* @brief The MPU Slave Port Assignment for SRAM_L front door. */\n#define FEATURE_MPU_SLAVE_SRAM_L_FRONTDOOR    (2U)\n/* @brief The MPU Slave Port Assignment for SRAM_U front door. */\n#define FEATURE_MPU_SLAVE_SRAM_U_FRONTDOOR    (3U)\n/* @brief The MPU Slave Port mask. */\n#define FEATURE_MPU_SLAVE_MASK                (0xF0000000U)\n#define FEATURE_MPU_SLAVE_SHIFT               (28u)\n#define FEATURE_MPU_SLAVE_WIDTH               (4u)\n#define FEATURE_MPU_SLAVE(x)                  (((uint32_t)(((uint32_t)(x))<<FEATURE_MPU_SLAVE_SHIFT))&FEATURE_MPU_SLAVE_MASK)\n\n/* WDOG module features */\n\n/* @brief The 32-bit value used for unlocking the WDOG. */\n#define FEATURE_WDOG_UNLOCK_VALUE                       (0xD928C520U)\n/* @brief The 32-bit value used for resetting the WDOG counter. */\n#define FEATURE_WDOG_TRIGGER_VALUE                      (0xB480A602U)\n/* @brief The reset value of the timeout register. */\n#define FEATURE_WDOG_TO_RESET_VALUE                     (0x400U)\n/* @brief The value minimum of the timeout register. */\n#define FEATURE_WDOG_MINIMUM_TIMEOUT_VALUE              (0x0U)\n/* @brief The reset value of the window register. */\n#define FEATURE_WDOG_WIN_RESET_VALUE                    (0x0U)\n/* @brief The mask of the reserved bit in the CS register. */\n#define FEATURE_WDOG_CS_RESERVED_MASK                   (0x2000U)\n/* @brief The value used to set WDOG source clock from LPO. */\n#define FEATURE_WDOG_CLK_FROM_LPO                       (0x1UL)\n/* @brief The first 16-bit value used for unlocking the WDOG. */\n#define FEATURE_WDOG_UNLOCK16_FIRST_VALUE               (0xC520U)\n/* @brief The second 16-bit value used for unlocking the WDOG. */\n#define FEATURE_WDOG_UNLOCK16_SECOND_VALUE              (0xD928U)\n/* @brief The first 16-bit value used for resetting the WDOG counter. */\n#define FEATURE_WDOG_TRIGGER16_FIRST_VALUE              (0xA602U)\n/* @brief The second 16-bit value used for resetting the WDOG counter. */\n#define FEATURE_WDOG_TRIGGER16_SECOND_VALUE             (0xB480U)\n/* @brief Default reset value of the CS register. */\n#define FEATURE_WDOG_CS_RESET_VALUE                     (0x2520U)\n\n/* CRC module features */\n\n/* @brief CRC module use for S32K. */\n#define FEATURE_CRC_DRIVER_SOFT_POLYNOMIAL\n/* @brief Default CRC bit width */\n#define FEATURE_CRC_DEFAULT_WIDTH               CRC_BITS_16\n/* @brief Default CRC read transpose */\n#define FEATURE_CRC_DEFAULT_READ_TRANSPOSE      CRC_TRANSPOSE_NONE\n/* @brief Default CRC write transpose */\n#define FEATURE_CRC_DEFAULT_WRITE_TRANSPOSE     CRC_TRANSPOSE_NONE\n/* @brief Default polynomial 0x1021U */\n#define FEATURE_CRC_DEFAULT_POLYNOMIAL          (0x1021U)\n/* @brief Default seed value is 0xFFFFU */\n#define FEATURE_CRC_DEFAULT_SEED                (0xFFFFU)\n\n/* DMA module features */\n\n/* @brief Number of DMA channels. */\n#define FEATURE_DMA_CHANNELS (16U)\n/* @brief Number of DMA virtual channels. */\n#define FEATURE_DMA_VIRTUAL_CHANNELS (FEATURE_DMA_CHANNELS * DMA_INSTANCE_COUNT)\n/* @brief Number of DMA interrupt lines. */\n#define FEATURE_DMA_CHANNELS_INTERRUPT_LINES (16U)\n/* @brief Number of DMA virtual interrupt lines. */\n#define FEATURE_DMA_VIRTUAL_CHANNELS_INTERRUPT_LINES ((uint32_t)FEATURE_DMA_CHANNELS_INTERRUPT_LINES * (uint32_t)DMA_INSTANCE_COUNT)\n/* @brief Number of DMA error interrupt lines. */\n#define FEATURE_DMA_ERROR_INTERRUPT_LINES (1U)\n/* @brief Number of DMA virtual error interrupt lines. */\n#define FEATURE_DMA_VIRTUAL_ERROR_INTERRUPT_LINES ((uint32_t)FEATURE_DMA_ERROR_INTERRUPT_LINES * (uint32_t)DMA_INSTANCE_COUNT)\n/* @brief DMA module has error interrupt. */\n#define FEATURE_DMA_HAS_ERROR_IRQ\n/* @brief DMA module separate interrupt lines for each channel */\n#define FEATURE_DMA_SEPARATE_IRQ_LINES_PER_CHN\n/* @brief Conversion from channel index to DCHPRI index. */\n#define FEATURE_DMA_CHN_TO_DCHPRI_INDEX(x) ((x) ^ 3U)\n/* @brief DMA channel groups count. */\n#define FEATURE_DMA_CHANNEL_GROUP_COUNT (1U)\n/* @brief Clock name for DMA */\n#define FEATURE_DMA_CLOCK_NAMES {SIM_DMA_CLK}\n/* @brief DMA channel width based on number of TCDs: 2^N, N=4,5,... */\n#define FEATURE_DMA_CH_WIDTH (4U)\n/* @brief DMA channel to instance */\n#define FEATURE_DMA_VCH_TO_INSTANCE(x) \t((x) >> (uint32_t)FEATURE_DMA_CH_WIDTH)\n/* @brief DMA virtual channel to channel */\n#define FEATURE_DMA_VCH_TO_CH(x)        ((x) & ((uint32_t)FEATURE_DMA_CHANNELS - 1U))\n/* @brief DMA supports the following particular transfer size: */\n#define FEATURE_DMA_TRANSFER_SIZE_16B\n#define FEATURE_DMA_TRANSFER_SIZE_32B\n\n/* DMAMUX module features */\n\n/* @brief DMAMUX peripheral is available in silicon. */\n#define FEATURE_DMAMUX_AVAILABLE\n/* @brief Number of DMA channels. */\n#define FEATURE_DMAMUX_CHANNELS (16U)\n/* @brief Has the periodic trigger capability */\n#define FEATURE_DMAMUX_HAS_TRIG (1)\n/* @brief Conversion from request source to the actual DMAMUX channel */\n#define FEATURE_DMAMUX_REQ_SRC_TO_CH(x) (x)\n/* @brief Mapping between request source and DMAMUX instance */\n#define FEATURE_DMAMUX_REQ_SRC_TO_INSTANCE(x) (0U)\n/* @brief Conversion from eDMA channel index to DMAMUX channel. */\n#define FEATURE_DMAMUX_DMA_CH_TO_CH(x) (x)\n/* @brief Conversion from DMAMUX channel DMAMUX register index. */\n#define FEATURE_DMAMUX_CHN_REG_INDEX(x) (x)\n/* @brief Clock names for DMAMUX. */\n#define FEATURE_DMAMUX_CLOCK_NAMES {DMAMUX0_CLK}\n/*!\n * @brief Structure for the DMA hardware request\n *\n * Defines the structure for the DMA hardware request collections. The user can configure the\n * hardware request into DMAMUX to trigger the DMA transfer accordingly. The index\n * of the hardware request varies according  to the to SoC.\n */\n\ntypedef enum {\n    EDMA_REQ_DISABLED = 0U,\n    EDMA_REQ_LPUART0_RX = 2U,\n    EDMA_REQ_LPUART0_TX = 3U,\n    EDMA_REQ_LPUART1_RX = 4U,\n    EDMA_REQ_LPUART1_TX = 5U,\n    EDMA_REQ_LPUART2_RX = 6U,\n    EDMA_REQ_LPUART2_TX = 7U,\n    EDMA_REQ_FLEXIO_SHIFTER0 = 10U,\n    EDMA_REQ_FLEXIO_SHIFTER1 = 11U,\n    EDMA_REQ_FLEXIO_SHIFTER2 = 12U,\n    EDMA_REQ_FLEXIO_SHIFTER3 = 13U,\n    EDMA_REQ_LPSPI0_RX = 14U,\n    EDMA_REQ_LPSPI0_TX = 15U,\n    EDMA_REQ_LPSPI1_RX = 16U,\n    EDMA_REQ_LPSPI1_TX = 17U,\n    EDMA_REQ_LPSPI2_RX = 18U,\n    EDMA_REQ_LPSPI2_TX = 19U,\n    EDMA_REQ_FTM1_CHANNEL_0 = 20U,\n    EDMA_REQ_FTM1_CHANNEL_1 = 21U,\n    EDMA_REQ_FTM1_CHANNEL_2 = 22U,\n    EDMA_REQ_FTM1_CHANNEL_3 = 23U,\n    EDMA_REQ_FTM1_CHANNEL_4 = 24U,\n    EDMA_REQ_FTM1_CHANNEL_5 = 25U,\n    EDMA_REQ_FTM1_CHANNEL_6 = 26U,\n    EDMA_REQ_FTM1_CHANNEL_7 = 27U,\n    EDMA_REQ_FTM2_CHANNEL_0 = 28U,\n    EDMA_REQ_FTM2_CHANNEL_1 = 29U,\n    EDMA_REQ_FTM2_CHANNEL_2 = 30U,\n    EDMA_REQ_FTM2_CHANNEL_3 = 31U,\n    EDMA_REQ_FTM2_CHANNEL_4 = 32U,\n    EDMA_REQ_FTM2_CHANNEL_5 = 33U,\n    EDMA_REQ_FTM2_CHANNEL_6 = 34U,\n    EDMA_REQ_FTM2_CHANNEL_7 = 35U,\n    EDMA_REQ_FTM0_OR_CH0_CH7 = 36U,\n    EDMA_REQ_FTM3_OR_CH0_CH7 = 37U,\n    EDMA_REQ_ADC0 = 42U,\n    EDMA_REQ_ADC1 = 43U,\n    EDMA_REQ_LPI2C0_RX = 44U,\n    EDMA_REQ_LPI2C0_TX = 45U,\n    EDMA_REQ_PDB0 = 46U,\n    EDMA_REQ_PDB1 = 47U,\n    EDMA_REQ_CMP0 = 48U,\n    EDMA_REQ_PORTA = 49U,\n    EDMA_REQ_PORTB = 50U,\n    EDMA_REQ_PORTC = 51U,\n    EDMA_REQ_PORTD = 52U,\n    EDMA_REQ_PORTE = 53U,\n    EDMA_REQ_FLEXCAN0 = 54U,\n    EDMA_REQ_FLEXCAN1 = 55U,\n    EDMA_REQ_FLEXCAN2 = 56U,\n    EDMA_REQ_LPTMR0 = 59U,\n    EDMA_REQ_DMAMUX_ALWAYS_ENABLED0 = 62U,\n    EDMA_REQ_DMAMUX_ALWAYS_ENABLED1 = 63U\n} dma_request_source_t;\n\n/* LPI2C module features */\n\n/* @brief Disable high-speed and ultra-fast operating modes for S32K14x. */\n#define LPI2C_HAS_FAST_PLUS_MODE (0U)\n#define LPI2C_HAS_HIGH_SPEED_MODE (0U)\n#define LPI2C_HAS_ULTRA_FAST_MODE (0U)\n\n/* FTM module features */\n/* @brief Number of PWM channels */\n#define FEATURE_FTM_CHANNEL_COUNT               (8U)\n/* @brief Number of fault channels */\n#define FTM_FEATURE_FAULT_CHANNELS              (4U)\n/* @brief Width of control channel */\n#define FTM_FEATURE_COMBINE_CHAN_CTRL_WIDTH     (8U)\n/* @brief Output channel offset */\n#define FTM_FEATURE_OUTPUT_CHANNEL_OFFSET       (16U)\n/* @brief Max counter value */\n#define FTM_FEATURE_CNT_MAX_VALUE_U32           (0x0000FFFFU)\n/* @brief Input capture for single shot */\n#define FTM_FEATURE_INPUT_CAPTURE_SINGLE_SHOT   (2U)\n/* @brief Dithering has supported on the generated PWM signals */\n#define FEATURE_FTM_HAS_SUPPORTED_DITHERING     (0U)\n/*! @brief Number of interrupt vector for channels of the FTM module. */\n#define FEATURE_FTM_HAS_NUM_IRQS_CHANS          (4U)\n\n/* EWM module features */\n\n/* @brief First byte of the EWM Service key        */\n#define FEATURE_EWM_KEY_FIRST_BYTE      (0xB4U)\n/* @brief Second byte of the EWM Service key       */\n#define FEATURE_EWM_KEY_SECOND_BYTE     (0x2CU)\n/* @brief EWM Compare High register maximum value  */\n#define FEATURE_EWM_CMPH_MAX_VALUE      (0xFEU)\n/* @brief EWM Compare Low register minimum value  */\n#define FEATURE_EWM_CMPL_MIN_VALUE      (0x00U)\n\n/* @brief Supports high speed run mode. */\n#define FEATURE_HAS_HIGH_SPEED_RUN_MODE  (1U)\n/* @brief Supports SPLL clock source. */\n#define FEATURE_HAS_SPLL_CLK             (1U)\n/* @brief Supports LPO peripheral clock source. */\n#define FEATURE_HAS_LPO_PERIPHERAL_CLOCK_SOURCE (0U)\n\n/*! @brief Clock names. */\ntypedef enum {\n\n    /* Main clocks */\n    CORE_CLK                     = 0u,       /*!< Core clock                     */\n    BUS_CLK                      = 1u,       /*!< Bus clock                      */\n    SLOW_CLK                     = 2u,       /*!< Slow clock                     */\n    CLKOUT_CLK                   = 3u,       /*!< CLKOUT clock                   */\n\n    /* Other internal clocks used by peripherals. */\n    SIRC_CLK                     = 4u,       /*!< SIRC clock                     */\n    FIRC_CLK                     = 5u,       /*!< FIRC clock                     */\n    SOSC_CLK                     = 6u,       /*!< SOSC clock                     */\n    SPLL_CLK                     = 7u,       /*!< SPLL clock                     */\n    RTC_CLKIN_CLK                = 8u,       /*!< RTC_CLKIN clock                */\n    SCG_CLKOUT_CLK               = 9u,       /*!< SCG CLK_OUT clock              */\n\n    SIRCDIV1_CLK                 = 10u,      /*!< SIRCDIV1 functional clock      */\n    SIRCDIV2_CLK                 = 11u,      /*!< SIRCDIV2 functional clock      */\n    FIRCDIV1_CLK                 = 12u,      /*!< FIRCDIV1 functional clock      */\n    FIRCDIV2_CLK                 = 13u,      /*!< FIRCDIV2 functional clock      */\n    SOSCDIV1_CLK                 = 14u,      /*!< SOSCDIV1 functional clock      */\n    SOSCDIV2_CLK                 = 15u,      /*!< SOSCDIV2 functional clock      */\n    SPLLDIV1_CLK                 = 16u,      /*!< SPLLDIV1 functional clock      */\n    SPLLDIV2_CLK                 = 17u,      /*!< SPLLDIV2 functional clock      */\n\n    SCG_END_OF_CLOCKS            = 18u,      /*!< End of SCG clocks              */\n\n    /* SIM clocks */\n    SIM_FTM0_CLOCKSEL            = 21u,      /*!< FTM0 External Clock Pin Select */\n    SIM_FTM1_CLOCKSEL            = 22u,      /*!< FTM1 External Clock Pin Select */\n    SIM_FTM2_CLOCKSEL            = 23u,      /*!< FTM2 External Clock Pin Select */\n    SIM_FTM3_CLOCKSEL            = 24u,      /*!< FTM3 External Clock Pin Select */\n    SIM_CLKOUTSELL               = 25u,      /*!< CLKOUT Select                  */\n    SIM_RTCCLK_CLK               = 26u,      /*!< RTCCLK clock                   */\n    SIM_LPO_CLK                  = 27u,      /*!< LPO clock                      */\n    SIM_LPO_1K_CLK               = 28u,      /*!< LPO 1KHz clock                 */\n    SIM_LPO_32K_CLK              = 29u,      /*!< LPO 32KHz clock                */\n    SIM_LPO_128K_CLK             = 30u,      /*!< LPO 128KHz clock               */\n    SIM_EIM_CLK                  = 31u,      /*!< EIM clock source               */\n    SIM_ERM_CLK                  = 32u,      /*!< ERM clock source               */\n    SIM_DMA_CLK                  = 33u,      /*!< DMA clock source               */\n    SIM_MPU_CLK                  = 34u,      /*!< MPU clock source               */\n    SIM_MSCM_CLK                 = 35u,      /*!< MSCM clock source              */\n    SIM_END_OF_CLOCKS            = 36u,      /*!< End of SIM clocks              */\n\n    /* PCC clocks */\n    CMP0_CLK                     = 41u,      /*!< CMP0 clock source              */\n    CRC0_CLK                     = 42u,      /*!< CRC0 clock source              */\n    DMAMUX0_CLK                  = 43u,      /*!< DMAMUX0 clock source           */\n    EWM0_CLK                     = 44u,      /*!< EWM0 clock source              */\n    PORTA_CLK                    = 45u,      /*!< PORTA clock source             */\n    PORTB_CLK                    = 46u,      /*!< PORTB clock source             */\n    PORTC_CLK                    = 47u,      /*!< PORTC clock source             */\n    PORTD_CLK                    = 48u,      /*!< PORTD clock source             */\n    PORTE_CLK                    = 49u,      /*!< PORTE clock source             */\n    RTC0_CLK                     = 50u,      /*!< RTC0 clock source              */\n    PCC_END_OF_BUS_CLOCKS        = 51u,      /*!< End of BUS clocks              */\n    FlexCAN0_CLK                 = 52u,      /*!< FlexCAN0 clock source          */\n    FlexCAN1_CLK                 = 53u,      /*!< FlexCAN1 clock source          */\n    FlexCAN2_CLK                 = 54u,      /*!< FlexCAN2 clock source          */\n    PDB0_CLK                     = 55u,      /*!< PDB0 clock source              */\n    PDB1_CLK                     = 56u,      /*!< PDB1 clock source              */\n    PCC_END_OF_SYS_CLOCKS        = 57u,      /*!< End of SYS clocks              */\n    FTFC0_CLK                    = 58u,      /*!< FTFC0 clock source             */\n    PCC_END_OF_SLOW_CLOCKS       = 59u,      /*!< End of SLOW clocks             */\n    FTM0_CLK                     = 60u,      /*!< FTM0 clock source              */\n    FTM1_CLK                     = 61u,      /*!< FTM1 clock source              */\n    FTM2_CLK                     = 62u,      /*!< FTM2 clock source              */\n    FTM3_CLK                     = 63u,      /*!< FTM3 clock source              */\n    PCC_END_OF_ASYNCH_DIV1_CLOCKS= 64u,      /*!< End of ASYNCH DIV1 clocks      */\n    ADC0_CLK                     = 65u,      /*!< ADC0 clock source              */\n    ADC1_CLK                     = 66u,      /*!< ADC1 clock source              */\n    FLEXIO0_CLK                  = 67u,      /*!< FLEXIO0 clock source           */\n    LPI2C0_CLK                   = 68u,      /*!< LPI2C0 clock source            */\n    LPIT0_CLK                    = 69u,      /*!< LPIT0 clock source             */\n    LPSPI0_CLK                   = 70u,      /*!< LPSPI0 clock source            */\n    LPSPI1_CLK                   = 71u,      /*!< LPSPI1 clock source            */\n    LPSPI2_CLK                   = 72u,      /*!< LPSPI2 clock source            */\n    LPTMR0_CLK                   = 73u,      /*!< LPTMR0 clock source            */\n    LPUART0_CLK                  = 74u,      /*!< LPUART0 clock source           */\n    LPUART1_CLK                  = 75u,      /*!< LPUART1 clock source           */\n    LPUART2_CLK                  = 76u,      /*!< LPUART2 clock source           */\n    PCC_END_OF_ASYNCH_DIV2_CLOCKS= 77u,      /*!< End of ASYNCH DIV2 clocks      */\n    PCC_END_OF_CLOCKS            = 78u,      /*!< End of PCC clocks              */\n    CLOCK_NAME_COUNT             = 79u,      /*!< The total number of entries    */\n} clock_names_t;\n\n#define PCC_INVALID_INDEX  0\n\n  /*! @brief PCC clock name mappings\n   *  Mappings between clock names and peripheral clock control indexes.\n   *  If there is no peripheral clock control index for a clock name,\n   *  then the corresponding value is PCC_INVALID_INDEX.\n   */\n#define PCC_CLOCK_NAME_MAPPINGS \\\n{                                                                                \\\nPCC_INVALID_INDEX,                  /*!< Core clock                      0  */   \\\nPCC_INVALID_INDEX,                  /*!< Bus clock                       1  */   \\\nPCC_INVALID_INDEX,                  /*!< Slow clock                      2  */   \\\nPCC_INVALID_INDEX,                  /*!< CLKOUT clock                    3  */   \\\nPCC_INVALID_INDEX,                  /*!< SIRC clock                      4  */   \\\nPCC_INVALID_INDEX,                  /*!< FIRC clock                      5  */   \\\nPCC_INVALID_INDEX,                  /*!< SOSC clock                      6  */   \\\nPCC_INVALID_INDEX,                  /*!< SPLL clock                      7  */   \\\nPCC_INVALID_INDEX,                  /*!< RTC_CLKIN clock                 8  */   \\\nPCC_INVALID_INDEX,                  /*!< SCG CLK_OUT clock               9  */   \\\nPCC_INVALID_INDEX,                  /*!< SIRCDIV1 functional clock       10 */   \\\nPCC_INVALID_INDEX,                  /*!< SIRCDIV2 functional clock       11 */   \\\nPCC_INVALID_INDEX,                  /*!< FIRCDIV1 functional clock       12 */   \\\nPCC_INVALID_INDEX,                  /*!< FIRCDIV2 functional clock       13 */   \\\nPCC_INVALID_INDEX,                  /*!< SOSCDIV1 functional clock       14 */   \\\nPCC_INVALID_INDEX,                  /*!< SOSCDIV2 functional clock       15 */   \\\nPCC_INVALID_INDEX,                  /*!< SPLLDIV1 functional clock       16 */   \\\nPCC_INVALID_INDEX,                  /*!< SPLLDIV2 functional clock       17 */   \\\nPCC_INVALID_INDEX,                  /*!< End of SCG clocks               18 */   \\\nPCC_INVALID_INDEX,                  /*!< No clock entry in clock_names_t 19 */   \\\nPCC_INVALID_INDEX,                  /*!< No clock entry in clock_names_t 20 */   \\\nPCC_INVALID_INDEX,                  /*!< FTM0 External Clock Pin Select  21 */   \\\nPCC_INVALID_INDEX,                  /*!< FTM1 External Clock Pin Select  22 */   \\\nPCC_INVALID_INDEX,                  /*!< FTM2 External Clock Pin Select  23 */   \\\nPCC_INVALID_INDEX,                  /*!< FTM3 External Clock Pin Select  24 */   \\\nPCC_INVALID_INDEX,                  /*!< CLKOUT Select                   25 */   \\\nPCC_INVALID_INDEX,                  /*!< CLK32K clock                    26 */   \\\nPCC_INVALID_INDEX,                  /*!< LPO clock                       27 */   \\\nPCC_INVALID_INDEX,                  /*!< LPO 1KHz clock                  28 */   \\\nPCC_INVALID_INDEX,                  /*!< LPO 32KHz clock                 29 */   \\\nPCC_INVALID_INDEX,                  /*!< LPO 128KHz clock                30 */   \\\nPCC_INVALID_INDEX,                  /*!< EIM clock source                31 */   \\\nPCC_INVALID_INDEX,                  /*!< ERM clock source                32 */   \\\nPCC_INVALID_INDEX,                  /*!< DMA clock source                33 */   \\\nPCC_INVALID_INDEX,                  /*!< MPU clock source                34 */   \\\nPCC_INVALID_INDEX,                  /*!< MSCM clock source               35 */   \\\nPCC_INVALID_INDEX,                  /*!< No clock entry in clock_names_t 36 */   \\\nPCC_INVALID_INDEX,                  /*!< No clock entry in clock_names_t 37 */   \\\nPCC_INVALID_INDEX,                  /*!< No clock entry in clock_names_t 38 */   \\\nPCC_INVALID_INDEX,                  /*!< No clock entry in clock_names_t 39 */   \\\nPCC_INVALID_INDEX,                  /*!< No clock entry in clock_names_t 40 */   \\\nPCC_CMP0_INDEX,                     /*!< CMP0 clock source               41 */   \\\nPCC_CRC_INDEX,                      /*!< CRC clock source                42 */   \\\nPCC_DMAMUX_INDEX,                   /*!< DMAMUX clock source             43 */   \\\nPCC_EWM_INDEX,                      /*!< EWM clock source                44 */   \\\nPCC_PORTA_INDEX,                    /*!< PORTA clock source              45 */   \\\nPCC_PORTB_INDEX,                    /*!< PORTB clock source              46 */   \\\nPCC_PORTC_INDEX,                    /*!< PORTC clock source              47 */   \\\nPCC_PORTD_INDEX,                    /*!< PORTD clock source              48 */   \\\nPCC_PORTE_INDEX,                    /*!< PORTE clock source              49 */   \\\nPCC_RTC_INDEX,                      /*!< RTC clock source                50 */   \\\nPCC_INVALID_INDEX,                  /*!< End of BUS clocks               51 */   \\\nPCC_FlexCAN0_INDEX,                 /*!< FlexCAN0 clock source           52 */   \\\nPCC_FlexCAN1_INDEX,                 /*!< FlexCAN1 clock source           53 */   \\\nPCC_FlexCAN2_INDEX,                 /*!< FlexCAN2 clock source           54 */   \\\nPCC_PDB0_INDEX,                     /*!< PDB0 clock source               55 */   \\\nPCC_PDB1_INDEX,                     /*!< PDB1 clock source               56 */   \\\nPCC_INVALID_INDEX,                  /*!< End of SYS clocks               57 */   \\\nPCC_FTFC_INDEX,                     /*!< FTFC clock source               58 */   \\\nPCC_INVALID_INDEX,                  /*!< End of SLOW clocks              59 */   \\\nPCC_FTM0_INDEX,                     /*!< FTM0 clock source               60 */   \\\nPCC_FTM1_INDEX,                     /*!< FTM1 clock source               61 */   \\\nPCC_FTM2_INDEX,                     /*!< FTM2 clock source               62 */   \\\nPCC_FTM3_INDEX,                     /*!< FTM3 clock source               63 */   \\\nPCC_INVALID_INDEX,                  /*!< End of ASYNCH DIV1 clocks       64 */   \\\nPCC_ADC0_INDEX,                     /*!< ADC0 clock source               65 */   \\\nPCC_ADC1_INDEX,                     /*!< ADC1 clock source               66 */   \\\nPCC_FlexIO_INDEX,                   /*!< FLEXIO clock source             67 */   \\\nPCC_LPI2C0_INDEX,                   /*!< LPI2C0 clock source             68 */   \\\nPCC_LPIT_INDEX,                     /*!< LPIT clock source               69 */   \\\nPCC_LPSPI0_INDEX,                   /*!< LPSPI0 clock source             70 */   \\\nPCC_LPSPI1_INDEX,                   /*!< LPSPI1 clock source             71 */   \\\nPCC_LPSPI2_INDEX,                   /*!< LPSPI2 clock source             72 */   \\\nPCC_LPTMR0_INDEX,                   /*!< LPTMR0 clock source             73 */   \\\nPCC_LPUART0_INDEX,                  /*!< LPUART0 clock source            74 */   \\\nPCC_LPUART1_INDEX,                  /*!< LPUART1 clock source            75 */   \\\nPCC_LPUART2_INDEX,                  /*!< LPUART2 clock source            76 */   \\\nPCC_INVALID_INDEX,                  /*!< End of ASYNCH DIV2 clocks       77 */   \\\nPCC_INVALID_INDEX,                  /*!< End of PCC clocks               78 */   \\\n}\n\n/*! @brief Peripheral instance features\n *  List of features that are supported by a peripheral instance\n */\n#define NO_PERIPHERAL_FEATURE                   (0U)         /* It's not a peripheral instance, there is no peripheral feature. */\n#define HAS_CLOCK_GATING_IN_SIM                 (1U << 0U)   /* Clock gating is implemented in SIM (it's not in PCC) */\n#define HAS_MULTIPLIER                          (1U << 1U)   /* Multiplier is implemented in PCC */\n#define HAS_DIVIDER                             (1U << 2U)   /* Divider is implemented in PCC */\n#define HAS_PROTOCOL_CLOCK_FROM_ASYNC1          (1U << 3U)   /* Functional clock source is provided by the first asynchronous clock. */\n#define HAS_PROTOCOL_CLOCK_FROM_ASYNC2          (1U << 4U)   /* Functional clock source is provided by the second asynchronous clock. */\n#define HAS_INT_CLOCK_FROM_BUS_CLOCK            (1U << 5U)   /* Interface clock is provided by the bus clock. */\n#define HAS_INT_CLOCK_FROM_SYS_CLOCK            (1U << 6U)   /* Interface clock is provided by the sys clock. */\n#define HAS_INT_CLOCK_FROM_SLOW_CLOCK           (1U << 7U)   /* Interface clock is provided by the slow clock. */\n\n/*! @brief Peripheral features.\n*  List of features for each clock name. If a clock name is not\n*  a peripheral, no feature is supported.\n*/\n#define PERIPHERAL_FEATURES \\\n{                                                                                                                                                \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< Core clock                      0  */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< Bus clock                       1  */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< Slow clock                      2  */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< CLKOUT clock                    3  */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< SIRC clock                      4  */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< FIRC clock                      5  */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< SOSC clock                      6  */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< SPLL clock                      7  */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< RTC_CLKIN clock                 8  */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< SCG CLK_OUT clock               9  */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< End of SCG clocks               10 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 11 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 12 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 13 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 14 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 15 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 16 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 17 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 18 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 19 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 20 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< FTM0 External Clock Pin Select  21 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< FTM1 External Clock Pin Select  22 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< FTM2 External Clock Pin Select  23 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< FTM3 External Clock Pin Select  24 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< CLKOUT Select                   25 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< CLK32K clock                    26 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< LPO clock                       27 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< LPO 1KHz clock                  28 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< LPO 32KHz clock                 29 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< LPO 128KHz clock                30 */   \\\n(HAS_CLOCK_GATING_IN_SIM | HAS_INT_CLOCK_FROM_SYS_CLOCK),                                           /*!< EIM clock source                31 */   \\\n(HAS_CLOCK_GATING_IN_SIM | HAS_INT_CLOCK_FROM_SYS_CLOCK),                                           /*!< ERM clock source                32 */   \\\n(HAS_CLOCK_GATING_IN_SIM | HAS_INT_CLOCK_FROM_SYS_CLOCK),                                           /*!< DMA clock source                33 */   \\\n(HAS_CLOCK_GATING_IN_SIM | HAS_INT_CLOCK_FROM_SYS_CLOCK),                                           /*!< MPU clock source                34 */   \\\n(HAS_CLOCK_GATING_IN_SIM | HAS_INT_CLOCK_FROM_SYS_CLOCK),                                           /*!< MSCM clock source               35 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 36 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 37 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 38 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 39 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< No clock entry in clock_names_t 40 */   \\\n(HAS_INT_CLOCK_FROM_BUS_CLOCK),                                                                     /*!< CMP0 clock source               41 */   \\\n(HAS_INT_CLOCK_FROM_BUS_CLOCK),                                                                     /*!< CRC clock source                42 */   \\\n(HAS_INT_CLOCK_FROM_BUS_CLOCK),                                                                     /*!< DMAMUX clock source             43 */   \\\n(HAS_INT_CLOCK_FROM_BUS_CLOCK),                                                                     /*!< EWM clock source                44 */   \\\n(HAS_INT_CLOCK_FROM_BUS_CLOCK),                                                                     /*!< PORTA clock source              45 */   \\\n(HAS_INT_CLOCK_FROM_BUS_CLOCK),                                                                     /*!< PORTB clock source              46 */   \\\n(HAS_INT_CLOCK_FROM_BUS_CLOCK),                                                                     /*!< PORTC clock source              47 */   \\\n(HAS_INT_CLOCK_FROM_BUS_CLOCK),                                                                     /*!< PORTD clock source              48 */   \\\n(HAS_INT_CLOCK_FROM_BUS_CLOCK),                                                                     /*!< PORTE clock source              49 */   \\\n(HAS_INT_CLOCK_FROM_BUS_CLOCK),                                                                     /*!< RTC clock source                50 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< End of BUS clocks               51 */   \\\n(HAS_INT_CLOCK_FROM_SYS_CLOCK),                                                                     /*!< FlexCAN0 clock source           52 */   \\\n(HAS_INT_CLOCK_FROM_SYS_CLOCK),                                                                     /*!< FlexCAN1 clock source           53 */   \\\n(HAS_INT_CLOCK_FROM_SYS_CLOCK),                                                                     /*!< FlexCAN2 clock source           54 */   \\\n(HAS_INT_CLOCK_FROM_SYS_CLOCK),                                                                     /*!< PDB0 clock source               55 */   \\\n(HAS_INT_CLOCK_FROM_SYS_CLOCK),                                                                     /*!< PDB1 clock source               56 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< End of SYS clocks               57 */   \\\n(HAS_INT_CLOCK_FROM_SLOW_CLOCK),                                                                    /*!< FTFC clock source               58 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< End of SLOW clocks              59 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC1 | HAS_INT_CLOCK_FROM_SYS_CLOCK),                                    /*!< FTM0 clock source               60 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC1 | HAS_INT_CLOCK_FROM_SYS_CLOCK),                                    /*!< FTM1 clock source               61 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC1 | HAS_INT_CLOCK_FROM_SYS_CLOCK),                                    /*!< FTM2 clock source               62 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC1 | HAS_INT_CLOCK_FROM_SYS_CLOCK),                                    /*!< FTM3 clock source               63 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< End of ASYNCH DIV1 clocks       64 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC2 | HAS_INT_CLOCK_FROM_BUS_CLOCK),                                    /*!< ADC0 clock source               65 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC2 | HAS_INT_CLOCK_FROM_BUS_CLOCK),                                    /*!< ADC1 clock source               66 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC2 | HAS_INT_CLOCK_FROM_BUS_CLOCK),                                    /*!< FLEXIO clock source             67 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC2 | HAS_INT_CLOCK_FROM_BUS_CLOCK),                                    /*!< LPI2C0 clock source             68 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC2 | HAS_INT_CLOCK_FROM_BUS_CLOCK),                                    /*!< LPIT clock source               69 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC2 | HAS_INT_CLOCK_FROM_BUS_CLOCK),                                    /*!< LPSPI0 clock source             70 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC2 | HAS_INT_CLOCK_FROM_BUS_CLOCK),                                    /*!< LPSPI1 clock source             71 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC2 | HAS_INT_CLOCK_FROM_BUS_CLOCK),                                    /*!< LPSPI2 clock source             72 */   \\\n(HAS_MULTIPLIER | HAS_DIVIDER | HAS_PROTOCOL_CLOCK_FROM_ASYNC2 | HAS_INT_CLOCK_FROM_BUS_CLOCK),     /*!< LPTMR0 clock source             73 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC2 | HAS_INT_CLOCK_FROM_BUS_CLOCK),                                    /*!< LPUART0 clock source            74 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC2 | HAS_INT_CLOCK_FROM_BUS_CLOCK),                                    /*!< LPUART1 clock source            75 */   \\\n(HAS_PROTOCOL_CLOCK_FROM_ASYNC2 | HAS_INT_CLOCK_FROM_BUS_CLOCK),                                    /*!< LPUART2 clock source            76 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< End of ASYNCH DIV2 clocks       77 */   \\\n(NO_PERIPHERAL_FEATURE),                                                                            /*!< End of PCC clocks               78 */   \\\n}\n\n/* Time to wait for SIRC to stabilize (number of\n * cycles when core runs at maximum speed - 112 MHz */\n#define SIRC_STABILIZATION_TIMEOUT 100U\n\n/* Time to wait for FIRC to stabilize (number of\n * cycles when core runs at maximum speed - 112 MHz */\n#define FIRC_STABILIZATION_TIMEOUT 100U\n\n/* Time to wait for SOSC to stabilize (number of\n * cycles when core runs at maximum speed - 112 MHz */\n#define SOSC_STABILIZATION_TIMEOUT 3205000U;\n\n/* Time to wait for SPLL to stabilize (number of\n * cycles when core runs at maximum speed - 112 MHz */\n#define SPLL_STABILIZATION_TIMEOUT 1000U;\n\n\n/*! @brief Temporary system clock source configurations.\n *         Each line represents the SYS(CORE), BUS and SLOW(FLASH) dividers\n *         for SIRC, FIRC, SOSC and SPLL clock sources.\n  *\n *          SYS_CLK  BUS_CLK  SLOW_CLK\n *  SIRC       *        *         *\n *  FIRC       *        *         *\n *  SOSC       *        *         *\n *  SPLL       *        *         *\n */\n#define TMP_SIRC_CLK   0U\n#define TMP_FIRC_CLK   1U\n#define TMP_SOSC_CLK   2U\n#define TMP_SPLL_CLK   3U\n\n#define TMP_SYS_DIV    0U\n#define TMP_BUS_DIV    1U\n#define TMP_SLOW_DIV   2U\n\n#define TMP_SYS_CLK_NO 4U\n#define TMP_SYS_DIV_NO 3U\n\n#define TMP_SYSTEM_CLOCK_CONFIGS                                                                                \\\n{  /*       SYS_CLK                    BUS_CLK                  SLOW_CLK      */                                \\\n{  SCG_SYSTEM_CLOCK_DIV_BY_1, SCG_SYSTEM_CLOCK_DIV_BY_1, SCG_SYSTEM_CLOCK_DIV_BY_2},  /*!< Dividers for SIRC */ \\\n{  SCG_SYSTEM_CLOCK_DIV_BY_1, SCG_SYSTEM_CLOCK_DIV_BY_2, SCG_SYSTEM_CLOCK_DIV_BY_4},  /*!< Dividers for FIRC */ \\\n{  SCG_SYSTEM_CLOCK_DIV_BY_1, SCG_SYSTEM_CLOCK_DIV_BY_2, SCG_SYSTEM_CLOCK_DIV_BY_2},  /*!< Dividers for SOSC */ \\\n{  SCG_SYSTEM_CLOCK_DIV_BY_3, SCG_SYSTEM_CLOCK_DIV_BY_2, SCG_SYSTEM_CLOCK_DIV_BY_2},  /*!< Dividers for SPLL */ \\\n}\n/* @brief template system clock configuration in VLPR mode*/\n#define FEATURE_VLPR_SYS_CLK SCG_SYSTEM_CLOCK_DIV_BY_2\n#define FEATURE_VLPR_BUS_CLK SCG_SYSTEM_CLOCK_DIV_BY_1\n#define FEATURE_VLPR_SLOW_CLK SCG_SYSTEM_CLOCK_DIV_BY_4\n\n/* Do not use the old names of the renamed symbols */\n/* #define DO_NOT_USE_DEPRECATED_SYMBOLS */\n\n/*! START !DO_NOT_USE_DEPRECATED_SYMBOLS\n *  These symbols have been renamed.\n *  The old names (deprecated symbols)\n *  are defined for backward compatibility.\n */\n#if !defined(DO_NOT_USE_DEPRECATED_SYMBOLS)\n#define    CORE_CLOCK               CORE_CLK\n#define    BUS_CLOCK                BUS_CLK\n#define    SLOW_CLOCK               SLOW_CLK\n#define    CLKOUT_CLOCK             CLKOUT_CLK\n#define    SIRC_CLOCK               SIRC_CLK\n#define    FIRC_CLOCK               FIRC_CLK\n#define    SOSC_CLOCK               SOSC_CLK\n#define    SPLL_CLOCK               SPLL_CLK\n#define    RTC_CLKIN_CLOCK          RTC_CLKIN_CLK\n#define    SCG_CLKOUT_CLOCK         SCG_CLKOUT_CLK\n#define    SIM_RTCCLK_CLOCK         SIM_RTCCLK_CLK\n#define    SIM_LPO_CLOCK            SIM_LPO_CLK\n#define    SIM_LPO_1K_CLOCK         SIM_LPO_1K_CLK\n#define    SIM_LPO_32K_CLOCK        SIM_LPO_32K_CLK\n#define    SIM_LPO_128K_CLOCK       SIM_LPO_128K_CLK\n#define    SIM_EIM_CLOCK            SIM_EIM_CLK\n#define    SIM_ERM_CLOCK            SIM_ERM_CLK\n#define    SIM_DMA_CLOCK            SIM_DMA_CLK\n#define    SIM_MPU_CLOCK            SIM_MPU_CLK\n#define    SIM_MSCM_CLOCK           SIM_MSCM_CLK\n#define    PCC_DMAMUX0_CLOCK        DMAMUX0_CLK\n#define    PCC_CRC0_CLOCK           CRC0_CLK\n#define    PCC_RTC0_CLOCK           RTC0_CLK\n#define    PCC_PORTA_CLOCK          PORTA_CLK\n#define    PCC_PORTB_CLOCK          PORTB_CLK\n#define    PCC_PORTC_CLOCK          PORTC_CLK\n#define    PCC_PORTD_CLOCK          PORTD_CLK\n#define    PCC_PORTE_CLOCK          PORTE_CLK\n#define    PCC_EWM0_CLOCK           EWM0_CLK\n#define    PCC_CMP0_CLOCK           CMP0_CLK\n#define    PCC_FlexCAN0_CLOCK       FlexCAN0_CLK\n#define    PCC_FlexCAN1_CLOCK       FlexCAN1_CLK\n#define    PCC_FlexCAN2_CLOCK       FlexCAN2_CLK\n#define    PCC_PDB1_CLOCK           PDB1_CLK\n#define    PCC_PDB0_CLOCK           PDB0_CLK\n#define    PCC_FTFC0_CLOCK          FTFC0_CLK\n#define    PCC_FTM0_CLOCK           FTM0_CLK\n#define    PCC_FTM1_CLOCK           FTM1_CLK\n#define    PCC_FTM2_CLOCK           FTM2_CLK\n#define    PCC_FTM3_CLOCK           FTM3_CLK\n#define    PCC_ADC1_CLOCK           ADC1_CLK\n#define    PCC_LPSPI0_CLOCK         LPSPI0_CLK\n#define    PCC_LPSPI1_CLOCK         LPSPI1_CLK\n#define    PCC_LPSPI2_CLOCK         LPSPI2_CLK\n#define    PCC_LPIT0_CLOCK          LPIT0_CLK\n#define    PCC_ADC0_CLOCK           ADC0_CLK\n#define    PCC_LPTMR0_CLOCK         LPTMR0_CLK\n#define    PCC_FLEXIO0_CLOCK        FLEXIO0_CLK\n#define    PCC_LPI2C0_CLOCK         LPI2C0_CLK\n#define    PCC_LPUART0_CLOCK        LPUART0_CLK\n#define    PCC_LPUART1_CLOCK        LPUART1_CLK\n#define    PCC_LPUART2_CLOCK        LPUART2_CLK\n#endif /* !DO_NOT_USE_DEPRECATED_SYMBOLS */\n\n\n/* CSEc module features */\n\n/*! @brief CSE_PRAM offset of the page length parameter used by the following\ncommands: CMD_ENC_ECB, CMD_ENC_CBC, CMD_DEC_ECB, CMD_DEC_CBC, CMD_MP_COMPRESS */\n#define FEATURE_CSEC_PAGE_LENGTH_OFFSET                   (0xEU)\n/*! @brief CSE_PRAM offset of the message length parameter used by the following\ncommands: CMD_GENERATE_MAC, CMD_VERIFY_MAC (both copy and pointer methods) */\n#define FEATURE_CSEC_MESSAGE_LENGTH_OFFSET                (0xCU)\n/*! @brief CSE_PRAM offset of the MAC length parameter used by the following\ncommands: CMD_VERIFY_MAC (both copy and pointer methods) */\n#define FEATURE_CSEC_MAC_LENGTH_OFFSET                    (0x8U)\n/*! @brief CSE_PRAM offset of the boot size parameter used by the following\ncommands: CMD_BOOT_DEFINE */\n#define FEATURE_CSEC_BOOT_SIZE_OFFSET                     (0x1CU)\n/*! @brief CSE_PRAM offset of the boot flavor parameter used by the following\ncommands: CMD_BOOT_DEFINE */\n#define FEATURE_CSEC_BOOT_FLAVOR_OFFSET                   (0x1BU)\n/*! @brief CSE_PRAM offset of the Flash start address parameter used by the\nfollowing commands: CMD_GENERATE_MAC, CMD_VERIFY_MAC (pointer method) */\n#define FEATURE_CSEC_FLASH_START_ADDRESS_OFFSET           (0x10U)\n/*! @brief CSE_PRAM offset of the verification status parameter used by the\nfollowing commands: CMD_VERIFY_MAC (both copy and pointer methods) */\n#define FEATURE_CSEC_VERIFICATION_STATUS_OFFSET           (0x14U)\n/*! @brief CSE_PRAM offset of the error bits field contained by all commands */\n#define FEATURE_CSEC_ERROR_BITS_OFFSET                    (0x4U)\n/*! @brief CSE_PRAM offset of the SREG parameter used by the following commands:\nCMD_GET_ID */\n#define FEATURE_CSEC_SREG_OFFSET                          (0x2FU)\n\n/*! @brief Macro that enables the use of FTFM flash module on a platform */\n#define FEATURE_CSEC_HAS_FTFM_MODULE\t\t\t\t\t  (0U)\n\n/*! @brief CSE_PRAM offset of page 0 */\n#define FEATURE_CSEC_PAGE_0_OFFSET                        (0x0U)\n/*! @brief CSE_PRAM offset of page 1 */\n#define FEATURE_CSEC_PAGE_1_OFFSET                        (0x10U)\n/*! @brief CSE_PRAM offset of page 2 */\n#define FEATURE_CSEC_PAGE_2_OFFSET                        (0x20U)\n/*! @brief CSE_PRAM offset of page 3 */\n#define FEATURE_CSEC_PAGE_3_OFFSET                        (0x30U)\n/*! @brief CSE_PRAM offset of page 4 */\n#define FEATURE_CSEC_PAGE_4_OFFSET                        (0x40U)\n/*! @brief CSE_PRAM offset of page 5 */\n#define FEATURE_CSEC_PAGE_5_OFFSET                        (0x50U)\n/*! @brief CSE_PRAM offset of page 6 */\n#define FEATURE_CSEC_PAGE_6_OFFSET                        (0x60U)\n/*! @brief CSE_PRAM offset of page 7 */\n#define FEATURE_CSEC_PAGE_7_OFFSET                        (0x70U)\n\n\n/* ADC module features */\n\n/*! @brief ADC feature flag for extended number of SC1 and R registers,\n * generically named 'alias registers' */\n#define FEATURE_ADC_HAS_EXTRA_NUM_REGS                    (0)\n\n/*! @brief ADC feature flag for defining number of external ADC channels.\n * If each ADC instance has different number of external channels, then\n * this define is set with the maximum value. */\n#define FEATURE_ADC_MAX_NUM_EXT_CHANS                     (16)\n#define FEATURE_ADC_HAS_CHANNEL_2                         (1)\n#define FEATURE_ADC_HAS_CHANNEL_8                         (1)\n#define ADC_CLOCKS                                        {ADC0_CLK, ADC1_CLK}\n\n/*! @brief ADC number of control channels */\n#if FEATURE_ADC_HAS_EXTRA_NUM_REGS\n#define ADC_CTRL_CHANS_COUNT                              ADC_aSC1_COUNT\n#else\n#define ADC_CTRL_CHANS_COUNT                              ADC_SC1_COUNT\n#endif /* FEATURE_ADC_HAS_EXTRA_NUM_REGS */\n\n/*! @brief ADC default Sample Time from RM */\n#define ADC_DEFAULT_SAMPLE_TIME                           (0x0CU)\n/*! @brief ADC default User Gain from RM */\n#define ADC_DEFAULT_USER_GAIN                             (0x04U)\n/* @brief Max of adc clock frequency */\n#define ADC_CLOCK_FREQ_MAX_RUNTIME     (50000000u)\n/* @brief Min of adc clock frequency */\n#define ADC_CLOCK_FREQ_MIN_RUNTIME     (2000000u)\n\n/* LPIT module features */\n\n/*! @brief Number of interrupt vector for channels of the LPIT module. */\n#define FEATURE_LPIT_HAS_NUM_IRQS_CHANS                  (4U)\n/*! @brief Clock names for LPIT. */\n#define LPIT_CLOCK_NAMES    {LPIT0_CLK}\n\n/* MSCM module features */\n\n/* @brief Has interrupt router control registers (IRSPRCn). */\n#define FEATURE_MSCM_HAS_INTERRUPT_ROUTER                (0)\n/* @brief Has directed CPU interrupt routerregisters (IRCPxxx). */\n#define FEATURE_MSCM_HAS_CPU_INTERRUPT_ROUTER            (0)\n\n/* OSIF module features */\n\n#define FEATURE_OSIF_USE_SYSTICK                         (1)\n#define FEATURE_OSIF_USE_PIT                             (0)\n#define FEATURE_OSIF_FREERTOS_ISR_CONTEXT_METHOD         (1) /* Cortex M device */\n\n/* LPSPI module features */\n/* @brief Initial value for state structure */\n#define FEATURE_LPSPI_STATE_STRUCTURES_NULL {NULL, NULL, NULL}\n/* @brief Clock indexes for LPSPI clock */\n#define FEATURE_LPSPI_CLOCKS_NAMES {LPSPI0_CLK, LPSPI1_CLK, LPSPI2_CLK};\n\n/* LPTMR module features */\n\n/* @brief LPTMR pulse counter input options */\n#define FEATURE_LPTMR_HAS_INPUT_ALT1_SELECTION           (1U)\n\n/* TRGMUX module features */\n/*!\n * @brief Enumeration for trigger source module of TRGMUX\n *\n * Describes all possible inputs (trigger sources) of the TRGMUX IP\n * This enumeration depends on the supported instances in device\n */\nenum trgmux_trigger_source_e\n{\n    TRGMUX_TRIG_SOURCE_DISABLED             = 0U,\n    TRGMUX_TRIG_SOURCE_VDD                  = 1U,\n    TRGMUX_TRIG_SOURCE_TRGMUX_IN0           = 2U,\n    TRGMUX_TRIG_SOURCE_TRGMUX_IN1           = 3U,\n    TRGMUX_TRIG_SOURCE_TRGMUX_IN2           = 4U,\n    TRGMUX_TRIG_SOURCE_TRGMUX_IN3           = 5U,\n    TRGMUX_TRIG_SOURCE_TRGMUX_IN4           = 6U,\n    TRGMUX_TRIG_SOURCE_TRGMUX_IN5           = 7U,\n    TRGMUX_TRIG_SOURCE_TRGMUX_IN6           = 8U,\n    TRGMUX_TRIG_SOURCE_TRGMUX_IN7           = 9U,\n    TRGMUX_TRIG_SOURCE_TRGMUX_IN8           = 10U,\n    TRGMUX_TRIG_SOURCE_TRGMUX_IN9           = 11U,\n    TRGMUX_TRIG_SOURCE_TRGMUX_IN10          = 12U,\n    TRGMUX_TRIG_SOURCE_TRGMUX_IN11          = 13U,\n    TRGMUX_TRIG_SOURCE_CMP0_OUT             = 14U,\n    TRGMUX_TRIG_SOURCE_LPIT_CH0             = 17U,\n    TRGMUX_TRIG_SOURCE_LPIT_CH1             = 18U,\n    TRGMUX_TRIG_SOURCE_LPIT_CH2             = 19U,\n    TRGMUX_TRIG_SOURCE_LPIT_CH3             = 20U,\n    TRGMUX_TRIG_SOURCE_LPTMR0               = 21U,\n    TRGMUX_TRIG_SOURCE_FTM0_INIT_TRIG       = 22U,\n    TRGMUX_TRIG_SOURCE_FTM0_EXT_TRIG        = 23U,\n    TRGMUX_TRIG_SOURCE_FTM1_INIT_TRIG       = 24U,\n    TRGMUX_TRIG_SOURCE_FTM1_EXT_TRIG        = 25U,\n    TRGMUX_TRIG_SOURCE_FTM2_INIT_TRIG       = 26U,\n    TRGMUX_TRIG_SOURCE_FTM2_EXT_TRIG        = 27U,\n    TRGMUX_TRIG_SOURCE_FTM3_INIT_TRIG       = 28U,\n    TRGMUX_TRIG_SOURCE_FTM3_EXT_TRIG        = 29U,\n    TRGMUX_TRIG_SOURCE_ADC0_SC1A_COCO       = 30U,\n    TRGMUX_TRIG_SOURCE_ADC0_SC1B_COCO       = 31U,\n    TRGMUX_TRIG_SOURCE_ADC1_SC1A_COCO       = 32U,\n    TRGMUX_TRIG_SOURCE_ADC1_SC1B_COCO       = 33U,\n    TRGMUX_TRIG_SOURCE_PDB0_CH0_TRIG        = 34U,\n    TRGMUX_TRIG_SOURCE_PDB0_PULSE_OUT       = 36U,\n    TRGMUX_TRIG_SOURCE_PDB1_CH0_TRIG        = 37U,\n    TRGMUX_TRIG_SOURCE_PDB1_PULSE_OUT       = 39U,\n    TRGMUX_TRIG_SOURCE_RTC_ALARM            = 43U,\n    TRGMUX_TRIG_SOURCE_RTC_SECOND           = 44U,\n    TRGMUX_TRIG_SOURCE_FLEXIO_TRIG0         = 45U,\n    TRGMUX_TRIG_SOURCE_FLEXIO_TRIG1         = 46U,\n    TRGMUX_TRIG_SOURCE_FLEXIO_TRIG2         = 47U,\n    TRGMUX_TRIG_SOURCE_FLEXIO_TRIG3         = 48U,\n    TRGMUX_TRIG_SOURCE_LPUART0_RX_DATA      = 49U,\n    TRGMUX_TRIG_SOURCE_LPUART0_TX_DATA      = 50U,\n    TRGMUX_TRIG_SOURCE_LPUART0_RX_IDLE      = 51U,\n    TRGMUX_TRIG_SOURCE_LPUART1_RX_DATA      = 52U,\n    TRGMUX_TRIG_SOURCE_LPUART1_TX_DATA      = 53U,\n    TRGMUX_TRIG_SOURCE_LPUART1_RX_IDLE      = 54U,\n    TRGMUX_TRIG_SOURCE_LPI2C0_MASTER_TRIG   = 55U,\n    TRGMUX_TRIG_SOURCE_LPI2C0_SLAVE_TRIG    = 56U,\n    TRGMUX_TRIG_SOURCE_LPSPI0_FRAME         = 59U,\n    TRGMUX_TRIG_SOURCE_LPSPI0_RX_DATA       = 60U,\n    TRGMUX_TRIG_SOURCE_LPSPI1_FRAME         = 61U,\n    TRGMUX_TRIG_SOURCE_LPSPI1_RX_DATA       = 62U,\n    TRGMUX_TRIG_SOURCE_SIM_SW_TRIG          = 63U\n};\n\n/*!\n * @brief Enumeration for target module of TRGMUX\n *\n * Describes all possible outputs (target modules) of the TRGMUX IP\n * This enumeration depends on the supported instances in device\n */\nenum trgmux_target_module_e\n{\n    TRGMUX_TARGET_MODULE_DMA_CH0            = 0U,\n    TRGMUX_TARGET_MODULE_DMA_CH1            = 1U,\n    TRGMUX_TARGET_MODULE_DMA_CH2            = 2U,\n    TRGMUX_TARGET_MODULE_DMA_CH3            = 3U,\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT0        = 4U,\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT1        = 5U,\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT2        = 6U,\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT3        = 7U,\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT4        = 8U,\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT5        = 9U,\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT6        = 10U,\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT7        = 11U,\n    TRGMUX_TARGET_MODULE_ADC0_ADHWT_TLA0    = 12U,\n    TRGMUX_TARGET_MODULE_ADC0_ADHWT_TLA1    = 13U,\n    TRGMUX_TARGET_MODULE_ADC0_ADHWT_TLA2    = 14U,\n    TRGMUX_TARGET_MODULE_ADC0_ADHWT_TLA3    = 15U,\n    TRGMUX_TARGET_MODULE_ADC1_ADHWT_TLA0    = 16U,\n    TRGMUX_TARGET_MODULE_ADC1_ADHWT_TLA1    = 17U,\n    TRGMUX_TARGET_MODULE_ADC1_ADHWT_TLA2    = 18U,\n    TRGMUX_TARGET_MODULE_ADC1_ADHWT_TLA3    = 19U,\n    TRGMUX_TARGET_MODULE_CMP0_SAMPLE        = 28U,\n    TRGMUX_TARGET_MODULE_FTM0_HWTRIG0       = 40U,\n    TRGMUX_TARGET_MODULE_FTM0_FAULT0        = 41U,\n    TRGMUX_TARGET_MODULE_FTM0_FAULT1        = 42U,\n    TRGMUX_TARGET_MODULE_FTM0_FAULT2        = 43U,\n    TRGMUX_TARGET_MODULE_FTM1_HWTRIG0       = 44U,\n    TRGMUX_TARGET_MODULE_FTM1_FAULT0        = 45U,\n    TRGMUX_TARGET_MODULE_FTM1_FAULT1        = 46U,\n    TRGMUX_TARGET_MODULE_FTM1_FAULT2        = 47U,\n    TRGMUX_TARGET_MODULE_FTM2_HWTRIG0       = 48U,\n    TRGMUX_TARGET_MODULE_FTM2_FAULT0        = 49U,\n    TRGMUX_TARGET_MODULE_FTM2_FAULT1        = 50U,\n    TRGMUX_TARGET_MODULE_FTM2_FAULT2        = 51U,\n    TRGMUX_TARGET_MODULE_FTM3_HWTRIG0       = 52U,\n    TRGMUX_TARGET_MODULE_FTM3_FAULT0        = 53U,\n    TRGMUX_TARGET_MODULE_FTM3_FAULT1        = 54U,\n    TRGMUX_TARGET_MODULE_FTM3_FAULT2        = 55U,\n    TRGMUX_TARGET_MODULE_PDB0_TRG_IN        = 56U,\n    TRGMUX_TARGET_MODULE_PDB1_TRG_IN        = 60U,\n    TRGMUX_TARGET_MODULE_FLEXIO_TRG_TIM0    = 68U,\n    TRGMUX_TARGET_MODULE_FLEXIO_TRG_TIM1    = 69U,\n    TRGMUX_TARGET_MODULE_FLEXIO_TRG_TIM2    = 70U,\n    TRGMUX_TARGET_MODULE_FLEXIO_TRG_TIM3    = 71U,\n    TRGMUX_TARGET_MODULE_LPIT_TRG_CH0       = 72U,\n    TRGMUX_TARGET_MODULE_LPIT_TRG_CH1       = 73U,\n    TRGMUX_TARGET_MODULE_LPIT_TRG_CH2       = 74U,\n    TRGMUX_TARGET_MODULE_LPIT_TRG_CH3       = 75U,\n    TRGMUX_TARGET_MODULE_LPUART0_TRG        = 76U,\n    TRGMUX_TARGET_MODULE_LPUART1_TRG        = 80U,\n    TRGMUX_TARGET_MODULE_LPI2C0_TRG         = 84U,\n    TRGMUX_TARGET_MODULE_LPSPI0_TRG         = 92U,\n    TRGMUX_TARGET_MODULE_LPSPI1_TRG         = 96U,\n    TRGMUX_TARGET_MODULE_LPTMR0_ALT0        = 100U\n};\n\n/* @brief Constant array storing the value of all TRGMUX output(target module) identifiers */\n#define FEATURE_TRGMUX_TARGET_MODULE         \\\n{                                            \\\n    TRGMUX_TARGET_MODULE_DMA_CH0,            \\\n    TRGMUX_TARGET_MODULE_DMA_CH1,            \\\n    TRGMUX_TARGET_MODULE_DMA_CH2,            \\\n    TRGMUX_TARGET_MODULE_DMA_CH3,            \\\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT0,        \\\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT1,        \\\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT2,        \\\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT3,        \\\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT4,        \\\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT5,        \\\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT6,        \\\n    TRGMUX_TARGET_MODULE_TRGMUX_OUT7,        \\\n    TRGMUX_TARGET_MODULE_ADC0_ADHWT_TLA0,    \\\n    TRGMUX_TARGET_MODULE_ADC0_ADHWT_TLA1,    \\\n    TRGMUX_TARGET_MODULE_ADC0_ADHWT_TLA2,    \\\n    TRGMUX_TARGET_MODULE_ADC0_ADHWT_TLA3,    \\\n    TRGMUX_TARGET_MODULE_ADC1_ADHWT_TLA0,    \\\n    TRGMUX_TARGET_MODULE_ADC1_ADHWT_TLA1,    \\\n    TRGMUX_TARGET_MODULE_ADC1_ADHWT_TLA2,    \\\n    TRGMUX_TARGET_MODULE_ADC1_ADHWT_TLA3,    \\\n    TRGMUX_TARGET_MODULE_CMP0_SAMPLE,        \\\n    TRGMUX_TARGET_MODULE_FTM0_HWTRIG0,       \\\n    TRGMUX_TARGET_MODULE_FTM0_FAULT0,        \\\n    TRGMUX_TARGET_MODULE_FTM0_FAULT1,        \\\n    TRGMUX_TARGET_MODULE_FTM0_FAULT2,        \\\n    TRGMUX_TARGET_MODULE_FTM1_HWTRIG0,       \\\n    TRGMUX_TARGET_MODULE_FTM1_FAULT0,        \\\n    TRGMUX_TARGET_MODULE_FTM1_FAULT1,        \\\n    TRGMUX_TARGET_MODULE_FTM1_FAULT2,        \\\n    TRGMUX_TARGET_MODULE_FTM2_HWTRIG0,       \\\n    TRGMUX_TARGET_MODULE_FTM2_FAULT0,        \\\n    TRGMUX_TARGET_MODULE_FTM2_FAULT1,        \\\n    TRGMUX_TARGET_MODULE_FTM2_FAULT2,        \\\n    TRGMUX_TARGET_MODULE_FTM3_HWTRIG0,       \\\n    TRGMUX_TARGET_MODULE_FTM3_FAULT0,        \\\n    TRGMUX_TARGET_MODULE_FTM3_FAULT1,        \\\n    TRGMUX_TARGET_MODULE_FTM3_FAULT2,        \\\n    TRGMUX_TARGET_MODULE_PDB0_TRG_IN,        \\\n    TRGMUX_TARGET_MODULE_PDB1_TRG_IN,        \\\n    TRGMUX_TARGET_MODULE_FLEXIO_TRG_TIM0,    \\\n    TRGMUX_TARGET_MODULE_FLEXIO_TRG_TIM1,    \\\n    TRGMUX_TARGET_MODULE_FLEXIO_TRG_TIM2,    \\\n    TRGMUX_TARGET_MODULE_FLEXIO_TRG_TIM3,    \\\n    TRGMUX_TARGET_MODULE_LPIT_TRG_CH0,       \\\n    TRGMUX_TARGET_MODULE_LPIT_TRG_CH1,       \\\n    TRGMUX_TARGET_MODULE_LPIT_TRG_CH2,       \\\n    TRGMUX_TARGET_MODULE_LPIT_TRG_CH3,       \\\n    TRGMUX_TARGET_MODULE_LPUART0_TRG,        \\\n    TRGMUX_TARGET_MODULE_LPUART1_TRG,        \\\n    TRGMUX_TARGET_MODULE_LPI2C0_TRG,         \\\n    TRGMUX_TARGET_MODULE_LPSPI0_TRG,         \\\n    TRGMUX_TARGET_MODULE_LPSPI1_TRG,         \\\n    TRGMUX_TARGET_MODULE_LPTMR0_ALT0         \\\n}\n\n/* ISELED Pins */\n\n#define ISELED_PIN_0     0    /*PTA10*/\n#define ISELED_PIN_1     1    /*PTD0*/\n#define ISELED_PIN_2     2    /*PTD9*/\n#define ISELED_PIN_3     3    /*PTA11*/\n#define ISELED_PIN_4     4    /*PTD1*/\n#define ISELED_PIN_5     5    /*PTD8*/\n#define ISELED_PIN_6     6    /*PTA0*/\n#define ISELED_PIN_7     7    /*PTE15*/\n#define ISELED_PIN_8     8    /*PTA1*/\n#define ISELED_PIN_9     9    /*PTE16*/\n#define ISELED_PIN_10    10    /*PTA2*/\n#define ISELED_PIN_11    11    /*PTD2*/\n#define ISELED_PIN_12    12    /*PTE10*/\n#define ISELED_PIN_13    13    /*PTA3*/\n#define ISELED_PIN_14    14    /*PTE11*/\n#define ISELED_PIN_15    15    /*PTD3*/\n#define ISELED_PIN_16    16    /*PTA8*/\n#define ISELED_PIN_17    17    /*PTE3*/\n#define ISELED_PIN_18    18    /*PTA9*/\n#define ISELED_PIN_19    19    /*PTE3*/\n\n#define ISELED_PIN_20    20    /*PTB2*/\n#define ISELED_PIN_21    21    /*PTB1*/\n#define ISELED_PIN_22    22    /*PTD15*/\n#define ISELED_PIN_23    23    /*PTB4*/\n#define ISELED_PIN_24    24    /*PTE0*/\n#define ISELED_PIN_25    25    /*PTE2*/\n#define ISELED_PIN_26    26    /*PTD0*/\n#define ISELED_PIN_27    27    /*PTD2*/\n#define ISELED_PIN_28    28    /*PTB14*/\n#define ISELED_PIN_29    29    /*PTB16*/\n#define ISELED_PIN_30    30    /*PTE15*/\n#define ISELED_PIN_31    31    /*PTA8*/\n#define ISELED_PIN_32    32    /*PTC15*/\n#define ISELED_PIN_33    33    /*PTC1*/\n\n#define ISELED_PIN_34    34    /*PTE1*/\n#define ISELED_PIN_35    35    /*PTB3*/\n#define ISELED_PIN_36    36    /*PTD16*/\n#define ISELED_PIN_37    37    /*PTB15*/\n#define ISELED_PIN_38    38    /*PTD1*/\n#define ISELED_PIN_39    39    /*PTC0*/\n\n\n#define MAX_NR_OF_STRIPS 13U\n\n\n/* PDB module features */\n\n/* @brief PDB has instance back to back mode between PDB0 CH0 and PDB1 CH0 pre-triggers */\n#define FEATURE_PDB_HAS_INSTANCE_BACKTOBACK     (1)\n\n/* @brief PDB has inter-channel back to back mode between PDBx CH0 and PDBx CH1 pre-triggers */\n#define FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK (0)\n\n\n#endif /* S32K144_FEATURES_H */\n\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"S32_core_cm4.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\common","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2015-2016 Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n *\n */\n/*!\n * @file s32_core_cm4.h\n *\n * @page misra_violations MISRA-C:2012 violations\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Directive 4.9, Function-like macro\n * Function-like macros are used instead of inline functions in order to ensure\n * that the performance will not be decreased if the functions will not be\n * inlined by the compiler.\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.\n * The macros defined are used only on some of the drivers, so this might be reported\n * when the analysis is made only on one driver.\n */\n\n/*\n * Tool Chains:\n *   GNUC flag is defined also by ARM compiler - it shows the current major version of the compatible GCC version\n *   __GNUC__   : GNU Compiler Collection\n *   __ghs__    : Green Hills ARM Compiler\n *   __ICCARM__ : IAR ARM Compiler\n *   __DCC__    : Wind River Diab Compiler\n *   __ARMCC_VERSION:  ARM Compiler\n */\n\n#if !defined (CORE_CM4_H)\n#define CORE_CM4_H\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/** \\brief  BKPT_ASM\n *\n *   Macro to be used to trigger an debug interrupt\n */\n#define BKPT_ASM __asm(\"BKPT #0\\n\\t\")\n        \n\n/** \\brief  Enable FPU\n *\n *   ENABLE_FPU indicates whether SystemInit will enable the Floating point unit (FPU)\n */\n#if defined (__GNUC__) || defined (__ARMCC_VERSION)\n#if defined (__VFP_FP__) && !defined (__SOFTFP__)\n#define ENABLE_FPU\n#endif\n\n#elif defined (__ICCARM__)\n#if defined __ARMVFP__\n#define ENABLE_FPU\n#endif\n\n#elif defined (__ghs__) || defined (__DCC__)\n#if defined (__VFP__)\n#define ENABLE_FPU\n#endif\n#endif /* if defined (__GNUC__) */\n\n/** \\brief  Enable interrupts\n */\n#if defined (__GNUC__) \n#define ENABLE_INTERRUPTS() __asm volatile (\"cpsie i\" : : : \"memory\");\n#else\n#define ENABLE_INTERRUPTS() __asm(\"cpsie i\")\n#endif\n\n\n/** \\brief  Disable interrupts\n */\n#if defined (__GNUC__)\n#define DISABLE_INTERRUPTS() __asm volatile (\"cpsid i\" : : : \"memory\");\n#else\n#define DISABLE_INTERRUPTS() __asm(\"cpsid i\")\n#endif\n\n\n/** \\brief  Enter low-power standby state\n *    WFI (Wait For Interrupt) makes the processor suspend execution (Clock is stopped) until an IRQ interrupts.\n */\n#if defined (__GNUC__)\n#define STANDBY() __asm volatile (\"wfi\")\n#else\n#define STANDBY() __asm(\"wfi\")\n#endif\n\n/** \\brief  No-op\n */\n#define NOP() __asm volatile (\"nop\")\n\n/** \\brief  Reverse byte order in a word.\n */\n#if defined (__GNUC__) || defined (__ICCARM__) || defined (__ghs__) || defined (__ARMCC_VERSION)\n#define REV_BYTES_32(a, b) __asm volatile (\"rev %0, %1\" : \"=r\" (b) : \"r\" (a))\n#else\n#define REV_BYTES_32(a, b) (b = ((a & 0xFF000000U) >> 24U) | ((a & 0xFF0000U) >> 8U) \\\n                                | ((a & 0xFF00U) << 8U) | ((a & 0xFFU) << 24U))\n#endif\n\n/** \\brief  Reverse byte order in each halfword independently.\n */\n#if defined (__GNUC__) || defined (__ICCARM__) || defined (__ghs__) || defined (__ARMCC_VERSION)\n#define REV_BYTES_16(a, b) __asm volatile (\"rev16 %0, %1\" : \"=r\" (b) : \"r\" (a))\n#else\n#define REV_BYTES_16(a, b) (b = ((a & 0xFF000000U) >> 8U) | ((a & 0xFF0000U) << 8U) \\\n                                | ((a & 0xFF00U) >> 8U) | ((a & 0xFFU) << 8U))\n#endif\n\n/** \\brief  Places a function in RAM.\n */\n#if defined ( __GNUC__ ) || defined (__ARMCC_VERSION)\n    #define START_FUNCTION_DECLARATION_RAMSECTION\n    #define END_FUNCTION_DECLARATION_RAMSECTION        __attribute__((section (\".code_ram\")));\n#elif defined ( __ghs__ )\n    #define START_FUNCTION_DECLARATION_RAMSECTION      _Pragma(\"ghs callmode=far\")\n    #define END_FUNCTION_DECLARATION_RAMSECTION        __attribute__((section (\".code_ram\")));\\\n                                                       _Pragma(\"ghs callmode=default\")\n#elif defined ( __ICCARM__ )\n    #define START_FUNCTION_DECLARATION_RAMSECTION      __ramfunc\n    #define END_FUNCTION_DECLARATION_RAMSECTION        ;\n#elif defined ( __DCC__ )\n    #define START_FUNCTION_DECLARATION_RAMSECTION      _Pragma(\"section CODE \\\".code_ram\\\"\") \\\n                                                       _Pragma(\"use_section CODE\")\n    #define END_FUNCTION_DECLARATION_RAMSECTION        ; \\\n                                                       _Pragma(\"section CODE \\\".text\\\"\")\n#else\n    /* Keep compatibility with software analysis tools */\n    #define START_FUNCTION_DECLARATION_RAMSECTION      \n    #define END_FUNCTION_DECLARATION_RAMSECTION        ;\n#endif\n                                                   \n    /* For GCC, IAR, GHS, Diab and ARMC there is no need to specify the section when\n    defining a function, it is enough to specify it at the declaration. This\n    also enables compatibility with software analysis tools. */\n    #define START_FUNCTION_DEFINITION_RAMSECTION\n    #define END_FUNCTION_DEFINITION_RAMSECTION\n\n#if defined (__ICCARM__)\n    #define DISABLE_CHECK_RAMSECTION_FUNCTION_CALL     _Pragma(\"diag_suppress=Ta022\")\n    #define ENABLE_CHECK_RAMSECTION_FUNCTION_CALL      _Pragma(\"diag_default=Ta022\")\n#else\n    #define DISABLE_CHECK_RAMSECTION_FUNCTION_CALL\n    #define ENABLE_CHECK_RAMSECTION_FUNCTION_CALL\n#endif\n\n/** \\brief  Get Core ID\n *\n *   GET_CORE_ID returns the processor identification number for cm4\n */\n#define GET_CORE_ID()\t0U\n\n/** \\brief  Data alignment.\n */\n#if defined ( __GNUC__ ) || defined ( __ghs__ ) || defined ( __DCC__ ) || defined (__ARMCC_VERSION)\n    #define ALIGNED(x)      __attribute__((aligned(x)))\n#elif defined ( __ICCARM__ )\n    #define stringify(s) tostring(s)\n    #define tostring(s) #s\n    #define ALIGNED(x)      _Pragma(stringify(data_alignment=x))\n#else\n    /* Keep compatibility with software analysis tools */\n    #define ALIGNED(x)\n#endif\n\n/** \\brief  Endianness.\n */\n#define CORE_LITTLE_ENDIAN\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* CORE_CM4_H */\n\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"clock.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\inc","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2013 - 2015, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n#if !defined(CLOCK_H)\n#define CLOCK_H\n\n#include \"device_registers.h\"\n#include \"status.h\"\n\n/*\n * Include the cpu specific clock API header files.\n */\n \n #if (defined(S32K14x_SERIES) || defined(S32K11x_SERIES))\n    /* S32K144 Clock System Level API header file */\n    #include \"../src/clock/S32K1xx/clock_S32K1xx.h\"\n#elif (defined(S32MTV_SERIES))\n    /* S32MTV Clock System Level API header file */\n    #include \"../src/clock/S32Mxx/clock_S32Mxx.h\"\n#elif (defined(MPC5777C_SERIES))\n    /* MPC5777C Clock System Level API header file */\n    #include \"../src/clock/MPC5777C/clock_MPC5777C.c\"\n#elif (defined(MPC574x_SERIES) || defined(S32R_SERIES))\n    /* MPC574x Clock System Level API header file */\n    #include \"../src/clock/MPC57xx/clock_MPC57xx.h\"\n#elif (defined(S32S247_SERIES))\n    /* S32S247 Clock System Level API header file */\n    #include \"../src/clock/S32Sxx/clock_S32Sxx.h\"\n#elif (defined(SJA1110_SERIES))\n    /* SJA1110 Clock System Level API header file */\n    #include \"../src/clock/SJA1110x/clock_SJA1110x.h\"\n#elif (defined(S32V234_SERIES))\n    /* S32Vxx Clock System Level API header file */\n    #include \"../src/clock/S32Vxx/clock_S32Vxx.h\"\n#else\n    #error \"No valid CPU defined!\"\n#endif\n\n/*!\n * @file clock.h\n */\n \n/*! @addtogroup clock*/\n/*! @{*/\n\n/*******************************************************************************\n * Definitions\n ******************************************************************************/\n\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif /* __cplusplus*/\n\n/*******************************************************************************\n * API\n ******************************************************************************/\n\n/*!\n * @name Dynamic clock setting\n * @{\n */\n\n/*******************************************************************************\n * API\n ******************************************************************************/\n \n /*!\n * @brief Gets the clock frequency for a specific clock name.\n *\n * This function checks the current clock configurations and then calculates\n * the clock frequency for a specific clock name defined in clock_names_t.\n * Clock modules must be properly configured before using this function. \n * See features.h for supported clock names for different chip families.\n * The returned value is in Hertz. If it cannot find the clock name\n * or the name is not supported for a specific chip family, it returns an\n * STATUS_UNSUPPORTED. If frequency is required for a peripheral and the\n * module is not clocked, then STATUS_MCU_GATED_OFF status is returned.\n * Frequency is returned if a valid address is provided. If frequency is\n * required for a peripheral that doesn't support protocol clock, the zero \n * value is provided.\n *\n * @param[in] clockName Clock names defined in clock_names_t\n * @param[out] frequency Returned clock frequency value in Hertz\n * @return status   Error code defined in status_t\n */\nstatus_t CLOCK_DRV_GetFreq(clock_names_t clockName,\n                           uint32_t *frequency);\n                           \n\n/*!\n * @brief Set clock configuration according to pre-defined structure.\n *\n * This function sets system to target clock configuration; It sets the\n * clock modules registers for clock mode change. \n *\n * @param[in] config  Pointer to configuration structure.\n *\n * @return Error code.\n *\n * @note If external clock is used in the target mode, please make sure it is\n * enabled, for example, if the external oscillator is used, please setup correctly.\n *\n * @note If the configuration structure is NULL, the function will set a default\n * configuration for clock.\n */\nstatus_t CLOCK_DRV_Init(clock_user_config_t const * config);\n\n/*! @} */\n\n\n#if defined(__cplusplus)\n}\n#endif /* __cplusplus*/\n\n/*! @}*/\n\n#endif /* CLOCK_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n\n"},{"name":"clock_S32K1xx.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\src\\clock\\S32K1xx","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2013 - 2014, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n#ifndef CLOCK_S32K1xx_H\n#define CLOCK_S32K1xx_H\n\n/*!\n * @file clock_S32K1xx.h\n *\n * @page misra_violations MISRA-C:2012 violations\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.3, A project should not contain unused type declarations.\n * The types are defined here to be used by other drivers or application.\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.\n * This is required to implement enumeration entries as macro.\n * Enumeration entries (macros) are referenced from application code.\n */\n\n#include \"device_registers.h\"\n#include \"status.h\"\n#include <stdint.h>\n#include <stdbool.h>\n\n\n/*!\n * @ingroup clock_manager\n * @defgroup clock_manager_s32k1xx\n * @{\n */\n\n/*******************************************************************************\n * Definitions\n ******************************************************************************/\n\n/*! @brief Peripheral features list\n *         Constant array storing the mappings between clock names of the peripherals and feature lists.\n */\nextern const uint8_t peripheralFeaturesList[CLOCK_NAME_COUNT];\n\n\n/*! @brief TClk clock frequency. */\n#define NUMBER_OF_TCLK_INPUTS 3U\nextern uint32_t g_TClkFreq[NUMBER_OF_TCLK_INPUTS];      /*!< TCLKx clocks */\n\n/*! @brief EXTAL0 clock frequency. */\nextern uint32_t g_xtal0ClkFreq;\n\n/*! @brief RTC_CLKIN clock frequency. */\nextern uint32_t g_RtcClkInFreq;\n\n/*! @brief The maximum number of system clock dividers and system clock divider indexes. */\n#define SYS_CLK_MAX_NO    3U\n#define CORE_CLK_INDEX    0U\n#define BUS_CLK_INDEX     1U\n#define SLOW_CLK_INDEX    2U\n\n/*!\n * @brief SIM CLK32KSEL clock source select\n * Implements sim_rtc_clk_sel_src_t_Class\n */\ntypedef enum\n{\n    SIM_RTCCLK_SEL_SOSCDIV1_CLK   = 0x0U,           /*!< SOSCDIV1 clock          */\n    SIM_RTCCLK_SEL_LPO_32K        = 0x1U,           /*!< 32 kHz LPO clock        */\n    SIM_RTCCLK_SEL_RTC_CLKIN      = 0x2U,           /*!< RTC_CLKIN clock         */\n    SIM_RTCCLK_SEL_FIRCDIV1_CLK   = 0x3U,           /*!< FIRCDIV1 clock          */\n} sim_rtc_clk_sel_src_t;\n\n/*!\n * @brief SIM LPOCLKSEL clock source select\n * Implements sim_lpoclk_sel_src_t_Class\n */\ntypedef enum\n{\n    SIM_LPO_CLK_SEL_LPO_128K    = 0x0,           /*!< 128 kHz LPO clock */\n    SIM_LPO_CLK_SEL_NO_CLOCK    = 0x1,           /*!< No clock */\n    SIM_LPO_CLK_SEL_LPO_32K     = 0x2,           /*!< 32 kHz LPO clock which is divided by the 128 kHz LPO clock */\n    SIM_LPO_CLK_SEL_LPO_1K      = 0x3,           /*!< 1 kHz LPO clock which is divided by the 128 kHz LPO clock */\n} sim_lpoclk_sel_src_t;\n\n/*!\n * @brief SIM CLKOUT select\n * Implements sim_clkout_src_t_Class\n */\ntypedef enum\n{\n    SIM_CLKOUT_SEL_SYSTEM_SCG_CLKOUT     = 0U,     /*!< SCG CLKOUT                                   */\n    SIM_CLKOUT_SEL_SYSTEM_SOSC_DIV2_CLK  = 2U,     /*!< SOSC DIV2 CLK                                */\n    SIM_CLKOUT_SEL_SYSTEM_SIRC_DIV2_CLK  = 4U,     /*!< SIRC DIV2 CLK                                */\n    SIM_CLKOUT_SEL_SYSTEM_FIRC_DIV2_CLK  = 6U,     /*!< FIRC DIV2 CLK                                */\n    SIM_CLKOUT_SEL_SYSTEM_HCLK           = 7U,     /*!< HCLK                                         */\n    SIM_CLKOUT_SEL_SYSTEM_SPLL_DIV2_CLK  = 8U,     /*!< SPLL DIV2 CLK                                */\n    SIM_CLKOUT_SEL_SYSTEM_BUS_CLK        = 9U,     /*!< BUS_CLK                                      */\n    SIM_CLKOUT_SEL_SYSTEM_LPO_128K_CLK   = 10U,    /*!< LPO_CLK 128 Khz                              */\n    SIM_CLKOUT_SEL_SYSTEM_LPO_CLK        = 12U,    /*!< LPO_CLK as selected by SIM LPO CLK Select    */\n    SIM_CLKOUT_SEL_SYSTEM_RTC_CLK        = 14U,    /*!< RTC CLK as selected by SIM CLK 32 KHz Select */\n\n#if defined (QuadSPI_INSTANCE_COUNT)\n    SIM_CLKOUT_SEL_SYSTEM_SFIF_CLK_HYP   = 5U,     /*!< SFIF_CLK_HYP                                 */\n    SIM_CLKOUT_SEL_SYSTEM_IPG_CLK        = 11U,    /*!< IPG_CLK                                      */\n    SIM_CLKOUT_SEL_SYSTEM_IPG_CLK_SFIF   = 13U,    /*!< IPG_CLK_SFIF                                 */\n    SIM_CLKOUT_SEL_SYSTEM_IPG_CLK_2XSFIF = 15U     /*!< IP_CLK_2XSFIF                                */\n#endif\n} sim_clkout_src_t;\n\n/*!\n * @brief SIM CLKOUT divider\n * Implements sim_clkout_div_t_Class\n */\ntypedef enum\n{\n    SIM_CLKOUT_DIV_BY_1 = 0x0U,        /*!< Divided by 1 */\n    SIM_CLKOUT_DIV_BY_2 = 0x1U,        /*!< Divided by 2 */\n    SIM_CLKOUT_DIV_BY_3 = 0x2U,        /*!< Divided by 3 */\n    SIM_CLKOUT_DIV_BY_4 = 0x3U,        /*!< Divided by 4 */\n    SIM_CLKOUT_DIV_BY_5 = 0x4U,        /*!< Divided by 5 */\n    SIM_CLKOUT_DIV_BY_6 = 0x5U,        /*!< Divided by 6 */\n    SIM_CLKOUT_DIV_BY_7 = 0x6U,        /*!< Divided by 7 */\n    SIM_CLKOUT_DIV_BY_8 = 0x7U,        /*!< Divided by 8 */\n} sim_clkout_div_t;\n\n\n/*!\n * @brief SIM ClockOut configuration.\n * Implements sim_clock_out_config_t_Class\n */\ntypedef struct\n{\n    bool              initialize;     /*!< Initialize or not the ClockOut clock.  */\n    bool              enable;         /*!< SIM ClockOut enable.                   */\n    sim_clkout_src_t  source;         /*!< SIM ClockOut source select.            */\n    sim_clkout_div_t  divider;        /*!< SIM ClockOut divide ratio.             */\n} sim_clock_out_config_t;\n\n\n/*!\n * @brief SIM LPO Clocks configuration.\n * Implements sim_lpo_clock_config_t_Class\n */\ntypedef struct\n{\n    bool                  initialize;       /*!< Initialize or not the LPO clock.     */\n    sim_rtc_clk_sel_src_t sourceRtcClk;     /*!< RTC_CLK source select.               */\n    sim_lpoclk_sel_src_t  sourceLpoClk;     /*!< LPO clock source select.             */\n    bool                  enableLpo32k;     /*!< MSCM Clock Gating Control enable.    */\n    bool                  enableLpo1k;      /*!< MSCM Clock Gating Control enable.    */\n} sim_lpo_clock_config_t;\n\n/*!\n * @brief SIM  Platform Gate Clock configuration.\n * Implements sim_tclk_config_t_Class\n */\ntypedef struct\n{\n    bool      initialize;                         /*!< Initialize or not the TCLK clock.  */\n    uint32_t  tclkFreq[NUMBER_OF_TCLK_INPUTS];    /*!< TCLKx frequency.                    */\n    uint32_t  extPinSrc[FTM_INSTANCE_COUNT];     /*!< FTMx frequency.                    */\n} sim_tclk_config_t;\n\n/*!\n * @brief SIM  Platform Gate Clock configuration.\n * Implements sim_plat_gate_config_t_Class\n */\ntypedef struct\n{\n    bool initialize;     /*!< Initialize or not the Trace clock.  */\n    bool enableMscm;     /*!< MSCM Clock Gating Control enable.   */\n    bool enableMpu;      /*!< MPU Clock Gating Control enable.    */\n    bool enableDma;      /*!< DMA Clock Gating Control enable.    */\n    bool enableErm;      /*!< ERM Clock Gating Control enable.    */\n    bool enableEim;      /*!< EIM Clock Gating Control enable.    */\n} sim_plat_gate_config_t;\n\n/*!\n * @brief SIM QSPI reference clock gating.\n * Implements sim_qspi_ref_clk_gating_t_Class\n */\ntypedef struct\n{\n    bool enableQspiRefClk;      /*!< qspi internal reference clock gating control enable.          */\n} sim_qspi_ref_clk_gating_t;\n\n\n/*!\n * @brief Debug trace clock source select\n * Implements clock_trace_src_t_Class\n */\ntypedef enum\n{\n    CLOCK_TRACE_SRC_CORE_CLK            = 0x0          /*!< core clock     */\n} clock_trace_src_t;\n\n\n/*!\n * @brief SIM Debug Trace clock configuration.\n * Implements sim_trace_clock_config_t_Class\n */\ntypedef struct\n{\n    bool               initialize;    /*!< Initialize or not the Trace clock.  */\n    bool               divEnable;     /*!< Trace clock divider enable.         */\n    clock_trace_src_t  source;        /*!< Trace clock select.                 */\n    uint8_t            divider;       /*!< Trace clock divider divisor.        */\n    bool               divFraction;   /*!< Trace clock divider fraction.       */\n} sim_trace_clock_config_t;\n\n/*!\n * @brief SIM configure structure.\n * Implements sim_clock_config_t_Class\n */\ntypedef struct\n{\n    sim_clock_out_config_t    clockOutConfig;                 /*!< Clock Out configuration.           */\n    sim_lpo_clock_config_t    lpoClockConfig;                 /*!< Low Power Clock configuration.     */\n    sim_tclk_config_t         tclkConfig;                     /*!< TCLK, FTM option Clock configuration. */\n    sim_plat_gate_config_t    platGateConfig;                 /*!< Platform Gate Clock configuration. */\n    sim_trace_clock_config_t  traceClockConfig;               /*!< Trace clock configuration.         */\n    sim_qspi_ref_clk_gating_t qspiRefClkGating;               /*!< Qspi Reference Clock Gating.       */\n} sim_clock_config_t;\n\n\n/*!\n * @brief SCG system clock source.\n * Implements scg_system_clock_src_t_Class\n */\ntypedef enum\n{\n    SCG_SYSTEM_CLOCK_SRC_SYS_OSC  = 1U,       /*!< System OSC. */\n    SCG_SYSTEM_CLOCK_SRC_SIRC     = 2U,       /*!< Slow IRC.   */\n    SCG_SYSTEM_CLOCK_SRC_FIRC     = 3U,       /*!< Fast IRC.   */\n#if FEATURE_HAS_SPLL_CLK\n    SCG_SYSTEM_CLOCK_SRC_SYS_PLL  = 6U,       /*!< System PLL. */\n#endif\n    SCG_SYSTEM_CLOCK_SRC_NONE     = 255U      /*!< MAX value.  */\n} scg_system_clock_src_t;\n\n/*!\n * @brief SCG system clock divider value.\n * Implements scg_system_clock_div_t_Class\n */\ntypedef enum\n{\n    SCG_SYSTEM_CLOCK_DIV_BY_1   = 0U,     /*!< Divided by 1. */\n    SCG_SYSTEM_CLOCK_DIV_BY_2   = 1U,     /*!< Divided by 2. */\n    SCG_SYSTEM_CLOCK_DIV_BY_3   = 2U,     /*!< Divided by 3. */\n    SCG_SYSTEM_CLOCK_DIV_BY_4   = 3U,     /*!< Divided by 4. */\n    SCG_SYSTEM_CLOCK_DIV_BY_5   = 4U,     /*!< Divided by 5. */\n    SCG_SYSTEM_CLOCK_DIV_BY_6   = 5U,     /*!< Divided by 6. */\n    SCG_SYSTEM_CLOCK_DIV_BY_7   = 6U,     /*!< Divided by 7. */\n    SCG_SYSTEM_CLOCK_DIV_BY_8   = 7U,     /*!< Divided by 8. */\n    SCG_SYSTEM_CLOCK_DIV_BY_9   = 8U,     /*!< Divided by 9. */\n    SCG_SYSTEM_CLOCK_DIV_BY_10  = 9U,     /*!< Divided by 10. */\n    SCG_SYSTEM_CLOCK_DIV_BY_11  = 10U,    /*!< Divided by 11. */\n    SCG_SYSTEM_CLOCK_DIV_BY_12  = 11U,    /*!< Divided by 12. */\n    SCG_SYSTEM_CLOCK_DIV_BY_13  = 12U,    /*!< Divided by 13. */\n    SCG_SYSTEM_CLOCK_DIV_BY_14  = 13U,    /*!< Divided by 14. */\n    SCG_SYSTEM_CLOCK_DIV_BY_15  = 14U,    /*!< Divided by 15. */\n    SCG_SYSTEM_CLOCK_DIV_BY_16  = 15U,    /*!< Divided by 16. */\n} scg_system_clock_div_t;\n\n/*!\n * @brief SCG system clock configuration.\n * Implements scg_system_clock_config_t_Class\n */\ntypedef struct\n{\n    scg_system_clock_div_t divSlow;  /*!< Slow clock divider.      */\n    scg_system_clock_div_t divBus;   /*!< BUS clock divider.       */\n    scg_system_clock_div_t divCore;  /*!< Core clock divider.      */\n    scg_system_clock_src_t src;      /*!< System clock source.     */\n} scg_system_clock_config_t;\n\n/*!\n * @name SCG Clockout.\n * @{\n */\n\n/*!\n * @brief SCG ClockOut type.\n * Implements scg_clockout_src_t_Class\n */\ntypedef enum\n{\n    SCG_CLOCKOUT_SRC_SCG_SLOW = 0U,   /*!< SCG SLOW.   */\n    SCG_CLOCKOUT_SRC_SOSC     = 1U,   /*!< System OSC. */\n    SCG_CLOCKOUT_SRC_SIRC     = 2U,   /*!< Slow IRC.   */\n    SCG_CLOCKOUT_SRC_FIRC     = 3U,   /*!< Fast IRC.   */\n    SCG_CLOCKOUT_SRC_SPLL     = 6U,   /*!< System PLL. */\n} scg_clockout_src_t;\n/*! @} */\n\n\n/*!\n * @brief SCG asynchronous clock divider value.\n * Implements scg_async_clock_div_t_Class\n */\ntypedef enum\n{\n    SCG_ASYNC_CLOCK_DISABLE   = 0U,        /*!< Clock output is disabled.  */\n    SCG_ASYNC_CLOCK_DIV_BY_1  = 1U,        /*!< Divided by 1.              */\n    SCG_ASYNC_CLOCK_DIV_BY_2  = 2U,        /*!< Divided by 2.              */\n    SCG_ASYNC_CLOCK_DIV_BY_4  = 3U,        /*!< Divided by 4.              */\n    SCG_ASYNC_CLOCK_DIV_BY_8  = 4U,        /*!< Divided by 8.              */\n    SCG_ASYNC_CLOCK_DIV_BY_16 = 5U,        /*!< Divided by 16.             */\n    SCG_ASYNC_CLOCK_DIV_BY_32 = 6U,        /*!< Divided by 32.             */\n    SCG_ASYNC_CLOCK_DIV_BY_64 = 7U         /*!< Divided by 64.             */\n} scg_async_clock_div_t;\n\n\n/*!\n * @brief SCG system OSC monitor mode.\n * Implements scg_sosc_monitor_mode_t_Class\n */\ntypedef enum\n{\n    SCG_SOSC_MONITOR_DISABLE = 0U,                         /*!< Monitor disable.                          */\n    SCG_SOSC_MONITOR_INT     = 1U,                         /*!< Interrupt when system OSC error detected. */\n    SCG_SOSC_MONITOR_RESET   = 2U,                          /*!< Reset when system OSC error detected.     */\n} scg_sosc_monitor_mode_t;\n\n/*!\n * @brief SCG OSC frequency range select\n * Implements scg_sosc_range_t_Class\n */\ntypedef enum\n{\n    SCG_SOSC_RANGE_MID    = 2U,  /*!< Medium frequency range selected for the crystal OSC (4 Mhz to 8 Mhz).  */\n    SCG_SOSC_RANGE_HIGH   = 3U,  /*!< High frequency range selected for the crystal OSC (8 Mhz to 40 Mhz).   */\n} scg_sosc_range_t;\n\n/*!\n * @brief SCG OSC high gain oscillator select.\n * Implements scg_sosc_gain_t_Class\n */\ntypedef enum\n{\n    SCG_SOSC_GAIN_LOW    = 0x0,  /*!< Configure crystal oscillator for low-power operation */\n    SCG_SOSC_GAIN_HIGH   = 0x1,  /*!< Configure crystal oscillator for high-gain operation */\n} scg_sosc_gain_t;\n\n/*!\n * @brief SCG OSC external reference clock select.\n * Implements scg_sosc_ext_ref_t_Class\n */\ntypedef enum\n{\n    SCG_SOSC_REF_EXT   = 0x0,     /*!< External reference clock requested    */\n    SCG_SOSC_REF_OSC   = 0x1,     /*!< Internal oscillator of OSC requested. */\n} scg_sosc_ext_ref_t;\n\n/*!\n * @brief SCG system OSC configuration.\n * Implements scg_sosc_config_t_Class\n */\ntypedef struct\n{\n    uint32_t  freq;                        /*!< System OSC frequency.                                 */\n\n    scg_sosc_monitor_mode_t monitorMode;   /*!< System OSC Clock monitor mode.                       */\n\n    scg_sosc_ext_ref_t extRef;             /*!< System OSC External Reference Select.                */\n    scg_sosc_gain_t    gain;               /*!< System OSC high-gain operation.                      */\n\n    scg_sosc_range_t   range;              /*!< System OSC frequency range.                          */\n\n    scg_async_clock_div_t div1;            /*!< Asynchronous peripheral source.                      */\n    scg_async_clock_div_t div2;            /*!< Asynchronous peripheral source.                      */\n\n    bool enableInStop;                     /*!< System OSC is enable or not in stop mode.            */\n    bool enableInLowPower;                 /*!< System OSC is enable or not in low power mode.       */\n\n    bool locked;                           /*!< System OSC Control Register can be written.          */\n\n    bool initialize;                       /*!< Initialize or not the System OSC module.             */\n} scg_sosc_config_t;\n\n/*!\n * @brief SCG slow IRC clock frequency range.\n * Implements scg_sirc_range_t_Class\n */\ntypedef enum\n{\n    SCG_SIRC_RANGE_HIGH = 1U,  /*!< Slow IRC high range clock (8 MHz). */\n} scg_sirc_range_t;\n\n/*!\n * @brief SCG slow IRC clock configuration.\n * Implements scg_sirc_config_t_Class\n */\ntypedef struct\n{\n    scg_sirc_range_t range;         /*!< Slow IRC frequency range.                 */\n\n    scg_async_clock_div_t div1;     /*!< Asynchronous peripheral source.           */\n    scg_async_clock_div_t div2;     /*!< Asynchronous peripheral source.           */\n\n    bool initialize;                /*!< Initialize or not the SIRC module.        */\n    bool enableInStop;              /*!< SIRC is enable or not in stop mode.       */\n    bool enableInLowPower;          /*!< SIRC is enable or not in low power mode.  */\n\n    bool locked;                    /*!< SIRC Control Register can be written.     */\n} scg_sirc_config_t;\n\n/*!\n * @brief SCG fast IRC clock frequency range.\n * Implements scg_firc_range_t_Class\n */\ntypedef enum\n{\n    SCG_FIRC_RANGE_48M,   /*!< Fast IRC is trimmed to 48MHz.  */\n} scg_firc_range_t;\n\n/*!\n * @brief SCG fast IRC clock configuration.\n * Implements scg_firc_config_t_Class\n */\ntypedef struct\n{\n    scg_firc_range_t range;            /*!< Fast IRC frequency range.                 */\n\n    scg_async_clock_div_t div1;        /*!< Asynchronous peripheral source.           */\n    scg_async_clock_div_t div2;        /*!< Asynchronous peripheral source.           */\n\n    bool enableInStop;                 /*!< FIRC is enable or not in stop mode.       */\n    bool enableInLowPower;             /*!< FIRC is enable or not in lowpower mode.   */\n    bool regulator;                    /*!< FIRC regulator is enable or not.          */\n    bool locked;                       /*!< FIRC Control Register can be written.     */\n\n    bool initialize;                   /*!< Initialize or not the FIRC module.        */\n} scg_firc_config_t;\n\n/*!\n * @brief SCG system PLL monitor mode.\n * Implements scg_spll_monitor_mode_t_Class\n */\ntypedef enum\n{\n    SCG_SPLL_MONITOR_DISABLE = 0U,                         /*!< Monitor disable.                          */\n    SCG_SPLL_MONITOR_INT     = 1U,                         /*!< Interrupt when system PLL error detected. */\n    SCG_SPLL_MONITOR_RESET   = 2U                          /*!< Reset when system PLL error detected.     */\n} scg_spll_monitor_mode_t;\n\n\n/*!\n * @brief SCG system PLL predivider.\n */\ntypedef enum\n{\n    SCG_SPLL_CLOCK_PREDIV_BY_1 = 0U,\n    SCG_SPLL_CLOCK_PREDIV_BY_2 = 1U,\n    SCG_SPLL_CLOCK_PREDIV_BY_3 = 2U,\n    SCG_SPLL_CLOCK_PREDIV_BY_4 = 3U,\n    SCG_SPLL_CLOCK_PREDIV_BY_5 = 4U,\n    SCG_SPLL_CLOCK_PREDIV_BY_6 = 5U,\n    SCG_SPLL_CLOCK_PREDIV_BY_7 = 6U,\n    SCG_SPLL_CLOCK_PREDIV_BY_8 = 7U\n\n} scg_spll_clock_prediv_t;\n\n/*!\n * @brief SCG system PLL multiplier.\n */\ntypedef enum\n{\n    SCG_SPLL_CLOCK_MULTIPLY_BY_16 = 0U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_17 = 1U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_18 = 2U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_19 = 3U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_20 = 4U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_21 = 5U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_22 = 6U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_23 = 7U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_24 = 8U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_25 = 9U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_26 = 10U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_27 = 11U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_28 = 12U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_29 = 13U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_30 = 14U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_31 = 15U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_32 = 16U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_33 = 17U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_34 = 18U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_35 = 19U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_36 = 20U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_37 = 21U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_38 = 22U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_39 = 23U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_40 = 24U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_41 = 25U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_42 = 26U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_43 = 27U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_44 = 28U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_45 = 29U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_46 = 30U,\n    SCG_SPLL_CLOCK_MULTIPLY_BY_47 = 31U\n} scg_spll_clock_multiply_t;\n\n/*!\n * @brief SCG system PLL configuration.\n * Implements scg_spll_config_t_Class\n */\ntypedef struct\n{\n    scg_spll_monitor_mode_t monitorMode; /*!< Clock monitor mode selected.                    */\n\n    uint8_t        prediv;               /*!< PLL reference clock divider.                    */\n    uint8_t        mult;                 /*!< System PLL multiplier.                          */\n    uint8_t        src;                  /*!< System PLL source.                              */\n\n    scg_async_clock_div_t div1;          /*!< Asynchronous peripheral source.                 */\n    scg_async_clock_div_t div2;          /*!< Asynchronous peripheral source.                 */\n\n    bool enableInStop;                   /*!< System PLL clock is enable or not in stop mode. */\n\n    bool locked;                         /*!< System PLL Control Register can be written.     */\n    bool initialize;                     /*!< Initialize or not the System PLL module.        */\n} scg_spll_config_t;\n\n/*!\n * @brief SCG RTC configuration.\n * Implements scg_rtc_config_t_Class\n */\ntypedef struct\n{\n    uint32_t rtcClkInFreq;              /*!< RTC_CLKIN frequency.                            */\n    bool initialize;                    /*!< Initialize or not the RTC.                      */\n} scg_rtc_config_t;\n\n/*!\n * @brief SCG Clock Mode Configuration structure.\n * Implements scg_clock_mode_config_t_Class\n */\ntypedef struct\n{\n    scg_system_clock_config_t rccrConfig;      /*!< Run Clock Control configuration.                 */\n    scg_system_clock_config_t vccrConfig;      /*!< VLPR Clock Control configuration.                */\n    scg_system_clock_config_t hccrConfig;      /*!< HSRUN Clock Control configuration.               */\n    scg_system_clock_src_t    alternateClock;  /*!< Alternate clock used during initialization       */\n    bool                      initialize;      /*!< Initialize or not the Clock Mode Configuration.  */\n} scg_clock_mode_config_t;\n\n/*!\n * @brief SCG ClockOut Configuration structure.\n * Implements scg_clockout_config_t_Class\n */\ntypedef struct\n{\n    scg_clockout_src_t        source;          /*!< ClockOut source select.                          */\n    bool                      initialize;      /*!< Initialize or not the ClockOut.                  */\n} scg_clockout_config_t;\n\n/*!\n * @brief SCG configure structure.\n * Implements scg_config_t_Class\n */\ntypedef struct\n{\n    scg_sirc_config_t         sircConfig;      /*!< Slow internal reference clock configuration.     */\n    scg_firc_config_t         fircConfig;      /*!< Fast internal reference clock configuration.     */\n    scg_sosc_config_t         soscConfig;      /*!< System oscillator configuration.                 */\n    scg_spll_config_t         spllConfig;      /*!< System Phase locked loop configuration.          */\n    scg_rtc_config_t          rtcConfig;       /*!< Real Time Clock configuration.                   */\n    scg_clockout_config_t     clockOutConfig;  /*!< SCG ClockOut Configuration.                      */\n    scg_clock_mode_config_t   clockModeConfig; /*!< SCG Clock Mode Configuration.                    */\n} scg_config_t;\n\n/*! @brief PCC clock source select\n *  Implements peripheral_clock_source_t_Class\n */\ntypedef uint8_t peripheral_clock_source_t;\n\n#define    CLK_SRC_OFF          0x00U             /*!< Clock is off */\n#define    CLK_SRC_SOSC         0x01U             /*!< OSCCLK - System Oscillator Bus Clock */\n#define    CLK_SRC_SIRC         0x02U             /*!< SCGIRCLK - Slow IRC Clock */\n#define    CLK_SRC_FIRC         0x03U             /*!< SCGFIRCLK - Fast IRC Clock */\n#define    CLK_SRC_SPLL         0x06U             /*!< SCGPCLK System PLL clock */\n#define    CLK_SRC_SOSC_DIV1    0x01U             /*!< OSCCLK - System Oscillator Bus Clock */\n#define    CLK_SRC_SIRC_DIV1    0x02U             /*!< SCGIRCLK - Slow IRC Clock */\n#define    CLK_SRC_FIRC_DIV1    0x03U             /*!< SCGFIRCLK - Fast IRC Clock */\n#define    CLK_SRC_SPLL_DIV1    0x06U             /*!< SCGPCLK System PLL clock */\n#define    CLK_SRC_SOSC_DIV2    0x01U             /*!< OSCCLK - System Oscillator Bus Clock */\n#define    CLK_SRC_SIRC_DIV2    0x02U             /*!< SCGIRCLK - Slow IRC Clock */\n#define    CLK_SRC_FIRC_DIV2    0x03U             /*!< SCGFIRCLK - Fast IRC Clock */\n#define    CLK_SRC_SPLL_DIV2    0x06U             /*!< SCGPCLK System PLL clock */\n#ifdef FEATURE_HAS_LPO_PERIPHERAL_CLOCK_SOURCE\n#define    CLK_SRC_LPO          0x07U             /*!< LPO clock */\n#endif\n\n/*! @brief PCC fractional value select\n *  Implements peripheral_clock_frac_t_Class\n */\ntypedef enum\n{\n    MULTIPLY_BY_ONE   = 0x00U,             /*!< Fractional value is zero */\n    MULTIPLY_BY_TWO   = 0x01U              /*!< Fractional value is one */\n} peripheral_clock_frac_t;\n\n/*! @brief PCC divider value select\n *  Implements peripheral_clock_divider_t_Class\n */\ntypedef enum\n{\n    DIVIDE_BY_ONE     = 0x00U,             /*!< Divide by 1 (pass-through, no clock divide) */\n    DIVIDE_BY_TWO     = 0x01U,             /*!< Divide by 2 */\n    DIVIDE_BY_THREE   = 0x02U,             /*!< Divide by 3 */\n    DIVIDE_BY_FOUR    = 0x03U,             /*!< Divide by 4 */\n    DIVIDE_BY_FIVE    = 0x04U,             /*!< Divide by 5 */\n    DIVIDE_BY_SIX     = 0x05U,             /*!< Divide by 6 */\n    DIVIDE_BY_SEVEN   = 0x06U,             /*!< Divide by 7 */\n    DIVIDE_BY_EIGTH   = 0x07U              /*!< Divide by 8 */\n} peripheral_clock_divider_t;\n\n/*! @brief PCC peripheral instance clock configuration.\n *  Implements peripheral_clock_config_t_Class\n */\ntypedef struct\n{\n    /* clockName   is the name of the peripheral clock\n     *    must be one of the following values (see the clock_names_t type from S32K1xx_clock_names.h)\n     *    PCC_DMA0_CLOCK\n     *    PCC_MPU0_CLOCK\n     *    ...\n     *    PCC_LPUART3_CLOCK\n     */\n    clock_names_t clockName;\n    bool clkGate;                                      /*!< Peripheral clock gate.                     */\n    peripheral_clock_source_t clkSrc;                  /*!< Peripheral clock source.                   */\n    peripheral_clock_frac_t frac;                      /*!< Peripheral clock fractional value.         */\n    peripheral_clock_divider_t divider;                /*!< Peripheral clock divider value.            */\n} peripheral_clock_config_t;\n\n/*! @brief PCC configuration.\n *  Implements pcc_config_t_Class\n */\ntypedef struct\n{\n    uint32_t count;                                    /*!< Number of peripherals to be configured.               */\n    peripheral_clock_config_t * peripheralClocks;       /*!< Pointer to the peripheral clock configurations array. */\n} pcc_config_t;\n\n/*! @brief PMC LPO configuration.\n * Implements pmc_lpo_clock_config_t_Class\n */\ntypedef struct\n{\n    bool                  initialize;       /*!< Initialize or not the PMC LPO settings. */\n    bool                  enable;           /*!< Enable/disable LPO     */\n    int8_t                trimValue;        /*!< LPO trimming value     */\n} pmc_lpo_clock_config_t;\n\n/*!\n * @brief PMC configure structure.\n * Implements pmc_config_t_Class\n */\ntypedef struct\n{\n    pmc_lpo_clock_config_t lpoClockConfig;   /*!< Low Power Clock configuration.     */\n} pmc_config_t;\n\n/*!\n * @brief Clock configuration structure.\n * Implements clock_manager_user_config_t_Class\n */\ntypedef struct\n{\n    scg_config_t                scgConfig;      /*!< SCG Clock configuration.      */\n    sim_clock_config_t          simConfig;      /*!< SIM Clock configuration.      */\n    pcc_config_t                pccConfig;      /*!< PCC Clock configuration.      */\n    pmc_config_t                pmcConfig;      /*!< PMC Clock configuration.      */\n} clock_manager_user_config_t;\n\ntypedef clock_manager_user_config_t clock_user_config_t;\n\n/*!\n * @brief Power mode.\n * Implements pwr_modes_t_Class\n */\ntypedef enum {\n\n    NO_MODE       = 0U,\n    RUN_MODE      = (1U<<0U),\n    VLPR_MODE     = (1U<<1U),\n    HSRUN_MODE    = (1U<<2U),\n    STOP_MODE     = (1U<<3U),\n    VLPS_MODE     = (1U<<4U),\n    ALL_MODES     = 0x7FFFFFFF\n\n} pwr_modes_t;\n\n\n/*!\n * @brief XOSC reference clock select (internal oscillator is bypassed or not)\n * Implements xosc_ref_t_Class\n */\ntypedef enum\n{\n    XOSC_EXT_REF  = 0U,      /*!< Internal oscillator is bypassed, external reference clock requested. */\n    XOSC_INT_OSC  = 1U,      /*!< Internal oscillator of XOSC requested. */\n} xosc_ref_t;\n\n/*! @brief module clock configuration.\n *  Implements module_clk_config_t_Class\n */\ntypedef struct\n{\n    bool          gating;                     /*!< Clock gating. */\n    clock_names_t source;                     /*!< Clock source input (some modules don't have protocol clock) */\n    uint16_t      mul;                        /*!< Multiplier (some modules don't have fractional) */\n    uint16_t      div;                        /*!< Divider (some modules don't have divider) */\n\n}module_clk_config_t;\n\n/*!\n * @brief System clock configuration.\n * Implements sys_clk_config_t_Class\n */\ntypedef struct\n{\n    clock_names_t src;                         /*!< System clock source. */\n    uint16_t dividers[SYS_CLK_MAX_NO];         /*!< System clock dividers. Value by which system clock is divided. 0 means that system clock is not divided. */\n} sys_clk_config_t;\n\n/*!\n * @brief Clock source configuration.\n * Implements clock_source_config_t_Class\n */\ntypedef struct\n{\n\tbool       enable;                   /*!< Enable/disable clock source. */\n\txosc_ref_t refClk;                   /*!< Bypass option. It applies to external oscillator clock sources                          */\n    uint32_t   refFreq;                  /*!< Frequency of the input reference clock. It applies to external oscillator clock sources */\n\tuint16_t   mul;                      /*!< Multiplier. It applies to PLL clock sources. Valid range is 16 - 47. */\n\tuint16_t   div;                      /*!< Divider. It applies to PLL clock sources. Valid range is 1-8. */\n\n\tuint16_t   outputDiv1;               /*!< First output divider. It's used as protocol clock by modules. Zero means that divider is disabled.   /\n\t\t\t\t\t\t\t\t\t\t  *   Possible values 0(disabled), 1, 2, 4, 8, 16, 32, 64; all the other values are not valid.             /\n\t\t\t\t\t\t\t\t\t\t  */\n\tuint16_t   outputDiv2;               /*!< Second output divider. It's used as protocol clock by modules. Zero means that divider is disabled.   /\n\t\t\t\t\t\t\t\t\t\t  *   Possible values 0(disabled), 1, 2, 4, 8, 16, 32, 64; all the other values are not valid.              /\n\t\t\t\t\t\t\t\t\t\t  */\n\n} clock_source_config_t;\n\n\n/*!\n * @brief The clock notification type.\n * Implements clock_manager_notify_t_Class\n */\ntypedef enum\n{\n    CLOCK_MANAGER_NOTIFY_RECOVER = 0x00U,  /*!< Notify IP to recover to previous work state.      */\n    CLOCK_MANAGER_NOTIFY_BEFORE  = 0x01U,  /*!< Notify IP that system will change clock setting.  */\n    CLOCK_MANAGER_NOTIFY_AFTER   = 0x02U,  /*!< Notify IP that have changed to new clock setting. */\n} clock_manager_notify_t;\n\n/*!\n * @brief The callback type, indicates what kinds of notification this callback handles.\n * Implements clock_manager_callback_type_t_Class\n */\ntypedef enum\n{\n    CLOCK_MANAGER_CALLBACK_BEFORE       = 0x01U, /*!< Callback handles BEFORE notification.          */\n    CLOCK_MANAGER_CALLBACK_AFTER        = 0x02U, /*!< Callback handles AFTER notification.           */\n    CLOCK_MANAGER_CALLBACK_BEFORE_AFTER = 0x03U  /*!< Callback handles BEFORE and AFTER notification */\n} clock_manager_callback_type_t;\n\n/*!\n * @brief Clock transition policy.\n * Implements clock_manager_policy_t_Class\n */\ntypedef enum\n{\n    CLOCK_MANAGER_POLICY_AGREEMENT,  /*!< Clock transfers gracefully. */\n    CLOCK_MANAGER_POLICY_FORCIBLE    /*!< Clock transfers forcefully. */\n} clock_manager_policy_t;\n\n/*!\n * @brief Clock notification structure passed to clock callback function.\n * Implements clock_notify_struct_t_Class\n */\ntypedef struct\n{\n    uint8_t targetClockConfigIndex;    /*!< Target clock configuration index. */\n    clock_manager_policy_t policy;     /*!< Clock transition policy.          */\n    clock_manager_notify_t notifyType; /*!< Clock notification type.          */\n} clock_notify_struct_t;\n\n/*!\n * @brief Type of clock callback functions.\n */\ntypedef status_t (*clock_manager_callback_t)(clock_notify_struct_t *notify,\n                                             void* callbackData);\n\n/*!\n * @brief Structure for callback function and its parameter.\n * Implements clock_manager_callback_user_config_t_Class\n */\ntypedef struct\n{\n    clock_manager_callback_t      callback;      /*!< Entry of callback function.     */\n    clock_manager_callback_type_t callbackType;  /*!< Callback type.                  */\n    void* callbackData;                          /*!< Parameter of callback function. */\n} clock_manager_callback_user_config_t;\n\n/*!\n * @brief Clock manager state structure.\n * Implements clock_manager_state_t_Class\n */\ntypedef struct\n{\n    clock_manager_user_config_t const **configTable;/*!< Pointer to clock configure table.*/\n    uint8_t clockConfigNum;                         /*!< Number of clock configurations.  */\n    uint8_t curConfigIndex;                         /*!< Index of current configuration.  */\n    clock_manager_callback_user_config_t **callbackConfig; /*!< Pointer to callback table.*/\n    uint8_t callbackNum;                            /*!< Number of clock callbacks.       */\n    uint8_t errorCallbackIndex;                     /*!< Index of callback returns error. */\n} clock_manager_state_t;\n\n\n\n/*******************************************************************************\n * API\n ******************************************************************************/\n\n#if defined (__cplusplus)\nextern \"C\" {\n#endif /* __cplusplus*/\n\n/*!\n * @brief Configures module clock\n *\n * This function configures a module clock according to the configuration.\n * If no configuration is provided (moduleClkConfig is null), then a default one is used\n * moduleClkConfig must be passed as null when module doesn't support protocol clock.\n *\n * @param[in] peripheralClock   Clock name of the configured module clock\n * @param[in] moduleClkConfig   Pointer to the configuration structure.\n */\nvoid CLOCK_DRV_SetModuleClock(clock_names_t peripheralClock, const module_clk_config_t * moduleClkConfig);\n\n/*!\n * @brief Configures the system clocks.\n *\n * This function configures the system clocks (core, bus and flash clocks) in the specified power mode.\n * If no power mode is specified (null parameter) then it is the current power mode.\n *\n * @param[in] mode              Pointer to power mode for which the configured system clocks apply\n * @param[in] sysClkConfig      Pointer to the system clocks configuration structure.\n */\nstatus_t CLOCK_DRV_SetSystemClock(const pwr_modes_t * mode,\n                                  const sys_clk_config_t * sysClkConfig);\n\n/*!\n * @brief Gets the system clock source.\n *\n * This function gets the current system clock source.\n *\n * @return Value of the current system clock source.\n */\nvoid CLOCK_DRV_GetSystemClockSource(sys_clk_config_t *sysClkConfig);\n\n/*!\n * @brief This function configures a clock source.\n *\n * The clock source is configured based on the provided configuration.\n * All values from the previous configuration of clock source are overwritten.\n * If no configuration is provided, then a default one is used.\n *\n * @param[in] clockSource  Clock name of the configured clock source\n * @param[in] clkSrcConfig Pointer to the configuration structure\n * @return Status of clock source initialization\n */\nstatus_t CLOCK_DRV_SetClockSource(clock_names_t clockSource, const clock_source_config_t * clkSrcConfig);\n\n/*!\n * @brief Install pre-defined clock configurations.\n *\n * This function installs the pre-defined clock configuration table to\n * clock manager.\n *\n * @param[in] clockConfigsPtr Pointer to the clock configuration table.\n * @param[in] configsNumber Number of clock configurations in table.\n * @param[in] callbacksPtr Pointer to the callback configuration table.\n * @param[in] callbacksNumber Number of callback configurations in table.\n *\n * @return Error code.\n */\nstatus_t CLOCK_SYS_Init(clock_manager_user_config_t const **clockConfigsPtr,\n                        uint8_t configsNumber,\n                        clock_manager_callback_user_config_t **callbacksPtr,\n                        uint8_t callbacksNumber);\n\n/*!\n * @brief Set system clock configuration according to pre-defined structure.\n *\n * This function sets system to target clock configuration; before transition,\n * clock manager will send notifications to all drivers registered to the\n * callback table.  When graceful policy is used, if some drivers are not ready\n * to change, clock transition will not occur, all drivers still work in\n * previous configuration and error is returned. When forceful policy is used,\n * all drivers should stop work and system changes to new clock configuration.\n * The function should be called only on run mode.\n *\n * @param[in] targetConfigIndex Index of the clock configuration.\n * @param[in] policy Transaction policy, graceful or forceful.\n *\n * @return Error code.\n *\n * @note If external clock is used in the target mode, please make sure it is\n * enabled, for example, if the external oscillator is used, please setup\n * EREFS/HGO correctly and make sure OSCINIT is set.\n */\nstatus_t CLOCK_SYS_UpdateConfiguration(uint8_t targetConfigIndex,\n                                       clock_manager_policy_t policy);\n\n/*!\n * @brief Set system clock configuration.\n *\n * This function sets the system to target configuration, it only sets the\n * clock modules registers for clock mode change, but not send notifications\n * to drivers. This function is different by different SoCs.\n *\n * @param[in] config Target configuration.\n *\n * @return Error code.\n *\n * @note If external clock is used in the target mode, please make sure it is\n * enabled, for example, if the external oscillator is used, please setup\n * EREFS/HGO correctly and make sure OSCINIT is set.\n * This function should be called only on run mode.\n */\nstatus_t CLOCK_SYS_SetConfiguration(clock_manager_user_config_t const * config);\n\n/*!\n * @brief Get current system clock configuration.\n *\n * @return Current clock configuration index.\n */\nuint8_t CLOCK_SYS_GetCurrentConfiguration(void);\n\n/*!\n * @brief Get the callback which returns error in last clock switch.\n *\n * When graceful policy is used, if some IP is not ready to change clock\n * setting, the callback will return error and system stay in current\n * configuration. Applications can use this function to check which\n * IP callback returns error.\n *\n * @return Pointer to the callback which returns error.\n */\nclock_manager_callback_user_config_t* CLOCK_SYS_GetErrorCallback(void);\n\n/*!\n * @brief Wrapper over CLOCK_DRV_GetFreq function. It's part of the old API.\n *\n * @param[in] clockName Clock names defined in clock_names_t\n * @param[out] frequency Returned clock frequency value in Hertz\n * @return status   Error code defined in status_t\n */\nstatus_t CLOCK_SYS_GetFreq(clock_names_t clockName, uint32_t *frequency);\n\n\n#if defined (__cplusplus)\n}\n#endif /* __cplusplus*/\n\n/*! @}*/\n\n#endif /* CLOCK_S32K1xx_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"clock_manager.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\inc","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2013 - 2015, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n#if !defined(CLOCK_MANAGER_H)\n#define CLOCK_MANAGER_H\n#include \"clock.h\"\n/*!\n * @file clock_manager.h\n *\n * @page misra_violations MISRA-C:2012 violations\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.\n * This header file is included by application only. It was created \n * for backward compatibility reasons.\n */\n#endif /* CLOCK_MANAGER_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"freemaster_cfg.h","type":"header","group":"","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: freemaster_cfg.h\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef freemaster_cfg_h_\r\n#define freemaster_cfg_h_\r\n\r\n/***************************************************************************/\r\n/*!\r\n *\r\n * @file   freemaster_cfg.h\r\n *\r\n * @brief  FreeMASTER Serial Communication Driver configuration file\r\n *\r\n *******************************************************************************/\r\n\r\n/******************************************************************************\r\n * Select interrupt or poll-driven serial communication\r\n ******************************************************************************/\r\n#define FMSTR_LONG_INTR                0                         /* complete message processing in interrupt */\r\n#define FMSTR_SHORT_INTR               1                         /* SCI FIFO-queuing done in interrupt */\r\n#define FMSTR_POLL_DRIVEN              0                         /* no interrupt needed, polling only */\r\n\r\n/*****************************************************************************\r\n * Select communication interface (SCI, CAN, USB CDC or Packet Driven BDM)\r\n ******************************************************************************/\r\n#define FMSTR_DISABLE                  0                         /* To disable all FreeMASTER functionalities */\r\n#define FMSTR_USE_SCI                  1                         /* To select SCI communication interface */\r\n#define FMSTR_SCI_BASE                 0x4006B000\r\n#define FMSTR_USE_MSCAN                0\r\n#define FMSTR_USE_FLEXCAN              0                         /* To select FlexCAN communication interface */\r\n#define FMSTR_USE_FLEXCAN32            0\r\n#define FMSTR_CAN_BASE                 0x40024000\r\n#define FMSTR_USE_SFIO                 0                         /* SFIO Toolbox has been used */\r\n#define FMSTR_USE_USB_CDC              0                         /* To select USB CDC communication interface */\r\n#define FMSTR_USE_PDBDM                0                         /* To select Packet Driven BDM communication interface (optional) */\r\n\r\n/* select RX and TX FlexCAN Message buffers */\r\n#define FMSTR_FLEXCAN_TXMB             0\r\n#define FMSTR_FLEXCAN_RXMB             1\r\n\r\n/******************************************************************************\r\n * Input/output communication buffer size\r\n ******************************************************************************/\r\n#define FMSTR_COMM_BUFFER_SIZE         0                         /* set to 0 for \"automatic\" */\r\n\r\n/******************************************************************************\r\n * Receive FIFO queue size (use with FMSTR_SHORT_INTR only)\r\n ******************************************************************************/\r\n#define FMSTR_COMM_RQUEUE_SIZE         0                         /* set to 0 for \"default\" */\r\n\r\n/*****************************************************************************\r\n * Support for Application Commands\r\n ******************************************************************************/\r\n#define FMSTR_USE_APPCMD               0                         /* enable/disable App.Commands support */\r\n#define FMSTR_APPCMD_BUFF_SIZE         0                         /* App.Command data buffer size */\r\n#define FMSTR_MAX_APPCMD_CALLS         1                         /* how many app.cmd callbacks? (0=disable) */\r\n\r\n/*****************************************************************************\r\n * Oscilloscope support\r\n ******************************************************************************/\r\n#define FMSTR_USE_SCOPE                1                         /* enable/disable scope support */\r\n#define FMSTR_MAX_SCOPE_VARS           8                         /* max. number of scope variables (2..8) */\r\n\r\n/*****************************************************************************\r\n * Recorder support\r\n ******************************************************************************/\r\n#define FMSTR_USE_RECORDER             1                         /* enable/disable recorder support */\r\n#define FMSTR_MAX_REC_VARS             8                         /* max. number of recorder variables (2..8) */\r\n#define FMSTR_REC_OWNBUFF              0                         /* use user-allocated rec. buffer (1=yes) */\r\n\r\n/* built-in recorder buffer (use when FMSTR_REC_OWNBUFF is 0) */\r\n#define FMSTR_REC_BUFF_SIZE            8192                      /* built-in buffer size */\r\n\r\n/* recorder time base, specifies how often the recorder is called in the user app. */\r\n#define FMSTR_REC_TIMEBASE             FMSTR_REC_BASE_MICROSEC(100) /* 0 = \"unknown\" */\r\n\r\n/*****************************************************************************\r\n * Target-side address translation (TSA)\r\n ******************************************************************************/\r\n#define FMSTR_USE_TSA                  0                         /* enable TSA functionality */\r\n#define FMSTR_USE_TSA_SAFETY           0                         /* enable access to TSA variables only */\r\n#define FMSTR_USE_TSA_INROM            0                         /* TSA tables declared as const (put to ROM) */\r\n\r\n/*****************************************************************************\r\n * Enable/Disable read/write memory commands\r\n ******************************************************************************/\r\n#define FMSTR_USE_READMEM              1                         /* enable read memory commands */\r\n#define FMSTR_USE_WRITEMEM             1                         /* enable write memory commands */\r\n#define FMSTR_USE_WRITEMEMMASK         1                         /* enable write memory bits commands */\r\n\r\n/*****************************************************************************\r\n * Enable/Disable read/write variable commands (a bit faster than Read Mem)\r\n ******************************************************************************/\r\n#define FMSTR_USE_READVAR              1                         /* enable read variable fast commands */\r\n#define FMSTR_USE_WRITEVAR             1                         /* enable write variable fast commands */\r\n#define FMSTR_USE_WRITEVARMASK         1                         /* enable write variable bits fast commands */\r\n#endif                                 /* freemaster_cfg_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"freemaster_interface_init.c","type":"source","group":"","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: freemaster_interface_init.c\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"freemaster.h\"\r\n#include \"freemaster_interface_init.h\"\r\n#include \"device_registers.h\"\r\n#include \"interrupt_manager.h\"\r\n#include \"lpuart_driver.h\"\r\n#include \"lpuart_hw_access.h\"\r\n#include \"pcc_hw_access.h\"\r\n#include \"pins_port_hw_access.h\"\r\n#include \"clock_manager.h\"\r\n\r\n/* FreeMaster UART init function */\r\nvoid freemaster_interface_init(void)\r\n{\r\n  lpuart_state_t lpuartState;\r\n  lpuart_user_config_t lpuartConfig;\r\n\r\n  /* RX pin settings */\r\n  PCC_SetClockMode(PCC, PORTC_CLK, true);\r\n  PINS_SetMuxModeSel(PORTC, 6, PORT_MUX_ALT2);\r\n\r\n  /* TX pin settings */\r\n  PCC_SetClockMode(PCC, PORTC_CLK, true);\r\n  PINS_SetMuxModeSel(PORTC, 7, PORT_MUX_ALT2);\r\n\r\n  /* Set LPUART clock source */\r\n  PCC_SetPeripheralClockControl(PCC, LPUART1_CLK, true, CLK_SRC_FIRC_DIV2, 0, 0);\r\n  lpuartConfig.baudRate = 57600;\r\n  lpuartConfig.bitCountPerChar = LPUART_8_BITS_PER_CHAR;\r\n  lpuartConfig.parityMode = LPUART_PARITY_DISABLED;\r\n  lpuartConfig.stopBitCount = LPUART_ONE_STOP_BIT;\r\n  LPUART_DRV_Init(1, &lpuartState, &lpuartConfig);\r\n\r\n  /* Enable the LPUART transmitter and receiver */\r\n  LPUART_SetTransmitterCmd(LPUART1, true);\r\n  LPUART_SetReceiverCmd(LPUART1, true);\r\n}\r\n\r\nvoid freemaster_interface_isr_init(void)\r\n{\r\n  /* Set priority for LPUART1 RxTx interrupt */\r\n  INT_SYS_SetPriority (LPUART1_RxTx_IRQn, 14);\r\n\r\n  /* Register interrupt handler*/\r\n  INT_SYS_InstallHandler(LPUART1_RxTx_IRQn, FMSTR_Isr, (isr_t *)0);\r\n\r\n  /* Enable LPUART1 RxTx interrupt.*/\r\n  INT_SYS_EnableIRQ(LPUART1_RxTx_IRQn);\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"freemaster_interface_init.h","type":"header","group":"","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: freemaster_interface_init.h\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef freemaster_interface_init_h_\r\n#define freemaster_interface_init_h_\r\n\r\nvoid freemaster_interface_init(void);\r\nvoid freemaster_interface_isr_init(void);\r\n\r\n#endif                                 /* freemaster_interface_init_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"ftm2_ch1_hall_sensor_isr.c","type":"source","group":"legacy","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#include \"ftm2_ch1_hall_sensor_isr.h\"\r\n#include \"ftm_ic_driver.h\"\r\n#include \"ftm_hw_access.h\"\r\n#include \"ftm_common.h\"\r\n\r\nvoid FTM2_Ch1_Hall_Sensor_isr(void)\r\n{\r\n  CntHall = FTM_DRV_GetChnCountVal(FTM2, 1);\r\n\r\n  /* Output and update for function-call system: '<Root>/Hall Sensor' */\r\n  {\r\n    int32_T rtb_Add1;\r\n    int16_T rtb_Merge1;\r\n    boolean_T rtb_Merge3;\r\n\r\n    /* S-Function (gpio_s32k_input): '<S119>/Digital_Input_HALL_A' */\r\n\r\n    /* GPIPORTA1 signal update */\r\n    Foc_model_Matlab_B.Digital_Input_HALL_A_b = (PINS_DRV_ReadPins(PTA) >> 1) &\r\n      0x01;\r\n\r\n    /* Outputs for Atomic SubSystem: '<S119>/Bit Shift' */\r\n    /* MATLAB Function: '<S121>/bit_shift' incorporates:\r\n     *  DataTypeConversion: '<S119>/Data Type Conversion3'\r\n     */\r\n    /* MATLAB Function 'Logic and Bit Operations/Bit Shift/bit_shift': '<S123>:1' */\r\n    /* '<S123>:1:6' */\r\n    HALL_A = (uint32_T)Foc_model_Matlab_B.Digital_Input_HALL_A_b << 2;\r\n\r\n    /* End of Outputs for SubSystem: '<S119>/Bit Shift' */\r\n\r\n    /* S-Function (gpio_s32k_input): '<S119>/Digital_Input_HALL_B' */\r\n\r\n    /* GPIPORTD10 signal update */\r\n    Foc_model_Matlab_B.Digital_Input_HALL_B_l = (PINS_DRV_ReadPins(PTD) >> 10) &\r\n      0x01;\r\n\r\n    /* Outputs for Atomic SubSystem: '<S119>/Bit Shift1' */\r\n    /* MATLAB Function: '<S122>/bit_shift' incorporates:\r\n     *  DataTypeConversion: '<S119>/Data Type Conversion2'\r\n     */\r\n    /* MATLAB Function 'Logic and Bit Operations/Bit Shift/bit_shift': '<S124>:1' */\r\n    /* '<S124>:1:6' */\r\n    HALL_B = (uint32_T)Foc_model_Matlab_B.Digital_Input_HALL_B_l << 1;\r\n\r\n    /* End of Outputs for SubSystem: '<S119>/Bit Shift1' */\r\n\r\n    /* S-Function (gpio_s32k_input): '<S119>/Digital_Input_HALL_C' */\r\n\r\n    /* GPIPORTD11 signal update */\r\n    Foc_model_Matlab_B.Digital_Input_HALL_C_h = (PINS_DRV_ReadPins(PTD) >> 11) &\r\n      0x01;\r\n\r\n    /* DataTypeConversion: '<S119>/Data Type Conversion6' */\r\n    HALL_C = (uint32_T)Foc_model_Matlab_B.Digital_Input_HALL_C_h;\r\n\r\n    /* Sum: '<S119>/Add1' */\r\n    rtb_Add1 = (int32_T)((HALL_A + HALL_B) + HALL_C);\r\n\r\n    /* SwitchCase: '<S120>/Detects if the halls reading is valid' incorporates:\r\n     *  DataTypeConversion: '<S120>/Data Type Conversion1'\r\n     */\r\n    switch (rtb_Add1) {\r\n     case 6:\r\n     case 4:\r\n     case 5:\r\n     case 1:\r\n     case 3:\r\n     case 2:\r\n      /* Outputs for IfAction SubSystem: '<S125>/Valid Halls' incorporates:\r\n       *  ActionPort: '<S127>/Action Port'\r\n       */\r\n      /* SwitchCase: '<S127>/Switch Case' */\r\n      switch (rtb_Add1) {\r\n       case 6:\r\n        /* Outputs for IfAction SubSystem: '<S127>/If Action Subsystem' incorporates:\r\n         *  ActionPort: '<S128>/Action Port'\r\n         */\r\n        /* Merge: '<S127>/Merge' incorporates:\r\n         *  Constant: '<S128>/previous'\r\n         *  SignalConversion generated from: '<S128>/Out1'\r\n         */\r\n        Foc_model_Matlab_B.Merge_m = 2U;\r\n\r\n        /* Merge: '<S127>/Merge1' incorporates:\r\n         *  Constant: '<S128>/next'\r\n         *  SignalConversion generated from: '<S128>/Out2'\r\n         */\r\n        Foc_model_Matlab_B.Merge1 = 4U;\r\n\r\n        /* End of Outputs for SubSystem: '<S127>/If Action Subsystem' */\r\n        break;\r\n\r\n       case 4:\r\n        /* Outputs for IfAction SubSystem: '<S127>/If Action Subsystem1' incorporates:\r\n         *  ActionPort: '<S129>/Action Port'\r\n         */\r\n        /* Merge: '<S127>/Merge' incorporates:\r\n         *  Constant: '<S129>/previous'\r\n         *  SignalConversion generated from: '<S129>/Out1'\r\n         */\r\n        Foc_model_Matlab_B.Merge_m = 6U;\r\n\r\n        /* Merge: '<S127>/Merge1' incorporates:\r\n         *  Constant: '<S129>/next'\r\n         *  SignalConversion generated from: '<S129>/Out2'\r\n         */\r\n        Foc_model_Matlab_B.Merge1 = 5U;\r\n\r\n        /* End of Outputs for SubSystem: '<S127>/If Action Subsystem1' */\r\n        break;\r\n\r\n       case 5:\r\n        /* Outputs for IfAction SubSystem: '<S127>/If Action Subsystem2' incorporates:\r\n         *  ActionPort: '<S130>/Action Port'\r\n         */\r\n        /* Merge: '<S127>/Merge' incorporates:\r\n         *  Constant: '<S130>/previous'\r\n         *  SignalConversion generated from: '<S130>/Out1'\r\n         */\r\n        Foc_model_Matlab_B.Merge_m = 4U;\r\n\r\n        /* Merge: '<S127>/Merge1' incorporates:\r\n         *  Constant: '<S130>/next'\r\n         *  SignalConversion generated from: '<S130>/Out2'\r\n         */\r\n        Foc_model_Matlab_B.Merge1 = 1U;\r\n\r\n        /* End of Outputs for SubSystem: '<S127>/If Action Subsystem2' */\r\n        break;\r\n\r\n       case 1:\r\n        /* Outputs for IfAction SubSystem: '<S127>/If Action Subsystem3' incorporates:\r\n         *  ActionPort: '<S131>/Action Port'\r\n         */\r\n        /* Merge: '<S127>/Merge' incorporates:\r\n         *  Constant: '<S131>/previous'\r\n         *  SignalConversion generated from: '<S131>/Out1'\r\n         */\r\n        Foc_model_Matlab_B.Merge_m = 5U;\r\n\r\n        /* Merge: '<S127>/Merge1' incorporates:\r\n         *  Constant: '<S131>/next'\r\n         *  SignalConversion generated from: '<S131>/Out2'\r\n         */\r\n        Foc_model_Matlab_B.Merge1 = 3U;\r\n\r\n        /* End of Outputs for SubSystem: '<S127>/If Action Subsystem3' */\r\n        break;\r\n\r\n       case 3:\r\n        /* Outputs for IfAction SubSystem: '<S127>/If Action Subsystem4' incorporates:\r\n         *  ActionPort: '<S132>/Action Port'\r\n         */\r\n        /* Merge: '<S127>/Merge' incorporates:\r\n         *  Constant: '<S132>/previous'\r\n         *  SignalConversion generated from: '<S132>/Out1'\r\n         */\r\n        Foc_model_Matlab_B.Merge_m = 1U;\r\n\r\n        /* Merge: '<S127>/Merge1' incorporates:\r\n         *  Constant: '<S132>/next'\r\n         *  SignalConversion generated from: '<S132>/Out2'\r\n         */\r\n        Foc_model_Matlab_B.Merge1 = 2U;\r\n\r\n        /* End of Outputs for SubSystem: '<S127>/If Action Subsystem4' */\r\n        break;\r\n\r\n       case 2:\r\n        /* Outputs for IfAction SubSystem: '<S127>/If Action Subsystem5' incorporates:\r\n         *  ActionPort: '<S133>/Action Port'\r\n         */\r\n        /* Merge: '<S127>/Merge' incorporates:\r\n         *  Constant: '<S133>/previous'\r\n         *  SignalConversion generated from: '<S133>/Out1'\r\n         */\r\n        Foc_model_Matlab_B.Merge_m = 3U;\r\n\r\n        /* Merge: '<S127>/Merge1' incorporates:\r\n         *  Constant: '<S133>/next'\r\n         *  SignalConversion generated from: '<S133>/Out2'\r\n         */\r\n        Foc_model_Matlab_B.Merge1 = 6U;\r\n\r\n        /* End of Outputs for SubSystem: '<S127>/If Action Subsystem5' */\r\n        break;\r\n\r\n       default:\r\n        /* no actions */\r\n        break;\r\n      }\r\n\r\n      /* End of SwitchCase: '<S127>/Switch Case' */\r\n\r\n      /* If: '<S127>/If' incorporates:\r\n       *  DataStoreRead: '<S2>/Data Store Read'\r\n       *  DataTypeConversion: '<S120>/Data Type Conversion2'\r\n       */\r\n      if ((uint16_T)GlobalHallState == Foc_model_Matlab_B.Merge_m) {\r\n        /* Outputs for IfAction SubSystem: '<S127>/If Action Subsystem6' incorporates:\r\n         *  ActionPort: '<S134>/Action Port'\r\n         */\r\n        /* Merge: '<S127>/Merge2' incorporates:\r\n         *  Constant: '<S134>/Constant'\r\n         *  SignalConversion generated from: '<S134>/direction'\r\n         */\r\n        Foc_model_Matlab_B.Merge2 = 1;\r\n\r\n        /* Merge: '<S127>/Merge3' incorporates:\r\n         *  Constant: '<S134>/Constant1'\r\n         *  SignalConversion generated from: '<S134>/sequence_check'\r\n         */\r\n        HallValididyInvalid = 0U;\r\n\r\n        /* End of Outputs for SubSystem: '<S127>/If Action Subsystem6' */\r\n      } else if ((uint16_T)GlobalHallState == Foc_model_Matlab_B.Merge1) {\r\n        /* Outputs for IfAction SubSystem: '<S127>/If Action Subsystem7' incorporates:\r\n         *  ActionPort: '<S135>/Action Port'\r\n         */\r\n        /* Merge: '<S127>/Merge2' incorporates:\r\n         *  Constant: '<S135>/Constant'\r\n         *  SignalConversion generated from: '<S135>/direction'\r\n         */\r\n        Foc_model_Matlab_B.Merge2 = -1;\r\n\r\n        /* Merge: '<S127>/Merge3' incorporates:\r\n         *  Constant: '<S135>/Constant1'\r\n         *  SignalConversion generated from: '<S135>/sequence_check'\r\n         */\r\n        HallValididyInvalid = 0U;\r\n\r\n        /* End of Outputs for SubSystem: '<S127>/If Action Subsystem7' */\r\n      } else {\r\n        /* Outputs for IfAction SubSystem: '<S127>/If Action Subsystem8' incorporates:\r\n         *  ActionPort: '<S136>/Action Port'\r\n         */\r\n        /* Merge: '<S127>/Merge3' incorporates:\r\n         *  Constant: '<S136>/Constant'\r\n         *  SignalConversion generated from: '<S136>/sequence_check'\r\n         */\r\n        HallValididyInvalid = 1U;\r\n\r\n        /* End of Outputs for SubSystem: '<S127>/If Action Subsystem8' */\r\n      }\r\n\r\n      /* End of If: '<S127>/If' */\r\n\r\n      /* SignalConversion: '<S127>/Signal Conversion1' */\r\n      rtb_Merge1 = Foc_model_Matlab_B.Merge2;\r\n\r\n      /* Switch: '<S127>/Switch' incorporates:\r\n       *  Constant: '<S127>/Constant'\r\n       *  DataStoreRead: '<S2>/Data Store Read1'\r\n       *  RelationalOperator: '<S127>/Relational Operator'\r\n       */\r\n      if (HallValididyInvalid != 0) {\r\n        rtb_Merge3 = false;\r\n      } else {\r\n        rtb_Merge3 = (Foc_model_Matlab_B.Merge2 == GlobalDirection);\r\n      }\r\n\r\n      /* End of Switch: '<S127>/Switch' */\r\n      /* End of Outputs for SubSystem: '<S125>/Valid Halls' */\r\n      break;\r\n\r\n     default:\r\n      /* Outputs for IfAction SubSystem: '<S125>/Bad hall (glitch or wrong connection)' incorporates:\r\n       *  ActionPort: '<S126>/Action Port'\r\n       */\r\n      /* Merge: '<S125>/Merge' incorporates:\r\n       *  Constant: '<S126>/Constant'\r\n       *  SignalConversion generated from: '<S126>/inValidHall'\r\n       */\r\n      HallValididyInvalid = 1U;\r\n\r\n      /* SignalConversion: '<S126>/Signal Conversion' incorporates:\r\n       *  DataStoreRead: '<S2>/Data Store Read1'\r\n       */\r\n      rtb_Merge1 = GlobalDirection;\r\n\r\n      /* SignalConversion generated from: '<S126>/directional_speed_valid_flag' incorporates:\r\n       *  Constant: '<S126>/Constant1'\r\n       */\r\n      rtb_Merge3 = false;\r\n\r\n      /* End of Outputs for SubSystem: '<S125>/Bad hall (glitch or wrong connection)' */\r\n      break;\r\n    }\r\n\r\n    /* End of SwitchCase: '<S120>/Detects if the halls reading is valid' */\r\n\r\n    /* DataTypeConversion: '<S125>/Data Type Conversion' incorporates:\r\n     *  DataStoreWrite: '<S2>/Data Store Write'\r\n     */\r\n    GlobalSpeedValidity = (uint16_T)rtb_Merge3;\r\n\r\n    /* DataStoreWrite: '<S2>/Data Store Write1' */\r\n    GlobalDirection = rtb_Merge1;\r\n\r\n    /* DataStoreWrite: '<S2>/Data Store Write2' incorporates:\r\n     *  Constant: '<S120>/Constant'\r\n     */\r\n    HallStateChangeFlag = 1U;\r\n\r\n    /* Switch: '<S2>/Switch' incorporates:\r\n     *  DataStoreRead: '<S2>/Data Store Read3'\r\n     *  DataStoreWrite: '<S2>/Data Store Write4'\r\n     */\r\n    if (HallCntActual > 100) {\r\n      HallCntPrev = HallCntActual;\r\n    }\r\n\r\n    /* End of Switch: '<S2>/Switch' */\r\n\r\n    /* SignalConversion generated from: '<S2>/Variant Source2' incorporates:\r\n     *  DataStoreWrite: '<S2>/Data Store Write4'\r\n     */\r\n    CntHallValidityIn = HallCntPrev;\r\n\r\n    /* DataStoreWrite: '<S2>/Data Store Write3' */\r\n    GlobalSpeedCount = CntHallValidityIn;\r\n\r\n    /* DataStoreWrite: '<S2>/Data Store Write7' */\r\n    GlobalHallState = (uint32_T)rtb_Add1;\r\n  }\r\n}\r\n"},{"name":"ftm2_ch1_hall_sensor_isr.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#include \"Foc_model_Matlab.h\"\r\n#include \"Foc_model_Matlab_private.h\"\r\n#ifndef FTM2_CH1_ISR_H\r\n#define FTM2_CH1_ISR_H\r\n\r\nvoid FTM2_Ch1_Hall_Sensor_isr(void);\r\n\r\n#endif\r\n"},{"name":"ftm2_input_params_config.c","type":"source","group":"legacy","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#include \"ftm2_input_params_config.h\"\r\n\r\nftm_input_ch_param_t ftm2input_ch_param[1U] = {\r\n  {\r\n    1U,                                /* Channel id */\r\n    FTM_EDGE_DETECT,                   /* Input capture operation mode */\r\n    FTM_BOTH_EDGES,                    /* Edge alignment mode */\r\n    FTM_NO_MEASUREMENT,                /* Signal measurement operation type */\r\n    0,                                 /* Filter value */\r\n    false,                             /* Filter state (enabled/disabled) */\r\n    false,                             /* Continuous measurement state */\r\n    NULL,              /* Vector of callbacks  parameters for channels events */\r\n    NULL                           /* Vector of callbacks for channels events */\r\n  },\r\n};\r\n\r\n/* Input capture configuration for FTM2 */\r\nftm_input_param_t flexTimer_ic2_InputCaptureConfig = {\r\n  1U,                                  /* Number of channels */\r\n  65535U,                              /* Max count value */\r\n  ftm2input_ch_param                   /* Channels configuration */\r\n};\r\n\r\n/* Global configuration of flexTimer_ic1 */\r\nftm_user_config_t flexTimer_ic2_InitConfig = {\r\n  {\r\n    true,                              /* Software trigger state */\r\n    false,                             /* Hardware trigger 1 state */\r\n    false,                             /* Hardware trigger 2 state */\r\n    false,                             /* Hardware trigger 3 state */\r\n    false,                             /* Max loading point state */\r\n    false,                             /* Min loading point state */\r\n    FTM_SYSTEM_CLOCK,                  /* Update mode for INVCTRL register */\r\n    FTM_SYSTEM_CLOCK,                  /* Update mode for SWOCTRL register */\r\n    FTM_SYSTEM_CLOCK,                  /* Update mode for OUTMASK register */\r\n    FTM_SYSTEM_CLOCK,                  /* Update mode for CNTIN register */\r\n    false,                             /* Automatic clear of the trigger*/\r\n    FTM_UPDATE_NOW,                    /* Synchronization point */\r\n  },\r\n  FTM_MODE_INPUT_CAPTURE,              /* Mode of operation for FTM */\r\n  FTM_CLOCK_DIVID_BY_128,              /* FTM clock prescaler */\r\n  FTM_CLOCK_SOURCE_SYSTEMCLK,          /* FTM clock source */\r\n  FTM_BDM_MODE_00,                     /* FTM debug mode */\r\n  false,                               /* Interrupt state */\r\n  false                                /* Initialization trigger */\r\n};\r\n"},{"name":"ftm2_input_params_config.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#include \"Foc_model_Matlab.h\"\r\n#include \"Foc_model_Matlab_private.h\"\r\n\r\nextern ftm_input_ch_param_t ftm2input_ch_param[1U];\r\nextern ftm_input_param_t flexTimer_ic2_InputCaptureConfig;\r\nextern ftm_user_config_t flexTimer_ic2_InitConfig;\r\n"},{"name":"ftm3_pwm_params.c","type":"source","group":"legacy","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#include \"ftm3_pwm_params.h\"\r\n\r\n/* Fault configuration structure for FTM3 */\r\nftm_pwm_fault_param_t flexTimer_pwm3_FaultConfig = {\r\n  false,                               /* Output pin state on fault */\r\n  false,                               /* PWM fault interrupt state */\r\n  0U,                                  /* Fault filter value */\r\n  FTM_FAULT_CONTROL_DISABLED,          /* Fault mode */\r\n\r\n  {\r\n    {\r\n      false,                        /* Fault channel state (Enabled/Disabled) */\r\n      false,                 /* Fault channel filter state (Enabled/Disabled) */\r\n      FTM_POLARITY_HIGH,               /* Channel output state on fault */\r\n    },\r\n\r\n    {\r\n      false,                        /* Fault channel state (Enabled/Disabled) */\r\n      false,                 /* Fault channel filter state (Enabled/Disabled) */\r\n      FTM_POLARITY_HIGH,               /* Channel output state on fault */\r\n    },\r\n\r\n    {\r\n      false,                        /* Fault channel state (Enabled/Disabled) */\r\n      false,                 /* Fault channel filter state (Enabled/Disabled) */\r\n      FTM_POLARITY_HIGH,               /* Channel output state on fault */\r\n    },\r\n\r\n    {\r\n      false,                        /* Fault channel state (Enabled/Disabled) */\r\n      false,                 /* Fault channel filter state (Enabled/Disabled) */\r\n      FTM_POLARITY_HIGH,               /* Channel output state on fault */\r\n    },\r\n  }\r\n};\r\n\r\n/* Independent channels configuration structure for flexTimer_pwm3 */\r\nftm_independent_ch_param_t flexTimer_pwm3_IndependentChannelsConfig[3] = {\r\n  {\r\n    0U,                                /* hwChannelId */\r\n    FTM_POLARITY_LOW,                  /* Edge mode */\r\n    0U,                                /* Duty cycle percent 0-0x8000 */\r\n    false,                             /* External Trigger */\r\n    FTM_HIGH_STATE,                  /* The selection of the channel (n) mode */\r\n    true,                        /* Enabled/disabled the channel (n+1) output */\r\n    FTM_MAIN_DUPLICATED,\r\n                       /* Select channel (n+1) output relative to channel (n) */\r\n    true,                              /* Dead time enabled/disabled */\r\n  },\r\n\r\n  {\r\n    2U,                                /* hwChannelId */\r\n    FTM_POLARITY_LOW,                  /* Edge mode */\r\n    0U,                                /* Duty cycle percent 0-0x8000 */\r\n    false,                             /* External Trigger */\r\n    FTM_HIGH_STATE,                  /* The selection of the channel (n) mode */\r\n    true,                        /* Enabled/disabled the channel (n+1) output */\r\n    FTM_MAIN_DUPLICATED,\r\n                       /* Select channel (n+1) output relative to channel (n) */\r\n    true,                              /* Dead time enabled/disabled */\r\n  },\r\n\r\n  {\r\n    4U,                                /* hwChannelId */\r\n    FTM_POLARITY_LOW,                  /* Edge mode */\r\n    0U,                                /* Duty cycle percent 0-0x8000 */\r\n    false,                             /* External Trigger */\r\n    FTM_HIGH_STATE,                  /* The selection of the channel (n) mode */\r\n    true,                        /* Enabled/disabled the channel (n+1) output */\r\n    FTM_MAIN_DUPLICATED,\r\n                       /* Select channel (n+1) output relative to channel (n) */\r\n    true,                              /* Dead time enabled/disabled */\r\n  },\r\n};\r\n\r\n/* PWM configuration for flexTimer_pwm3 */\r\nftm_pwm_param_t flexTimer_pwm3_PwmConfig = {\r\n  3U,                                  /* Number of independent PWM channels */\r\n  0U,                                  /* Number of combined PWM channels */\r\n  FTM_MODE_CEN_ALIGNED_PWM,            /* PWM mode */\r\n  0U,                                  /* Dead time value */\r\n  FTM_DEADTIME_DIVID_BY_1,             /* Dead time prescaler */\r\n  20000U,                              /* PWM frequency */\r\n  flexTimer_pwm3_IndependentChannelsConfig,\r\n                          /* Independent PWM channels configuration structure */\r\n  NULL,                      /* Combined PWM channels configuration structure */\r\n  &flexTimer_pwm3_FaultConfig          /* PWM fault configuration structure */\r\n};\r\n\r\n/* Global configuration of flexTimer_pwm3 */\r\nftm_user_config_t flexTimer_pwm3_InitConfig = {\r\n  {\r\n    true,                              /* Software trigger state */\r\n    false,                             /* Hardware trigger 1 state */\r\n    false,                             /* Hardware trigger 2 state */\r\n    false,                             /* Hardware trigger 3 state */\r\n    false,                             /* Max loading point state */\r\n    true,                              /* Min loading point state */\r\n    FTM_PWM_SYNC,                      /* Update mode for INVCTRL register */\r\n    FTM_PWM_SYNC,                      /* Update mode for SWOCTRL register */\r\n    FTM_PWM_SYNC,                      /* Update mode for OUTMASK register */\r\n    FTM_PWM_SYNC,                      /* Update mode for CNTIN register */\r\n    false,                             /* Automatic clear of the trigger*/\r\n    FTM_WAIT_LOADING_POINTS,           /* Synchronization point */\r\n  },\r\n  FTM_MODE_CEN_ALIGNED_PWM,            /* Mode of operation for FTM */\r\n  FTM_CLOCK_DIVID_BY_1,                /* FTM clock prescaler */\r\n  FTM_CLOCK_SOURCE_SYSTEMCLK,          /* FTM clock source */\r\n  FTM_BDM_MODE_00,                     /* FTM debug mode */\r\n  false,                               /* Interrupt state */\r\n  false                                /* Initialization trigger */\r\n};\r\n\r\nftm_state_t ftmStateStruct3;\r\n"},{"name":"ftm3_pwm_params.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef FTM3_PWM_PARAMS_H\r\n#define FTM3_PWM_PARAMS_H\r\n\r\n/* MODULE flexTimer_pwm3.*/\r\n\r\n/* Include inherited beans */\r\n#include \"ftm_pwm_driver.h\"\r\n\r\n/* Device instance number */\r\n#define FTM_PWM3                       3U\r\n\r\n/*fault configuration structure for FTM3*/\r\nextern ftm_pwm_fault_param_t flexTimer_pwm3_FaultConfig;\r\n\r\n/* Independent channels configuration structure for flexTimer_pwm3 */\r\nextern ftm_independent_ch_param_t flexTimer_pwm3_IndependentChannelsConfig[3];\r\n\r\n/* PWM configuration for flexTimer_pwm3 */\r\nextern ftm_pwm_param_t flexTimer_pwm3_PwmConfig;\r\n\r\n/* Global configuration of flexTimer_pwm3 */\r\nextern ftm_user_config_t flexTimer_pwm3_InitConfig;\r\n\r\n/* Global state structure of flexTimer_pwm3 */\r\nextern ftm_state_t ftmStateStruct3;\r\n\r\n#endif\r\n"},{"name":"interrupt_manager.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\inc","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2013 - 2016, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n#if !defined(INTERRUPT_MANAGER_H)\n#define INTERRUPT_MANAGER_H\n\n#include \"device_registers.h\"\n\n\n/**\n * @page misra_violations MISRA-C:2012 violations\n *\n *\n * @section [global]\n * Violates MISRA 2012 Required Rule 11.6, A cast shall not be performed\n * between pointer to void and an arithmetic type.\n * The address of hardware modules is provided as integer so\n * it needs to be cast to pointer.\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 11.4, A conversion should not be performed\n * between a pointer to object and an integer type.\n * The address of hardware modules is provided as integer so\n * a conversion between a pointer and an integer has to be performed.\n */\n\n /*! @file interrupt_manager.h */\n\n/*! @addtogroup interrupt_manager*/\n/*! @{*/\n\n/*******************************************************************************\n * Definitions\n ******************************************************************************/\n\n#if FEATURE_MSCM_HAS_CPU_INTERRUPT_ROUTER\n\n/*! @brief The target for directed CPU interrupts */\ntypedef enum\n{\n    INTERRUPT_MANAGER_TARGET_SELF       = -2,\n    INTERRUPT_MANAGER_TARGET_OTHERS     = -1,\n    INTERRUPT_MANAGER_TARGET_NONE       =  0,\n    INTERRUPT_MANAGER_TARGET_CP0        =  1,\n    INTERRUPT_MANAGER_TARGET_CP1        =  2,\n    INTERRUPT_MANAGER_TARGET_CP0_CP1    =  3\n} interrupt_manager_cpu_targets_t;\n\n#endif /* FEATURE_MSCM_HAS_CPU_INTERRUPT_ROUTER */\n\n#if FEATURE_INTERRUPT_MULTICORE_SUPPORT\n\n/*! @brief Interrupt enabled on core\n *  Implements : interrupt_core_enable_t_Class\n */\ntypedef enum\n{\n\tINTERRUPT_CORE_DISABLED     = 0U,\n    INTERRUPT_CORE_ENABLED      = 1U\n} interrupt_core_enable_t;\n\n#endif /* FEATURE_INTERRUPT_MULTICORE_SUPPORT */\n\n/*! @brief Interrupt handler type */\ntypedef void (* isr_t)(void);\n\n/*******************************************************************************\n * Default interrupt handler - implemented in startup.s\n ******************************************************************************/\n/*! @brief Default ISR. */\nvoid DefaultISR(void);\n\n/*******************************************************************************\n * API\n ******************************************************************************/\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif /* __cplusplus*/\n\n/*! @name Interrupt manager APIs*/\n/*@{*/\n\n/*!\n * @brief Installs an interrupt handler routine for a given IRQ number. \n *\n * This function lets the application register/replace the interrupt\n * handler for a specified IRQ number. See a chip-specific reference\n * manual for details and the  startup_<SoC>.s file for each chip\n * family to find out the default interrupt handler for each device.\n *\n * @note This method is applicable only if interrupt vector is copied in RAM.\n *\n * @param irqNumber   IRQ number\n * @param newHandler  New interrupt handler routine address pointer\n * @param oldHandler  Pointer to a location to store current interrupt handler\n */\nvoid INT_SYS_InstallHandler(IRQn_Type irqNumber,\n                            const isr_t newHandler,\n                            isr_t* const oldHandler);\n\n/*!\n * @brief Enables an interrupt for a given IRQ number. \n *\n * This function  enables the individual interrupt for a specified IRQ number.\n *\n * @param irqNumber IRQ number\n */\nvoid INT_SYS_EnableIRQ(IRQn_Type irqNumber);\n\n/*!\n * @brief Disables an interrupt for a given IRQ number. \n *\n * This function disables the individual interrupt for a specified IRQ number.\n *\n * @param irqNumber IRQ number\n */\nvoid INT_SYS_DisableIRQ(IRQn_Type irqNumber);\n\n/*!\n * @brief Enables system interrupt.\n *\n * This function enables the global interrupt by calling the core API.\n *\n */\nvoid INT_SYS_EnableIRQGlobal(void);\n\n/*!\n * @brief Disable system interrupt. \n *\n * This function disables the global interrupt by calling the core API.\n *\n */\nvoid INT_SYS_DisableIRQGlobal(void);\n\n/*! @brief  Set Interrupt Priority\n *\n *   The function sets the priority of an interrupt.\n *\n *   @param  irqNumber  Interrupt number.\n *   @param  priority  Priority to set.\n */\nvoid INT_SYS_SetPriority(IRQn_Type irqNumber, uint8_t priority);\n\n/*! @brief  Get Interrupt Priority\n *\n *   The function gets the priority of an interrupt.\n *\n *   @param  irqNumber  Interrupt number.\n *   @return priority   Priority of the interrupt.\n */\nuint8_t INT_SYS_GetPriority(IRQn_Type irqNumber);\n\n#if FEATURE_INTERRUPT_HAS_PENDING_STATE\n/*!\n * @brief Clear Pending Interrupt\n *\n * The function clears the pending bit of a peripheral interrupt\n * or a directed interrupt to this CPU (if available).\n *\n * @param irqNumber IRQ number\n */\nvoid INT_SYS_ClearPending(IRQn_Type irqNumber);\n\n/*!\n * @brief Set Pending Interrupt\n *\n * The function configures the pending bit of a peripheral interrupt.\n *\n * @param irqNumber IRQ number\n */\nvoid INT_SYS_SetPending(IRQn_Type irqNumber);\n\n/*!\n * @brief Get Pending Interrupt\n *\n * The function gets the pending bit of a peripheral interrupt\n * or a directed interrupt to this CPU (if available).\n *\n * @param irqNumber IRQ number\n * @return pending  Pending status 0/1\n */\nuint32_t INT_SYS_GetPending(IRQn_Type irqNumber);\n\n#endif /* FEATURE_INTERRUPT_HAS_PENDING_STATE */\n\n#if FEATURE_INTERRUPT_HAS_ACTIVE_STATE\n/*!\n * @brief Get Active Interrupt\n *\n * The function gets the active state of a peripheral interrupt.\n *\n * @param irqNumber IRQ number\n * @return active   Active status 0/1\n */\nuint32_t INT_SYS_GetActive(IRQn_Type irqNumber);\n\n#endif /* FEATURE_INTERRUPT_HAS_ACTIVE_STATE */\n\n#if FEATURE_INTERRUPT_HAS_SOFTWARE_IRQ\n\n/*!\n * @brief Set software interrupt request\n *\n * The function sets a software settable interrupt request.\n *\n * @param irqNumber IRQ number\n */\nvoid INT_SYS_SetSoftwareIRQRequest(IRQn_Type irqNumber);\n\n/*!\n * @brief Clear software interrupt request\n *\n * The function clears a software settable interrupt request.\n *\n * @param irqNumber IRQ number\n */\nvoid INT_SYS_ClearSoftwareIRQRequest(IRQn_Type irqNumber);\n\n#endif /* FEATURE_INTERRUPT_HAS_SOFTWARE_IRQ */\n\n\n#if FEATURE_INTERRUPT_MULTICORE_SUPPORT\n\n/*!\n * @brief Enables an interrupt for a given IRQ number, on the given cores.\n *\n * This function enables the individual interrupt for a specified IRQ number,\n * and on the specified cores.\n *\n * @param irqNumber IRQ number\n * @param coresIds array with the cores ids for which to enable the interrupt\n * @param coresCnt the number of cores in the coresIds array\n */\nvoid INT_SYS_EnableIRQ_MC(IRQn_Type irqNumber, const uint8_t *coresIds, uint8_t coresCnt);\n\n/*!\n * @brief Gets the cores on which an interrupt for the specified IRQ\n * number is enabled.\n *\n * This function will populate an array with all the supported cores,\n * for which the value will be INTERRUPT_CORE_ENABLED if interrupt is enabled\n * on that core, and INTERRUPT_CORE_DISABLED if interrupt is not enabled on\n * that core. The array has to be previously allocated using the\n * NUMBER_OF_CORES define value.\n *\n * @param irqNumber IRQ number\n * @param cores array with array index as core number; it has to be previously\n * allocated using the NUMBER_OF_CORES define value. it will be populated with the\n * following value:\n *  - INTERRUPT_CORE_DISABLED interrupt disabled for that core\n * \t- INTERRUPT_CORE_ENABLED enabled for that core\n */\nvoid INT_SYS_GetCoresForIRQ(IRQn_Type irqNumber, interrupt_core_enable_t *cores);\n\n/*!\n * @brief Disables an interrupt for a given IRQ number, on the given cores.\n *\n * This function disables the individual interrupt for a specified IRQ number,\n * and on the specified cores.\n *\n * @param irqNumber IRQ number\n * @param coresIds array with the cores ids for which to enable the interrupt\n * @param coresCnt the number of cores in the coresIds array\n */\nvoid INT_SYS_DisableIRQ_MC(IRQn_Type irqNumber, const uint8_t *coresIds, uint8_t coresCnt);\n\n/*!\n * @brief Disables an interrupt for a given IRQ number, on all cores.\n *\n * This function disables the individual interrupt for a specified IRQ number,\n * on all cores. It also clears priority for that IRQ number\n *\n * @param irqNumber IRQ number\n */\nvoid INT_SYS_DisableIRQ_MC_All(IRQn_Type irqNumber);\n\n#endif /* FEATURE_INTERRUPT_MULTICORE_SUPPORT */\n\n\n#if FEATURE_MSCM_HAS_CPU_INTERRUPT_ROUTER\n\n/*!\n * @brief Generate Directed CPU Interrupt\n *\n * The function generates a directed interrupt to (one or more) CPUs defined by target.\n *\n * @param irqNumber  IRQ number\n * @param cpu_target Target CPUs for the directed interrupt\n */\nvoid INT_SYS_GenerateDirectedCpuInterrupt(IRQn_Type irqNumber, interrupt_manager_cpu_targets_t cpu_target);\n\n#endif /* FEATURE_MSCM_HAS_CPU_INTERRUPT_ROUTER */\n\n/*@}*/\n\n#if defined(__cplusplus)\n}\n#endif /* __cplusplus*/\n\n/*! @}*/\n\n#endif /* INTERRUPT_MANAGER_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"lpit_driver.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\inc","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2016, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n/*!\n * @file lpit_driver.h\n * @page misra_violations MISRA-C:2012 violations\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.\n * The macros define the maximum of timer period in some modes and might be used by user.\n *\n * @section [global]\n * Violates MISRA 2012 Required Rule 5.1, identifier clash\n * The supported compilers use more than 31 significant characters for identifiers.\n *\n * @section [global]\n * Violates MISRA 2012 Required Rule 5.2, identifier clash\n * The supported compilers use more than 31 significant characters for identifiers.\n *\n * @section [global]\n * Violates MISRA 2012 Required Rule 5.4, identifier clash\n * The supported compilers use more than 31 significant characters for identifiers.\n *\n * @section [global]\n * Violates MISRA 2012 Required Rule 5.5, identifier clash\n * The supported compilers use more than 31 significant characters for identifiers.\n */\n\n#ifndef LPIT_DRIVER_H\n#define LPIT_DRIVER_H\n\n#include <stdint.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include \"status.h\"\n\n/*!\n * @addtogroup lpit_drv\n * @{\n */\n\n/*******************************************************************************\n * Definitions\n ******************************************************************************/\n/*! @brief Max period in count of all operation mode except for dual 16 bit periodic counter mode */\n#define MAX_PERIOD_COUNT                    (0xFFFFFFFFU)\n/*! @brief Max period in count of dual 16 bit periodic counter mode                               */\n#define MAX_PERIOD_COUNT_IN_DUAL_16BIT_MODE (0x1FFFEU)\n/*! @brief Max count of 16 bit                                */\n#define MAX_PERIOD_COUNT_16_BIT (0xFFFFU)\n\n/*!\n * @brief Mode options available for the LPIT timer\n * Implements : lpit_timer_modes_t_Class\n */\ntypedef enum\n{\n    LPIT_PERIODIC_COUNTER      = 0x00U,  /*!< 32-bit Periodic Counter        */\n    LPIT_DUAL_PERIODIC_COUNTER = 0x01U,  /*!< Dual 16-bit Periodic Counter   */\n    LPIT_TRIGGER_ACCUMULATOR   = 0x02U,  /*!< 32-bit Trigger Accumulator     */\n    LPIT_INPUT_CAPTURE         = 0x03U   /*!< 32-bit Trigger Input Capture   */\n} lpit_timer_modes_t;\n\n/*!\n * @brief Trigger source options.\n *\n * This is used for both internal and external trigger sources. The actual trigger\n * options available is SoC specific, user should refer to the reference manual.\n * Implements : lpit_trigger_source_t_Class\n */\ntypedef enum\n{\n    LPIT_TRIGGER_SOURCE_EXTERNAL = 0x00U, /*!< Use external trigger  */\n    LPIT_TRIGGER_SOURCE_INTERNAL = 0x01U  /*!< Use internal trigger  */\n}  lpit_trigger_source_t;\n\n/*!\n * @brief Unit options for LPIT period.\n *\n * This is used to determine unit of timer period\n * Implements : lpit_period_units_t_Class\n */\ntypedef enum\n{\n    LPIT_PERIOD_UNITS_COUNTS        = 0x00U, /*!< Period value unit is count */\n    LPIT_PERIOD_UNITS_MICROSECONDS  = 0x01U  /*!< Period value unit is microsecond */\n} lpit_period_units_t;\n\n/*!\n * @brief LPIT configuration structure\n *\n * This structure holds the configuration settings for the LPIT peripheral to\n * enable or disable LPIT module in DEBUG and DOZE mode\n * Implements : lpit_user_config_t_Class\n */\ntypedef struct\n{\n    bool enableRunInDebug; /*!< True: Timer channels continue to run in debug mode\n                                False: Timer channels stop in debug mode            */\n    bool enableRunInDoze;  /*!< True: Timer channels continue to run in doze mode\n                                False: Timer channels stop in doze mode             */\n} lpit_user_config_t;\n\n/*! @brief Structure to configure the channel timer\n *\n * This structure holds the configuration settings for the LPIT timer channel\n * Implements : lpit_user_channel_config_t_Class\n */\ntypedef struct\n{\n    lpit_timer_modes_t timerMode;        /*!< Operation mode of timer channel                               */\n    lpit_period_units_t periodUnits;     /*!< Timer period value units                                      */\n    uint32_t period;                     /*!< Period of timer channel                                       */\n    lpit_trigger_source_t triggerSource; /*!< Selects between internal and external trigger sources         */\n    uint32_t triggerSelect;              /*!< Selects one trigger from the internal trigger sources\n                                              this field makes sense if trigger source is internal          */\n    bool enableReloadOnTrigger;          /*!< True: Timer channel will reload on selected trigger\n                                              False: Timer channel will not reload on selected trigger      */\n    bool enableStopOnInterrupt;          /*!< True: Timer will stop after timeout\n                                              False: Timer channel does not stop after timeout              */\n    bool enableStartOnTrigger;           /*!< True: Timer channel starts to decrement when rising edge\n                                              on selected trigger is detected.\n                                              False: Timer starts to decrement immediately based on\n                                              restart condition                                             */\n    bool chainChannel;                   /*!< Channel chaining enable                                       */\n    bool isInterruptEnabled;             /*!< Timer channel interrupt generation enable                     */\n} lpit_user_channel_config_t;\n\n/*******************************************************************************\n * API\n ******************************************************************************/\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif\n\n/*!\n * @name Initialization and De-initialization\n * @{\n */\n\n/*!\n * @brief Gets the default LPIT configuration\n *\n * This function gets default LPIT module configuration structure, with the following settings:\n * - PIT runs in debug mode: Disable\n * - PIT runs in doze mode: Disable\n *\n * @param[out] config The configuration structure\n */\nvoid LPIT_DRV_GetDefaultConfig(lpit_user_config_t * const config);\n\n/*!\n * @brief Gets the default timer channel configuration\n *\n * This function gets the default timer channel configuration structure, with the following settings:\n * - Timer mode: 32-bit Periodic Counter\n * - Period unit: Period value unit is microsecond\n * - Period: 1000000 microseconds(1 second)\n * - Trigger sources: External trigger\n * - Trigger select: Trigger from channel 0\n * - Reload on trigger: Disable\n * - Stop on interrupt : Disable\n * - Start on trigger: Disable\n * - Channel chaining: Disable\n * - Interrupt generating: Enable\n *\n * @param[out] config The channel configuration structure\n */\nvoid LPIT_DRV_GetDefaultChanConfig(lpit_user_channel_config_t * const config);\n\n/*!\n * @brief Initializes the LPIT module.\n *\n * This function resets LPIT module, enables the LPIT module, configures LPIT\n * module operation in Debug and DOZE mode. The LPIT configuration structure shall\n * be passed as arguments.\n * This configuration structure affects all timer channels.\n * This function should be called before calling any other LPIT driver function.\n *\n * This is an example demonstrating how to define a LPIT configuration structure:\n   @code\n   lpit_user_config_t lpitInit =\n   {\n        .enableRunInDebug = false,\n        .enableRunInDoze = true\n   };\n   @endcode\n *\n * @param[in] instance LPIT module instance number.\n * @param[in] userConfig Pointer to LPIT configuration structure.\n */\nvoid LPIT_DRV_Init(uint32_t instance,\n                   const lpit_user_config_t * userConfig);\n\n/*!\n * @brief De-Initializes the LPIT module.\n *\n * This function disables LPIT module.\n * In order to use the LPIT module again, LPIT_DRV_Init must be called.\n *\n * @param[in] instance LPIT module instance number\n */\nvoid LPIT_DRV_Deinit(uint32_t instance);\n\n/*!\n * @brief Initializes the LPIT channel.\n *\n * This function initializes the LPIT timers by using a channel, this function\n * configures timer channel chaining, timer channel mode, timer channel period,\n * interrupt generation, trigger source, trigger select, reload on trigger,\n * stop on interrupt and start on trigger.\n * The timer channel number and its configuration structure shall be passed as arguments.\n * Timer channels do not start counting by default after calling this function.\n * The function LPIT_DRV_StartTimerChannels must be called to start the timer channel counting.\n * In order to re-configures the period, call the LPIT_DRV_SetTimerPeriodByUs or\n * LPIT_DRV_SetTimerPeriodByCount.\n *\n * This is an example demonstrating how to define a LPIT channel configuration structure:\n   @code\n   lpit_user_channel_config_t lpitTestInit =\n   {\n    .timerMode = LPIT_PERIODIC_COUNTER,\n    .periodUnits = LPTT_PERIOD_UNITS_MICROSECONDS,\n    .period = 1000000U,\n    .triggerSource = LPIT_TRIGGER_SOURCE_INTERNAL,\n    .triggerSelect = 1U,\n    .enableReloadOnTrigger = false,\n    .enableStopOnInterrupt = false,\n    .enableStartOnTrigger = false,\n    .chainChannel = false,\n    .isInterruptEnabled = true\n   };\n   @endcode\n *\n * @param[in] instance LPIT module instance number\n * @param[in] channel Timer channel number\n * @param[in] userChannelConfig Pointer to LPIT channel configuration structure\n * @return Operation status\n *         - STATUS_SUCCESS: Operation was successful.\n *         - STATUS_ERROR: The channel 0 is chained.\n *         - STATUS_ERROR: The input period is invalid.\n */\nstatus_t LPIT_DRV_InitChannel(uint32_t instance,\n                              uint32_t channel,\n                              const lpit_user_channel_config_t * userChannelConfig);\n\n/* @} */\n\n/*!\n * @name Timer Start and Stop\n * @{\n */\n\n/*!\n * @brief Starts the timer channel counting.\n *\n * This function allows starting timer channels simultaneously .\n * After calling this function, timer channels are going operate depend on mode and\n * control bits which controls timer channel start, reload and restart.\n *\n * @param[in] instance LPIT module instance number\n * @param[in] mask Timer channels starting mask that decides which channels\n * will be started\n * - For example:\n *      - with mask = 0x01U then channel 0 will be started\n *      - with mask = 0x02U then channel 1 will be started\n *      - with mask = 0x03U then channel 0 and channel 1 will be started\n */\nvoid LPIT_DRV_StartTimerChannels(uint32_t instance,\n                                 uint32_t mask);\n\n/*!\n * @brief Stops the timer channel counting.\n *\n * This function allows stop timer channels simultaneously from counting.\n * Timer channels reload their periods respectively after the next time\n * they call the LPIT_DRV_StartTimerChannels. Note that: In 32-bit Trigger Accumulator\n * mode, the counter will load on the first trigger rising edge.\n *\n * @param[in] instance LPIT module instance number\n * @param[in] mask Timer channels stopping mask that decides which channels\n * will be stopped\n * - For example:\n *      - with mask = 0x01U then channel 0 will be stopped\n *      - with mask = 0x02U then channel 1 will be stopped\n *      - with mask = 0x03U then channel 0 and channel 1 will be stopped\n */\nvoid LPIT_DRV_StopTimerChannels(uint32_t instance,\n                                uint32_t mask);\n\n/* @} */\n\n/*!\n * @name Timer Period\n * @{\n */\n\n/*!\n * @brief Sets the timer channel period in microseconds.\n *\n * This function sets the timer channel period in microseconds\n * when timer channel mode is 32 bit periodic or dual 16 bit counter mode.\n * The period range depends on the frequency of the LPIT functional clock and\n * operation mode of timer channel.\n * If the required period is out of range, use the suitable mode if applicable.\n * This function is only valid for one single channel.\n *\n * @param[in] instance LPIT module instance number\n * @param[in] channel Timer channel number\n * @param[in] periodUs Timer channel period in microseconds\n * @return Operation status\n *         - STATUS_SUCCESS: Input period of timer channel is valid.\n *         - STATUS_ERROR: Input period of timer channel is invalid.\n */\nstatus_t LPIT_DRV_SetTimerPeriodByUs(uint32_t instance,\n                                     uint32_t channel,\n                                     uint32_t periodUs);\n\n/*!\n * @brief Sets the timer channel period in microseconds.\n *\n * This function sets the timer channel period in microseconds\n * when timer channel mode is dual 16 bit periodic counter mode.\n * The period range depends on the frequency of the LPIT functional clock and\n * operation mode of timer channel.\n * If the required period is out of range, use the suitable mode if applicable.\n * This function is only valid for one single channel.\n *\n * @param[in] instance LPIT module instance number\n * @param[in] channel Timer channel number\n * @param[in] periodHigh Period of higher 16 bit in microseconds\n * @param[in] periodLow Period of lower 16 bit in microseconds\n * @return Operation status\n *         - STATUS_SUCCESS: Input period of timer channel is valid.\n *         - STATUS_ERROR: Input period of timer channel is invalid.\n */\nstatus_t LPIT_DRV_SetTimerPeriodInDual16ModeByUs(uint32_t instance,\n                                                 uint32_t channel,\n                                                 uint16_t periodHigh,\n                                                 uint16_t periodLow);\n\n/*!\n * @brief Gets the timer channel period in microseconds.\n *\n * This function gets the timer channel period in microseconds.\n * The returned period here makes sense if the operation mode of timer channel\n * is 32 bit periodic counter or dual 16 bit periodic counter.\n *\n * @param[in] instance LPIT module instance number\n * @param[in] channel Timer channel number\n * @return Timer channel period in microseconds\n */\nuint64_t LPIT_DRV_GetTimerPeriodByUs(uint32_t instance,\n                                     uint32_t channel);\n\n/*!\n * @brief Gets the current timer channel counting value in microseconds.\n *\n * This function returns an absolute time stamp in microseconds.\n * One common use of this function is to measure the running time of a part of\n * code. Call this function at both the beginning and end of code. The time\n * difference between these two time stamps is the running time.\n * The return counting value here makes sense if the operation mode of timer channel\n * is 32 bit periodic counter or dual 16 bit periodic counter or 32-bit trigger input capture.\n * Need to make sure the running time will not exceed the timer channel period.\n *\n * @param[in] instance LPIT module instance number\n * @param[in] channel Timer channel number\n * @return Current timer channel counting value in microseconds\n */\nuint64_t LPIT_DRV_GetCurrentTimerUs(uint32_t instance,\n                                    uint32_t channel);\n\n/*!\n * @brief Sets the timer channel period in count unit.\n *\n * This function sets the timer channel period in count unit.\n * The counter period of a running timer channel can be modified by first setting\n * a new load value, the value will be loaded after the timer channel expires.\n * To abort the current cycle and start a timer channel period with the new value,\n * the timer channel must be disabled and enabled again.\n *\n * @param[in] instance LPIT module instance number\n * @param[in] channel Timer channel number\n * @param[in] count Timer channel period in count unit\n */\nvoid LPIT_DRV_SetTimerPeriodByCount(uint32_t instance,\n                                    uint32_t channel,\n                                    uint32_t count);\n\n/*!\n * @brief Sets the timer channel period in count unit.\n *\n * This function sets the timer channel period in count unit when timer channel\n * mode is dual 16 periodic counter mode.\n * The counter period of a running timer channel can be modified by first setting\n * a new load value, the value will be loaded after the timer channel expires.\n * To abort the current cycle and start a timer channel period with the new value,\n * the timer channel must be disabled and enabled again.\n *\n * @param[in] instance LPIT module instance number\n * @param[in] channel Timer channel number\n * @param[in] periodHigh Period of higher 16 bit in count unit\n * @param[in] periodLow Period of lower 16 bit in count unit\n */\nvoid LPIT_DRV_SetTimerPeriodInDual16ModeByCount(uint32_t instance,\n                                                uint32_t channel,\n                                                uint16_t periodHigh,\n                                                uint16_t periodLow);\n\n/*!\n * @brief Gets the current timer channel period in count unit.\n *\n * This function returns current period of timer channel given as argument.\n *\n * @param[in] instance LPIT module instance number\n * @param[in] channel Timer channel number\n * @return Timer channel period in count unit\n */\nuint32_t LPIT_DRV_GetTimerPeriodByCount(uint32_t instance,\n                                        uint32_t channel);\n\n/*!\n * @brief Gets the current timer channel counting value in count.\n *\n * This function returns the real-time timer channel counting value, the value in\n * a range from 0 to timer channel period.\n * Need to make sure the running time does not exceed the timer channel period.\n *\n * @param[in] instance LPIT module instance number\n * @param[in] channel Timer channel number\n * @return Current timer channel counting value in count\n */\nuint32_t LPIT_DRV_GetCurrentTimerCount(uint32_t instance,\n                                       uint32_t channel);\n/* @} */\n\n/*!\n * @name Interrupt\n * @{\n */\n\n/*!\n * @brief Enables the interrupt generation of timer channel.\n *\n * This function allows enabling interrupt generation of timer channel\n * when timeout occurs or input trigger occurs.\n *\n * @param[in] instance LPIT module instance number.\n * @param[in] mask The mask that decides which channels will be enabled interrupt.\n * - For example:\n *      - with mask = 0x01u then the interrupt of channel 0 will be enabled\n *      - with mask = 0x02u then the interrupt of channel 1 will be enabled\n *      - with mask = 0x03u then the interrupt of channel 0 and channel 1 will be enabled\n */\nvoid LPIT_DRV_EnableTimerChannelInterrupt(uint32_t instance,\n                                          uint32_t mask);\n\n/*!\n * @brief Disables the interrupt generation of timer channel.\n *\n * This function allows disabling interrupt generation of timer channel\n * when timeout occurs or input trigger occurs.\n *\n * @param[in] instance LPIT module instance number\n * @param[in] mask The mask that decides which channels will be disable interrupt.\n * - For example:\n *      - with mask = 0x01u then the interrupt of channel 0 will be disable\n *      - with mask = 0x02u then the interrupt of channel 1 will be disable\n *      - with mask = 0x03u then the interrupt of channel 0 and channel 1 will be disable\n */\nvoid LPIT_DRV_DisableTimerChannelInterrupt(uint32_t instance,\n                                           uint32_t mask);\n\n/*!\n * @brief Gets the current interrupt flag of timer channels.\n *\n * This function gets the current interrupt flag of timer channels.\n * In compare modes, the flag sets to 1 at the end of the timer period.\n * In capture modes, the flag sets to 1 when the trigger asserts.\n *\n * @param[in] instance LPIT module instance number.\n * @param[in] mask The interrupt flag getting mask that decides which channels will\n * be got interrupt flag.\n * - For example:\n *      - with mask = 0x01u then the interrupt flag of channel 0 only will be got\n *      - with mask = 0x02u then the interrupt flag of channel 1 only will be got\n *      - with mask = 0x03u then the interrupt flags of channel 0 and channel 1 will be got\n * @return Current the interrupt flag of timer channels\n */\nuint32_t LPIT_DRV_GetInterruptFlagTimerChannels(uint32_t instance,\n                                                uint32_t mask);\n\n/*!\n * @brief Clears the interrupt flag of timer channels.\n *\n * This function clears the interrupt flag of timer channels after\n * their interrupt event occurred.\n *\n * @param[in] instance LPIT module instance number\n * @param[in] mask The interrupt flag clearing mask that decides which channels will\n * be cleared interrupt flag\n * - For example:\n *      - with mask = 0x01u then the interrupt flag of channel 0 only will be cleared\n *      - with mask = 0x02u then the interrupt flag of channel 1 only will be cleared\n *      - with mask = 0x03u then the interrupt flags of channel 0 and channel 1 will be cleared\n */\nvoid LPIT_DRV_ClearInterruptFlagTimerChannels(uint32_t instance,\n                                              uint32_t mask);\n\n/* @} */\n\n#if defined(__cplusplus)\n}\n#endif\n\n/*! @}*/\n\n#endif /* LPIT_DRIVER_H*/\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"mbd_main.c","type":"source","group":"","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mbd_main.c\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n/* Model's headers */\r\n#include \"device_registers.h\"\r\n#include \"Foc_model_Matlab.h\"\r\n#include \"freemaster.h\"\r\n#include \"interrupt_manager.h\"\r\n#include \"clock_manager.h\"\r\n#include \"lpit_driver.h\"\r\n#include \"lpit_hw_access.h\"\r\n#include \"pcc_hw_access.h\"\r\n#include \"s32k_clock_init.h\"\r\n\r\nextern void TPP_IC_Init();\r\nvoid TPP_InitializeOutputs(void)\r\n{\r\n}\r\n\r\nvoid SYSTEM_INIT_TASK(void)\r\n{\r\n  /* Initialize model */\r\n  Foc_model_Matlab_initialize();\r\n}\r\n\r\nvoid SYSTEM_TASK(void)\r\n{\r\n  static bool tppInit = true;\r\n  if (tppInit) {\r\n    TPP_IC_Init();\r\n    tppInit = false;\r\n  }\r\n\r\n  boolean_T eventFlags[4];             /* Model has 4 rates */\r\n  int_T i;\r\n\r\n  /*\r\n   * For a bare-board target (i.e., no operating system), the rates\r\n   * that execute this base step are buffered locally to allow for\r\n   * overlapping preemption.\r\n   */\r\n  Foc_model_Matlab_SetEventsForThisBaseStep(eventFlags);\r\n\r\n  /* Set model inputs associated with base rate here */\r\n  Foc_model_Matlab_step(0);\r\n\r\n  /* Get model outputs here */\r\n  for (i = 1; i < 4; i++) {\r\n    if (eventFlags[i]) {\r\n      Foc_model_Matlab_step(i);\r\n\r\n      /* Get model outputs here */\r\n    }\r\n  }\r\n}\r\n\r\nvoid LPIT0_Ch0_IRQHandler (void)\r\n{\r\n  SYSTEM_TASK();\r\n  LPIT_DRV_ClearInterruptFlagTimerChannels(0, (1 << 0));\r\n}\r\n\r\nvoid lpit0_init()\r\n{\r\n}\r\n\r\nvoid lpit0_init_step_timer()\r\n{\r\n  static const lpit_user_channel_config_t lpit0InitStruct = {\r\n    .timerMode = LPIT_PERIODIC_COUNTER,\r\n    .periodUnits = LPIT_PERIOD_UNITS_MICROSECONDS,\r\n    .period = 50,\r\n    .triggerSource = LPIT_TRIGGER_SOURCE_INTERNAL,\r\n    .triggerSelect = 1U,\r\n    .enableReloadOnTrigger = false,\r\n    .enableStopOnInterrupt = false,\r\n    .enableStartOnTrigger = false,\r\n    .chainChannel = false,\r\n    .isInterruptEnabled = true\r\n  };\r\n\r\n  /* Initialize PIT timer channel. */\r\n  LPIT_DRV_InitChannel(0, 0, &lpit0InitStruct);\r\n\r\n  /* Set priority for LPIT ISR */\r\n  INT_SYS_SetPriority(LPIT0_Ch0_IRQn, 15);\r\n  INT_SYS_InstallHandler(LPIT0_Ch0_IRQn, LPIT0_Ch0_IRQHandler, (isr_t *)0);\r\n\r\n  /* Start the timer. */\r\n  LPIT_DRV_StartTimerChannels(0, LPIT0->SETTEN | (1 << 0));\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\r\n#ifdef __FPU_USED\r\n\r\n  /* FPU ENABLE */\r\n  /* Enable CP10 and CP11 coprocessors */\r\n  S32_SCB->CPACR |= (S32_SCB_CPACR_CP10_MASK | S32_SCB_CPACR_CP11_MASK);\r\n\r\n#endif\r\n\r\n  /* Disable all interrupts.*/\r\n  INT_SYS_DisableIRQGlobal();\r\n\r\n  /* Clock initialization */\r\n  Clock_Setup();\r\n\r\n  /* Initialize the processor. */\r\n  SYSTEM_INIT_TASK();\r\n\r\n  /* Initialize system timer */\r\n  lpit0_init();\r\n\r\n  /* Enable all interrupts.*/\r\n  INT_SYS_EnableIRQGlobal();           /* interrupt_manager.c */\r\n\r\n  /* Initialize step timer interrupt. */\r\n  lpit0_init_step_timer();\r\n  while (1) {\r\n    /* FreeMaster Polling */\r\n    FMSTR_Poll();\r\n  }\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"pcc_hw_access.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\src\\clock\\S32K1xx","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2013 - 2014, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n#ifndef PCC_HW_ACCESS_H\n#define PCC_HW_ACCESS_H\n\n#include \"device_registers.h\"\n#include <stdbool.h>\n#include <stddef.h>\n\n/*!\n * @file pcc_hw_access.h\n *\n * @page misra_violations MISRA-C:2012 violations\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.\n * This is required to implement enumeration entries as macro.\n * Enumeration entries (macros) are referenced from application code.\n */\n\n/*!\n * @ingroup pcc_hw_access\n * @defgroup pcc_hw_access\n * @{\n */\n\n\n/*! @brief Clock name mappings\n *         Constant array storing the mappings between clock names and peripheral clock control indexes.\n *         If there is no peripheral clock control index for a clock name, then the corresponding value is\n *         PCC_INVALID_INDEX.\n */\nextern const uint16_t clockNameMappings[CLOCK_NAME_COUNT];\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif /* __cplusplus*/\n\n\n/*!\n* @brief Sets SOSC control register\n*\n* @param[in] base        pcc base pointer\n* @param[in] monitorMode clock monitor enablement\n* @param[in] clockGate    control register can be written or not\n*/\nstatic inline void PCC_SetPeripheralClockControl(PCC_Type* base, clock_names_t clockName, bool clockGate, uint32_t clockSource, uint32_t divider, uint32_t multiplier)\n{\n   /* Configure the peripheral clock source, the fractional clock divider and the clock gate */\n   uint32_t value =  PCC_PCCn_PCS(clockSource)              |\n                     PCC_PCCn_FRAC(multiplier)              |\n                     PCC_PCCn_PCD(divider)                  |\n                     PCC_PCCn_CGC(clockGate ? 1UL : 0UL );\n\n   base->PCCn[clockNameMappings[clockName]] = value;\n}\n\n/*!\n* @brief Enables/disables the clock for a given peripheral.\n* For example, to enable the ADC0 clock, use like this:\n* @code\n*  PCC_SetClockMode(PCC, PCC_ADC0_CLOCK, true);\n* @endcode\n*\n* @param[in] base        pcc base pointer\n* @param[in] clockName   is the name of the peripheral clock\n* must be one of the following values (see the clock_names_t type from S32K144_clock_names.h)\n*    PCC_DMA0_CLOCK\n*    PCC_MPU0_CLOCK\n*    ...\n*    PCC_LPUART3_CLOCK\n* @param[in] isClockEnabled  is the value of the command that enables/disables the clock\n*/\nstatic inline void PCC_SetClockMode(PCC_Type* const base,\n                                       const clock_names_t clockName,\n                                       const bool isClockEnabled)\n{\n   if (isClockEnabled)\n   {\n       base->PCCn[clockNameMappings[clockName]] |= PCC_PCCn_CGC(1UL);\n   }\n   else\n   {\n       base->PCCn[clockNameMappings[clockName]] &= (uint32_t)(~(PCC_PCCn_CGC_MASK));\n   }\n}\n\n\n\n/*!\n* @brief Gets the clock gate control mode.\n*\n* @param[in] base        pcc base pointer\n* @param[in] clockName   is the name of the peripheral clock\n* must be one of the following values (see the clock_names_t type from S32K144_clock_names.h)\n*    PCC_DMA0_CLOCK\n*    PCC_MPU0_CLOCK\n*    ...\n*    PCC_LPUART3_CLOCK\n* @return  the clock gate control mode\n*        - false : Clock is disabled\n*        - true : Clock is enabled\n*/\nstatic inline bool PCC_GetClockMode(const PCC_Type* const base,\n                                       const clock_names_t clockName)\n{\n   uint32_t regValue = (uint32_t)base->PCCn[clockNameMappings[clockName]];\n   regValue = (regValue & PCC_PCCn_CGC_MASK) >> PCC_PCCn_CGC_SHIFT;\n   return (regValue == 0U) ? false : true;\n}\n\n/*!\n* @brief Gets the selection of a clock source for a specific peripheral\n*\n* @param[in] base        pcc base pointer\n* @param[in] clockName   is the name of the peripheral clock\n* must be one of the following values (see the clock_names_t type from S32K144_clock_names.h)\n*    PCC_DMA0_CLOCK\n*    PCC_MPU0_CLOCK\n*    ...\n*    PCC_LPUART3_CLOCK\n* @return  the clock source\n*/\nstatic inline uint32_t PCC_GetClockSourceSel(const PCC_Type* const base,\n                                                                 const clock_names_t clockName)\n{\n   return ((base->PCCn[clockNameMappings[clockName]] & PCC_PCCn_PCS_MASK) >> PCC_PCCn_PCS_SHIFT);\n}\n\n/*!\n* @brief Gets the selection of the fractional value for a specific peripheral\n*\n* @param[in] base        pcc base pointer\n* @param[in] clockName   is the name of the peripheral clock\n* must be one of the following values (see the clock_names_t type from S32K144_clock_names.h)\n*    PCC_DMA0_CLOCK\n*    PCC_MPU0_CLOCK\n*    ...\n*    PCC_LPUART3_CLOCK\n* @return  the fractional value\n*        - PCC_MULTPCCnLY_BY_ONE : Fractional value is zero\n*        - PCC_MULTPCCnLY_BY_TWO : Fractional value is one\n*/\nstatic inline uint32_t PCC_GetFracValueSel(const PCC_Type* const base,\n                                               const clock_names_t clockName)\n{\n   return ((base->PCCn[clockNameMappings[clockName]] & PCC_PCCn_FRAC_MASK) >> PCC_PCCn_FRAC_SHIFT);\n}\n\n/*!\n* @brief Gets the selection of the divider value for a specific peripheral\n*\n* @param[in] base        pcc base pointer\n* @param[in] clockName   is the name of the peripheral clock\n* must be one of the following values (see the clock_names_t type from S32K144_clock_names.h)\n*    PCC_DMA0_CLOCK\n*    PCC_MPU0_CLOCK\n*    ...\n*    PCC_LPUART3_CLOCK\n* @return  the divider value\n*        - PCC_DIVIDE_BY_ONE   : Divide by 1\n*        - PCC_DIVIDE_BY_TWO   : Divide by 2\n*        - PCC_DIVIDE_BY_THREE : Divide by 3\n*        - PCC_DIVIDE_BY_FOUR  : Divide by 4\n*        - PCC_DIVIDE_BY_FIVE  : Divide by 5\n*        - PCC_DIVIDE_BY_SIX   : Divide by 6\n*        - PCC_DIVIDE_BY_SEVEN : Divide by 7\n*        - PCC_DIVIDE_BY_EIGTH : Divide by 8\n*/\nstatic inline uint32_t PCC_GetDividerSel(const PCC_Type* const base,\n                                             const clock_names_t clockName)\n{\n   return ((base->PCCn[clockNameMappings[clockName]] & PCC_PCCn_PCD_MASK) >> PCC_PCCn_PCD_SHIFT);\n}\n\n\n\n\n\n#if defined(__cplusplus)\n}\n#endif /* __cplusplus*/\n\n\n/*! @}*/\n\n#endif /* PCC_HW_ACCESS_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"pdb0_params.c","type":"source","group":"legacy","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#include \"pdb0_params.h\"\r\n\r\ntrgmux_inout_mapping_config_t pdb0MappingConfig = {\r\n  .triggerSource = TRGMUX_TRIG_SOURCE_FTM3_INIT_TRIG,\r\n  .targetModule = TRGMUX_TARGET_MODULE_PDB0_TRG_IN,\r\n  .lockTargetModuleReg = false\r\n};\r\n\r\npdb_timer_config_t pdb0TimerConfig = {\r\n  .loadValueMode = PDB_LOAD_VAL_IMMEDIATELY,\r\n  .seqErrIntEnable = false,\r\n  .clkPreDiv = PDB_CLK_PREDIV_BY_1,\r\n  .clkPreMultFactor = PDB_CLK_PREMULT_FACT_AS_1,\r\n  .triggerInput = PDB_TRIGGER_IN0,\r\n  .continuousModeEnable = false,\r\n  .dmaEnable = false,\r\n  .intEnable = false\r\n};\r\n\r\npdb_adc_pretrigger_config_t pdb0Ch0UPreTrigConfig0U = {\r\n  .adcPreTriggerIdx = 0U,\r\n  .preTriggerEnable = true,\r\n  .preTriggerOutputEnable = true,\r\n  .preTriggerBackToBackEnable = false,\r\n};\r\n"},{"name":"pdb0_params.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef PDB0_PARAMS_H\r\n#define PDB0_PARAMS_H\r\n#include \"pdb_driver.h\"\r\n#include \"trgmux_driver.h\"\r\n\r\nextern trgmux_inout_mapping_config_t trgmuxAllMappingConfig[];\r\nextern trgmux_inout_mapping_config_t pdb0MappingConfig;\r\nextern pdb_timer_config_t pdb0TimerConfig;\r\nextern pdb_adc_pretrigger_config_t pdb0Ch0UPreTrigConfig0U;\r\n\r\n#endif\r\n"},{"name":"pdb1_params.c","type":"source","group":"legacy","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#include \"pdb1_params.h\"\r\n\r\ntrgmux_inout_mapping_config_t pdb1MappingConfig = {\r\n  .triggerSource = TRGMUX_TRIG_SOURCE_FTM3_INIT_TRIG,\r\n  .targetModule = TRGMUX_TARGET_MODULE_PDB1_TRG_IN,\r\n  .lockTargetModuleReg = false\r\n};\r\n\r\npdb_timer_config_t pdb1TimerConfig = {\r\n  .loadValueMode = PDB_LOAD_VAL_IMMEDIATELY,\r\n  .seqErrIntEnable = false,\r\n  .clkPreDiv = PDB_CLK_PREDIV_BY_1,\r\n  .clkPreMultFactor = PDB_CLK_PREMULT_FACT_AS_1,\r\n  .triggerInput = PDB_TRIGGER_IN0,\r\n  .continuousModeEnable = false,\r\n  .dmaEnable = false,\r\n  .intEnable = false\r\n};\r\n\r\npdb_adc_pretrigger_config_t pdb1Ch0UPreTrigConfig0U = {\r\n  .adcPreTriggerIdx = 0U,\r\n  .preTriggerEnable = true,\r\n  .preTriggerOutputEnable = true,\r\n  .preTriggerBackToBackEnable = false,\r\n};\r\n\r\npdb_adc_pretrigger_config_t pdb1Ch0UPreTrigConfig1U = {\r\n  .adcPreTriggerIdx = 1U,\r\n  .preTriggerEnable = true,\r\n  .preTriggerOutputEnable = true,\r\n  .preTriggerBackToBackEnable = false,\r\n};\r\n\r\npdb_adc_pretrigger_config_t pdb1Ch0UPreTrigConfig2U = {\r\n  .adcPreTriggerIdx = 2U,\r\n  .preTriggerEnable = true,\r\n  .preTriggerOutputEnable = true,\r\n  .preTriggerBackToBackEnable = false,\r\n};\r\n"},{"name":"pdb1_params.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef PDB1_PARAMS_H\r\n#define PDB1_PARAMS_H\r\n#include \"pdb_driver.h\"\r\n#include \"trgmux_driver.h\"\r\n\r\nextern trgmux_inout_mapping_config_t trgmuxAllMappingConfig[];\r\nextern trgmux_inout_mapping_config_t pdb1MappingConfig;\r\nextern pdb_timer_config_t pdb1TimerConfig;\r\nextern pdb_adc_pretrigger_config_t pdb1Ch0UPreTrigConfig0U;\r\nextern pdb_adc_pretrigger_config_t pdb1Ch0UPreTrigConfig1U;\r\nextern pdb_adc_pretrigger_config_t pdb1Ch0UPreTrigConfig2U;\r\n\r\n#endif\r\n"},{"name":"pins_driver.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\inc","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2014 - 2015, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n#ifndef PINS_DRIVER_H\n#define PINS_DRIVER_H\n\n#include <stddef.h>\n#include \"device_registers.h\"\n#include \"status.h\"\n\n/*!\n * @defgroup pins_driver PINS Driver\n * @ingroup pins\n * @details This section describes the programming interface of the PINS driver.\n * @{\n */\n\n/*******************************************************************************\n * Definitions\n ******************************************************************************/\n#if defined(FEATURE_PINS_DRIVER_USING_PORT)\n/*!\n * @brief Type of a GPIO channel representation\n * Implements : pins_channel_type_t_Class\n */\ntypedef uint32_t pins_channel_type_t;\n\n#elif defined(FEATURE_PINS_DRIVER_USING_SIUL2)\n/*!\n * @brief Type of a GPIO channel representation\n * Implements : pins_channel_type_t_Class\n */\ntypedef uint16_t pins_channel_type_t;\n\n#endif /* if defined(FEATURE_PINS_DRIVER_USING_PORT) */\n\n/*!\n * @brief Type of a port levels representation.\n * Implements : pins_level_type_t_Class\n */\ntypedef uint8_t pins_level_type_t;\n\n/*!\n * @brief Configures the port data direction\n * Implements : port_data_direction_t_Class\n */\ntypedef enum\n{\n    GPIO_INPUT_DIRECTION       = 0x0U,  /*!< General purpose input direction.       */\n    GPIO_OUTPUT_DIRECTION      = 0x1U,  /*!< General purpose output direction.      */\n    GPIO_UNSPECIFIED_DIRECTION = 0x2U   /*!< General purpose unspecified direction. */\n} port_data_direction_t;\n\n#if FEATURE_PINS_HAS_PULL_SELECTION\n/*!\n * @brief Internal resistor pull feature selection\n * Implements : port_pull_config_t_Class\n */\ntypedef enum\n{\n    PORT_INTERNAL_PULL_NOT_ENABLED   = 0U,  /*!< internal pull-down or pull-up resistor is not enabled.           */\n    PORT_INTERNAL_PULL_DOWN_ENABLED  = 1U,  /*!< internal pull-down resistor is enabled. @internal gui name=\"Down\"*/\n    PORT_INTERNAL_PULL_UP_ENABLED    = 2U   /*!< internal pull-up resistor is enabled. @internal gui name=\"Up\"    */\n} port_pull_config_t;\n#endif /* FEATURE_PINS_HAS_PULL_SELECTION */\n\n#if FEATURE_PINS_HAS_OPEN_DRAIN\n/*!\n * @brief Configures the Open Drain Enable field.\n * Implements : port_open_drain_t_Class\n */\ntypedef enum\n{\n    PORT_OPEN_DRAIN_DISABLED  = 0U, /*!< Output is CMOS       */\n    PORT_OPEN_DRAIN_ENABLED   = 1U  /*!< Output is open drain */\n} port_open_drain_t;\n#endif /* FEATURE_PINS_HAS_OPEN_DRAIN */\n\n#if FEATURE_PINS_HAS_DRIVE_STRENGTH\n/*!\n * @brief Configures the drive strength.\n * Implements : port_drive_strength_t_Class\n */\ntypedef enum\n{\n#if FEATURE_PINS_HAS_DRIVE_STRENGTH_CONTROL\n    PORT_STRENGTH_DISABLED      = 0U, /*!< Output driver disabled                                         */\n    PORT_LOW_DRIVE_STRENGTH     = 1U, /*!< Low drive strength is configured. Resistor is set to 240 Ohm   */\n    PORT_STR1_DRIVE_STRENGTH    = 1U, /*!< Resistor is set to 240 Ohm                                     */\n    PORT_STR2_DRIVE_STRENGTH    = 2U, /*!< Resistor is set to 240 / 2 Ohm = 120 Ohm                       */\n    PORT_STR3_DRIVE_STRENGTH    = 3U, /*!< Resistor is set to 240 / 3 Ohm = 80 Ohm                        */\n    PORT_STR4_DRIVE_STRENGTH    = 4U, /*!< Resistor is set to 240 / 4 Ohm = 60 Ohm                        */\n    PORT_STR5_DRIVE_STRENGTH    = 5U, /*!< Resistor is set to 240 / 5 Ohm = 48 Ohm                        */\n    PORT_STR6_DRIVE_STRENGTH    = 6U, /*!< Resistor is set to 240 / 6 Ohm = 40 Ohm                        */\n    PORT_STR7_DRIVE_STRENGTH    = 7U, /*!< Resistor is set to 240 / 7 Ohm = 34 Ohm                        */\n    PORT_HIGH_DRIVE_STRENGTH    = 7U  /*!< High drive strength is configured. Resistor is set to 240 Ohm  */\n#else /* if not FEATURE_PINS_HAS_DRIVE_STRENGTH_CONTROL */\n    PORT_LOW_DRIVE_STRENGTH     = 0U,    /*!< low drive strength is configured. @internal gui name=\"Low\"  */\n    PORT_HIGH_DRIVE_STRENGTH    = 1U     /*!< high drive strength is configured. @internal gui name=\"High\"*/\n#endif /* if FEATURE_PINS_HAS_DRIVE_STRENGTH_CONTROL */\n} port_drive_strength_t;\n#endif /* FEATURE_PINS_HAS_DRIVE_STRENGTH */\n\n#ifdef FEATURE_PINS_DRIVER_USING_PORT\n/*!\n * @brief Configures the Pin mux selection\n * Implements : port_mux_t_Class\n */\ntypedef enum\n{\n    PORT_PIN_DISABLED            = 0U,  /*!< corresponding pin is disabled, but is used as an analog pin       */\n    PORT_MUX_AS_GPIO             = 1U,  /*!< corresponding pin is configured as GPIO                           */\n    PORT_MUX_ALT2                = 2U,  /*!< chip-specific                                                     */\n    PORT_MUX_ALT3                = 3U,  /*!< chip-specific                                                     */\n    PORT_MUX_ALT4                = 4U,  /*!< chip-specific                                                     */\n    PORT_MUX_ALT5                = 5U,  /*!< chip-specific                                                     */\n    PORT_MUX_ALT6                = 6U,  /*!< chip-specific                                                     */\n    PORT_MUX_ALT7                = 7U,  /*!< chip-specific                                                     */\n#if FEATURE_PINS_HAS_ADC_INTERLEAVE_EN\n    PORT_MUX_ADC_INTERLEAVE      = 8U   /*!< when selected, ADC Interleaved channel is connected to current pin\n                                         *   and disconnected to opposed pin\n                                         * ADC1_SE14-PTB15 | ADC1_SE15-PTB16 | ADC0_SE8-PTC0  | ADC0_SE9-PTC1\n                                         * ADC1_SE14-PTB0  | ADC1_SE15-PTB1  | ADC0_SE8-PTB13 | ADC0_SE9-PTB14 */\n#endif /* FEATURE_PINS_HAS_ADC_INTERLEAVE_EN */\n} port_mux_t;\n\n/*!\n * @brief Configures the interrupt generation condition.\n * Implements : port_interrupt_config_t_Class\n */\ntypedef enum\n{\n    PORT_DMA_INT_DISABLED  = 0x0U,  /*!< Interrupt/DMA request is disabled.                   */\n    PORT_DMA_RISING_EDGE   = 0x1U,  /*!< DMA request on rising edge.                          */\n    PORT_DMA_FALLING_EDGE  = 0x2U,  /*!< DMA request on falling edge.                         */\n    PORT_DMA_EITHER_EDGE   = 0x3U,  /*!< DMA request on either edge.                          */\n#if FEATURE_PORT_HAS_FLAG_SET_ONLY\n    PORT_FLAG_RISING_EDGE  = 0x5U,  /*!< Flag sets on rising edge, no interrupt is generated. */\n    PORT_FLAG_FALLING_EDGE = 0x6U,  /*!< Flag sets on falling edge, no interrupt is generated.*/\n    PORT_FLAG_EITHER_EDGE  = 0x7U,  /*!< Flag sets on either edge, no interrupt is generated. */\n#endif /* FEATURE_PORT_HAS_FLAG_SET_ONLY */\n    PORT_INT_LOGIC_ZERO    = 0x8U,  /*!< Interrupt when logic 0.                              */\n    PORT_INT_RISING_EDGE   = 0x9U,  /*!< Interrupt on rising edge.                            */\n    PORT_INT_FALLING_EDGE  = 0xAU,  /*!< Interrupt on falling edge.                           */\n    PORT_INT_EITHER_EDGE   = 0xBU,  /*!< Interrupt on either edge.                            */\n    PORT_INT_LOGIC_ONE     = 0xCU,  /*!< Interrupt when logic 1.                              */\n#if FEATURE_PORT_HAS_TRIGGER_OUT\n    PORT_HIGH_TRIGGER_OUT  = 0xDU,  /*!< Enable active high trigger output, flag is disabled. */\n    PORT_LOW_TRIGGER_OUT   = 0xEU   /*!< Enable active low trigger output, flag is disabled.  */\n#endif /* FEATURE_PORT_HAS_TRIGGER_OUT */\n} port_interrupt_config_t;\n\n#if FEATURE_PINS_HAS_SLEW_RATE\n/*!\n * @brief Configures the Slew Rate field.\n * Implements : port_slew_rate_t_Class\n */\ntypedef enum\n{\n    PORT_FAST_SLEW_RATE     = 0U,   /*!< fast slew rate is configured. @internal gui name=\"Fast\" */\n    PORT_SLOW_SLEW_RATE     = 1U    /*!< slow slew rate is configured. @internal gui name=\"Slow\" */\n} port_slew_rate_t;\n#endif /* FEATURE_PINS_HAS_SLEW_RATE */\n\n/*!\n * @brief Clock source for the digital input filters\n * Implements : port_digital_filter_clock_t_Class\n */\ntypedef enum\n{\n    PORT_DIGITAL_FILTER_BUS_CLOCK  = 0U, /*!< Digital filters are clocked by the bus clock. @internal gui name=\"BUS\" */\n    PORT_DIGITAL_FILTER_LPO_CLOCK  = 1U  /*!< Digital filters are clocked by the LPO clock. @internal gui name=\"LPO\" */\n} port_digital_filter_clock_t;\n\n/*!\n * @brief The digital filter configuration\n * Implements : port_digital_filter_config_t_Class\n */\ntypedef struct\n{\n    port_digital_filter_clock_t clock;  /*!< The digital filter clock for port */\n    uint8_t                     width;  /*!< The digital filter width value */\n} port_digital_filter_config_t;\n\n/*!\n * @brief The port global pin/interuppt control registers\n * Implements : port_global_control_pins_t_Class\n */\ntypedef enum\n{\n    PORT_GLOBAL_CONTROL_LOWER_HALF_PINS = 0U, /*!< the lower of pins is configured. @internal gui name=\"Lower\" */\n    PORT_GLOBAL_CONTROL_UPPER_HALF_PINS = 1U  /*!< the upper of pins is configured. @internal gui name=\"Upper\" */\n} port_global_control_pins_t;\n\n#if FEATURE_PINS_HAS_OVER_CURRENT\n/*!\n * @brief Over-current detection feature\n * Implements : port_over_current_config_t_Class\n */\ntypedef enum\n{\n    PORT_OVER_CURRENT_DISABLED      = 0U,   /*!< Over-current feature pin is disabled.          */\n    PORT_OVER_CURRENT_INT_DISABLED  = 1U,   /*!< Over-current is enabled, interrupt is disabled */\n    PORT_OVER_CURRENT_INT_ENABLED   = 2U    /*!< Over-current is enabled, interrupt is enabled  */\n} port_over_current_config_t;\n#endif /* FEATURE_PINS_HAS_OVER_CURRENT */\n\n#elif defined(FEATURE_PINS_DRIVER_USING_SIUL2)\n#if FEATURE_SIUL2_HAS_DDR_PAD\n/*!\n * @brief Configures the DDR type to:\n *      DDR3, DDR3L modes   - 00\n *      LPDDR2 mode         - 10\n * Implements : port_ddr_type_t_Class\n */\ntypedef enum\n{\n    DDR_DDR3_MODE       = 0x0U,  /*!< DDR3 / LPDDR3 mode  */\n    DDR_LPDDR2_MODE     = 0x2U   /*!< LPDDR2 mode         */\n} port_ddr_type_t;\n\n/*!\n * @brief Configures the DDR trimming delay to:\n *      min delay           - 00\n *      +50ps delay         - 01\n *      +100ps delay        - 10\n *      +150ps delay        - 11\n * Implements : port_ddr_trim_delay_t_Class\n */\ntypedef enum\n{\n    DDR_MIN_DELAY       = 0x0U,  /*!< min delay     */\n    DDR_50PS_DELAY      = 0x1U,  /*!< +50ps delay   */\n    DDR_100PS_DELAY     = 0x2U,  /*!< +100ps delay  */\n    DDR_150PS_DELAY     = 0x3U   /*!< +150ps delay  */\n} port_ddr_trim_delay_t;\n\n/*!\n * @brief Configures the DDR crosspoint adjusment of DDR CLK cell output signal to:\n *      No crosspoint change                    - 00\n *      Output crosspoint is +70mV higher       - 01\n *      Output crosspoint is -70mV lower        - 10\n *      Output crosspoint is +140mV higher      - 11\n * Implements : port_ddr_crpoint_t_Class\n */\ntypedef enum\n{\n    DDR_NO_CRPOINT      = 0x0U,  /*!< No crosspoint change               */\n    DDR_MINUS_CRPOINT   = 0x1U,  /*!< Output crosspoint is +70mV higher  */\n    DDR_PLUS_CRPOINT    = 0x2U,  /*!< Output crosspoint is -70mV lower   */\n    DDR_DOUBLE_CRPOINT  = 0x3U   /*!< Output crosspoint is +140mV higher */\n} port_ddr_crpoint_t;\n\n/*!\n * @brief Configures the DDR output signal duty cycle adjustment to:\n *      No duty cycle change            - 00\n *      Left side input pulse shrink    - 01\n *      Right side input pulse shrink   - 10\n *      Right side input pulse shrink   - 11\n * Implements : port_ddr_trim_t_Class\n */\ntypedef enum\n{\n    DDR_NO_TRIM         = 0x0U,  /*!< No duty cycle change             */\n    DDR_LEFT_TRIM       = 0x1U,  /*!< Left side input pulse shrink     */\n    DDR_RIGHT_TRIM      = 0x2U   /*!< Right side input pulse shrink    */\n} port_ddr_trim_t;\n\n/*!\n * @brief Configures DDR input to select differential or CMOS input receiver mode.\n * Implements : port_ddr_input_t_Class\n */\ntypedef enum\n{\n    PORT_DDR_INPUT_CMOS          = 0U, /*!< CMOS input receiver mode             */\n    PORT_DDR_INPUT_DIFFERENTIAL  = 1U  /*!< differential DDR input receiver mode */\n} port_ddr_input_t;\n\n/*!\n * @brief Configures the On die Termination to select ODT strength in DDR3 mode.\n * Implements : port_on_die_termination_t_Class\n */\ntypedef enum\n{\n    PORT_STR0_ON_DIE_TERMINATION    = 0U, /*!< Not applicable                         */\n    PORT_STR1_ON_DIE_TERMINATION    = 1U, /*!< Termination resistor is set to 120 Ohm */\n    PORT_STR2_ON_DIE_TERMINATION    = 2U, /*!< Termination resistor is set to 60 Ohm  */\n    PORT_STR3_ON_DIE_TERMINATION    = 3U, /*!< Termination resistor is set to 40 Ohm  */\n    PORT_STR4_ON_DIE_TERMINATION    = 4U, /*!< Termination resistor is set to 30 Ohm  */\n    PORT_STR5_ON_DIE_TERMINATION    = 5U, /*!< Termination resistor is set to 24 Ohm  */\n    PORT_STR6_ON_DIE_TERMINATION    = 6U, /*!< Termination resistor is set to 20 Ohm  */\n    PORT_STR7_ON_DIE_TERMINATION    = 7U  /*!< Termination resistor is set to 17 Ohm  */\n} port_on_die_termination_t;\n\n/*!\n * @brief Defines the DDR configuration\n *\n * This structure is used to configure the pins for the DDR controller\n * Implements : pin_ddr_config_t_Class\n */\ntypedef struct\n{\n    port_ddr_type_t         ddrSelection;           /*!< DDR type                   */\n    port_ddr_trim_delay_t   trimmingDelay;          /*!< DDR trimming delay value   */\n    port_ddr_crpoint_t      crosspointAdjustment;   /*!< Crosspoint adjusment       */\n    port_ddr_trim_t         trimmingAdjustment;     /*!< DDR trimming type          */\n} pin_ddr_config_t;\n\n#endif /* FEATURE_SIUL2_HAS_DDR_PAD */\n\n/*!\n * @brief Configures the Pin mux selection\n * Implements : port_mux_t_Class\n */\ntypedef enum\n{\n    PORT_MUX_AS_GPIO    = 0U,   /*!< corresponding pin is configured as GPIO */\n    PORT_MUX_ALT1       = 1U,   /*!< chip-specific                           */\n    PORT_MUX_ALT2       = 2U,   /*!< chip-specific                           */\n    PORT_MUX_ALT3       = 3U,   /*!< chip-specific                           */\n    PORT_MUX_ALT4       = 4U,   /*!< chip-specific                           */\n    PORT_MUX_ALT5       = 5U,   /*!< chip-specific                           */\n    PORT_MUX_ALT6       = 6U,   /*!< chip-specific                           */\n    PORT_MUX_ALT7       = 7U,   /*!< chip-specific                           */\n    PORT_MUX_ALT8       = 8U,   /*!< chip-specific                           */\n    PORT_MUX_ALT9       = 9U,   /*!< chip-specific                           */\n    PORT_MUX_ALT10      = 10U,  /*!< chip-specific                           */\n    PORT_MUX_ALT11      = 11U,  /*!< chip-specific                           */\n    PORT_MUX_ALT12      = 12U,  /*!< chip-specific                           */\n    PORT_MUX_ALT13      = 13U,  /*!< chip-specific                           */\n    PORT_MUX_ALT14      = 14U,  /*!< chip-specific                           */\n    PORT_MUX_ALT15      = 15U   /*!< chip-specific                           */\n} port_mux_t;\n\n/*!\n * @brief Configures the interrupt generation condition.\n * Implements : siul2_interrupt_type_t_Class\n */\ntypedef enum\n{\n    SIUL2_INT_DISABLE       = 0x0U,  /*!< Interrupt disable.         */\n    SIUL2_INT_RISING_EDGE   = 0x1U,  /*!< Interrupt on rising edge.  */\n    SIUL2_INT_FALLING_EDGE  = 0x2U,  /*!< Interrupt on falling edge. */\n    SIUL2_INT_EITHER_EDGE   = 0x3U   /*!< Interrupt on either edge.  */\n} siul2_interrupt_type_t;\n\n#if FEATURE_SIUL2_EXTERNAL_INT_SUPPORT_DMA\n/*!\n * @brief Configures the interrupt DMA select.\n * Implements : siul2_interrupt_dma_select_t_Class\n */\ntypedef enum\n{\n    SIUL2_INT_USING_INTERUPT = 0x0U, /*!< Executived by an interrupt request */\n    SIUL2_INT_USING_DMA      = 0x1U  /*!< Executived by an DMA request       */\n} siul2_interrupt_dma_select_t;\n#endif /* FEATURE_SIUL2_EXTERNAL_INT_SUPPORT_DMA */\n\n/*!\n * @brief Interrupt configuration structure.\n * Implements : siul2_interrupt_config_t_Class\n */\ntypedef struct\n{\n    uint8_t                eirqPinIdx;      /*!< The interrupt pin index */\n    siul2_interrupt_type_t intEdgeSel;      /*!< The type of edge event  */\n    bool                   digitalFilter;   /*!< Enables digital filter  */\n    uint8_t                maxCnt;          /*!< Maximum interrupt filter value  */\n#if FEATURE_SIUL2_EXTERNAL_INT_SUPPORT_DMA\n    siul2_interrupt_dma_select_t intExeSel; /*!< Switch between DMA and interrupt request */\n#endif\n} siul2_interrupt_config_t;\n\n/*!\n * @brief Configures the Output Buffer Enable field.\n * Implements : port_output_buffer_t_Class\n */\ntypedef enum\n{\n    PORT_OUTPUT_BUFFER_DISABLED     = 0U, /*!< Output buffer disabled */\n    PORT_OUTPUT_BUFFER_ENABLED      = 1U  /*!< Output buffer enabled  */\n} port_output_buffer_t;\n\n/*!\n * @brief Configures the Input Buffer Enable field.\n * Implements : port_input_buffer_t_Class\n */\ntypedef enum\n{\n    PORT_INPUT_BUFFER_DISABLED     = 0U, /*!< Input buffer disabled */\n    PORT_INPUT_BUFFER_ENABLED      = 1U  /*!< Input buffer enabled  */\n} port_input_buffer_t;\n\n#if FEATURE_SIUL2_HAS_HYSTERESIS\n/*!\n * @brief Configures the Hysteresis Enable field.\n * Implements : port_hysteresis_t_Class\n */\ntypedef enum\n{\n    PORT_HYSTERESYS_CMOS        = 0U, /*!< CMOS Input            */\n    PORT_HYSTERESYS_SCHMITT     = 1U, /*!< Schmitt trigger input */\n    PORT_HYSTERESYS_DISABLED    = 0U, /*!< DISABLED              */\n    PORT_HYSTERESYS_ENABLED     = 1U  /*!< ENABLED               */\n} port_hysteresis_t;\n#endif /* FEATURE_SIUL2_HAS_HYSTERESIS */\n\n#if FEATURE_SIUL2_HAS_INVERT_DATA_OUTPUT\n/*!\n * @brief Configures the Invert Data Output field.\n * Implements : port_invert_output_t_Class\n */\ntypedef enum\n{\n    PORT_INVERT_OUTPUT_DISABLED  = 0U, /*!< Invert Data Output disabled */\n    PORT_INVERT_OUTPUT_ENABLED   = 1U  /*!< Invert Data Output enabled  */\n} port_invert_output_t;\n#endif /* FEATURE_SIUL2_HAS_INVERT_DATA_OUTPUT */\n\n#if FEATURE_SIUL2_HAS_INVERT_DATA_INPUT\n/*!\n * @brief Configures the Invert Data Input field.\n * Implements : port_invert_input_t_Class\n */\ntypedef enum\n{\n    PORT_INVERT_INPUT_DISABLED   = 0U, /*!< Invert Data Input disabled  */\n    PORT_INVERT_INPUT_ENABLED    = 1U  /*!< Invert Data Input enabled   */\n} port_invert_input_t;\n#endif /* FEATURE_SIUL2_HAS_INVERT_DATA_INPUT */\n\n#if FEATURE_SIUL2_HAS_PULL_KEEPER\n/*!\n * @brief Configures the Pull / Keep Enable field.\n * Implements : port_pull_keep_t_Class\n */\ntypedef enum\n{\n    PORT_PULL_KEEP_DISABLED  = 0U, /*!< Pull/Keeper Disabled  */\n    PORT_PULL_KEEP_ENABLED   = 1U  /*!< Pull/Keeper Enabled   */\n} port_pull_keep_t;\n\n/*!\n * @brief Configures the Pull / Keep Select Field (PUE).\n * Implements : port_pull_keeper_select_t_Class\n */\ntypedef enum\n{\n    PORT_KEEPER_ENABLED      = 0U, /*!< Keeper enable                       */\n    PORT_PULL_ENABLED        = 1U  /*!< Pullup or pulldown resistors enable */\n} port_pull_keeper_select_t;\n\n/*!\n * @brief Configures the Pull Up / Down Config Field.\n * Implements : port_pull_up_down_t_Class\n */\ntypedef enum\n{\n    PORT_PULL_DOWN_ENABLED   = 0U,  /*!< 100 kOhm pulldown */\n    PORT_PULL_UP_MEDIUM      = 1U,  /*!< 50 kOhm pullup    */\n    PORT_PULL_UP_HIGH        = 2U,  /*!< 100 kOhm pullup   */\n    PORT_PULL_UP_LOW         = 3U   /*!< 33 kOhm pullup    */\n} port_pull_up_down_t;\n\n#endif /* FEATURE_SIUL2_HAS_PULL_KEEPER */\n\n#if FEATURE_SIUL2_HAS_ANALOG_PAD\n/*!\n * @brief Configures the Analog Pad Control.\n * Implements : port_analog_pad_t_Class\n */\ntypedef enum\n{\n    PORT_ANALOG_PAD_CONTROL_DISABLED = 0U, /*!< Disable (the switch is off)                                 */\n    PORT_ANALOG_PAD_CONTROL_ENABLED  = 1U  /*!< Enable (another module can control the state of the switch) */\n} port_analog_pad_t;\n#endif /* FEATURE_SIUL2_HAS_ANALOG_PAD */\n\n/*!\n * @brief Configures the DAISY (on CPU_S32V234) or SSS (on CPU_MPC5748G) bitfield in the IMCR register.\n * Implements : port_input_mux_t_Class\n */\ntypedef enum\n{\n    PORT_INPUT_MUX_ALT0      = 0U,   /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT1      = 1U,   /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT2      = 2U,   /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT3      = 3U,   /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT4      = 4U,   /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT5      = 5U,   /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT6      = 6U,   /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT7      = 7U,   /*!< Chip-specific     */\n#if (FEATURE_SIUL2_INPUT_SOURCE_SELECT_WIDTH >= 4U)\n    PORT_INPUT_MUX_ALT8      = 8U,   /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT9      = 9U,   /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT10     = 10U,  /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT11     = 11U,  /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT12     = 12U,  /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT13     = 13U,  /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT14     = 14U,  /*!< Chip-specific     */\n    PORT_INPUT_MUX_ALT15     = 15U,  /*!< Chip-specific     */\n#endif\n    PORT_INPUT_MUX_NO_INIT           /*!< No initialization */\n} port_input_mux_t;\n\n/*!\n * @brief Configures the Safe Mode Control.\n * Implements : port_safe_mode_t_Class\n */\ntypedef enum\n{\n    PORT_SAFE_MODE_DISABLED     = 0U, /*!< To drive pad in hi-z state using OBE = 0, when FCCU in fault state.\n                                       * The OBE will be driven by IP/SIUL when FCCU leaves the fault state. */\n    PORT_SAFE_MODE_ENABLED      = 1U  /*!< No effect on IP/SIUL driven OBE value */\n} port_safe_mode_t;\n\n#if FEATURE_SIUL2_HAS_SLEW_RATE_CONTROL\n/*!\n * @brief Configures the slew rate control.\n * Implements : port_slew_rate_control_t_Class\n */\ntypedef enum\n{\n    HALF_STRENGTH_WITH_SLEWRATE_CONTROL     = 0u, /*!< Half Strength with Slewrate Control     */\n    FULL_STRENGTH_WITH_SLEWRATE_CONTROL     = 1u, /*!< Full Strength with Slewrate Control     */\n    HALF_STRENGTH_WITHOUT_SLEWRATE_CONTROL  = 2u, /*!< Half Strength without Slewrate Control  */\n    FULL_STRENGTH_WITHOUT_SLEWRATE_CONTROL  = 3u  /*!< Full Strength without Slewrate Control  */\n} port_slew_rate_control_t;\n#endif /* FEATURE_SIUL2_HAS_SLEW_RATE_CONTROL  */\n\n#if FEATURE_PINS_HAS_SLEW_RATE\n/*!\n * @brief Configures the Slew Rate field.\n * Implements : port_slew_rate_t_Class\n */\ntypedef enum\n{\n    PORT_LOW_SLEW_RATE      = 0U,   /*!< Low    frequency slew rate (50 Mhz) */\n    PORT_MEDIUM_SLEW_RATE   = 1U,   /*!< Medium frequency slew rate (100Mhz) */\n    PORT_MEDIUM_SLEW_RATE2  = 2U,   /*!< Medium frequency slew rate (100Mhz) */\n    PORT_HIGH_SLEW_RATE     = 3U    /*!< High   frequency slew rate (200Mhz) */\n} port_slew_rate_t;\n#endif\n\n#endif /* FEATURE_PINS_DRIVER_USING_SIUL2 */\n\n/*!\n * @brief Defines the converter configuration\n *\n * This structure is used to configure the pins\n * Implements : pin_settings_config_t_Class\n */\ntypedef struct\n{\n#ifdef FEATURE_PINS_DRIVER_USING_PORT\n    PORT_Type         *         base;              /*!< Port base pointer.                        */\n#elif defined FEATURE_PINS_DRIVER_USING_SIUL2\n    SIUL2_Type        *         base;              /*!< SIUL2 base pointer.                       */\n#endif\n    uint32_t                    pinPortIdx;        /*!< Port pin number.                          */\n#if FEATURE_PINS_HAS_PULL_SELECTION\n    port_pull_config_t          pullConfig;        /*!< Internal resistor pull feature selection. */\n#endif\n#if FEATURE_PINS_HAS_SLEW_RATE\n    port_slew_rate_t            rateSelect;        /*!< Slew rate selection.                      */\n#endif\n#if FEATURE_PORT_HAS_PASSIVE_FILTER\n    bool                        passiveFilter;     /*!< Passive filter configuration.             */\n#endif\n#if FEATURE_PINS_HAS_OPEN_DRAIN\n    port_open_drain_t           openDrain;         /*!< Configures open drain.                    */\n#endif\n#if FEATURE_PINS_HAS_DRIVE_STRENGTH\n    port_drive_strength_t       driveSelect;       /*!< @brief Configures the drive strength.     */\n#endif\n    port_mux_t                  mux;               /*!< @brief Pin (C55: Out) mux selection.      */\n#if FEATURE_PORT_HAS_PIN_CONTROL_LOCK\n    bool                        pinLock;           /*!< Lock pin control register or not.         */\n#endif\n#ifdef FEATURE_PINS_DRIVER_USING_PORT\n    port_interrupt_config_t     intConfig;         /*!< Interrupt generation condition.           */\n    bool                        clearIntFlag;      /*!< Clears the interrupt status flag.         */\n    bool                        digitalFilter;     /*!< Enables digital filter.                   */\n#if FEATURE_PINS_HAS_OVER_CURRENT\n    bool                        clearOCurFlag;     /*!< Clears the Over-Current status flag.      */\n    port_over_current_config_t  overCurConfig;     /*!< Over-current detection feature.           */\n#endif\n#endif\n    GPIO_Type         *         gpioBase;          /*!< GPIO base pointer.                        */\n    port_data_direction_t       direction;         /*!< Configures the port data direction.       */\n#ifdef FEATURE_PINS_DRIVER_USING_SIUL2\n    port_input_mux_t    inputMux[FEATURE_SIUL2_INPUT_MUX_WIDTH];   /*!< Configures the input muxing selection */\n#if FEATURE_SIUL2_HAS_INVERT_DATA_INPUT\n    port_invert_input_t inputInvert[FEATURE_SIUL2_INPUT_MUX_WIDTH];/*!< Configures the Invert Data Input.     */\n#endif /* FEATURE_SIUL2_HAS_INVERT_DATA_INPUT */\n    uint32_t            inputMuxReg[FEATURE_SIUL2_INPUT_MUX_WIDTH];/*!< Configures the input muxing register  */\n    port_output_buffer_t        outputBuffer;      /*!< Configures the Output Buffer Enable.      */\n    port_input_buffer_t         inputBuffer;       /*!< Configures the Input Buffer Enable.       */\n    siul2_interrupt_config_t    intConfig;         /*!< Interrupt generation condition.           */\n#if FEATURE_SIUL2_HAS_SAFE_MODE_CONTROL\n    port_safe_mode_t            safeMode;          /*!< Configures the Safe Mode Control.         */\n#endif /* FEATURE_SIUL2_HAS_SAFE_MODE_CONTROL */\n#if FEATURE_SIUL2_HAS_SLEW_RATE_CONTROL\n    port_slew_rate_control_t    slewRateCtrlSel;   /*!< Configures the Slew Rate Control field.   */\n#endif /* FEATURE_SIUL2_HAS_SLEW_RATE_CONTROL */\n#if FEATURE_SIUL2_HAS_HYSTERESIS\n    port_hysteresis_t           hysteresisSelect;  /*!< Configures the Hysteresis Enable.         */\n#endif /* FEATURE_SIUL2_HAS_HYSTERESIS */\n#if FEATURE_SIUL2_HAS_DDR_PAD\n    pin_ddr_config_t            ddrConfiguration;  /*!< Structure that configures the DDR         */\n    port_ddr_input_t            inputMode;         /*!< Configures DDR input receiver mode.       */\n    port_on_die_termination_t   odtSelect;         /*!< Configures the ODT to select strength.    */\n#endif /* FEATURE_SIUL2_HAS_DDR_PAD */\n#if FEATURE_SIUL2_HAS_INVERT_DATA_OUTPUT\n    port_invert_output_t        invertOutput;      /*!< Configures the Invert Data Output.        */\n#endif /* FEATURE_SIUL2_HAS_INVERT_DATA_OUTPUT */\n#if FEATURE_SIUL2_HAS_PULL_KEEPER\n    port_pull_keep_t            pullKeepEnable;    /*!< Configures the Pull / Keep Enable.        */\n    port_pull_keeper_select_t   pullKeepSelect;    /*!< Configures the Pull / Keep Select.        */\n    port_pull_up_down_t         pullSelect;        /*!< Configures the Pull Up / Down Config.     */\n#endif /* FEATURE_SIUL2_HAS_PULL_KEEPER */\n#if FEATURE_SIUL2_HAS_ANALOG_PAD\n    port_analog_pad_t           analogPadCtrlSel;  /*!< Configures the Analog Pad Control         */\n#endif /* FEATURE_SIUL2_HAS_ANALOG_PAD */\n#endif /* FEATURE_PINS_DRIVER_USING_SIUL2 */\n    pins_level_type_t           initValue;         /*!< Initial value                             */\n} pin_settings_config_t;\n\n/*******************************************************************************\n * API\n ******************************************************************************/\n/*!\n * @name PINS DRIVER API.\n * @{\n */\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif\n\n/*!\n * @brief Initializes the pins with the given configuration structure\n *\n * This function configures the pins with the options provided in the\n * provided structure.\n *\n * @param[in] pinCount The number of configured pins in structure\n * @param[in] config The configuration structure\n * @return The status of the operation\n */\nstatus_t PINS_DRV_Init(uint32_t pinCount,\n                       const pin_settings_config_t config[]);\n\n#ifdef FEATURE_PINS_DRIVER_USING_PORT\n#if FEATURE_PINS_HAS_PULL_SELECTION\n/*!\n * @brief Configures the internal resistor.\n *\n * This function configures the internal resistor.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] pin Port pin number\n * @param[in] pullConfig The pull configuration\n */\nvoid PINS_DRV_SetPullSel(PORT_Type * const base,\n                         uint32_t pin,\n                         port_pull_config_t pullConfig);\n\n#endif /* FEATURE_PINS_HAS_PULL_SELECTION */\n\n/*!\n * @brief Configures the pin muxing.\n *\n * This function configures the pin muxing.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] pin Port pin number\n * @param[in] mux Pin muxing slot selection\n */\nvoid PINS_DRV_SetMuxModeSel(PORT_Type * const base,\n                            uint32_t pin,\n                            port_mux_t mux);\n\n/*!\n * @brief Configures the port pin interrupt/DMA request.\n *\n * This function configures the port pin interrupt/DMA request.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] pin Port pin number\n * @param[in] intConfig  Interrupt configuration\n */\nvoid PINS_DRV_SetPinIntSel(PORT_Type * const base,\n                           uint32_t pin,\n                           port_interrupt_config_t intConfig);\n\n/*!\n * @brief Gets the current port pin interrupt/DMA request configuration.\n *\n * This function gets the current port pin interrupt/DMA request configuration.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] pin Port pin number\n * @return Interrupt configuration\n */\nport_interrupt_config_t PINS_DRV_GetPinIntSel(const PORT_Type * const base,\n                                              uint32_t pin);\n\n/*!\n * @brief Clears the individual pin-interrupt status flag.\n *\n * This function clears the individual pin-interrupt status flag.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] pin Port pin number\n */\nvoid PINS_DRV_ClearPinIntFlagCmd(PORT_Type * const base,\n                                 uint32_t pin);\n\n/*!\n * @brief Enables digital filter for digital pin muxing\n *\n * This function enables digital filter feature for digital pin muxing\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] pin Port pin number\n */\nvoid PINS_DRV_EnableDigitalFilter(PORT_Type * const base,\n                                  uint32_t pin);\n\n/*!\n * @brief Disables digital filter for digital pin muxing\n *\n * This function disables digital filter feature for digital pin muxing\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] pin Port pin number\n */\nvoid PINS_DRV_DisableDigitalFilter(PORT_Type * const base,\n                                   uint32_t pin);\n\n/*!\n * @brief Configures digital filter for port with given configuration\n *\n * This function configures digital filter for port with given configuration\n *\n * Note: Updating the filter configuration must be done only after all filters are disabled.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] config the digital filter configuration struct\n */\nvoid PINS_DRV_ConfigDigitalFilter(PORT_Type * const base,\n                                  const port_digital_filter_config_t * const config);\n\n/*!\n * @brief Reads the entire port interrupt status flag\n *\n * This function reads the entire port interrupt status flag.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @return All 32 pin interrupt status flags\n */\nuint32_t PINS_DRV_GetPortIntFlag(const PORT_Type * const base);\n\n/*!\n * @brief Clears the entire port interrupt status flag.\n *\n * This function clears the entire port interrupt status flag.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n */\nvoid PINS_DRV_ClearPortIntFlagCmd(PORT_Type * const base);\n\n/*!\n * @brief Quickly configures multiple pins with the same pin configuration.\n *\n * This function quickly configures multiple pins within the one port for the same peripheral\n * function with the same pin configuration. Supports up to 16 pins with the lower or upper\n * half of pin registers at the same port.\n *\n * Note: The set global interrupt control function (PINS_DRV_SetGlobalIntControl) cannot be\n * configured if you ever used this function at the same port\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] pins Pin mask where each bit represents one pin. For each bit:\n *        - 0: pins corresponding to bits with value of '1' is updated with the value input\n *        - 1: pins corresponding to bits with value of '0' is not updated with the value input\n * @param[in] value the config value will be updated for the pins are set to '1'\n * @param[in] halfPort the lower or upper half of pin registers at the same port\n */\nvoid PINS_DRV_SetGlobalPinControl(PORT_Type * const base,\n                                  uint16_t pins,\n                                  uint16_t value,\n                                  port_global_control_pins_t halfPort);\n\n/*!\n * @brief Quickly configures multiple pins with the same interrupt configuration.\n *\n * This function quickly configures multiple pins within the one port for the same peripheral\n * function with the same interrupt configuration. Supports up to 16 pins with the lower or\n * upper half of pin registers at the same port.\n *\n * Note: The set global pin control function (PINS_DRV_SetGlobalPinControl) cannot be\n * configured if you ever used this function at the same port\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] pins Pin mask where each bit represents one pin. For each bit:\n *        - 0: pins corresponding to bits with value of '1' is updated with the value input\n *        - 1: pins corresponding to bits with value of '0' is not updated with the value input\n * @param[in] value the config value will be updated for the pins are set to '1'\n * @param[in] halfPort the lower or upper half of pin registers at the same port\n */\nvoid PINS_DRV_SetGlobalIntControl(PORT_Type * const base,\n                                  uint16_t pins,\n                                  uint16_t value,\n                                  port_global_control_pins_t halfPort);\n\n#if FEATURE_PINS_HAS_OVER_CURRENT\n/*!\n * @brief Reads the entire over current port interrupt status flag\n *\n * This function reads the entire over current port interrupt status flag.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @return All 32 pin interrupt status flags\n */\nuint32_t PINS_DRV_GetOverCurPortIntFlag(const PORT_Type * const base);\n\n/*!\n * @brief Clears the entire over current port interrupt status flag.\n *\n * This function clears the entire over current port interrupt status flag.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n */\nvoid PINS_DRV_ClearOverCurPortIntFlag(PORT_Type * const base);\n#endif /* FEATURE_PINS_HAS_OVER_CURRENT */\n\n/*!\n * @brief Get the pins directions configuration for a port\n *\n * This function returns the current pins directions for a port. Pins\n * corresponding to bits with value of '1' are configured as output and\n * pins corresponding to bits with value of '0' are configured as input.\n *\n * @param[in] base GPIO base pointer (PTA, PTB, PTC, etc.)\n * @return GPIO directions. Each bit represents one pin (LSB is pin 0, MSB is\n * pin 31). For each bit:\n *        - 0: corresponding pin is set to input\n *        - 1: corresponding pin is set to output\n */\npins_channel_type_t PINS_DRV_GetPinsDirection(const GPIO_Type * const base);\n\n/*!\n * @brief Configure the direction for a certain pin from a port\n *\n * This function configures the direction for the given pin, with the\n * given value('1' for pin to be configured as output and '0' for pin to\n * be configured as input)\n *\n * Note: With some platforms when you want to set a pin as output only and disable\n * input completely, it is required to call PINS_DRV_SetPortInputDisable if platform\n * has this feature.\n *\n * @param[in] base GPIO base pointer (PTA, PTB, PTC, etc.)\n * @param[in] pin The pin number for which to configure the direction\n * @param[in] direction The pin direction:\n *        - 0: corresponding pin is set to input\n *        - 1: corresponding pin is set to output\n */\nvoid PINS_DRV_SetPinDirection(GPIO_Type * const base,\n                              pins_channel_type_t pin,\n                              pins_level_type_t direction);\n\n/*!\n * @brief Set the pins directions configuration for a port\n *\n * This function sets the direction configuration for all pins\n * in a port. Pins corresponding to bits with value of '1' will be configured as\n * output and pins corresponding to bits with value of '0' will be configured as\n * input.\n *\n * Note: With some platforms when you want to set a pin as output only and disable\n * input completely, it is required to call PINS_DRV_SetPortInputDisable if platform\n * has this feature.\n *\n * @param[in] base GPIO base pointer (PTA, PTB, PTC, etc.)\n * @param[in] pins Pin mask where each bit represents one pin (LSB\n * is pin 0, MSB is pin 31). For each bit:\n *        - 0: corresponding pin is set to input\n *        - 1: corresponding pin is set to output\n */\nvoid PINS_DRV_SetPinsDirection(GPIO_Type * const base,\n                               pins_channel_type_t pins);\n\n#if FEATURE_PORT_HAS_INPUT_DISABLE\n/*!\n * @brief Set the pins input disable state for a port\n *\n * This function sets the pins input state for a port.\n * Pins corresponding to bits with value of '1' will not be configured\n * as input and pins corresponding to bits with value of '0' will be configured\n * as input.\n *\n * @param[in] base GPIO base pointer (PTA, PTB, PTC, etc.)\n * @param[in] pins Pin mask where each bit represents one pin (LSB is pin 0, MSB is\n * pin 31). For each bit:\n *        - 0: corresponding pin is set to input\n *        - 1: corresponding pin is not set to input\n */\nvoid PINS_DRV_SetPortInputDisable(GPIO_Type * const base,\n                                  pins_channel_type_t pins);\n\n/*!\n * @brief Get the pins input disable state for a port\n *\n * This function returns the current pins input state for a port. Pins\n * corresponding to bits with value of '1' are not configured as input and\n * pins corresponding to bits with value of '0' are configured as input.\n *\n * @param[in] base GPIO base pointer (PTA, PTB, PTC, etc.)\n * @return GPIO input state. Each bit represents one pin (LSB is pin 0, MSB is\n * pin 31). For each bit:\n *        - 0: corresponding pin is set to input\n *        - 1: corresponding pin is not set to input\n */\npins_channel_type_t PINS_DRV_GetPortInputDisable(const GPIO_Type * const base);\n#endif /* FEATURE_PORT_HAS_INPUT_DISABLE */\n\n#elif defined(FEATURE_PINS_DRIVER_USING_SIUL2)\n#if FEATURE_PINS_HAS_PULL_SELECTION\n/*!\n * @brief Configures the internal resistor.\n *\n * This function configures the internal resistor.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] pin Port pin number\n * @param[in] pullConfig The pull configuration\n */\nvoid PINS_DRV_SetPullSel(PORT_Type * const base,\n                         uint16_t pin,\n                         port_pull_config_t pullConfig);\n\n#endif /* FEATURE_PINS_HAS_PULL_SELECTION */\n\n/*!\n * @brief Configures the output buffer.\n *\n * This function configures the output buffer.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] pin Port pin number\n * @param[in] enable Enable output buffer\n * @param[in] mux Pin muxing slot selection\n */\nvoid PINS_DRV_SetOutputBuffer(PORT_Type * const base,\n                              uint16_t pin,\n                              bool enable,\n                              port_mux_t mux);\n\n/*!\n * @brief Configures the input buffer.\n *\n * This function configures the input buffer.\n *\n * @param[in] base Port base pointer (PORTA, PORTB, PORTC, etc.)\n * @param[in] pin Port pin number\n * @param[in] enable Enable input buffer\n * @param[in] inputMuxReg Pin muxing register slot selection\n * @param[in] inputMux Pin muxing slot selection\n */\nvoid PINS_DRV_SetInputBuffer(PORT_Type * const base,\n                             uint16_t pin,\n                             bool enable,\n                             uint32_t inputMuxReg,\n                             port_input_mux_t inputMux);\n\n/*!\n * @brief Configures the interrupt filter clock prescaler.\n *\n * This function configures the interrupt filter clock prescaler.\n *\n * @param[in] prescaler The clock prescaler value\n */\nvoid PINS_DRV_ConfigIntFilterClock(uint8_t prescaler);\n\n/*!\n * @brief Configures the external interrupt.\n *\n * This function configures the external interrupt.\n *\n * @param[in] intConfig The configuration for interrupt pin\n */\nvoid PINS_DRV_SetExInt(siul2_interrupt_config_t intConfig);\n\n/*!\n * @brief Clears the individual pin external interrupt status flag.\n *\n * This function clears the individual pin external interrupt status flag.\n *\n * @param[in] eirqPinIdx IRQ pin\n */\nvoid PINS_DRV_ClearPinExIntFlag(uint32_t eirqPinIdx);\n\n/*!\n * @brief Gets the individual pin external interrupt status flag.\n *\n * This function gets the individual pin external interrupt status flag.\n *\n * @param[in] eirqPinIdx IRQ pin\n * @return Pin external status flag\n */\nbool PINS_DRV_GetPinExIntFlag(uint32_t eirqPinIdx);\n\n/*!\n * @brief Clears the entire external interrupt status flag.\n *\n * This function clears the entire external interrupt status flag.\n */\nvoid PINS_DRV_ClearExIntFlag(void);\n\n/*!\n * @brief Reads the entire external interrupt status flag\n *\n * This function reads the entire external interrupt status flag.\n *\n * @return All 32 IRQ pins\n */\nuint32_t PINS_DRV_GetExIntFlag(void);\n\n#endif /* FEATURE_PINS_DRIVER_USING_PORT */\n\n/*!\n * @brief Write a pin of a port with a given value\n *\n * This function writes the given pin from a port, with the given value\n * ('0' represents LOW, '1' represents HIGH).\n *\n * @param[in] base GPIO base pointer (PTA, PTB, PTC, etc.)\n * @param[in] pin Pin number to be written\n * @param[in] value Pin value to be written\n *        - 0: corresponding pin is set to LOW\n *        - 1: corresponding pin is set to HIGH\n */\nvoid PINS_DRV_WritePin(GPIO_Type * const base,\n                       pins_channel_type_t pin,\n                       pins_level_type_t value);\n\n/*!\n * @brief Write all pins of a port\n *\n * This function writes all pins configured as output with the values given in\n * the parameter pins. '0' represents LOW, '1' represents HIGH.\n *\n * @param[in] base GPIO base pointer (PTA, PTB, PTC, etc.)\n * @param[in] pins Pin mask to be written\n *        - 0: corresponding pin is set to LOW\n *        - 1: corresponding pin is set to HIGH\n */\nvoid PINS_DRV_WritePins(GPIO_Type * const base,\n                        pins_channel_type_t pins);\n\n/*!\n * @brief Get the current output from a port\n *\n * This function returns the current output that is written to a port. Only pins\n * that are configured as output will have meaningful values.\n *\n * @param[in] base GPIO base pointer (PTA, PTB, PTC, etc.)\n * @return GPIO outputs. Each bit represents one pin (LSB is pin 0, MSB is pin\n * 31). For each bit:\n *        - 0: corresponding pin is set to LOW\n *        - 1: corresponding pin is set to HIGH\n */\npins_channel_type_t PINS_DRV_GetPinsOutput(const GPIO_Type * const base);\n\n/*!\n * @brief Write pins with 'Set' value\n *\n * This function configures output pins listed in parameter pins (bits that are\n * '1') to have a value of 'set' (HIGH). Pins corresponding to '0' will be\n * unaffected.\n *\n * @param[in] base GPIO base pointer (PTA, PTB, PTC, etc.)\n * @param[in] pins Pin mask of bits to be set. Each bit represents one pin (LSB is\n * pin 0, MSB is pin 31). For each bit:\n *        - 0: corresponding pin is unaffected\n *        - 1: corresponding pin is set to HIGH\n */\nvoid PINS_DRV_SetPins(GPIO_Type * const base,\n                      pins_channel_type_t pins);\n\n/*!\n * @brief Write pins to 'Clear' value\n *\n * This function configures output pins listed in parameter pins (bits that are\n * '1') to have a 'cleared' value (LOW). Pins corresponding to '0' will be\n * unaffected.\n *\n * @param[in] base GPIO base pointer (PTA, PTB, PTC, etc.)\n * @param[in] pins Pin mask of bits to be cleared. Each bit represents one pin (LSB\n * is pin 0, MSB is pin 31). For each bit:\n *        - 0: corresponding pin is unaffected\n *        - 1: corresponding pin is cleared(set to LOW)\n */\nvoid PINS_DRV_ClearPins(GPIO_Type * const base,\n                        pins_channel_type_t pins);\n\n/*!\n * @brief Toggle pins value\n *\n * This function toggles output pins listed in parameter pins (bits that are\n * '1'). Pins corresponding to '0' will be unaffected.\n *\n * @param[in] base GPIO base pointer (PTA, PTB, PTC, etc.)\n * @param[in] pins Pin mask of bits to be toggled.  Each bit represents one pin (LSB\n * is pin 0, MSB is pin 31). For each bit:\n *        - 0: corresponding pin is unaffected\n *        - 1: corresponding pin is toggled\n */\nvoid PINS_DRV_TogglePins(GPIO_Type * const base,\n                         pins_channel_type_t pins);\n\n/*!\n * @brief Read input pins\n *\n * This function returns the current input values from a port. Only pins\n * configured as input will have meaningful values.\n *\n * @param[in] base GPIO base pointer (PTA, PTB, PTC, etc.)\n * @return GPIO inputs. Each bit represents one pin (LSB is pin 0, MSB is pin\n * 31). For each bit:\n *        - 0: corresponding pin is read as LOW\n *        - 1: corresponding pin is read as HIGH\n */\npins_channel_type_t PINS_DRV_ReadPins(const GPIO_Type * const base);\n\n/*! @} */\n\n#if defined(__cplusplus)\n}\n#endif\n\n/*! @} */\n\n#endif /* PINS_DRIVER_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"pmc_hw_access.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\src\\clock\\S32K1xx","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2013 - 2014, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n#ifndef PMC_HW_ACCESS_H\n#define PMC_HW_ACCESS_H\n\n#include \"device_registers.h\"\n#include <stdbool.h>\n#include <stddef.h>\n\n/*!\n * @file pmc_hw_access.h\n *\n * @page misra_violations MISRA-C:2012 violations\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.\n * This is required to implement enumeration entries as macro.\n * Enumeration entries (macros) are referenced from application code.\n */\n\n/*!\n * @ingroup pmc_hw_access\n * @defgroup pmc_hw_access\n * @{\n */\n\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif /* __cplusplus*/\n\n\n/*!\n * @brief Enables/Disables the Low Power Oscillator.\n *\n * This function  enables/disables the Low Power Oscillator.\n *\n * @param[in] baseAddr  Base address for current PMC instance.\n * @param[in] enable    enable/disable the Low Power Oscillator.\n */\nstatic inline void PMC_SetLpoMode(PMC_Type* const baseAddr, const bool enable)\n{\n    uint8_t regValue = baseAddr->REGSC;\n    regValue &= (uint8_t)(~(PMC_REGSC_LPODIS_MASK));\n    regValue |= (uint8_t)PMC_REGSC_LPODIS(enable?0U:1U);\n    baseAddr->REGSC = regValue;\n}\n\n/*!\n * @brief Gets the Low Power Oscillator status.\n *\n * This function gets the Low Power Oscillator status.\n *\n * @param[in] baseAddr  Base address for current PMC instance.\n * @return value LPO status\n *               false - LPO is disabled\n *               true - LPO is enabled\n */\nstatic inline bool PMC_GetLpoMode(const PMC_Type * const baseAddr)\n{\n    uint8_t regValue = baseAddr->REGSC;\n    regValue = (uint8_t)((regValue & PMC_REGSC_LPODIS_MASK) >> PMC_REGSC_LPODIS_SHIFT);\n    return (regValue == 0U) ? true : false;\n}\n\n\n/*!\n * @brief Low Power Oscillator Trimming Value\n *\n * This function sets the trimming value for the low power oscillator\n *\n * @param[in] baseAddr  Base address for current PMC instance.\n * @param[in] value     Trimming value\n */\nstatic inline void PMC_SetLpoTrimValue(PMC_Type* const baseAddr, const int8_t decimalValue)\n{\n    int8_t decValue = decimalValue;\n    uint8_t lpotrim, trimval, regValue;\n\n    if (decValue < 0)\n    {\n        lpotrim = ((uint8_t)1U) << (PMC_LPOTRIM_LPOTRIM_WIDTH);\n        decValue = (int8_t)(decValue + (int8_t)(lpotrim));\n    }\n    trimval = (uint8_t)decValue;\n\n    DEV_ASSERT(trimval <= (1U << PMC_LPOTRIM_LPOTRIM_WIDTH));\n\n    regValue = baseAddr->LPOTRIM;\n    regValue &= (uint8_t)(~(PMC_LPOTRIM_LPOTRIM_MASK));\n    regValue |= (uint8_t)PMC_LPOTRIM_LPOTRIM(trimval);\n    baseAddr->LPOTRIM = regValue;\n}\n\n\n#if defined(__cplusplus)\n}\n#endif /* __cplusplus*/\n\n\n/*! @}*/\n\n#endif /* PMC_HW_ACCESS_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"power_manager.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\inc","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2014-2016 Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n#ifndef POWER_MANAGER_H_\n#define POWER_MANAGER_H_\n\n#include \"device_registers.h\"\n#include \"status.h\"\n\n/*\n * Include the cpu API header files.\n */\n#if ((defined(S32K14x_SERIES)) || (defined(S32MTV_SERIES)) || (defined(S32K11x_SERIES)))\n/* S32K144 power management API header file */\n#include \"../src/power/S32K1xx/power_manager_S32K1xx.h\"\n#elif (defined(S32V234_SERIES))\n/* S32V234 Power Management Level API header file */\n#include \"../src/power/S32V234/power_manager_S32V234.h\"\n#elif (defined(MPC574x_SERIES) || defined(S32R_SERIES))\n/* MPC5748G Power Management Level API header file */\n#include \"../src/power/MPC57xx/power_manager_MPC57xx.h\"\n#else\n#error \"No valid CPU defined!\"\n#endif\n\n/*!\n * @file power_manager.h\n *\n * @page misra_violations MISRA-C:2012 violations\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.3, Global typedef not referenced.\n * Although all symbols from power_manager.h are referenced in power_manager.c,\n * these symbols are not referenced in other drivers;\n */\n\n/*!\n * @addtogroup power_manager\n * @{\n */\n\n/*******************************************************************************\n * Definitions\n ******************************************************************************/\n\n/*!\n * @brief Power manager policies.\n *\n * Defines whether the mode switch initiated by the POWER_SYS_SetMode() is agreed upon\n * (depending on the result of notification callbacks), or forced.\n * For POWER_MANAGER_POLICY_FORCIBLE the power mode is changed\n * regardless of the callback results, while for POWER_MANAGER_POLICY_AGREEMENT policy\n * any error code returned by one of the callbacks aborts the mode change.\n * See also POWER_SYS_SetMode() description.\n * Implements power_manager_policy_t_Class\n */\ntypedef enum\n{\n    POWER_MANAGER_POLICY_AGREEMENT,      /*!< Power mode is changed if all of the callbacks return success. */\n    POWER_MANAGER_POLICY_FORCIBLE        /*!< Power mode is changed regardless of the result of callbacks. */\n} power_manager_policy_t;\n\n/*!\n * @brief The PM notification type. Used to notify registered callbacks.\n * Callback notifications can be invoked in following situations:\n *  - before a power mode change (Callback return value can affect POWER_SYS_SetMode()\n *    execution. Refer to the  POWER_SYS_SetMode() and power_manager_policy_t documentation).\n *  - after a successful change of the power mode.\n *  - after an unsuccessful attempt to switch power mode, in order to recover to a working state.\n * Implements power_manager_notify_t_Class\n */\ntypedef enum\n{\n    POWER_MANAGER_NOTIFY_RECOVER = 0x00U,  /*!< Notify IP to recover to previous work state.      */\n    POWER_MANAGER_NOTIFY_BEFORE  = 0x01U,  /*!< Notify IP that the system will change the power setting.  */\n    POWER_MANAGER_NOTIFY_AFTER   = 0x02U   /*!< Notify IP that the system has changed to a new power setting. */\n} power_manager_notify_t;\n\n/*!\n * @brief The callback type indicates when a callback will be invoked.\n *\n * Used in the callback configuration structures (power_manager_callback_user_config_t)\n * to specify when the registered callback will be called during power mode change initiated by\n * POWER_SYS_SetMode().\n *\n * Implements power_manager_callback_type_t_Class\n */\ntypedef enum\n{\n    POWER_MANAGER_CALLBACK_BEFORE       = 0x01U, /*!< Before callback. */\n    POWER_MANAGER_CALLBACK_AFTER        = 0x02U, /*!< After callback. */\n    POWER_MANAGER_CALLBACK_BEFORE_AFTER = 0x03U  /*!< Before-After callback. */\n} power_manager_callback_type_t;\n\n/*!\n * @brief Callback-specific data.\n *\n * Pointer to data of this type is passed during callback registration. The pointer is\n * part of the power_manager_callback_user_config_t structure and is passed to the callback during\n * power mode change notifications.\n * Implements power_manager_callback_data_t_Class\n */\ntypedef void power_manager_callback_data_t;\n\n/*!\n * @brief Power mode user configuration structure.\n *\n * This structure defines power mode with additional power options.\n * This structure is implementation-defiend. Please refer to actual definition based on the\n * underlying HAL (SMC, MC_ME etc). Applications may define multiple power modes and\n * switch between them. A list of all defined power modes is passed to the Power manager during\n * initialization as an array of references to structures of this type (see POWER_SYS_Init()).\n * Power modes can be switched by calling POWER_SYS_SetMode(), which takes as argument the index\n * of the reqested power mode in the list passed during manager initialization.\n * The power mode currently in use can be retrieved by calling POWER_SYS_GetLastMode(), which provides\n * the index of the current power mode, or by calling POWER_SYS_GetLastModeConfig(), which provides a\n * pointer to the configuration structure of the current power mode.\n * The members of the power mode configuration structure depend on power options available\n * for a specific chip, and includes at least the power mode. The available power modes are chip-specific.\n * See power_manager_modes_t defined in the underlying HAL for a list of all supported modes.\n */\n\n/*!\n * @brief Power notification structure passed to registered callback function\n *\n * Implements power_manager_notify_struct_t_Class\n */\ntypedef struct\n{\n    power_manager_user_config_t * targetPowerConfigPtr; /*!< Pointer to target power configuration */\n    uint8_t targetPowerConfigIndex;    /*!< Target power configuration index. */\n    power_manager_policy_t policy;     /*!< Power mode transition policy.          */\n    power_manager_notify_t notifyType; /*!< Power mode notification type.          */\n} power_manager_notify_struct_t;\n\n/*!\n * @brief Callback prototype.\n *\n * Declaration of callback. It is common for all registered callbacks.\n * Function pointer of this type is part of power_manager_callback_user_config_t callback\n * configuration structure.\n * Depending on the callback type, the callback function is invoked during power mode change\n * (see POWER_SYS_SetMode()) before the mode change, after it, or in both cases to notify about\n * the change progress (see power_manager_callback_type_t). When called, the type of the notification\n * is passed as parameter along with a pointer to power mode configuration structure\n * (see power_manager_notify_struct_t) and any data passed during the callback registration (see\n * power_manager_callback_data_t).\n * When notified before a mode change, depending on the power mode change policy (see\n * power_manager_policy_t) the callback may deny the mode change by returning any error code other\n * than STATUS_SUCCESS (see POWER_SYS_SetMode()).\n * @param notify Notification structure.\n * @param dataPtr Callback data. Pointer to the data passed during callback registration. Intended to\n *  pass any driver or application data such as internal state information.\n * @return An error code or STATUS_SUCCESS.\n * Implements power_manager_callback_t_Class\n */\ntypedef status_t (* power_manager_callback_t)(power_manager_notify_struct_t * notify,\n                                              power_manager_callback_data_t * dataPtr);\n\n/*!\n * @brief callback configuration structure\n *\n * This structure holds configuration of callbacks passed\n * to the Power manager during its initialization.\n * Structures of this type are expected to be statically\n * allocated.\n * This structure contains following application-defined data:\n *  callback - pointer to the callback function\n *  callbackType - specifies when the callback is called\n *  callbackData - pointer to the data passed to the callback\n * Implements power_manager_callback_user_config_t_Class\n */\ntypedef struct\n{\n    power_manager_callback_t callbackFunction;\n    power_manager_callback_type_t callbackType;\n    power_manager_callback_data_t * callbackData;\n} power_manager_callback_user_config_t;\n\n/*!\n * @brief Power manager internal state structure.\n *\n * Power manager internal structure. Contains data necessary for Power manager proper\n * functionality. Stores references to registered power mode configurations,\n * callbacks, and other internal data.\n * This structure is statically allocated and initialized by POWER_SYS_Init().\n * Implements power_manager_state_t_Class\n */\ntypedef struct\n{\n    power_manager_user_config_t * (*configs)[];             /*!< Pointer to power configure table.*/\n    uint8_t configsNumber;                                  /*!< Number of power configurations */\n    power_manager_callback_user_config_t * (*staticCallbacks)[]; /*!< Pointer to callback table. */\n    uint8_t staticCallbacksNumber;                          /*!< Max. number of callback configurations */\n    uint8_t errorCallbackIndex;                             /*!< Index of callback returns error. */\n    uint8_t currentConfig;                                  /*!< Index of current configuration.  */\n} power_manager_state_t;\n\n/*! @brief Power manager internal structure. */\nextern power_manager_state_t gPowerManagerState;\n\n/*******************************************************************************\n * API\n ******************************************************************************/\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif\n\n/*!\n * @brief Power manager initialization for operation.\n *\n * This function initializes the Power manager and its run-time state structure.\n * Pointer to an array of Power mode configuration structures needs to be passed\n * as a parameter along with a parameter specifying its size. At least one power mode\n * configuration is required. Optionally, pointer to the array of predefined\n * callbacks can be passed with its corresponding size parameter.\n * For details about callbacks, refer to the power_manager_callback_user_config_t.\n * As Power manager stores only pointers to arrays of these structures, they need\n * to exist and be valid for the entire life cycle of Power manager.\n *\n * @param[in] powerConfigsPtr A pointer to an array of pointers to all power\n *  configurations which will be handled by Power manager.\n * @param[in] configsNumber Number of power configurations. Size of powerConfigsPtr\n *  array.\n * @param[in] callbacksPtr A pointer to an array of pointers to callback configurations.\n *  If there are no callbacks to register during Power manager initialization, use NULL value.\n * @param[in] callbacksNumber Number of registered callbacks. Size of callbacksPtr\n *  array.\n * @return An error code or STATUS_SUCCESS.\n */\nstatus_t POWER_SYS_Init(power_manager_user_config_t * (*powerConfigsPtr)[],\n                        uint8_t configsNumber,\n                        power_manager_callback_user_config_t * (*callbacksPtr)[],\n                        uint8_t callbacksNumber);\n\n/*!\n * @brief This function deinitializes the Power manager.\n *\n * @return An error code or STATUS_SUCCESS.\n */\nstatus_t POWER_SYS_Deinit(void);\n\n/*!\n * @brief This function configures the power mode.\n *\n * This function switches to one of the defined power modes. Requested mode number is passed\n * as an input parameter. This function notifies all registered callback functions before\n * the mode change (using  POWER_MANAGER_CALLBACK_BEFORE set as callback type parameter),\n * sets specific power options defined in the power mode configuration and enters the specified\n * mode. In case of run modes (for example, Run, Very low power run, or High speed run), this function\n * also invokes all registered callbacks after the mode change (using POWER_MANAGER_CALLBACK_AFTER).\n * In case of sleep or deep sleep modes, if the requested mode is not exited through\n * a reset, these notifications are sent after the core wakes up.\n * Callbacks are invoked in the following order: All registered callbacks are notified\n * ordered by index in the callbacks array (see callbacksPtr parameter of POWER_SYS_Init()).\n * The same order is used for before and after switch notifications.\n * The notifications before the power mode switch can be used to obtain confirmation about\n * the change from registered callbacks. If any registered callback denies the power\n * mode change, further execution of this function depends on mode change policy: the mode\n * change is either forced(POWER_MANAGER_POLICY_FORCIBLE) or aborted(POWER_MANAGER_POLICY_AGREEMENT).\n * When mode change is forced, the results of the before switch notifications are ignored. If\n * agreement is requested, in case any callback returns an error code then further\n * before switch notifications are cancelled and all already notified callbacks are re-invoked\n * with POWER_MANAGER_CALLBACK_AFTER set as callback type parameter. The index of the callback\n * which returned error code during pre-switch notifications is stored and can be obtained by using\n * POWER_SYS_GetErrorCallback(). Any error codes during callbacks re-invocation (recover phase) are ignored.\n * POWER_SYS_SetMode() returns an error code denoting the phase in which a callback failed.\n * It is possible to enter any mode supported by the processor. Refer to the chip reference manual\n * for the list of available power modes. If it is necessary to switch into an intermediate power mode prior to\n * entering the requested mode (for example, when switching from Run into Very low power wait through Very low\n * power run mode), then the intermediate mode is entered without invoking the callback mechanism.\n *\n * @param[in] powerModeIndex Requested power mode represented as an index into\n * array of user-defined power mode configurations passed to the POWER_SYS_Init().\n * @param[in] policy Transaction policy\n * @return An error code or STATUS_SUCCESS.\n */\nstatus_t POWER_SYS_SetMode(uint8_t powerModeIndex,\n                           power_manager_policy_t policy);\n\n/*!\n * @brief This function returns the last successfully set power mode.\n *\n * This function returns index of power mode which was last set using POWER_SYS_SetMode().\n * If the power mode was entered even though some of the registered callbacks denied the mode change,\n * or if any of the callbacks invoked after the entering/restoring run mode failed, then the return\n * code of this function has STATUS_ERROR value.\n *\n * @param[out] powerModeIndexPtr Power mode which has been set represented as an index into array of power mode\n * configurations passed to the POWER_SYS_Init().\n * @return An error code or STATUS_SUCCESS.\n */\nstatus_t POWER_SYS_GetLastMode(uint8_t * powerModeIndexPtr);\n\n/*!\n * @brief This function returns the user configuration structure of the last successfully set power mode.\n *\n * This function returns a pointer to configuration structure which was last set using POWER_SYS_SetMode().\n * If the current power mode was entered even though some of the registered callbacks denied\n * the mode change, or if any of the callbacks invoked after the entering/restoring run mode failed, then\n * the return code of this function has STATUS_ERROR value.\n *\n * @param[out] powerModePtr Pointer to power mode configuration structure of the last set power mode.\n * @return An error code or STATUS_SUCCESS.\n */\nstatus_t POWER_SYS_GetLastModeConfig(power_manager_user_config_t ** powerModePtr);\n\n/*!\n * @brief This function returns currently running power mode.\n *\n * This function reads hardware settings and returns currently running power mode.\n *\n * @return Currently used run power mode.\n */\npower_manager_modes_t POWER_SYS_GetCurrentMode(void);\n\n/*!\n * @brief This function returns the last failed notification callback.\n *\n * This function returns the index of the last callback that failed during the power mode switch when\n * POWER_SYS_SetMode() was called. The returned value represents the index in the array of registered callbacks.\n * If the last POWER_SYS_SetMode() call ended successfully, a value equal to the number of registered callbacks\n * is returned.\n *\n * @return Callback index of last failed callback or value equal to callbacks count.\n */\nuint8_t POWER_SYS_GetErrorCallbackIndex(void);\n\n/*!\n * @brief This function returns the callback configuration structure for the last failed notification.\n *\n * This function returns a pointer to configuration structure of the last callback that failed during\n * the power mode switch when POWER_SYS_SetMode() was called.\n * If the last POWER_SYS_SetMode() call ended successfully, a NULL value is returned.\n *\n * @return Pointer to the callback configuration which returns error.\n */\npower_manager_callback_user_config_t * POWER_SYS_GetErrorCallback(void);\n\n/*!\n * @brief This function returns the default power_manager configuration structure.\n *\n * This function returns a pointer of the power_manager configuration structure.\n * All structure members have default value when CPU is default power mode.\n *\n */\nvoid POWER_SYS_GetDefaultConfig(power_manager_user_config_t * const config);\n\n#if defined(__cplusplus)\n}\n#endif\n\n/*! @}*/\n\n#endif /* POWER_MANAGER_H_ */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"power_manager_S32K1xx.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\src\\power\\S32K1xx","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2014-2016 Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n#ifndef POWER_MANAGER_S32K1XX_H\n#define POWER_MANAGER_S32K1XX_H\n\n/*!\n * @file clock_manager_S32K1xx.h\n */\n\n#include \"device_registers.h\"\n#include \"status.h\"\n\n/*!\n * @ingroup power_manager\n * @defgroup power_s32k1xx\n * @{\n */\n\n/*******************************************************************************\n * Definitions\n ******************************************************************************/\n/*!\n * @brief Power modes enumeration.\n *\n * Defines power modes. Used in the power mode configuration structure\n * (power_manager_user_config_t). From ARM core perspective, Power modes\n * can be generally divided into run modes (High speed run, Run and\n * Very low power run), sleep (Wait and Very low power wait) and deep sleep modes\n * (all Stop modes).\n * List of power modes supported by specific chip along with requirements for entering\n * and exiting of these modes can be found in chip documentation.\n * List of all supported power modes:\\n\n *  \\li POWER_MANAGER_HSRUN - High speed run mode.\n *  \\li POWER_MANAGER_RUN - Run mode.\n *  \\li POWER_MANAGER_VLPR - Very low power run mode.\n *  \\li POWER_MANAGER_WAIT - Wait mode.\n *  \\li POWER_MANAGER_VLPW - Very low power wait mode.\n *  \\li POWER_MANAGER_PSTOP1 - Partial stop 1 mode.\n *  \\li POWER_MANAGER_PSTOP2 - Partial stop 2 mode.\n *  \\li POWER_MANAGER_PSTOP1 - Stop 1 mode.\n *  \\li POWER_MANAGER_PSTOP2 - Stop 2 mode.\n *  \\li POWER_MANAGER_VLPS - Very low power stop mode.\n * Implements power_manager_modes_t_Class\n */\ntypedef enum\n{\n#if FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE\n    POWER_MANAGER_HSRUN,            /*!< High speed run mode.  */\n#endif\n    POWER_MANAGER_RUN,              /*!< Run mode. */\n    POWER_MANAGER_VLPR,             /*!< Very low power run mode.  */\n#if FEATURE_SMC_HAS_WAIT_VLPW\n    POWER_MANAGER_WAIT,             /*!< Wait mode.  */\n    POWER_MANAGER_VLPW,             /*!< Very low power wait mode.  */\n#endif\n#if FEATURE_SMC_HAS_PSTOPO\n    POWER_MANAGER_PSTOP1,           /*!< Partial stop 1 mode. */\n    POWER_MANAGER_PSTOP2,           /*!< Partial stop 2 mode. */\n#endif\n#if FEATURE_SMC_HAS_STOPO\n    POWER_MANAGER_STOP1,           /*!< Stop 1 mode. */\n    POWER_MANAGER_STOP2,           /*!< Stop 2 mode. */\n#endif\n    POWER_MANAGER_VLPS,             /*!< Very low power stop mode.  */\n    POWER_MANAGER_MAX\n} power_manager_modes_t;\n\n/*!\n * @brief Power mode user configuration structure.\n *\n * List of power mode configuration structure members depends on power options available\n * for the specific chip. Complete list contains:\n * mode - S32K power mode. List of available modes is chip-specific. See power_manager_modes_t\n * list of modes.\n * sleepOnExitOption - Controls whether the sleep-on-exit option value is used(when set to true)\n * or ignored(when set to false). See sleepOnExitValue.\n * sleepOnExitValue - When set to true, ARM core returns to sleep (S32K wait modes) or deep sleep\n * state (S32K stop modes) after interrupt service finishes. When set to false, core stays\n * woken-up.\n * Implements power_manager_user_config_t_Class\n */\ntypedef struct\n{\n    power_manager_modes_t powerMode;\n    bool sleepOnExitValue;\n} power_manager_user_config_t;\n\n/*!\n * @brief Power Modes in PMSTAT\n *\n */\ntypedef enum\n{\n    STAT_RUN     = 0x01,              /*!< 0000_0001 - Current power mode is RUN*/\n    STAT_STOP    = 0x02,              /*!< 0000_0010 - Current power mode is STOP*/\n    STAT_VLPR    = 0x04,              /*!< 0000_0100 - Current power mode is VLPR*/\n    STAT_VLPW    = 0x08,              /*!< 0000_1000 - Current power mode is VLPW*/\n    STAT_VLPS    = 0x10,              /*!< 0001_0000 - Current power mode is VLPS*/\n    STAT_HSRUN   = 0x80,              /*!< 1000_0000 - Current power mode is HSRUN*/\n    STAT_INVALID = 0xFF               /*!< 1111_1111 - Non-existing power mode*/\n} power_mode_stat_t;\n\n/*!\n * @brief Run mode definition\n *\n */\ntypedef enum\n{\n    SMC_RUN,                                /*!< normal RUN mode*/\n    SMC_RESERVED_RUN, SMC_VLPR,             /*!< Very-Low-Power RUN mode*/\n    SMC_HSRUN                               /*!< High Speed Run mode (HSRUN)*/\n} smc_run_mode_t;\n\n/*!\n * @brief Stop mode definition\n *\n */\ntypedef enum\n{\n    SMC_STOP            = 0U,    /*!< Normal STOP mode*/\n    SMC_RESERVED_STOP1  = 1U,    /*!< Reserved*/\n    SMC_VLPS            = 2U     /*!< Very-Low-Power STOP mode*/\n} smc_stop_mode_t;\n\n/*!\n * @brief STOP option\n *\n */\ntypedef enum\n{\n    SMC_STOP_RESERVED = 0x00,               /*!< Reserved stop mode */\n    SMC_STOP1         = 0x01,               /*!< Stop with both system and bus clocks disabled */\n    SMC_STOP2         = 0x02                /*!< Stop with system clock disabled and bus clock enabled */\n} smc_stop_option_t;\n\n/*!\n * @brief Power mode protection configuration\n *\n */\ntypedef struct\n{\n    bool vlpProt;            /*!< VLP protect*/\n#if FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE\n    bool hsrunProt;          /*!< HSRUN protect */\n#endif\n} smc_power_mode_protection_config_t;\n\n/*!\n * @brief Power mode control configuration used for calling the SMC_SYS_SetPowerMode API\n *\n */\ntypedef struct\n{\n    power_manager_modes_t powerModeName;    /*!< Power mode(enum), see power_manager_modes_t */\n#if FEATURE_SMC_HAS_STOPO\n    smc_stop_option_t stopOptionValue;      /*!< STOPO option(enum), see smc_stop_option_t */\n#endif\n#if FEATURE_SMC_HAS_PSTOPO\n    bool pStopOption;                       /*!< If PSTOPO option is needed */\n    smc_stop_option_t pStopOptionValue;     /*!< PSTOPO option(enum), see smc_stop_option_t */\n#endif\n} smc_power_mode_config_t;\n\n/*!\n * @brief System Reset Source Name definitions\n * Implements rcm_source_names_t_Class\n */\ntypedef enum\n{\n    RCM_LOW_VOLT_DETECT      = 1U,             /*!< Low voltage detect reset */\n    RCM_LOSS_OF_CLK          = 2U,       /*!< Loss of clock reset */\n    RCM_LOSS_OF_LOCK         = 3U,       /*!< Loss of lock reset */\n#if FEATURE_RCM_HAS_CMU_LOSS_OF_CLOCK\n    RCM_CMU_LOC              = 4U,        /*!< CMU Loss of lock reset */\n#endif\n    RCM_WATCH_DOG            = 5U,        /*!< Watch dog reset */\n    RCM_EXTERNAL_PIN         = 6U,       /*!< External pin reset */\n    RCM_POWER_ON             = 7U,       /*!< Power on reset */\n    RCM_SJTAG                = 8U,       /*!< JTAG generated reset */\n    RCM_CORE_LOCKUP          = 9U,       /*!< core lockup reset */\n    RCM_SOFTWARE             = 10U,       /*!< Software reset */\n    RCM_SMDM_AP              = 11U,       /*!< MDM-AP system reset */\n    RCM_STOP_MODE_ACK_ERR    = 13U,       /*!< Stop mode ack error reset */\n    RCM_SRC_NAME_MAX\n} rcm_source_names_t;\n/*******************************************************************************\n * API\n ******************************************************************************/\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif\n\n/*!\n * @brief This function implementation-specific configuration of power modes.\n *\n * This function performs the actual implementation-specific initialization based on the provided power mode configurations.\n * In addition, This function get all clock source were enabled. This one was used for update init clock when CPU \n    jump from very low power mode to run or high speed run mode.\n *\n * @return Operation status\n *        - STATUS_SUCCESS: Operation was successful.\n *        - STATUS_ERROR: Operation failed.\n */\nstatus_t POWER_SYS_DoInit(void);\n\n/*!\n * @brief This function implementation-specific de-initialization of power manager.\n *\n * This function performs the actual implementation-specific de-initialization.\n *\n * @return Operation status\n *        - STATUS_SUCCESS: Operation was successful.\n *        - STATUS_ERROR: Operation failed.\n */\nstatus_t POWER_SYS_DoDeinit(void);\n\n/*!\n * @brief This function configures the power mode.\n *\n * This function performs the actual implementation-specific logic to switch to one of the defined power modes.\n *\n * @param configPtr: Pointer to user configuration structure\n * @return Operation status\n *        - STATUS_SUCCESS: Operation was successful.\n *        - STATUS_MCU_TRANSITION_FAILED: Operation failed.\n */\nstatus_t POWER_SYS_DoSetMode(const power_manager_user_config_t * const configPtr);\n\n/*!\n * @brief Gets the reset source status\n *\n * This function gets the current reset source status for a specified source.\n *\n * @param[in] baseAddr     Register base address of RCM\n * @param[in] srcName      reset source name\n * @return status          True or false for specified reset source\n */\nbool POWER_SYS_GetResetSrcStatusCmd(const RCM_Type * const baseAddr , const rcm_source_names_t srcName);\n\n/*!\n * @brief Gets the default power_manager configuration structure.\n *\n * This function gets the power_manager configuration structure of the default power mode.\n *\n * @param[out] defaultConfig : Pointer to power mode configuration structure of the default power mode.\n */\nstatic inline void POWER_SYS_DoGetDefaultConfig(power_manager_user_config_t * const defaultConfig)\n{\n    defaultConfig->powerMode = POWER_MANAGER_RUN;    /*!< Power manager mode  */\n    defaultConfig->sleepOnExitValue = false;         /*!< Sleep on exit value */\n}\n\n#if defined(__cplusplus)\n}\n#endif\n\n/*! @}*/\n\n#endif /* POWER_MANAGER_S32K1XX_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"power_rcm_hw_access.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\src\\power\\S32K1xx","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2013 - 2015, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n#ifndef POWER_RCM_HW_ACCESS_H\n#define POWER_RCM_HW_ACCESS_H\n\n#include \"device_registers.h\"\n#include \"power_manager_S32K1xx.h\"\n\n/*! @file power_rcm_hw_access.h */\n\n/*!\n * @ingroup power_rcm_hw_access\n * @defgroup power_rcm_hw_access\n * @{\n */\n\n/*******************************************************************************\n * Definitions\n ******************************************************************************/\n\n/*******************************************************************************\n * API\n ******************************************************************************/\n#if defined(__cplusplus)\nextern \"C\" {\n#endif /* __cplusplus*/\n\n/*! @name Reset Control Module APIs*/\n/*@{*/\n\nstatic inline bool RCM_GetSrcStatusCmd(const RCM_Type * const baseAddr,\n                         const rcm_source_names_t srcName)\n{\n    bool retValue;\n    uint32_t regValue = (uint32_t)baseAddr->SRS;\n\n    DEV_ASSERT(srcName < RCM_SRC_NAME_MAX);\n\n    switch (srcName)\n    {\n        case RCM_LOW_VOLT_DETECT:              /* low voltage detect reset */\n            regValue = (regValue & RCM_SRS_LVD_MASK) >> RCM_SRS_LVD_SHIFT;\n            break;\n        case RCM_LOSS_OF_CLK:                  /* loss of clock reset */\n            regValue = (regValue & RCM_SRS_LOC_MASK) >> RCM_SRS_LOC_SHIFT;\n            break;\n        case RCM_LOSS_OF_LOCK:                 /* loss of lock reset */\n            regValue = (regValue & RCM_SRS_LOL_MASK) >> RCM_SRS_LOL_SHIFT;\n            break;\n#if FEATURE_RCM_HAS_CMU_LOSS_OF_CLOCK          /*!< CMU Loss of lock reset */\n        case RCM_CMU_LOC:\n            regValue = (regValue & RCM_SRS_CMU_LOC_MASK) >> RCM_SRS_CMU_LOC_SHIFT;\n            break;     \n#endif\n        case RCM_WATCH_DOG:                    /* watch dog reset */\n            regValue = (regValue & RCM_SRS_WDOG_MASK) >> RCM_SRS_WDOG_SHIFT;\n            break;\n        case RCM_EXTERNAL_PIN:                 /* external pin reset */\n            regValue = (regValue & RCM_SRS_PIN_MASK) >> RCM_SRS_PIN_SHIFT;\n            break;\n        case RCM_POWER_ON:                     /* power on reset */\n            regValue = (regValue & RCM_SRS_POR_MASK) >> RCM_SRS_POR_SHIFT;\n            break;\n        case RCM_SJTAG:                        /* JTAG generated reset */\n            regValue = (regValue & RCM_SSRS_SJTAG_MASK) >> RCM_SSRS_SJTAG_SHIFT;\n            break;\n        case RCM_CORE_LOCKUP:                  /* core lockup reset */\n            regValue = (regValue & RCM_SRS_LOCKUP_MASK) >> RCM_SRS_LOCKUP_SHIFT;\n            break;\n        case RCM_SOFTWARE:                     /* software reset */\n            regValue = (regValue & RCM_SRS_SW_MASK) >> RCM_SRS_SW_SHIFT;\n            break;\n        case RCM_SMDM_AP:                      /* MDM-AP system reset */\n            regValue = (regValue & RCM_SSRS_SMDM_AP_MASK) >> RCM_SSRS_SMDM_AP_SHIFT;\n            break;\n        case RCM_STOP_MODE_ACK_ERR:            /* stop mode ack error reset */\n            regValue = (regValue & RCM_SRS_SACKERR_MASK) >> RCM_SRS_SACKERR_SHIFT;\n            break;\n        default:\n            /* invalid command */\n            regValue = 0U;\n            break;\n    }\n\n    retValue = (regValue == 0UL) ? false : true;\n\n    return retValue;\n}\n\n/*@}*/\n\n#if defined(__cplusplus)\n}\n#endif /* __cplusplus*/\n\n/*! @}*/\n\n#endif /* POWER_RCM_HW_ACCESS_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"power_smc_hw_access.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\src\\power\\S32K1xx","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2013-2016, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n#ifndef POWER_SMC_HW_ACCESS_H\n#define POWER_SMC_HW_ACCESS_H\n\n#include \"status.h\"\n#include \"device_registers.h\"\n#include \"power_manager_S32K1xx.h\"\n\n/*!\n * @file power_smc_hw_access.h\n *\n * @page misra_violations MISRA-C:2012 violations\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.3, Global typedef not referenced.\n * User configuration structure is defined in Hal and is referenced from Driver.\n */\n\n/*!\n * power_smc_hw_access\n * @{\n */\n\n/*******************************************************************************\n * API\n ******************************************************************************/\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif /* __cplusplus*/\n\n/*! @name System mode controller APIs*/\n/*@{*/\n\n/*!\n * @brief Configures the power mode.\n *\n * This function configures the power mode control for both run, stop, and\n * stop sub mode if needed. Also it configures the power options for a specific\n * power mode. An application should follow the proper procedure to configure and\n * switch power modes between  different run and stop modes. For proper procedures\n * and supported power modes, see an appropriate chip reference\n * manual. See the smc_power_mode_config_t for required\n * parameters to configure the power mode and the supported options. Other options\n * may need to be individually configured through the HAL driver. See the HAL driver\n * header file for details.\n *\n * @param baseAddr  Base address for current SMC instance.\n * @param powerModeConfig Power mode configuration structure smc_power_mode_config_t\n * @return errorCode SMC error code\n */\nstatus_t SMC_SetPowerMode(SMC_Type * const baseAddr,\n                          const smc_power_mode_config_t * const powerModeConfig);\n\n/*!\n * @brief Configures all power mode protection settings.\n *\n * This function configures the power mode protection settings for\n * supported power modes in the specified chip family. The available power modes\n * are defined in the smc_power_mode_protection_config_t. An application should provide\n * the protect settings for all supported power modes on the chip. This\n * should be done at an early system level initialization stage. See the reference manual\n * for details. This register can only write once after the power reset. If the user has\n * only a single option to set,\n * either use this function or use the individual set function.\n *\n *\n * @param[in] baseAddr  Base address for current SMC instance.\n * @param[in] protectConfig Configurations for the supported power mode protect settings\n *                      - See smc_power_mode_protection_config_t for details.\n */\nvoid SMC_SetProtectionMode(SMC_Type * const baseAddr,\n                           const smc_power_mode_protection_config_t * const protectConfig);\n\n/*!\n * @brief Configures the the RUN mode control setting.\n *\n * This function sets the run mode settings, for example, normal run mode,\n * very lower power run mode, etc. See the smc_run_mode_t for supported run\n * mode on the chip family and the reference manual for details about the\n * run mode.\n *\n * @param[in] baseAddr  Base address for current SMC instance.\n * @param[in] runMode   Run mode setting defined in smc_run_mode_t\n */\nstatic inline void SMC_SetRunModeControl(SMC_Type * const baseAddr,\n                                         const smc_run_mode_t runMode)\n{\n    uint32_t regValue = baseAddr->PMCTRL;\n    regValue &= ~(SMC_PMCTRL_RUNM_MASK);\n    regValue |= SMC_PMCTRL_RUNM(runMode);\n    baseAddr->PMCTRL = regValue;\n}\n\n\n/*!\n * @brief Enable the BIASEN bit.\n *\n* This bit enables source and well biasing for the core logic in low power mode\n *\n * @param[in] baseAddr  Base address for current PMC instance.\n */\nstatic inline void PMC_EnableBiasen(PMC_Type * const baseAddr )\n{\n    uint8_t regValue = baseAddr->REGSC;\n    regValue &= ~(PMC_REGSC_BIASEN_MASK);\n\n    regValue |= ((uint8_t)(PMC_REGSC_BIASEN(1U)));\n    baseAddr->REGSC = regValue;\n}\n\n/*!\n * @brief Disable the BIASEN bit.\n *\n * Biasing disabled, core logic can run in full performance\n *\n * @param[in] baseAddr  Base address for current PMC instance.\n */\nstatic inline void PMC_DisableBiasen(PMC_Type * const baseAddr )\n{\n    uint8_t regValue = baseAddr->REGSC;\n    regValue &= ~(PMC_REGSC_BIASEN_MASK);\n    baseAddr->REGSC = regValue;\n}\n\n/*!\n * @brief  Get core clock divide ratio value.\n *\n * @param[in] baseAddr  Base address for current SCG instance.\n */\nstatic inline uint32_t SCG_Get_VCCR_DIVCORE(const SCG_Type * const baseAddr )\n{\n    uint32_t regValue = baseAddr->VCCR;\n    regValue = (regValue & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT;\n    return regValue;\n\n}\n\n/*!\n * @brief  Get bus clock divide ratio value.\n *\n * @param[in] baseAddr  Base address for current SCG instance.\n */\nstatic inline uint32_t SCG_Get_VCCR_DIVBUS(const SCG_Type * const baseAddr )\n{\n    uint32_t regValue = baseAddr->VCCR;\n    regValue = (regValue & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT;\n    return regValue;\n\n}\n\n/*!\n * @brief Get slow clock divide ratio value.\n *\n * @param[in] baseAddr  Base address for current SCG instance.\n */\nstatic inline uint32_t SCG_Get_VCCR_DIVSLOW(const SCG_Type * const baseAddr )\n{\n    uint32_t regValue = baseAddr->VCCR;\n    regValue = (regValue & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT;\n    return regValue;\n\n}\n\n\n/*!\n * @brief Configures  the STOP mode control setting.\n *\n * This function sets the stop mode settings, for example, normal stop mode,\n * very lower power stop mode, etc. See the smc_stop_mode_t for supported stop\n * mode on the chip family and the reference manual for details about the\n * stop mode.\n *\n * @param[in] baseAddr  Base address for current SMC instance.\n * @param[in] stopMode  Stop mode defined in smc_stop_mode_t\n */\nstatic inline void SMC_SetStopModeControl(SMC_Type * const baseAddr,\n                                          const smc_stop_mode_t stopMode)\n{\n    uint32_t regValue = baseAddr->PMCTRL;\n    regValue &= ~(SMC_PMCTRL_STOPM_MASK);\n    regValue |= SMC_PMCTRL_STOPM(stopMode);\n    baseAddr->PMCTRL = regValue;\n}\n\n#if FEATURE_SMC_HAS_STOPO\n/*!\n * @brief Configures the STOPO (Stop Option).\n *\n * It controls the type of the stop operation when STOPM=STOP. When entering Stop mode\n * from RUN mode, the PMC, SCG and flash remain fully powered, allowing the device to\n * wakeup almost instantaneously at the expense of higher power consumption. In STOP2,\n * only system clocks are gated allowing peripherals running on bus clock to remain fully\n * functional. In STOP1, both system and bus clocks are gated.\n *\n * @param[in] baseAddr  Base address for current SMC instance.\n * @param[in] option STOPO option setting defined in smc_stop_option_t\n */\nstatic inline void SMC_SetStopOption(SMC_Type * const baseAddr,\n                                     const smc_stop_option_t option)\n{\n    uint32_t regValue = baseAddr->STOPCTRL;\n    regValue &= ~(SMC_STOPCTRL_STOPO_MASK);\n    regValue |= SMC_STOPCTRL_STOPO(option);\n    baseAddr->STOPCTRL = regValue;\n}\n\n#endif /* if FEATURE_SMC_HAS_STOPO */\n\n#if FEATURE_SMC_HAS_PSTOPO\n\n#error \"Unimplemented\"\n\n#endif\n\n/*!\n * @brief Gets the current power mode stat.\n *\n * This function returns the current power mode stat. Once application\n * switches the power mode, it should always check the stat to check whether it\n * runs into the specified mode or not. An application should check\n * this mode before switching to a different mode. The system requires that\n * only certain modes can switch to other specific modes. See the\n * reference manual for details and the power_mode_stat for information about\n * the power stat.\n *\n * @param[in] baseAddr  Base address for current SMC instance.\n * @return stat  Current power mode stat\n */\nstatic inline power_mode_stat_t SMC_GetPowerModeStatus(const SMC_Type * const baseAddr)\n{\n    power_mode_stat_t retValue;\n    uint32_t regValue = baseAddr->PMSTAT;\n    regValue = (regValue & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT;\n\n    switch (regValue)\n    {\n        case 1UL:\n            retValue = STAT_RUN;\n            break;\n        case 2UL:\n            retValue = STAT_STOP;\n            break;\n        case 4UL:\n            retValue = STAT_VLPR;\n            break;\n#if FEATURE_SMC_HAS_WAIT_VLPW\n        case 8UL:\n            retValue = STAT_VLPW;\n            break;\n#endif\n        case 16UL:\n            retValue = STAT_VLPS;\n            break;\n#if FEATURE_SMC_HAS_HIGH_SPEED_RUN_MODE\n        case 128UL:\n            retValue = STAT_HSRUN;\n            break;\n#endif\n        case 255UL:\n        default:\n            retValue = STAT_INVALID;\n            break;\n    }\n\n    return retValue;\n}\n\n/*@}*/\n\n#if defined(__cplusplus)\n}\n#endif /* __cplusplus*/\n\n/*! @}*/\n\n#endif /* POWER_SMC_HW_ACCESS_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"profile_buffer.c","type":"source","group":"","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: profile_buffer.c\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stdint.h>\r\n\r\nvolatile uint32_t profile_buffer[3];\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"profile_buffer.h","type":"header","group":"","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: profile_buffer.h\r\n *\r\n * Code generated for Simulink model 'Foc_model_Matlab'.\r\n *\r\n * Model version                   : 10.61\r\n * Simulink Coder version          : 24.2 (R2024b) 21-Jun-2024\r\n * MBDT for S32K1xx Series Version : 4.2.0 (R2016a-R2020a) 20-Jul-2020\r\n * C/C++ source code generated on  : Wed May 14 16:33:17 2025\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef profile_buffer_h_\r\n#define profile_buffer_h_\r\n#ifndef _PROFILE_BUFFER_H_\r\n#define _PROFILE_BUFFER_H_\r\n#include <stdint.h>\r\n\r\nextern volatile uint32_t profile_buffer[3];\r\n\r\n#endif\r\n#endif                                 /* profile_buffer_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"s32k_clock_init.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef _S32K_CLOCK_INIT_H\r\n#define _S32K_CLOCK_INIT_H\r\n#include <stdint.h>\r\n#define XTAL_FREQ                      8000000UL\r\n#define CORE_CLK_FREQ                  80000000UL\r\n\r\nvoid Clock_Setup(void);\r\nvoid UpdateSystickConfig(uint32_t ticks);\r\n\r\n#endif\r\n"},{"name":"scg_hw_access.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\src\\clock\\S32K1xx","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2013 - 2014, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n#ifndef SCG_HW_ACCESS_H\n#define SCG_HW_ACCESS_H\n\n#include \"device_registers.h\"\n#include <stdbool.h>\n#include <stddef.h>\n\n/*!\n * @file scg_hw_access.h\n *\n * @page misra_violations MISRA-C:2012 violations\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.\n * This is required to implement enumeration entries as macro.\n * Enumeration entries (macros) are referenced from application code.\n */\n\n/*!\n * @ingroup scg_hw_access\n * @defgroup scg_hw_access\n * @{\n */\n\n\n\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif /* __cplusplus*/\n\n\n/*!\n * @brief Get SCG ClockOut source select\n *\n * This function gets the SCG clockOut source\n *\n * @param[in] base Register base address for the SCG instance.\n * @return ClockOut source.\n */\nstatic inline uint32_t SCG_GetClockoutSourceSel(const SCG_Type * base)\n{\n    return (base->CLKOUTCNFG & SCG_CLKOUTCNFG_CLKOUTSEL_MASK) >> SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT;\n}\n\n\n/*!\n * @brief Gets SCG current system clock source\n *\n * This function gets the current system clock source.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return Current system clock source.\n */\nstatic inline uint32_t SCG_GetCurrentSystemClockSource(const SCG_Type * base)\n{\n    return ((base->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT);\n}\n\n/*!\n * @brief Gets SCG Current Core Clock Divide Ratio\n *\n * This function gets the Current Core Clock Divide Ratio.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return Current Core Clock Divide Ratio.\n */\nstatic inline uint32_t SCG_GetCurrentCoreClockDividerRatio(const SCG_Type * base)\n{\n    return ((base->CSR & SCG_CSR_DIVCORE_MASK) >> SCG_CSR_DIVCORE_SHIFT);\n}\n\n/*!\n * @brief Gets SCG Current Bus Clock Divide Ratio\n *\n * This function gets the Current Bus Clock Divide Ratio.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return Current Bus Clock Divide Ratio.\n */\nstatic inline uint32_t SCG_GetCurrentBusClockDividerRatio(const SCG_Type * base)\n{\n    return ((base->CSR & SCG_CSR_DIVBUS_MASK) >> SCG_CSR_DIVBUS_SHIFT);\n}\n\n/*!\n * @brief Gets SCG Current Slow Clock Divide Ratio\n *\n * This function gets the Current Slow Clock Divide Ratio.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return Current Slow Clock Divide Ratio.\n */\nstatic inline uint32_t SCG_GetCurrentSlowClockDividerRatio(const SCG_Type * base)\n{\n    return ((base->CSR & SCG_CSR_DIVSLOW_MASK) >> SCG_CSR_DIVSLOW_SHIFT);\n}\n\n/*!\n * @brief Sets SCG run system clock\n *\n * This function sets the RUN clock control (system clock source, bus, core and slow dividers).\n *\n * @param[in] base Register base address for the SCG instance.\n * @param[in] base System clock configuration address.\n */\nstatic inline void SCG_SetRunClockControl(SCG_Type * base, uint32_t source, uint32_t coreDivider, uint32_t busDivider, uint32_t slowDivider)\n{\n    uint32_t value = (uint32_t)(((source      << SCG_RCCR_SCS_SHIFT)     & SCG_RCCR_SCS_MASK)     |\n                                ((coreDivider << SCG_RCCR_DIVCORE_SHIFT) & SCG_RCCR_DIVCORE_MASK) |\n                                ((busDivider  << SCG_RCCR_DIVBUS_SHIFT)  & SCG_RCCR_DIVBUS_MASK)  |\n                                ((slowDivider << SCG_RCCR_DIVSLOW_SHIFT) & SCG_RCCR_DIVSLOW_MASK) );\n    base->RCCR = value;\n}\n\n/*!\n * @brief Sets SCG vlpr system clock\n *\n * This function sets the VLPR clock control (system clock source, bus, core and slow dividers).\n *\n * @param[in] base Register base address for the SCG instance.\n * @param[in] base System clock configuration address.\n */\nstatic inline void SCG_SetVlprClockControl(SCG_Type * base, uint32_t source, uint32_t coreDivider, uint32_t busDivider, uint32_t slowDivider)\n{\n    uint32_t value = (uint32_t)(((source      << SCG_VCCR_SCS_SHIFT)     & SCG_VCCR_SCS_MASK)     |\n                                ((coreDivider << SCG_VCCR_DIVCORE_SHIFT) & SCG_VCCR_DIVCORE_MASK) |\n                                ((busDivider  << SCG_VCCR_DIVBUS_SHIFT)  & SCG_VCCR_DIVBUS_MASK)  |\n                                ((slowDivider << SCG_VCCR_DIVSLOW_SHIFT) & SCG_VCCR_DIVSLOW_MASK) );\n\n    base->VCCR = value;\n}\n\n#if FEATURE_HAS_HIGH_SPEED_RUN_MODE\n/*!\n * @brief Sets SCG hsrun system clock\n *\n * This function sets the HSRUN clock control (system clock source, bus, core and slow dividers).\n *\n * @param[in] base Register base address for the SCG instance.\n * @param[in] base System clock configuration address.\n */\nstatic inline void SCG_SetHsrunClockControl(SCG_Type * base, uint32_t source, uint32_t coreDivider, uint32_t busDivider, uint32_t slowDivider)\n{\n    uint32_t value = (uint32_t)(((source      << SCG_HCCR_SCS_SHIFT)     & SCG_HCCR_SCS_MASK)     |\n                                ((coreDivider << SCG_HCCR_DIVCORE_SHIFT) & SCG_HCCR_DIVCORE_MASK) |\n                                ((busDivider  << SCG_HCCR_DIVBUS_SHIFT)  & SCG_HCCR_DIVBUS_MASK)  |\n                                ((slowDivider << SCG_HCCR_DIVSLOW_SHIFT) & SCG_HCCR_DIVSLOW_MASK) );\n\n    base->HCCR = value;\n}\n#endif\n\n/*!\n * @brief Gets the first asynchronous divider for FIRC.\n *\n * This function gets the first asynchronous divider for FIRC.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return FIRC first asynchronous divider\n */\nstatic inline uint32_t SCG_GetFircFirstAsyncDivider(const SCG_Type * base)\n{\n    return (base->FIRCDIV & SCG_FIRCDIV_FIRCDIV1_MASK) >> SCG_FIRCDIV_FIRCDIV1_SHIFT;\n}\n\n/*!\n * @brief Gets the second asynchronous divider for FIRC.\n *\n * This function gets the second asynchronous divider for FIRC.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return FIRC second asynchronous divider\n */\nstatic inline uint32_t SCG_GetFircSecondAsyncDivider(const SCG_Type * base)\n{\n    return (base->FIRCDIV & SCG_FIRCDIV_FIRCDIV2_MASK) >> SCG_FIRCDIV_FIRCDIV2_SHIFT;\n}\n\n\n/*!\n * @brief Sets SCG asynchronous dividers for FIRC.\n *\n * This function sets SCG asynchronous dividers for FIRC.\n *\n * @param[in] base Register base address for the SCG instance.\n * @param[in] base Asynchronous first divider\n * @param[in] base Asynchronous second divider\n */\nstatic inline void SCG_SetFircAsyncConfig(SCG_Type * base, uint32_t div1, uint32_t div2)\n{\n    uint32_t value = (uint32_t)(((div1 << SCG_FIRCDIV_FIRCDIV1_SHIFT) & SCG_FIRCDIV_FIRCDIV1_MASK)     |\n                                ((div2 << SCG_FIRCDIV_FIRCDIV2_SHIFT) & SCG_FIRCDIV_FIRCDIV2_MASK) );\n    base->FIRCDIV = value;\n}\n\n\n/*!\n * @brief Gets the first asynchronous divider for SIRC.\n *\n * This function gets the first asynchronous divider for SIRC.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return SIRC first asynchronous divider\n */\nstatic inline uint32_t SCG_GetSircFirstAsyncDivider(const SCG_Type * base)\n{\n    return (base->SIRCDIV & SCG_SIRCDIV_SIRCDIV1_MASK) >> SCG_SIRCDIV_SIRCDIV1_SHIFT;\n}\n\n/*!\n * @brief Gets the second asynchronous divider for SIRC.\n *\n * This function gets the second asynchronous divider for SIRC.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return SIRC second asynchronous divider\n */\nstatic inline uint32_t SCG_GetSircSecondAsyncDivider(const SCG_Type * base)\n{\n    return (base->SIRCDIV & SCG_SIRCDIV_SIRCDIV2_MASK) >> SCG_SIRCDIV_SIRCDIV2_SHIFT;\n}\n\n\n/*!\n * @brief Sets SCG asynchronous dividers for SIRC.\n *\n * This function sets SCG asynchronous dividers for SIRC.\n *\n * @param[in] base Register base address for the SCG instance.\n * @param[in] base Asynchronous first divider\n * @param[in] base Asynchronous second divider\n */\nstatic inline void SCG_SetSircAsyncConfig(SCG_Type * base, uint32_t div1, uint32_t div2)\n{\n    uint32_t value = (uint32_t)(((div1 << SCG_SIRCDIV_SIRCDIV1_SHIFT) & SCG_SIRCDIV_SIRCDIV1_MASK)     |\n                                ((div2 << SCG_SIRCDIV_SIRCDIV2_SHIFT) & SCG_SIRCDIV_SIRCDIV2_MASK) );\n    base->SIRCDIV = value;\n}\n\n\n\n/*!\n * @brief Gets the first asynchronous divider for SOSC.\n *\n * This function gets the first asynchronous divider for SOSC.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return SOSC first asynchronous divider\n */\nstatic inline uint32_t SCG_GetSoscFirstAsyncDivider(const SCG_Type * base)\n{\n    return (base->SOSCDIV & SCG_SOSCDIV_SOSCDIV1_MASK) >> SCG_SOSCDIV_SOSCDIV1_SHIFT;\n}\n\n/*!\n * @brief Gets the second asynchronous divider for SOSC.\n *\n * This function gets the second asynchronous divider for SOSC.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return SOSC second asynchronous divider\n */\nstatic inline uint32_t SCG_GetSoscSecondAsyncDivider(const SCG_Type * base)\n{\n    return (base->SOSCDIV & SCG_SOSCDIV_SOSCDIV2_MASK) >> SCG_SOSCDIV_SOSCDIV2_SHIFT;\n}\n\n\n/*!\n * @brief Sets SCG asynchronous dividers for SOSC.\n *\n * This function sets SCG asynchronous dividers for SOSC.\n *\n * @param[in] base Register base address for the SCG instance.\n * @param[in] base Asynchronous first divider\n * @param[in] base Asynchronous second divider\n */\nstatic inline void SCG_SetSoscAsyncConfig(SCG_Type * base, uint32_t div1, uint32_t div2)\n{\n    uint32_t value = (uint32_t)(((div1 << SCG_SOSCDIV_SOSCDIV1_SHIFT) & SCG_SOSCDIV_SOSCDIV1_MASK)     |\n                                ((div2 << SCG_SOSCDIV_SOSCDIV2_SHIFT) & SCG_SOSCDIV_SOSCDIV2_MASK) );\n    base->SOSCDIV = value;\n}\n\n#if FEATURE_HAS_SPLL_CLK\n#ifdef SCG_SPLLCFG_SOURCE_MASK\n/*!\n * @brief Gets the source clock for SPLL.\n *\n * This function gets the source clock for SPLL.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return SPLL source\n */\nstatic inline uint32_t SCG_GetSourcSpll(const SCG_Type * base)\n{\n    return (base->SPLLCFG & SCG_SPLLCFG_SOURCE_MASK) >> SCG_SPLLCFG_SOURCE_SHIFT;\n}\n/*!\n * @brief Sets SCG source clock for SPLL.\n *\n * This function sets source clock for SPLL.\n *\n * @param[in] base Register base address for the SCG instance.\n * @param[in] source for spll\n */\nstatic inline void SCG_SetSourceSpll(SCG_Type * base, uint32_t source)\n{\n    uint32_t value = base->SPLLCFG;\n\n    value &= ~SCG_SPLLCFG_SOURCE_MASK;\n    value |= SCG_SPLLCFG_SOURCE(source);\n    base->SPLLCFG = value;\n}\n#endif\n/*!\n * @brief Gets the first asynchronous divider for SPLL.\n *\n * This function gets the first asynchronous divider for SPLL.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return SPLL first asynchronous divider\n */\nstatic inline uint32_t SCG_GetSpllFirstAsyncDivider(const SCG_Type * base)\n{\n    return (base->SPLLDIV & SCG_SPLLDIV_SPLLDIV1_MASK) >> SCG_SPLLDIV_SPLLDIV1_SHIFT;\n}\n\n/*!\n * @brief Gets the second asynchronous divider for SPLL.\n *\n * This function gets the second asynchronous divider for SPLL.\n *\n * @param[in] base Register base address for the SCG instance.\n * @return SPLL second asynchronous divider\n */\nstatic inline uint32_t SCG_GetSpllSecondAsyncDivider(const SCG_Type * base)\n{\n    return (base->SPLLDIV & SCG_SPLLDIV_SPLLDIV2_MASK) >> SCG_SPLLDIV_SPLLDIV2_SHIFT;\n}\n\n\n/*!\n * @brief Sets SCG asynchronous dividers for SPLL.\n *\n * This function sets SCG asynchronous dividers for SPLL.\n *\n * @param[in] base Register base address for the SCG instance.\n * @param[in] base Asynchronous first divider\n * @param[in] base Asynchronous second divider\n */\nstatic inline void SCG_SetSpllAsyncConfig(SCG_Type * base, uint32_t div1, uint32_t div2)\n{\n    uint32_t value = (uint32_t)(((div1 << SCG_SPLLDIV_SPLLDIV1_SHIFT) & SCG_SPLLDIV_SPLLDIV1_MASK)     |\n                                ((div2 << SCG_SPLLDIV_SPLLDIV2_SHIFT) & SCG_SPLLDIV_SPLLDIV2_MASK) );\n    base->SPLLDIV = value;\n}\n#endif\n\n/*!\n * @brief Set SCG ClockOut source select\n *\n * This function sets the SCG ClockOut source\n *\n * @param[in] base Register base address for the SCG instance.\n * @param[in] source used for ClockOut\n */\nstatic inline void SCG_SetClockoutSourceSel(SCG_Type * base, uint32_t source)\n{\n    uint32_t regValue;\n\n    regValue = base->CLKOUTCNFG;\n    regValue &= ~(SCG_CLKOUTCNFG_CLKOUTSEL_MASK);\n    regValue |= SCG_CLKOUTCNFG_CLKOUTSEL(source);\n    base->CLKOUTCNFG = regValue;\n}\n\n/*!\n * @brief Gets sirc system clock mode status\n *\n * This function checks whether SIRC is used as system clock source.\n *\n * @param[in] base        scg base pointer\n *\n * @return  sirc system clock mode status\n *        - false : SIRC is not the system clock source\n *        - true : SIRC is the system clock source\n */\nstatic inline bool SCG_GetSircSystemClockMode(const SCG_Type* const base)\n{\n    uint32_t regValue = (uint32_t)base->SIRCCSR;\n    regValue = (regValue & SCG_SIRCCSR_SIRCSEL_MASK) >> SCG_SIRCCSR_SIRCSEL_SHIFT;\n    return (regValue == 0U) ? false : true;\n}\n\n/*!\n * @brief Gets sirc clock status\n * This function checks whether SIRC is enabled and output clock is valid.\n *\n * @param[in] base        scg base pointer\n *\n * @return  sirc  clock status\n *        - false : SIRC is not enabled or clock is not valid\n *        - true  : SIRC is enabled and clock is valid\n */\nstatic inline bool SCG_GetSircStatus(const SCG_Type* const base)\n{\n    return (((base->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT) != 0U) ? true : false;\n}\n\n/*!\n * @brief Gets sirc clock range\n *\n * @param[in] base        scg base pointer\n *\n * @return  sirc  range value\n */\nstatic inline uint32_t SCG_GetSircRange(const SCG_Type* const base)\n{\n    return ((base->SIRCCFG & SCG_SIRCCFG_RANGE_MASK) >> SCG_SIRCCFG_RANGE_SHIFT);\n}\n\n/*!\n * @brief Clears SIRC lock register\n *\n * @param[in] base        scg base pointer\n */\nstatic inline void SCG_ClearSircLock(SCG_Type*  base)\n{\n    /* Clear LK bit field */\n    base->SIRCCSR &= (uint32_t)(~(SCG_SIRCCSR_LK_MASK));\n}\n\n\n/*!\n * @brief Clears SIRC control register\n *\n * @param[in] base        scg base pointer\n */\nstatic inline void SCG_ClearSircControl(SCG_Type* base)\n{\n    /* Clear configuration. */\n    base->SIRCCSR = 0U;\n}\n\n\n/*!\n * @brief Sets SIRC configuration register\n *\n * @param[in] base        scg base pointer\n * @param[in] range       sirc range value\n */\nstatic inline void SCG_SetSircConfiguration(SCG_Type* base, uint8_t range)\n{\n    /* Set PLL configuration: frequency range */\n    base->SIRCCFG = SCG_SIRCCFG_RANGE(range);\n}\n\n/*!\n * @brief Sets SIRC control register\n *\n * @param[in] base                scg base pointer\n * @param[in] enableInStop        enable in stop modes\n * @param[in] enableInLowPower    enable in very low power modes\n * @param[in] lockMode            control register can be written or not\n */\nstatic inline void SCG_SetSircControl(SCG_Type* base, bool enableInStop, bool enableInLowPower, bool lockMode)\n{\n    uint32_t value = SCG_SIRCCSR_SIRCEN(1U)                                  |\n                     SCG_SIRCCSR_SIRCSTEN(((enableInStop)     ? 1UL : 0UL )) |\n                     SCG_SIRCCSR_SIRCLPEN(((enableInLowPower) ? 1UL : 0UL )) |\n                     SCG_SIRCCSR_LK((lockMode) ? 1UL : 0UL);\n\n    base->SIRCCSR = value;\n}\n\n\n/*!\n * @brief Gets firc system clock mode status\n *\n * This function checks whether FIRC is used as system clock source.\n *\n * @param[in] base        scg base pointer\n *\n * @return  firc system clock mode status\n *        - false : FIRC is not the system clock source\n *        - true : FIRC is the system clock source\n */\nstatic inline bool SCG_GetFircSystemClockMode(const SCG_Type* const base)\n{\n    uint32_t regValue = (uint32_t)base->FIRCCSR;\n    regValue = (regValue & SCG_FIRCCSR_FIRCSEL_MASK) >> SCG_FIRCCSR_FIRCSEL_SHIFT;\n    return (regValue == 0U) ? false : true;\n}\n\n/*!\n * @brief Gets firc clock status\n * This function checks whether FIRC is enabled and output clock is valid.\n *\n * @param[in] base        scg base pointer\n *\n * @return  firc  clock status\n *        - false : FIRC is not enabled or clock is not valid\n *        - true  : FIRC is enabled and clock is valid\n */\nstatic inline bool SCG_GetFircStatus(const SCG_Type* const base)\n{\n    return (((base->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT) != 0U) ? true : false;\n}\n\n/*!\n * @brief Gets firc clock range\n *\n * @param[in] base        scg base pointer\n *\n * @return  firc  frequency range value\n */\nstatic inline uint32_t SCG_GetFircRange(const SCG_Type* const base)\n{\n    return ((base->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT);\n}\n\n/*!\n * @brief Clears FIRC lock register\n *\n * This function clears FIRC lock.\n *\n * @param[in] base        scg base pointer\n *\n */\nstatic inline void SCG_ClearFircLock(SCG_Type*  base)\n{\n    /* Clear LK bit field */\n    base->FIRCCSR &= (uint32_t)(~(SCG_FIRCCSR_LK_MASK));\n}\n\n\n/*!\n * @brief Clears FIRC control register\n *\n * @param[in] base        scg base pointer\n *\n */\nstatic inline void SCG_ClearFircControl(SCG_Type* base)\n{\n    /* Disable monitor, disable clock and clear error. */\n    base->FIRCCSR = SCG_FIRCCSR_FIRCERR_MASK;\n}\n\n\n/*!\n * @brief Sets FIRC configuration register\n *\n * @param[in] base        scg base pointer\n * @param[in] range       firc range value\n */\nstatic inline void SCG_SetFircConfiguration(SCG_Type* base, uint8_t range)\n{\n    /* Set PLL configuration: frequency range */\n    base->FIRCCFG = SCG_FIRCCFG_RANGE(range);\n}\n\n/*!\n * @brief Sets FIRC control register\n *\n * @param[in] base        scg base pointer\n * @param[in] monitorMode clock monitor enablement\n * @param[in] lockMode    control register can be written or not\n */\nstatic inline void SCG_SetFircControl(SCG_Type* base, bool regulator, bool lockMode)\n{\n    uint32_t value = SCG_FIRCCSR_FIRCEN(1U)                             |\n                     SCG_FIRCCSR_FIRCREGOFF((regulator) ? 0UL : 1UL)    |\n                     SCG_FIRCCSR_LK((lockMode) ? 1UL : 0UL);\n\n    base->FIRCCSR = value;\n}\n\n\n/*!\n * @brief Gets sosc system clock mode status\n *\n * This function checks whether SOSC is used as system clock source.\n *\n * @param[in] base        scg base pointer\n *\n * @return  sosc system clock mode status\n *        - false : SOSC is not the system clock source\n *        - true : SOSC is the system clock source\n */\nstatic inline bool SCG_GetSoscSystemClockMode(const SCG_Type* const base)\n{\n    uint32_t regValue = (uint32_t)base->SOSCCSR;\n    regValue = (regValue & SCG_SOSCCSR_SOSCSEL_MASK) >> SCG_SOSCCSR_SOSCSEL_SHIFT;\n    return (regValue == 0U) ? false : true;\n}\n\n/*!\n * @brief Gets sosc clock status\n * This function checks whether SOSC is enabled and output clock is valid.\n *\n * @param[in] base        scg base pointer\n *\n * @return  sosc  clock status\n *        - false : SOSC is not enabled or clock is not valid\n *        - true  : SOSC is enabled and clock is valid\n */\nstatic inline bool SCG_GetSoscStatus(const SCG_Type* const base)\n{\n    return (((base->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT) != 0U) ? true : false;\n}\n\n/*!\n * @brief Clears SOSC lock register\n *\n * @param[in] base        scg base pointer\n */\nstatic inline void SCG_ClearSoscLock(SCG_Type*  base)\n{\n    /* Clear LK bit field */\n    base->SOSCCSR &= (uint32_t)(~(SCG_SOSCCSR_LK_MASK));\n}\n\n\n/*!\n * @brief Clears SOSC control register\n *\n * @param[in] base        scg base pointer\n */\nstatic inline void SCG_ClearSoscControl(SCG_Type* base)\n{\n    /* Disable monitor, disable clock and clear error. */\n    base->SOSCCSR = SCG_SOSCCSR_SOSCERR_MASK;\n}\n\n/*!\n * @brief Sets SOSC configuration register\n *\n * @param[in] base        scg base pointer\n */\n\n\n/*!\n * @brief Sets SOSC configuration register\n *\n * @param[in] base        scg base pointer\n * @param[in] range       sosc range\n * @param[in] gain        sosc gain\n * @param[in] extRef      external reference\n */\nstatic inline void SCG_SetSoscConfiguration(SCG_Type* base, uint32_t range, uint32_t gain, uint32_t extRef)\n{\n    /* Set SOSC configuration. */\n    base->SOSCCFG = SCG_SOSCCFG_RANGE(range)        |\n                    SCG_SOSCCFG_HGO(gain)           |\n                    SCG_SOSCCFG_EREFS(extRef);\n}\n\n/*!\n * @brief Sets SOSC control register\n *\n * @param[in] base        scg base pointer\n * @param[in] monitorMode clock monitor enablement\n * @param[in] resetMode   clock monitor reset enablement\n * @param[in] lockMode    control register can be written or not\n */\nstatic inline void SCG_SetSoscControl(SCG_Type* base, bool monitorMode, bool resetMode, bool lockMode)\n{\n    uint32_t value = SCG_SOSCCSR_SOSCEN(1U)                        |\n                     SCG_SOSCCSR_SOSCCM((monitorMode) ? 1UL : 0UL) |\n                     SCG_SOSCCSR_SOSCCMRE((resetMode) ? 1UL : 0UL) |\n                     SCG_SOSCCSR_LK((lockMode) ? 1UL : 0UL);\n\n    base->SOSCCSR = value;\n}\n\n#if FEATURE_HAS_SPLL_CLK\n/*!\n * @brief Gets spll system clock mode status\n *\n * This function checks whether SPLL is used as system clock source.\n *\n * @param[in] base        scg base pointer\n *\n * @return  spll system clock mode status\n *        - false : SPLL is not the system clock source\n *        - true : SPLL is the system clock source\n */\nstatic inline bool SCG_GetSpllSystemClockMode(const SCG_Type* const base)\n{\n    uint32_t regValue = (uint32_t)base->SPLLCSR;\n    regValue = (regValue & SCG_SPLLCSR_SPLLSEL_MASK) >> SCG_SPLLCSR_SPLLSEL_SHIFT;\n    return (regValue == 0U) ? false : true;\n}\n\n/*!\n * @brief Gets spll clock status\n * This function checks whether SPLL is enabled and output clock is valid.\n *\n * @param[in] base        scg base pointer\n *\n * @return  spll  clock status\n *        - false : SPLL is not enabled or clock is not valid\n *        - true  : SPLL is enabled and clock is valid\n */\nstatic inline bool SCG_GetSpllStatus(const SCG_Type* const base)\n{\n    return (((base->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT) != 0U) ? true : false;\n}\n\n/*!\n * @brief Gets spll predivider\n *\n * @param[in] base        scg base pointer\n *\n * @return  spll predivider value\n */\nstatic inline uint32_t SCG_GetSpllPredivider(const SCG_Type* const base)\n{\n    return ((base->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);\n}\n\n/*!\n * @brief Gets spll multiplier\n *\n * @param[in] base        scg base pointer\n *\n * @return  spll multiplier value\n */\nstatic inline uint32_t SCG_GetSpllMultiplier(const SCG_Type* const base)\n{\n    return ((base->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);\n}\n\n/*!\n * @brief Clears SPLL lock register\n *\n * This function clears SPLL lock.\n *\n * @param[in] base        scg base pointer\n *\n */\nstatic inline void SCG_ClearSpllLock(SCG_Type*  base)\n{\n    /* Clear LK bit field */\n    base->SPLLCSR &= (uint32_t)(~(SCG_SPLLCSR_LK_MASK));\n}\n\n\n/*!\n * @brief Clears SPLL control register\n *\n * @param[in] base        scg base pointer\n *\n */\nstatic inline void SCG_ClearSpllControl(SCG_Type* base)\n{\n    /* Disable monitor, disable clock and clear error. */\n    base->SPLLCSR = SCG_SPLLCSR_SPLLERR_MASK;\n}\n\n/*!\n * @brief Sets SPLL configuration register\n *\n * @param[in] base        scg base pointer\n * @param[in] divider     spll predivider value\n * @param[in] multiplier  spll multiplier value\n */\nstatic inline void SCG_SetSpllConfiguration(SCG_Type* base, uint8_t divider, uint8_t multiplier)\n{\n    /* Set PLL configuration. */\n    base->SPLLCFG = SCG_SPLLCFG_PREDIV(divider)  |\n                    SCG_SPLLCFG_MULT(multiplier);\n}\n\n/*!\n * @brief Sets SPLL control register\n *\n * @param[in] base        scg base pointer\n * @param[in] monitorMode clock monitor enablement\n * @param[in] resetMode   clock monitor reset enablement\n * @param[in] lockMode    control register can be written or not\n */\nstatic inline void SCG_SetSpllControl(SCG_Type* base, bool monitorMode, bool resetMode, bool lockMode)\n{\n    uint32_t value = SCG_SPLLCSR_SPLLEN(1U)                        |\n                     SCG_SPLLCSR_SPLLCM((monitorMode) ? 1UL : 0UL) |\n                     SCG_SPLLCSR_SPLLCMRE((resetMode) ? 1UL : 0UL) |\n                     SCG_SPLLCSR_LK((lockMode) ? 1UL : 0UL);\n\n    base->SPLLCSR = value;\n}\n#endif\n\n\n#if defined(__cplusplus)\n}\n#endif /* __cplusplus*/\n\n\n/*! @}*/\n\n#endif /* SCG_HW_ACCESS_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"sim_hw_access.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\src\\clock\\S32K1xx","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2013 - 2014, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n#ifndef SIM_HW_ACCESS_H\n#define SIM_HW_ACCESS_H\n\n#include \"device_registers.h\"\n#include <stdbool.h>\n#include <stddef.h>\n\n/*!\n * @file sim_hw_access.h\n *\n * @page misra_violations MISRA-C:2012 violations\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.\n * This is required to implement enumeration entries as macro.\n * Enumeration entries (macros) are referenced from application code.\n */\n\n/*!\n * @ingroup sim_hw_access\n * @defgroup sim_hw_access\n * @{\n */\n/*******************************************************************************\n * Definitions\n ******************************************************************************/\n\n#define CLOCK_QSPI_MCR_SCLKCFG_CLK_MOD       0x40U    /* Quadspi Clocking mode selection  */\n#define CLOCK_QSPI_MCR_SCLKCFG_EXT_DQS       0x20U    /* Use external DQS (HyperRAM mode) */\n#define CLOCK_QSPI_MCR_SCLKCFG_CLK_SRC       0x10U    /* QuadSPI source clock selection   */\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif /* __cplusplus*/\n\n\n/*!\n * @brief Get the clock selection of RTCCLKSEL.\n *\n * This function gets the clock selection of RTCCLKSEL.\n *\n * @param[in] base Base address for current SIM instance.\n * @return Current selection.\n */\nstatic inline uint32_t SIM_GetRtcClkSrc(const SIM_Type * base)\n{\n    return ((base->LPOCLKS & SIM_LPOCLKS_RTCCLKSEL_MASK) >> SIM_LPOCLKS_RTCCLKSEL_SHIFT);\n}\n\n\n/*!\n * @brief Set the clock selection of LPOCLKSEL.\n *\n * This function sets the clock selection of LPOCLKSEL.\n *\n * @param[in] base Base address for current SIM instance.\n * @param[in] setting The value to set.\n * @note This function ignores initialize member\n */\nstatic inline void SIM_SetLpoClocks(SIM_Type* base, bool enableLpo1k, bool enableLpo32k, uint32_t sourceLpoClk, uint32_t sourceRtcClk)\n{\n    uint32_t regValue = base->LPOCLKS;\n\n    regValue &= ~( SIM_LPOCLKS_LPO1KCLKEN_MASK  |\n                   SIM_LPOCLKS_LPO32KCLKEN_MASK |\n                   SIM_LPOCLKS_LPOCLKSEL_MASK   |\n                   SIM_LPOCLKS_RTCCLKSEL_MASK   );\n\n    regValue |= SIM_LPOCLKS_LPO1KCLKEN(enableLpo1k ? 1UL : 0UL);\n    regValue |= SIM_LPOCLKS_LPO32KCLKEN(enableLpo32k ? 1UL : 0UL);\n    regValue |= SIM_LPOCLKS_LPOCLKSEL(sourceLpoClk);\n    regValue |= SIM_LPOCLKS_RTCCLKSEL(sourceRtcClk);\n\n    /* Write value to register. */\n    base->LPOCLKS = regValue;\n}\n\n/*!\n * @brief Set the EIM Clock Gate from the Platform Clock Gating Control Register.\n *\n * This function configures the EIM Clock Gate in the Platform Clock Gating Control Register.\n *\n * @param[in] base Base address for current SIM instance.\n * @param[in] EIM clock gate enable setting\n */\nstatic inline void SIM_SetEimClockGate(SIM_Type* base, bool enable)\n{\n    uint32_t regValue = (uint32_t)base->PLATCGC;\n    regValue &= (uint32_t)(~(SIM_PLATCGC_CGCEIM_MASK));\n    regValue |= SIM_PLATCGC_CGCEIM(enable ? 1UL : 0UL);\n    base->PLATCGC = (uint32_t)regValue;\n}\n\n/*!\n * @brief Gets the EIM Clock Gate from the Platform Clock Gating Control Register.\n *\n * This function gets the EIM Clock Gate in the Platform Clock Gating Control Register.\n *\n * @param[in] base Base address for current SIM instance.\n * @return EIM Clock Gating\n */\nstatic inline bool SIM_GetEimClockGate(const SIM_Type * base)\n{\n    uint32_t regValue = (uint32_t)base->PLATCGC;\n    regValue = (regValue & SIM_PLATCGC_CGCEIM_MASK) >> SIM_PLATCGC_CGCEIM_SHIFT;\n    return (regValue != 0U) ? true : false;\n}\n\n/*!\n * @brief Set the ERM Clock Gate from the Platform Clock Gating Control Register.\n *\n * This function configures the ERM Clock Gate in the Platform Clock Gating Control Register.\n *\n * @param[in] base Base address for current SIM instance.\n * @param[in] enable ERM clock gate enable setting\n */\nstatic inline void SIM_SetErmClockGate(SIM_Type* base, bool enable)\n{\n    uint32_t regValue = (uint32_t)base->PLATCGC;\n    regValue &= (uint32_t)(~(SIM_PLATCGC_CGCERM_MASK));\n    regValue |= SIM_PLATCGC_CGCERM(enable ? 1UL : 0UL);\n    base->PLATCGC = (uint32_t)regValue;\n}\n\n\n\n/*!\n * @brief Gets the ERM Clock Gate from the Platform Clock Gating Control Register.\n *\n * This function gets the ERM Clock Gate in the Platform Clock Gating Control Register.\n *\n * @param[in] base Base address for current SIM instance.\n * @return ERM Clock Gating\n */\nstatic inline bool SIM_GetErmClockGate(const SIM_Type * base)\n{\n    uint32_t regValue = (uint32_t)base->PLATCGC;\n    regValue = (regValue & SIM_PLATCGC_CGCERM_MASK) >> SIM_PLATCGC_CGCERM_SHIFT;\n    return (regValue != 0U) ? true : false;\n}\n\n/*!\n * @brief Set the DMA Clock Gate from the Platform Clock Gating Control Register.\n *\n * This function configures the DMA Clock Gate in the Platform Clock Gating Control Register.\n *\n * @param[in] base Base address for current SIM instance.\n * @param[in] enable DMA clock gate enable setting\n */\nstatic inline void SIM_SetDmaClockGate(SIM_Type* base, bool enable)\n{\n    uint32_t regValue = (uint32_t)base->PLATCGC;\n    regValue &= (uint32_t)(~(SIM_PLATCGC_CGCDMA_MASK));\n    regValue |= SIM_PLATCGC_CGCDMA(enable ? 1UL : 0UL);\n    base->PLATCGC = (uint32_t)regValue;\n}\n\n\n\n/*!\n * @brief Gets the DMA Clock Gate from the Platform Clock Gating Control Register.\n *\n * This function gets the DMA Clock Gate in the Platform Clock Gating Control Register.\n *\n * @param[in] base Base address for current SIM instance.\n * @return DMA Clock Gating\n */\nstatic inline bool SIM_GetDmaClockGate(const SIM_Type * base)\n{\n    uint32_t regValue = (uint32_t)base->PLATCGC;\n    regValue = (regValue & SIM_PLATCGC_CGCDMA_MASK) >> SIM_PLATCGC_CGCDMA_SHIFT;\n    return (regValue != 0U) ? true : false;\n}\n\n\n/*!\n * @brief Configure the MPU Clock Gating from the Platform Clock Gating Control Register.\n *\n * This function configures the MPU Clock Gating in the Platform Clock Gating Control Register.\n *\n * @param[in] base Base address for current SIM instance.\n * @param[in] enable MPU clock gate enable setting\n */\nstatic inline void SIM_SetMpuClockGate(SIM_Type* base, bool enable)\n{\n    uint32_t regValue = (uint32_t)base->PLATCGC;\n    regValue &= (uint32_t)(~(SIM_PLATCGC_CGCMPU_MASK));\n    regValue |= SIM_PLATCGC_CGCMPU(enable ? 1UL : 0UL);\n    base->PLATCGC = (uint32_t)regValue;\n}\n\n/*!\n * @brief Gets the MPU Clock Gating from the Platform Clock Gating Control Register.\n *\n * This function gets the MPU Clock Gating in the Platform Clock Gating Control Register.\n *\n * @param[in] base Base address for current SIM instance.\n * @return MPU Clock Gating\n */\nstatic inline bool SIM_GetMpuClockGate(const SIM_Type * base)\n{\n    uint32_t regValue = (uint32_t)base->PLATCGC;\n    regValue = (regValue & SIM_PLATCGC_CGCMPU_MASK) >> SIM_PLATCGC_CGCMPU_SHIFT;\n    return (regValue != 0U) ? true : false;\n}\n\n/*!\n * @brief Configure the MSCM Clock Gating from the Platform Clock Gating Control Register.\n *\n * This function configures the MSCM Clock Gating in the Platform Clock Gating Control Register.\n *\n * @param[in] base Base address for current SIM instance.\n * @param[in] enable MPU clock gate enable setting\n */\nstatic inline void SIM_SetMscmClockGate(SIM_Type* base, bool enable)\n{\n    uint32_t regValue = (uint32_t)base->PLATCGC;\n    regValue &= (uint32_t)(~(SIM_PLATCGC_CGCMSCM_MASK));\n    regValue |= SIM_PLATCGC_CGCMSCM(enable ? 1UL : 0UL);\n    base->PLATCGC = (uint32_t)regValue;\n}\n\n/*!\n * @brief Gets the MSCM Clock Gating from the Platform Clock Gating Control Register.\n *\n * This function gets the MSCM Clock Gating in the Platform Clock Gating Control Register.\n *\n * @param[in] base Base address for current SIM instance.\n * @return MSCM Clock Gating\n */\nstatic inline bool SIM_GetMscmClockGate(const SIM_Type * base)\n{\n    uint32_t regValue = (uint32_t)base->PLATCGC;\n    regValue = (regValue & SIM_PLATCGC_CGCMSCM_MASK) >> SIM_PLATCGC_CGCMSCM_SHIFT;\n    return (regValue != 0U) ? true : false;\n}\n\n#if defined(QuadSPI_INSTANCE_COUNT)\n/*!\n * @brief Configure the QuadSPI Internal Reference Clock Gating\n *\n * This function configures the QuadSPI Internal Reference Clock Gating.\n *\n * @param[in] base Base address for current SIM instance.\n * @param[in] configures QuadSPI Internal Reference Clock Gating\n */\nstatic inline void SIM_SetQspiIntRefClockGate(SIM_Type* base, bool enable)\n{\n    uint32_t regValue = (uint32_t)base->MISCTRL0;\n    regValue &= (uint32_t)(~(SIM_MISCTRL0_QSPI_CLK_SEL_MASK));\n    regValue |= SIM_MISCTRL0_QSPI_CLK_SEL(enable ? 1UL : 0UL);\n    base->MISCTRL0 = (uint32_t)regValue;\n}\n\n/*\n * @brief Get the current QSPI clocking mode selection\n *\n * This function gets the current QSPI clocking mode selection.\n *\n * @param[in] baseAddr Base address for current QSPI instance.\n * @return clocking mode selection\n */\nstatic inline bool QSPI_GetClockingModeSelection(const QuadSPI_Type *baseAddr)\n{\n    return (((baseAddr->MCR & QuadSPI_MCR_SCLKCFG_MASK) >> QuadSPI_MCR_SCLKCFG_SHIFT) & CLOCK_QSPI_MCR_SCLKCFG_CLK_MOD) != 0U;\n}\n\n/*\n * @brief Get the current QSPI HyperRam clocking mode selection\n *\n * This function gets the current QSPI HyperRam clocking mode selection.\n *\n * @param[in] baseAddr Base address for current QSPI instance.\n * @return HyperRam clocking mode selection\n */\nstatic inline bool QSPI_GetClockingHyperRamMode(const QuadSPI_Type *baseAddr)\n{\n    return (((baseAddr->MCR & QuadSPI_MCR_SCLKCFG_MASK) >> QuadSPI_MCR_SCLKCFG_SHIFT) & CLOCK_QSPI_MCR_SCLKCFG_EXT_DQS) != 0U;\n}\n\n/*\n * @brief Get the current QSPI clocking source selection\n *\n * This function gets the current QSPI clocking source selection.\n *\n * @param[in] baseAddr Base address for current QSPI instance.\n * @return clocking source selection\n */\nstatic inline bool QSPI_GetClockingSourceSelection(const QuadSPI_Type *baseAddr)\n{\n    return (((baseAddr->MCR & QuadSPI_MCR_SCLKCFG_MASK) >> QuadSPI_MCR_SCLKCFG_SHIFT) & CLOCK_QSPI_MCR_SCLKCFG_CLK_SRC) != 0U;\n}\n\n/*\n * @brief Get the current SIM clocking mode selection\n *\n * This function gets the current SIM clocking mode selection.\n *\n * @param[in] baseAddr Base address for current SIM instance.\n * @return clocking mode selection\n */\nstatic inline bool SIM_GetClockingModeSelection(const SIM_Type *baseAddr)\n{\n    return ((baseAddr->MISCTRL0 & SIM_MISCTRL0_QSPI_CLK_SEL_MASK) >> SIM_MISCTRL0_QSPI_CLK_SEL_SHIFT) != 0U;\n}\n\n/*\n * @brief Get the clocking programmable divider\n *\n * This function gets the clocking programmable divider.\n *\n * @param[in] baseAddr Base address for current QSPI instance.\n * @return clocking programmable divider\n */\nstatic inline uint32_t QSPI_GetClockingProgrammableDividerValue(const QuadSPI_Type *baseAddr)\n{\n    return (baseAddr->SOCCR & QuadSPI_SOCCR_SOCCFG_MASK) >> QuadSPI_SOCCR_SOCCFG_SHIFT;\n}\n#endif\n\n\n/*FUNCTION**********************************************************************\n *\n * Function Name : SIM_GetFtm0ExternalClkPinMode\n * Description   : Get FlexTimer 0 external clock pin select setting\n * This function will get FlexTimer 0 external clock pin select setting.\n *END**************************************************************************/\nstatic inline uint32_t SIM_GetFtm0ExternalClkPinMode(const SIM_Type * base)\n{\n    return (base->FTMOPT0 & SIM_FTMOPT0_FTM0CLKSEL_MASK) >> SIM_FTMOPT0_FTM0CLKSEL_SHIFT;\n}\n\n/*FUNCTION**********************************************************************\n *\n * Function Name : SIM_GetFtm1ExternalClkPinMode\n * Description   : Get FlexTimer 1 external clock pin select setting\n * This function will get FlexTimer 1 external clock pin select setting.\n *END**************************************************************************/\nstatic inline uint32_t SIM_GetFtm1ExternalClkPinMode(const SIM_Type * base)\n{\n    return (base->FTMOPT0 & SIM_FTMOPT0_FTM1CLKSEL_MASK) >> SIM_FTMOPT0_FTM1CLKSEL_SHIFT;\n}\n\n/*FUNCTION**********************************************************************\n *\n * Function Name : SIM_GetFtm2ExternalClkPinMode\n * Description   : Get FlexTimer 2 external clock pin select setting\n * This function will get FlexTimer 2 external clock pin select setting.\n *END**************************************************************************/\nstatic inline uint32_t SIM_GetFtm2ExternalClkPinMode(const SIM_Type * base)\n{\n    return (base->FTMOPT0 & SIM_FTMOPT0_FTM2CLKSEL_MASK) >> SIM_FTMOPT0_FTM2CLKSEL_SHIFT;\n}\n\n/*FUNCTION**********************************************************************\n *\n * Function Name : SIM_GetFtm3ExternalClkPinMode\n * Description   : Get FlexTimer 3 external clock pin select setting\n * This function will get FlexTimer 3 external clock pin select setting.\n *END**************************************************************************/\nstatic inline uint32_t SIM_GetFtm3ExternalClkPinMode(const SIM_Type * base)\n{\n    return (base->FTMOPT0 & SIM_FTMOPT0_FTM3CLKSEL_MASK) >> SIM_FTMOPT0_FTM3CLKSEL_SHIFT;\n}\n\n#if FTM_INSTANCE_COUNT > 4U\n/*FUNCTION**********************************************************************\n *\n * Function Name : SIM_GetFtm4ExternalClkPinMode\n * Description   : Get FlexTimer 4 external clock pin select setting\n * This function will get FlexTimer 4 external clock pin select setting.\n *END**************************************************************************/\nstatic inline uint32_t SIM_GetFtm4ExternalClkPinMode(const SIM_Type * base)\n{\n    return (base->FTMOPT0 & SIM_FTMOPT0_FTM4CLKSEL_MASK) >> SIM_FTMOPT0_FTM4CLKSEL_SHIFT;\n}\n#endif\n\n#if FTM_INSTANCE_COUNT > 5U\n/*FUNCTION**********************************************************************\n *\n * Function Name : SIM_GetFtm5ExternalClkPinMode\n * Description   : Get FlexTimer 5 external clock pin select setting\n * This function will get FlexTimer 5 external clock pin select setting.\n *END**************************************************************************/\nstatic inline uint32_t SIM_GetFtm5ExternalClkPinMode(const SIM_Type * base)\n{\n    return (base->FTMOPT0 & SIM_FTMOPT0_FTM5CLKSEL_MASK) >> SIM_FTMOPT0_FTM5CLKSEL_SHIFT;\n}\n#endif\n\n#if FTM_INSTANCE_COUNT > 6U\n/*FUNCTION**********************************************************************\n *\n * Function Name : SIM_GetFtm6ExternalClkPinMode\n * Description   : Get FlexTimer 6 external clock pin select setting\n * This function will get FlexTimer 6 external clock pin select setting.\n *END**************************************************************************/\nstatic inline uint32_t SIM_GetFtm6ExternalClkPinMode(const SIM_Type * base)\n{\n    return (base->FTMOPT0 & SIM_FTMOPT0_FTM6CLKSEL_MASK) >> SIM_FTMOPT0_FTM6CLKSEL_SHIFT;\n}\n#endif\n\n\n#if FTM_INSTANCE_COUNT > 7U\n/*FUNCTION**********************************************************************\n *\n * Function Name : SIM_GetFtm7ExternalClkPinMode\n * Description   : Get FlexTimer 7 external clock pin select setting\n * This function will get FlexTimer 7 external clock pin select setting.\n *END**************************************************************************/\nstatic inline uint32_t SIM_GetFtm7ExternalClkPinMode(const SIM_Type * base)\n{\n    return (base->FTMOPT0 & SIM_FTMOPT0_FTM7CLKSEL_MASK) >> SIM_FTMOPT0_FTM7CLKSEL_SHIFT;\n}\n#endif\n\n/*FUNCTION*********************************************************************\n *\n * Function Name : SIM_GetLpo32KStatus\n * Description   : Get SIM LPO 32KHz clock gating status (LPO_32K_CLOCK).\n *END*************************************************************************/\nstatic inline bool SIM_GetLpo32KStatus(const SIM_Type * base)\n{\n    return (((base->LPOCLKS & SIM_LPOCLKS_LPO32KCLKEN_MASK) >> SIM_LPOCLKS_LPO32KCLKEN_SHIFT) != 0U) ? true : false;\n}\n\n/*FUNCTION*********************************************************************\n *\n * Function Name : SIM_GetLpo1KStatus\n * Description   : Get SIM LPO 1KHz clock gating status (LPO_1K_CLOCK).\n *END*************************************************************************/\nstatic inline bool SIM_GetLpo1KStatus(const SIM_Type * base)\n{\n    return (((base->LPOCLKS & SIM_LPOCLKS_LPO1KCLKEN_MASK) >> SIM_LPOCLKS_LPO1KCLKEN_SHIFT) != 0U) ? true : false;\n}\n\n/*!\n * @brief Gets the LPO selector value\n *\n * This function gets the LPO selector value\n *\n * @param[in] base Base address for current SIM instance.\n * @return clockout status\n */\nstatic inline uint32_t SIM_GetLpoClkSelectorValue(const SIM_Type * base)\n{\n    return ((base->LPOCLKS & SIM_LPOCLKS_LPOCLKSEL_MASK) >> SIM_LPOCLKS_LPOCLKSEL_SHIFT);\n}\n\n/*!\n * @brief Gets the clock out status\n *\n * This function gets the clock out status (enabled or disabled)\n *\n * @param[in] base Base address for current SIM instance.\n * @return clockout status\n */\nstatic inline bool SIM_GetClockoutStatus(const SIM_Type * base)\n{\n    return (((base->CHIPCTL & SIM_CHIPCTL_CLKOUTEN_MASK) >> SIM_CHIPCTL_CLKOUTEN_SHIFT) == 0U) ? false : true;\n}\n\n/*!\n * @brief Gets the clock out divider value\n *\n * This function gets the clock out divider value\n *\n * @param[in] base Base address for current SIM instance.\n * @return clockout divider\n */\nstatic inline uint32_t SIM_GetClockoutDividerValue(const SIM_Type * base)\n{\n    return ((base->CHIPCTL & SIM_CHIPCTL_CLKOUTDIV_MASK) >> SIM_CHIPCTL_CLKOUTDIV_SHIFT);\n}\n\n/*!\n * @brief Gets the clock out source\n *\n * This function gets the clock out source\n *\n * @param[in] base Base address for current SIM instance.\n * @return clockout source\n */\nstatic inline uint32_t SIM_GetClockoutSelectorValue(const SIM_Type * base)\n{\n    return ((base->CHIPCTL & SIM_CHIPCTL_CLKOUTSEL_MASK) >> SIM_CHIPCTL_CLKOUTSEL_SHIFT);\n}\n\n/*!\n * @brief Sets ext pin clock source for FTM\n *\n * @param[in] base        sim base pointer\n * @param[in] instance    ftm instance\n * @param[in] source      clock source\n */\nstatic inline void SIM_SetExtPinSourceFtm(SIM_Type* base, uint8_t instance, uint32_t source)\n{\n    uint32_t regValue = base->FTMOPT0;\n\n    switch (instance)\n    {\n        case 0U:\n            regValue &= ~SIM_FTMOPT0_FTM0CLKSEL_MASK;\n            regValue |= SIM_FTMOPT0_FTM0CLKSEL(source);\n            break;\n        case 1U:\n            regValue &= ~SIM_FTMOPT0_FTM1CLKSEL_MASK;\n            regValue |= SIM_FTMOPT0_FTM1CLKSEL(source);\n            break;\n#if FTM_INSTANCE_COUNT > 2U\n        case 2U:\n            regValue &= ~SIM_FTMOPT0_FTM2CLKSEL_MASK;\n            regValue |= SIM_FTMOPT0_FTM2CLKSEL(source);\n            break;\n#endif\n#if FTM_INSTANCE_COUNT > 3U\n        case 3U:\n            regValue &= ~SIM_FTMOPT0_FTM3CLKSEL_MASK;\n            regValue |= SIM_FTMOPT0_FTM3CLKSEL(source);\n            break;\n#endif\n#if FTM_INSTANCE_COUNT > 4U\n        case 4U:\n            regValue &= ~SIM_FTMOPT0_FTM4CLKSEL_MASK;\n            regValue |= SIM_FTMOPT0_FTM4CLKSEL(source);\n            break;\n#endif\n#if FTM_INSTANCE_COUNT > 5U\n        case 5U:\n            regValue &= ~SIM_FTMOPT0_FTM5CLKSEL_MASK;\n            regValue |= SIM_FTMOPT0_FTM5CLKSEL(source);\n            break;\n#endif\n#if FTM_INSTANCE_COUNT > 6U\n        case 6U:\n            regValue &= ~SIM_FTMOPT0_FTM6CLKSEL_MASK;\n            regValue |= SIM_FTMOPT0_FTM6CLKSEL(source);\n            break;\n#endif\n#if FTM_INSTANCE_COUNT > 7U\n        case 7U:\n            regValue &= ~SIM_FTMOPT0_FTM7CLKSEL_MASK;\n            regValue |= SIM_FTMOPT0_FTM7CLKSEL(source);\n            break;\n#endif\n        default:\n            /* Do nothing */\n            break;\n    }\n\n    base->FTMOPT0 = regValue;\n}\n\n/*!\n * @brief Sets clockout\n *\n * @param[in] base        sim base pointer\n * @param[in] source      clock source\n * @param[in] divider     clock divider\n */\nstatic inline void SIM_SetClockout(SIM_Type* base, bool enable, uint32_t source, uint32_t divider)\n{\n    uint32_t regValue;\n\n    /* CLKOUTEN should be first cleared and then execute sequence */\n    base->CHIPCTL &= ~SIM_CHIPCTL_CLKOUTEN_MASK;\n\n    regValue = base->CHIPCTL;\n    regValue &= ~( SIM_CHIPCTL_CLKOUTEN_MASK  |\n                   SIM_CHIPCTL_CLKOUTDIV_MASK |\n                   SIM_CHIPCTL_CLKOUTSEL_MASK );\n\n    regValue |= SIM_CHIPCTL_CLKOUTEN(enable ? 1UL : 0UL);\n    regValue |= SIM_CHIPCTL_CLKOUTSEL(source);\n    regValue |= SIM_CHIPCTL_CLKOUTDIV(divider);\n\n    base->CHIPCTL = regValue;\n}\n\n/*!\n * @brief Configure clock trace source\n *\n * @param[in] base        sim base pointer\n * @param[in] source      clock trace source\n */\nstatic inline void SIM_SetTraceClockSource(SIM_Type* base, uint32_t clTraceSrc)\n{\n    uint32_t regValue;\n\n    /* Configure trace source. */\n    regValue = (uint32_t)base->CHIPCTL;\n    regValue &= (uint32_t)(~(SIM_CHIPCTL_TRACECLK_SEL_MASK));\n    regValue |= SIM_CHIPCTL_TRACECLK_SEL(clTraceSrc);\n    base->CHIPCTL = (uint32_t)regValue;\n}\n\n/*!\n * @brief Clears SIM Debug Trace configuration.\n *\n * This function disables the SIM Debug Trace clock.\n *\n * @param[in] base Register base address for the SIM instance.\n */\nstatic inline void SIM_ClearTraceClockConfig(SIM_Type * base)\n{\n    /* Disable divider. */\n    base->CLKDIV4 &= 0U;\n}\n\n/*!\n * @brief Set SIM Debug Trace configuration.\n *\n * This function disables the SIM Debug Trace clock.\n *\n * @param[in] base        sim base pointer\n * @param[in] source      clock trace source\n */\nstatic inline void SIM_SetTraceClockConfig(SIM_Type * base, bool enable, uint32_t divider, uint32_t multiplier)\n{\n    base->CLKDIV4 = SIM_CLKDIV4_TRACEDIVEN(enable ? 1UL : 0UL) |\n                    SIM_CLKDIV4_TRACEDIV(divider)              |\n                    SIM_CLKDIV4_TRACEFRAC(multiplier);\n}\n\n\n\n#if defined(__cplusplus)\n}\n#endif /* __cplusplus*/\n\n\n/*! @}*/\n\n#endif /* SIM_HW_ACCESS_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"smc_hw_access.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw\\src\\clock\\S32K1xx","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright (c) 2013 - 2014, Freescale Semiconductor, Inc.\n * Copyright 2016-2020 NXP\n * All rights reserved.\n *\n * NXP Confidential. This software is owned or controlled by NXP and may only be\n * used strictly in accordance with the applicable license terms. By expressly\n * accepting such terms or by downloading, installing, activating and/or otherwise\n * using the software, you are agreeing that you have read, and that you agree to\n * comply with and are bound by, such license terms. If you do not agree to be\n * bound by the applicable license terms, then you may not retain, install,\n * activate or otherwise use the software. The production use license in\n * Section 2.3 is expressly granted for this software.\n */\n\n#ifndef SMC_HW_ACCESS_H\n#define SMC_HW_ACCESS_H\n\n#include \"device_registers.h\"\n#include <stdbool.h>\n#include <stddef.h>\n\n/*!\n * @file smc_hw_access.h\n *\n * @page misra_violations MISRA-C:2012 violations\n *\n * @section [global]\n * Violates MISRA 2012 Advisory Rule 2.5, Global macro not referenced.\n * This is required to implement enumeration entries as macro.\n * Enumeration entries (macros) are referenced from application code.\n */\n\n/*!\n * @ingroup smc_hw_access\n * @defgroup smc_hw_access\n * @{\n */\n\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif /* __cplusplus*/\n\n\n/*!\n * @brief Gets the current running power mode.\n *\n * This function  returns the current running power mode.\n *\n * @param[in] baseAddr  Base address for current SMC instance.\n * @return stat  Current power mode stat\n */\nstatic inline uint32_t SMC_GetCurrentRunningMode(const SMC_Type* const baseAddr)\n{\n    return (baseAddr->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT;\n}\n\n\n#if defined(__cplusplus)\n}\n#endif /* __cplusplus*/\n\n\n/*! @}*/\n\n#endif /* SMC_HW_ACCESS_H */\n/*******************************************************************************\n * EOF\n ******************************************************************************/\n"},{"name":"tpp_ic_init.c","type":"source","group":"legacy","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#include \"tpp_ic_init.h\"\r\n#include \"pcc_hw_access.h\"\r\n\r\nextern void GPIPORTE10_callback (void);\r\nvoid TPP_tppDrvConfig(void)\r\n{\r\n  tppDrvConfig.en1PinIndex = 2;\r\n  tppDrvConfig.en1PinInstance = instanceA;\r\n  tppDrvConfig.en2PinIndex = 2;\r\n  tppDrvConfig.en2PinInstance = instanceA;\r\n  tppDrvConfig.rstPinIndex = 3;\r\n  tppDrvConfig.rstPinInstance = instanceA;\r\n  tppDrvConfig.deviceConfig.deadtime = INIT_DEADTIME;\r\n  tppDrvConfig.deviceConfig.intMask0 = INIT_INTERRUPTS0;\r\n  tppDrvConfig.deviceConfig.intMask1 = INIT_INTERRUPTS1;\r\n  tppDrvConfig.deviceConfig.modeMask = INIT_MODE;\r\n  tppDrvConfig.deviceConfig.statusRegister[0U] = 0U;\r\n  tppDrvConfig.deviceConfig.statusRegister[1U] = 0U;\r\n  tppDrvConfig.deviceConfig.statusRegister[2U] = 0U;\r\n  tppDrvConfig.deviceConfig.statusRegister[3U] = 0U;\r\n  tppDrvConfig.csPinIndex = 5;\r\n  tppDrvConfig.csPinInstance = instanceB;\r\n  tppDrvConfig.spiInstance = 0U;\r\n  tppDrvConfig.spiTppConfig.baudRateHz = LPSPI_FREQ;\r\n}\r\n\r\n;\r\nvoid TPP_init_pins(void)\r\n{\r\n  pin_settings_config_t tpp_pins_InitConfigArr[5] = {\r\n    {\r\n      .base = PORTA,\r\n      .pinPortIdx = 2,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTA,\r\n      .direction = GPIO_OUTPUT_DIRECTION,\r\n      .digitalFilter = false,\r\n      .initValue = 0u,\r\n    },\r\n\r\n    {\r\n      .base = PORTA,\r\n      .pinPortIdx = 2,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTA,\r\n      .direction = GPIO_OUTPUT_DIRECTION,\r\n      .digitalFilter = false,\r\n      .initValue = 0u,\r\n    },\r\n\r\n    {\r\n      .base = PORTA,\r\n      .pinPortIdx = 3,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTA,\r\n      .direction = GPIO_OUTPUT_DIRECTION,\r\n      .digitalFilter = false,\r\n      .initValue = 0u,\r\n    },\r\n\r\n    {\r\n      .base = PORTB,\r\n      .pinPortIdx = 5,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTB,\r\n      .direction = GPIO_OUTPUT_DIRECTION,\r\n      .digitalFilter = false,\r\n      .initValue = 1u,\r\n    },\r\n\r\n    {\r\n      .base = PORTE,\r\n      .pinPortIdx = 10,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTE,\r\n      .direction = GPIO_INPUT_DIRECTION,\r\n    }\r\n  };\r\n\r\n  /* Enable clock for PORTA */\r\n  PCC_SetClockMode(PCC, PCC_PORTA_CLOCK, true);\r\n  PCC_SetClockMode(PCC, PCC_PORTA_CLOCK, true);\r\n  PCC_SetClockMode(PCC, PCC_PORTA_CLOCK, true);\r\n  PCC_SetClockMode(PCC, PCC_PORTB_CLOCK, true);\r\n  PCC_SetClockMode(PCC, PCC_PORTE_CLOCK, true);\r\n\r\n  /* Initialize TPP pins */\r\n  PINS_DRV_Init(5, tpp_pins_InitConfigArr);\r\n  PINS_SetMuxModeSel (PORTB, 8, PORT_MUX_AS_GPIO);\r\n  PINS_DRV_SetPinDirection(PTB, 8,\r\n    GPIO_OUTPUT_DIRECTION);\r\n  PINS_DRV_WritePin(PTB, 8,\r\n                    1U);\r\n  PINS_SetMuxModeSel (PORTB, 9, PORT_MUX_AS_GPIO);\r\n  PINS_DRV_SetPinDirection(PTB, 9,\r\n    GPIO_OUTPUT_DIRECTION);\r\n  PINS_DRV_WritePin(PTB, 9,\r\n                    0U);\r\n  PINS_SetMuxModeSel (PORTB, 10, PORT_MUX_AS_GPIO);\r\n  PINS_DRV_SetPinDirection(PTB, 10,\r\n    GPIO_OUTPUT_DIRECTION);\r\n  PINS_DRV_WritePin(PTB, 10,\r\n                    1U);\r\n  PINS_SetMuxModeSel (PORTB, 11, PORT_MUX_AS_GPIO);\r\n  PINS_DRV_SetPinDirection(PTB, 11,\r\n    GPIO_OUTPUT_DIRECTION);\r\n  PINS_DRV_WritePin(PTB, 11,\r\n                    0U);\r\n  PINS_SetMuxModeSel (PORTC, 10, PORT_MUX_AS_GPIO);\r\n  PINS_DRV_SetPinDirection(PTC, 10,\r\n    GPIO_OUTPUT_DIRECTION);\r\n  PINS_DRV_WritePin(PTC, 10,\r\n                    1U);\r\n  PINS_SetMuxModeSel (PORTC, 11, PORT_MUX_AS_GPIO);\r\n  PINS_DRV_SetPinDirection(PTC, 11,\r\n    GPIO_OUTPUT_DIRECTION);\r\n  PINS_DRV_WritePin(PTC, 11,\r\n                    0U);\r\n}\r\n\r\n;\r\nvoid TPP_reconfig_pwm_pins(void)\r\n{\r\n  PINS_SetMuxModeSel (PORTB, 8, PORT_MUX_AS_GPIO);\r\n  PINS_DRV_SetPinDirection(PTB, 8,\r\n    GPIO_OUTPUT_DIRECTION);\r\n  PINS_DRV_WritePin(PTB, 8,\r\n                    1U);\r\n  PINS_SetMuxModeSel (PORTB, 9, PORT_MUX_AS_GPIO);\r\n  PINS_DRV_SetPinDirection(PTB, 9,\r\n    GPIO_OUTPUT_DIRECTION);\r\n  PINS_DRV_WritePin(PTB, 9,\r\n                    0U);\r\n  PINS_SetMuxModeSel (PORTB, 10, PORT_MUX_AS_GPIO);\r\n  PINS_DRV_SetPinDirection(PTB, 10,\r\n    GPIO_OUTPUT_DIRECTION);\r\n  PINS_DRV_WritePin(PTB, 10,\r\n                    1U);\r\n  PINS_SetMuxModeSel (PORTB, 11, PORT_MUX_AS_GPIO);\r\n  PINS_DRV_SetPinDirection(PTB, 11,\r\n    GPIO_OUTPUT_DIRECTION);\r\n  PINS_DRV_WritePin(PTB, 11,\r\n                    0U);\r\n  PINS_SetMuxModeSel (PORTC, 10, PORT_MUX_AS_GPIO);\r\n  PINS_DRV_SetPinDirection(PTC, 10,\r\n    GPIO_OUTPUT_DIRECTION);\r\n  PINS_DRV_WritePin(PTC, 10,\r\n                    1U);\r\n  PINS_SetMuxModeSel (PORTC, 11, PORT_MUX_AS_GPIO);\r\n  PINS_DRV_SetPinDirection(PTC, 11,\r\n    GPIO_OUTPUT_DIRECTION);\r\n  PINS_DRV_WritePin(PTC, 11,\r\n                    0U);\r\n}\r\n\r\nvoid TPP_IC_Init(void)\r\n{\r\n  TPP_tppDrvConfig();\r\n  TPP_init_pins();\r\n  TPP_ConfigureGpio(&tppDrvConfig);\r\n  TPP_reconfig_pwm_pins();\r\n  TPP_Init(&tppDrvConfig, tppModeEnable);\r\n  toggle_restoreTppPwmPins();\r\n}\r\n\r\nvoid toggle_restoreTppPwmPins()\r\n{\r\n  /* Turn on LS pwm channels */\r\n  WAIT_AML_WaitUs(TPP_LS_TOGGLE_DELAY);\r\n  PINS_DRV_WritePin(PTB, 8,\r\n                    1u);\r\n  PINS_DRV_WritePin(PTB, 9,\r\n                    1u);\r\n  PINS_DRV_WritePin(PTB, 10,\r\n                    1u);\r\n  PINS_DRV_WritePin(PTB, 11,\r\n                    1u);\r\n  PINS_DRV_WritePin(PTC, 10,\r\n                    1u);\r\n  PINS_DRV_WritePin(PTC, 11,\r\n                    1u);\r\n\r\n  /* Turn off LS pwm channels */\r\n  WAIT_AML_WaitUs(TPP_LS_TOGGLE_DELAY);\r\n  PINS_DRV_WritePin(PTB, 8,\r\n                    1U);\r\n  PINS_DRV_WritePin(PTB, 9,\r\n                    0U);\r\n  PINS_DRV_WritePin(PTB, 10,\r\n                    1U);\r\n  PINS_DRV_WritePin(PTB, 11,\r\n                    0U);\r\n  PINS_DRV_WritePin(PTC, 10,\r\n                    1U);\r\n  PINS_DRV_WritePin(PTC, 11,\r\n                    0U);\r\n\r\n  /* Turn on HS pwm channels */\r\n  WAIT_AML_WaitUs(TPP_HS_TOGGLE_DELAY);\r\n  PINS_DRV_WritePin(PTB, 8,\r\n                    0u);\r\n  PINS_DRV_WritePin(PTB, 9,\r\n                    0u);\r\n  PINS_DRV_WritePin(PTB, 10,\r\n                    0u);\r\n  PINS_DRV_WritePin(PTB, 11,\r\n                    0u);\r\n  PINS_DRV_WritePin(PTC, 10,\r\n                    0u);\r\n  PINS_DRV_WritePin(PTC, 11,\r\n                    0u);\r\n\r\n  /* Turn off HS pwm channels */\r\n  WAIT_AML_WaitUs(TPP_HS_TOGGLE_DELAY);\r\n  PINS_DRV_WritePin(PTB, 8,\r\n                    1U);\r\n  PINS_DRV_WritePin(PTB, 9,\r\n                    0U);\r\n  PINS_DRV_WritePin(PTB, 10,\r\n                    1U);\r\n  PINS_DRV_WritePin(PTB, 11,\r\n                    0U);\r\n  PINS_DRV_WritePin(PTC, 10,\r\n                    1U);\r\n  PINS_DRV_WritePin(PTC, 11,\r\n                    0U);\r\n\r\n  /* Turn on HS pwm channels */\r\n  WAIT_AML_WaitUs(TPP_HS_TOGGLE_DELAY);\r\n  PINS_DRV_WritePin(PTB, 8, 0u);\r\n  PINS_DRV_WritePin(PTB, 9, 0u);\r\n  PINS_DRV_WritePin(PTB, 10, 0u);\r\n  PINS_DRV_WritePin(PTB, 11, 0u);\r\n  PINS_DRV_WritePin(PTC, 10, 0u);\r\n  PINS_DRV_WritePin(PTC, 11, 0u);\r\n  PINS_SetMuxModeSel (PORTB, 8, PORT_MUX_ALT2);\r\n  PINS_SetMuxModeSel (PORTB, 9, PORT_MUX_ALT2);\r\n  PINS_SetMuxModeSel (PORTB, 10, PORT_MUX_ALT2);\r\n  PINS_SetMuxModeSel (PORTB, 11, PORT_MUX_ALT2);\r\n  PINS_SetMuxModeSel (PORTC, 10, PORT_MUX_ALT2);\r\n  PINS_SetMuxModeSel (PORTC, 11, PORT_MUX_ALT2);\r\n}\r\n\r\nvoid tpp_interrupt_enable(uint8_t priority)\r\n{\r\n  /* Set GPIPORTE10 interrupt configuration. */\r\n  PINS_DRV_SetPinIntSel(PORTE, 10, PORT_INT_RISING_EDGE);\r\n\r\n  /* Set priority for GPIOPORTE ISR. */\r\n  INT_SYS_SetPriority (PORTE_IRQn, priority);\r\n\r\n  /* Enable GPIPORTE interrupt. */\r\n  INT_SYS_EnableIRQ(PORTE_IRQn);\r\n\r\n  /* Register GPIPORTE10 callback function.*/\r\n  GPI_DRV_InstallCallback(4, 10, &GPIPORTE10_callback);\r\n}\r\n\r\nvoid tpp_interrupt_disable(void)\r\n{\r\n  /* Clear GPIPORTE10 interrupt configuration. */\r\n  PINS_DRV_SetPinIntSel(PORTE, 10, PORT_DMA_INT_DISABLED);\r\n}\r\n"},{"name":"tpp_ic_init.h","type":"header","group":"other","path":"C:\\Users\\diego\\Documents\\GitHub\\Personale\\Progetto_di_tirocinio\\Foc_model_Matlab_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef TPP_IC_INIT_H_\r\n#define TPP_IC_INIT_H_\r\n\r\n/*******************************************************************************\r\n * Includes\r\n *******************************************************************************/\r\n#include \"common_aml.h\"\r\n#include \"gpio_aml.h\"\r\n#include \"tpp.h\"\r\n#include \"ftm_common.h\"\r\n#include \"ftm_pwm_driver.h\"\r\n#include \"pins_driver.h\"\r\n#include \"gpio_irq.h\"\r\n\r\n/*******************************************************************************\r\n * Constants and macros\r\n *******************************************************************************/\r\n/* Frequency of SPI communication with device in Hz. */\r\n#define LPSPI_FREQ                     (1000000)\r\n\r\n/* Device interrupt masks set by MASK0 and MASK1 commands. */\r\n#define INIT_INTERRUPTS0               (13U)\r\n#define INIT_INTERRUPTS1               (14U)\r\n\r\n/* Device configuration set by Mode command. */\r\n#define INIT_MODE                      (8U)\r\n\r\n/* Dead time of device in nanoseconds. */\r\n#define INIT_DEADTIME                  (500U)\r\n\r\ntypedef union {\r\n  uint16_t R;\r\n  struct {\r\n    uint16_t tppIntFlag : 1;\r\n    uint16_t tppClearErr : 1;\r\n    uint16_t tppError : 1;\r\n    uint16_t tppInitDone : 1;\r\n    uint16_t Reserved : 12;\r\n  } B;\r\n} tppStatus_t;\r\n\r\n/* TPP status variables */\r\ntppStatus_t tppStatus;\r\n\r\n/* TPP configuration structure */\r\ntpp_drv_config_t tppDrvConfig;\r\n\r\n/*******************************************************************************\r\n * Global function prototypes\r\n *******************************************************************************/\r\nvoid TPP_tppDrvConfig(void);\r\nvoid TPP_IC_Init(void);\r\nvoid TPP_init_pins(void);\r\nvoid TPP_reconfig_pwm_pins(void);\r\nvoid tpp_interrupt_enable(uint8_t priority);\r\nvoid tpp_interrupt_disable(void);\r\nvoid toggle_restoreTppPwmPins (void);\r\n\r\n#endif\r\n"}],"trace":"{\"model\":\"Foc_model_Matlab\",\"sources\":[\"Foc_model_Matlab.c\",\"Foc_model_Matlab.h\",\"ftm2_ch1_hall_sensor_isr.c\"],\"categoricalProps\":[\"BlockName\",\"ModelElemCategory\",\"StorageClass\",\"ModelDataSource\",\"StorageClassSource\"],\"categoricalValues\":[\"\\u003cS139\\u003e/ADC_IB\",\"\\u003cS2\\u003e/SigConvForSigProp_Variant_Source2_0\",\"InternalData\",\"Default\",\"Constants\",\"ADC_A\",\"DataStores\",\"Volatile\",\"Individual\",\"ADC_B\",\"ADC_IA\",\"Signals\",\"ADC_IB\",\"ADC_IDC\",\"ADC_VDC\",\"CH0S_ERR\",\"CH1S_ERR\",\"CntHall\",\"CntHallValidityIn\",\"DesiredSpeed\",\"Enable\",\"Epsilon_d\",\"Epsilon_q\",\"Epsilon_w\",\"FAULT\",\"GlobalDirection\",\"GlobalHallState\",\"GlobalSpeedCount\",\"GlobalSpeedValidity\",\"HALL_A\",\"HALL_A_controller\",\"HALL_B\",\"HALL_B_controller\",\"HALL_C\",\"HALL_C_controller\",\"HallCntActual\",\"HallCntPrev\",\"HallStateChangeFlag\",\"HallValididyInvalid\",\"I_ab_afterOffset\",\"IaOffset\",\"IbOffset\",\"Id_err\",\"Id_fb\",\"Idc_afterOffset\",\"Iq_fb\",\"Iq_ref_PU\",\"Lambda_d\",\"Lambda_q\",\"Lambda_w\",\"PWM\",\"PWM_Duty_Cycles\",\"PWM_Enable\",\"Rho_d\",\"Rho_q\",\"Rho_w\",\"SC_PDBIF\",\"SpeedError\",\"SpeedMeasured\",\"Speed_Ref\",\"Speed_Ref_PU\",\"Speed_fb\",\"ThetaHalls\"],\"sidPrefixes\":[\"Foc_model_Matlab\",\"hdlsllib\"],\"fileRecords\":{\"0\":{\"records\":[{\"tk\":[39,1,39,9],\"els\":[\"0:3004\"]},{\"tk\":[39,10,39,18],\"els\":[\"0:3004\"]},{\"tk\":[39,19,39,24],\"els\":[\"0:3004\"]},{\"tk\":[39,24,39,25],\"els\":[\"0:3004\"]},{\"tk\":[40,1,40,9],\"els\":[\"0:3007\"]},{\"tk\":[40,10,40,18],\"els\":[\"0:3007\"]},{\"tk\":[40,19,40,24],\"els\":[\"0:3007\"]},{\"tk\":[40,24,40,25],\"els\":[\"0:3007\"]},{\"tk\":[41,1,41,9],\"els\":[\"0:3526\"]},{\"tk\":[41,10,41,18],\"els\":[\"0:3526\"]},{\"tk\":[41,19,41,25],\"els\":[\"0:3526\"]},{\"tk\":[41,25,41,26],\"els\":[\"0:3526\"]},{\"tk\":[42,1,42,9],\"ct\":{\"0\":0}},{\"tk\":[42,10,42,18],\"ct\":{\"0\":0}},{\"tk\":[42,19,42,25],\"ct\":{\"0\":0}},{\"tk\":[42,25,42,26],\"ct\":{\"0\":0}},{\"tk\":[43,1,43,9],\"els\":[\"0:3527\"]},{\"tk\":[43,10,43,18],\"els\":[\"0:3527\"]},{\"tk\":[43,19,43,26],\"els\":[\"0:3527\"]},{\"tk\":[43,26,43,27],\"els\":[\"0:3527\"]},{\"tk\":[44,1,44,9],\"els\":[\"0:3528\"]},{\"tk\":[44,10,44,18],\"els\":[\"0:3528\"]},{\"tk\":[44,19,44,26],\"els\":[\"0:3528\"]},{\"tk\":[44,26,44,27],\"els\":[\"0:3528\"]},{\"tk\":[45,1,45,9],\"els\":[\"0:3568\"]},{\"tk\":[45,10,45,18],\"els\":[\"0:3568\"]},{\"tk\":[45,19,45,27],\"els\":[\"0:3568\"]},{\"tk\":[45,27,45,28],\"els\":[\"0:3568\"]},{\"tk\":[46,1,46,9],\"els\":[\"0:3568\"]},{\"tk\":[46,10,46,18],\"els\":[\"0:3568\"]},{\"tk\":[46,19,46,27],\"els\":[\"0:3568\"]},{\"tk\":[46,27,46,28],\"els\":[\"0:3568\"]},{\"tk\":[47,1,47,9],\"els\":[\"0:1050\"]},{\"tk\":[47,10,47,18],\"els\":[\"0:1050\"]},{\"tk\":[47,19,47,26],\"els\":[\"0:1050\"]},{\"tk\":[47,26,47,27],\"els\":[\"0:1050\"]},{\"tk\":[48,1,48,9],\"ct\":{\"0\":1}},{\"tk\":[48,10,48,18],\"ct\":{\"0\":1}},{\"tk\":[48,19,48,36],\"ct\":{\"0\":1}},{\"tk\":[48,36,48,37],\"ct\":{\"0\":1}},{\"tk\":[50,1,50,9],\"els\":[\"0:1214\"]},{\"tk\":[50,10,50,18],\"els\":[\"0:1214\"]},{\"tk\":[50,19,50,31],\"els\":[\"0:1214\"]},{\"tk\":[50,31,50,32],\"els\":[\"0:1214\"]},{\"tk\":[51,1,51,9],\"els\":[\"0:262\"]},{\"tk\":[51,10,51,19],\"els\":[\"0:262\"]},{\"tk\":[51,20,51,26],\"els\":[\"0:262\"]},{\"tk\":[51,26,51,27],\"els\":[\"0:262\"]},{\"tk\":[52,1,52,9],\"els\":[\"0:4235\"]},{\"tk\":[52,10,52,18],\"els\":[\"0:4235\"]},{\"tk\":[52,19,52,28],\"els\":[\"0:4235\"]},{\"tk\":[52,28,52,29],\"els\":[\"0:4235\"]},{\"tk\":[53,1,53,9],\"els\":[\"0:4233\"]},{\"tk\":[53,10,53,18],\"els\":[\"0:4233\"]},{\"tk\":[53,19,53,28],\"els\":[\"0:4233\"]},{\"tk\":[53,28,53,29],\"els\":[\"0:4233\"]},{\"tk\":[54,1,54,9],\"els\":[\"0:3815\"]},{\"tk\":[54,10,54,18],\"els\":[\"0:3815\"]},{\"tk\":[54,19,54,28],\"els\":[\"0:3815\"]},{\"tk\":[54,28,54,29],\"els\":[\"0:3815\"]},{\"tk\":[55,1,55,9],\"els\":[\"0:1180\"]},{\"tk\":[55,10,55,19],\"els\":[\"0:1180\"]},{\"tk\":[55,20,55,25],\"els\":[\"0:1180\"]},{\"tk\":[55,25,55,26],\"els\":[\"0:1180\"]},{\"tk\":[56,1,56,9],\"els\":[\"0:263\"]},{\"tk\":[56,10,56,17],\"els\":[\"0:263\"]},{\"tk\":[56,18,56,33],\"els\":[\"0:263\"]},{\"tk\":[56,33,56,34],\"els\":[\"0:263\"]},{\"tk\":[57,1,57,9],\"els\":[\"0:264\"]},{\"tk\":[57,10,57,18],\"els\":[\"0:264\"]},{\"tk\":[57,19,57,34],\"els\":[\"0:264\"]},{\"tk\":[57,34,57,35],\"els\":[\"0:264\"]},{\"tk\":[58,1,58,9],\"els\":[\"0:260\"]},{\"tk\":[58,10,58,18],\"els\":[\"0:260\"]},{\"tk\":[58,19,58,35],\"els\":[\"0:260\"]},{\"tk\":[58,35,58,36],\"els\":[\"0:260\"]},{\"tk\":[59,1,59,9],\"els\":[\"0:261\"]},{\"tk\":[59,10,59,18],\"els\":[\"0:261\"]},{\"tk\":[59,19,59,38],\"els\":[\"0:261\"]},{\"tk\":[59,38,59,39],\"els\":[\"0:261\"]},{\"tk\":[60,1,60,9],\"els\":[\"0:1055:481\"]},{\"tk\":[60,10,60,18],\"els\":[\"0:1055:481\"]},{\"tk\":[60,19,60,25],\"els\":[\"0:1055:481\"]},{\"tk\":[60,25,60,26],\"els\":[\"0:1055:481\"]},{\"tk\":[61,1,61,9],\"els\":[\"0:3028\"]},{\"tk\":[61,10,61,18],\"els\":[\"0:3028\"]},{\"tk\":[61,19,61,36],\"els\":[\"0:3028\"]},{\"tk\":[61,36,61,37],\"els\":[\"0:3028\"]},{\"tk\":[62,1,62,9],\"els\":[\"0:1056:481\"]},{\"tk\":[62,10,62,18],\"els\":[\"0:1056:481\"]},{\"tk\":[62,19,62,25],\"els\":[\"0:1056:481\"]},{\"tk\":[62,25,62,26],\"els\":[\"0:1056:481\"]},{\"tk\":[63,1,63,9],\"els\":[\"0:3025:481\"]},{\"tk\":[63,10,63,18],\"els\":[\"0:3025:481\"]},{\"tk\":[63,19,63,36],\"els\":[\"0:3025:481\"]},{\"tk\":[63,36,63,37],\"els\":[\"0:3025:481\"]},{\"tk\":[64,1,64,9],\"els\":[\"0:1067\"]},{\"tk\":[64,10,64,18],\"els\":[\"0:1067\"]},{\"tk\":[64,19,64,25],\"els\":[\"0:1067\"]},{\"tk\":[64,25,64,26],\"els\":[\"0:1067\"]},{\"tk\":[65,1,65,9],\"els\":[\"0:3024:481\"]},{\"tk\":[65,10,65,18],\"els\":[\"0:3024:481\"]},{\"tk\":[65,19,65,36],\"els\":[\"0:3024:481\"]},{\"tk\":[65,36,65,37],\"els\":[\"0:3024:481\"]},{\"tk\":[66,1,66,9],\"els\":[\"0:3284\"]},{\"tk\":[66,10,66,18],\"els\":[\"0:3284\"]},{\"tk\":[66,19,66,32],\"els\":[\"0:3284\"]},{\"tk\":[66,32,66,33],\"els\":[\"0:3284\"]},{\"tk\":[67,1,67,9],\"els\":[\"0:3272\"]},{\"tk\":[67,10,67,18],\"els\":[\"0:3272\"]},{\"tk\":[67,19,67,30],\"els\":[\"0:3272\"]},{\"tk\":[67,30,67,31],\"els\":[\"0:3272\"]},{\"tk\":[68,1,68,9],\"els\":[\"0:259\"]},{\"tk\":[68,10,68,18],\"els\":[\"0:259\"]},{\"tk\":[68,19,68,38],\"els\":[\"0:259\"]},{\"tk\":[68,38,68,39],\"els\":[\"0:259\"]},{\"tk\":[69,1,69,9],\"els\":[\"0:1071:61\"]},{\"tk\":[69,10,69,18],\"els\":[\"0:1071:61\"]},{\"tk\":[69,19,69,38],\"els\":[\"0:1071:61\"]},{\"tk\":[69,38,69,39],\"els\":[\"0:1071:61\"]},{\"tk\":[70,1,70,9],\"els\":[\"0:2693\"]},{\"tk\":[70,10,70,18],\"els\":[\"0:2693\"]},{\"tk\":[70,19,70,35],\"els\":[\"0:2693\"]},{\"tk\":[70,35,70,36],\"els\":[\"0:2693\"]},{\"tk\":[70,36,70,37],\"els\":[\"0:2693\"]},{\"tk\":[70,37,70,38],\"els\":[\"0:2693\"]},{\"tk\":[70,38,70,39],\"els\":[\"0:2693\"]},{\"tk\":[71,1,71,9],\"els\":[\"0:265\"]},{\"tk\":[71,10,71,18],\"els\":[\"0:265\"]},{\"tk\":[71,19,71,27],\"els\":[\"0:265\"]},{\"tk\":[71,27,71,28],\"els\":[\"0:265\"]},{\"tk\":[72,1,72,9],\"els\":[\"0:266\"]},{\"tk\":[72,10,72,18],\"els\":[\"0:266\"]},{\"tk\":[72,19,72,27],\"els\":[\"0:266\"]},{\"tk\":[72,27,72,28],\"els\":[\"0:266\"]},{\"tk\":[73,1,73,9],\"els\":[\"0:4231\"]},{\"tk\":[73,10,73,18],\"els\":[\"0:4231\"]},{\"tk\":[73,19,73,25],\"els\":[\"0:4231\"]},{\"tk\":[73,25,73,26],\"els\":[\"0:4231\"]},{\"tk\":[74,1,74,9],\"els\":[\"0:3667\"]},{\"tk\":[74,10,74,18],\"els\":[\"0:3667\"]},{\"tk\":[74,19,74,24],\"els\":[\"0:3667\"]},{\"tk\":[74,24,74,25],\"els\":[\"0:3667\"]},{\"tk\":[75,1,75,9],\"els\":[\"0:3553\"]},{\"tk\":[75,10,75,18],\"els\":[\"0:3553\"]},{\"tk\":[75,19,75,34],\"els\":[\"0:3553\"]},{\"tk\":[75,34,75,35],\"els\":[\"0:3553\"]},{\"tk\":[76,1,76,9],\"els\":[\"0:3666\"]},{\"tk\":[76,10,76,18],\"els\":[\"0:3666\"]},{\"tk\":[76,19,76,24],\"els\":[\"0:3666\"]},{\"tk\":[76,24,76,25],\"els\":[\"0:3666\"]},{\"tk\":[77,1,77,9],\"els\":[\"0:2443\"]},{\"tk\":[77,10,77,18],\"els\":[\"0:2443\"]},{\"tk\":[77,19,77,28],\"els\":[\"0:2443\"]},{\"tk\":[77,28,77,29],\"els\":[\"0:2443\"]},{\"tk\":[78,1,78,9],\"els\":[\"0:4236\"]},{\"tk\":[78,10,78,18],\"els\":[\"0:4236\"]},{\"tk\":[78,19,78,27],\"els\":[\"0:4236\"]},{\"tk\":[78,27,78,28],\"els\":[\"0:4236\"]},{\"tk\":[79,1,79,9],\"els\":[\"0:4234\"]},{\"tk\":[79,10,79,18],\"els\":[\"0:4234\"]},{\"tk\":[79,19,79,27],\"els\":[\"0:4234\"]},{\"tk\":[79,27,79,28],\"els\":[\"0:4234\"]},{\"tk\":[80,1,80,9],\"els\":[\"0:3813\"]},{\"tk\":[80,10,80,18],\"els\":[\"0:3813\"]},{\"tk\":[80,19,80,27],\"els\":[\"0:3813\"]},{\"tk\":[80,27,80,28],\"els\":[\"0:3813\"]},{\"tk\":[81,1,81,9],\"els\":[\"0:2791\"]},{\"tk\":[81,10,81,18],\"els\":[\"0:2791\"]},{\"tk\":[81,19,81,22],\"els\":[\"0:2791\"]},{\"tk\":[81,22,81,23],\"els\":[\"0:2791\"]},{\"tk\":[81,23,81,24],\"els\":[\"0:2791\"]},{\"tk\":[81,24,81,25],\"els\":[\"0:2791\"]},{\"tk\":[81,25,81,26],\"els\":[\"0:2791\"]},{\"tk\":[82,1,82,9],\"els\":[\"0:3090\"]},{\"tk\":[82,10,82,18],\"els\":[\"0:3090\"]},{\"tk\":[82,19,82,34],\"els\":[\"0:3090\"]},{\"tk\":[82,34,82,35],\"els\":[\"0:3090\"]},{\"tk\":[82,35,82,36],\"els\":[\"0:3090\"]},{\"tk\":[82,36,82,37],\"els\":[\"0:3090\"]},{\"tk\":[82,37,82,38],\"els\":[\"0:3090\"]},{\"tk\":[83,1,83,9],\"els\":[\"0:2830\"]},{\"tk\":[83,10,83,18],\"els\":[\"0:2830\"]},{\"tk\":[83,19,83,29],\"els\":[\"0:2830\"]},{\"tk\":[83,29,83,30],\"els\":[\"0:2830\"]},{\"tk\":[84,1,84,9],\"els\":[\"0:4237\"]},{\"tk\":[84,10,84,18],\"els\":[\"0:4237\"]},{\"tk\":[84,19,84,24],\"els\":[\"0:4237\"]},{\"tk\":[84,24,84,25],\"els\":[\"0:4237\"]},{\"tk\":[85,1,85,9],\"els\":[\"0:4232\"]},{\"tk\":[85,10,85,18],\"els\":[\"0:4232\"]},{\"tk\":[85,19,85,24],\"els\":[\"0:4232\"]},{\"tk\":[85,24,85,25],\"els\":[\"0:4232\"]},{\"tk\":[86,1,86,9],\"els\":[\"0:3814\"]},{\"tk\":[86,10,86,18],\"els\":[\"0:3814\"]},{\"tk\":[86,19,86,24],\"els\":[\"0:3814\"]},{\"tk\":[86,24,86,25],\"els\":[\"0:3814\"]},{\"tk\":[87,1,87,9],\"els\":[\"0:3568\"]},{\"tk\":[87,10,87,18],\"els\":[\"0:3568\"]},{\"tk\":[87,19,87,27],\"els\":[\"0:3568\"]},{\"tk\":[87,27,87,28],\"els\":[\"0:3568\"]},{\"tk\":[88,1,88,9],\"els\":[\"0:2514\"]},{\"tk\":[88,10,88,18],\"els\":[\"0:2514\"]},{\"tk\":[88,19,88,29],\"els\":[\"0:2514\"]},{\"tk\":[88,29,88,30],\"els\":[\"0:2514\"]},{\"tk\":[89,1,89,9],\"els\":[\"0:2654\"]},{\"tk\":[89,10,89,18],\"els\":[\"0:2654\"]},{\"tk\":[89,19,89,32],\"els\":[\"0:2654\"]},{\"tk\":[89,32,89,33],\"els\":[\"0:2654\"]},{\"tk\":[90,1,90,9],\"els\":[\"0:2521\"]},{\"tk\":[90,10,90,18],\"els\":[\"0:2521\"]},{\"tk\":[90,19,90,28],\"els\":[\"0:2521\"]},{\"tk\":[90,28,90,29],\"els\":[\"0:2521\"]},{\"tk\":[91,1,91,9],\"els\":[\"0:2444\"]},{\"tk\":[91,10,91,18],\"els\":[\"0:2444\"]},{\"tk\":[91,19,91,31],\"els\":[\"0:2444\"]},{\"tk\":[91,31,91,32],\"els\":[\"0:2444\"]},{\"tk\":[92,1,92,9],\"els\":[\"0:3177\"]},{\"tk\":[92,10,92,18],\"els\":[\"0:3177\"]},{\"tk\":[92,19,92,27],\"els\":[\"0:3177\"]},{\"tk\":[92,27,92,28],\"els\":[\"0:3177\"]},{\"tk\":[93,1,93,9],\"els\":[\"0:2687:159\"]},{\"tk\":[93,10,93,18],\"els\":[\"0:2687:159\"]},{\"tk\":[93,19,93,29],\"els\":[\"0:2687:159\"]},{\"tk\":[93,29,93,30],\"els\":[\"0:2687:159\"]},{\"tk\":[125,3,125,28],\"els\":[\"0:3567\"]},{\"tk\":[125,28,125,29],\"els\":[\"0:3567\"]},{\"tk\":[125,29,125,33],\"els\":[\"0:3567\"]},{\"tk\":[125,33,125,34],\"els\":[\"0:3567\"]},{\"tk\":[125,35,125,39],\"els\":[\"0:3567\"]},{\"tk\":[125,39,125,40],\"els\":[\"0:3567\"]},{\"tk\":[125,40,125,41],\"els\":[\"0:3567\"]},{\"tk\":[144,3,144,21],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[144,22,144,33],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[146,3,146,21],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[146,22,146,33],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[162,5,162,30],\"els\":[\"0:3530\"]},{\"tk\":[162,30,162,31],\"els\":[\"0:3530\"]},{\"tk\":[162,31,162,35],\"els\":[\"0:3530\"]},{\"tk\":[162,35,162,36],\"els\":[\"0:3530\"]},{\"tk\":[162,37,162,42],\"els\":[\"0:3530\"]},{\"tk\":[162,42,162,43],\"els\":[\"0:3530\"]},{\"tk\":[162,43,162,44],\"els\":[\"0:3530\"]},{\"tk\":[165,5,165,6],\"els\":[\"0:3526\"]},{\"tk\":[166,7,166,15],\"els\":[\"0:3526\"]},{\"tk\":[166,16,166,22],\"els\":[\"0:3526\"]},{\"tk\":[166,22,166,23],\"els\":[\"0:3526\"]},{\"tk\":[169,7,169,27],\"els\":[\"0:3526\"]},{\"tk\":[169,27,169,28],\"els\":[\"0:3526\"]},{\"tk\":[169,28,169,29],\"els\":[\"0:3526\"]},{\"tk\":[169,29,169,30],\"els\":[\"0:3526\"]},{\"tk\":[169,30,169,31],\"els\":[\"0:3526\"]},{\"tk\":[170,7,170,28],\"els\":[\"0:3526\"]},{\"tk\":[170,28,170,29],\"els\":[\"0:3526\"]},{\"tk\":[170,29,170,30],\"els\":[\"0:3526\"]},{\"tk\":[170,30,170,31],\"els\":[\"0:3526\"]},{\"tk\":[170,32,170,33],\"els\":[\"0:3526\"]},{\"tk\":[170,33,170,34],\"els\":[\"0:3526\"]},{\"tk\":[170,35,170,36],\"els\":[\"0:3526\"]},{\"tk\":[170,36,170,42],\"els\":[\"0:3526\"]},{\"tk\":[170,42,170,43],\"els\":[\"0:3526\"]},{\"tk\":[170,43,170,44],\"els\":[\"0:3526\"]},{\"tk\":[171,7,171,13],\"els\":[\"0:3526\"]},{\"tk\":[171,14,171,15],\"els\":[\"0:3526\"]},{\"tk\":[171,16,171,22],\"els\":[\"0:3526\"]},{\"tk\":[171,22,171,23],\"els\":[\"0:3526\"]},{\"tk\":[172,5,172,6],\"els\":[\"0:3526\"]},{\"tk\":[175,5,175,11],\"els\":[\"0:3524\"]},{\"tk\":[175,12,175,13],\"els\":[\"0:3524\"]},{\"tk\":[175,14,175,32],\"els\":[\"0:3524\"]},{\"tk\":[175,32,175,33],\"els\":[\"0:3524\"]},{\"tk\":[175,33,175,44],\"els\":[\"0:3524\"]},{\"tk\":[175,44,175,45],\"els\":[\"0:3524\"]},{\"tk\":[178,5,178,6],\"els\":[\"0:3528\"]},{\"tk\":[179,7,179,15],\"els\":[\"0:3528\"]},{\"tk\":[179,16,179,22],\"els\":[\"0:3528\"]},{\"tk\":[179,22,179,23],\"els\":[\"0:3528\"]},{\"tk\":[182,7,182,27],\"els\":[\"0:3528\"]},{\"tk\":[182,27,182,28],\"els\":[\"0:3528\"]},{\"tk\":[182,28,182,29],\"els\":[\"0:3528\"]},{\"tk\":[182,29,182,30],\"els\":[\"0:3528\"]},{\"tk\":[182,30,182,31],\"els\":[\"0:3528\"]},{\"tk\":[183,7,183,28],\"els\":[\"0:3528\"]},{\"tk\":[183,28,183,29],\"els\":[\"0:3528\"]},{\"tk\":[183,29,183,30],\"els\":[\"0:3528\"]},{\"tk\":[183,30,183,31],\"els\":[\"0:3528\"]},{\"tk\":[183,32,183,33],\"els\":[\"0:3528\"]},{\"tk\":[183,33,183,34],\"els\":[\"0:3528\"]},{\"tk\":[183,35,183,36],\"els\":[\"0:3528\"]},{\"tk\":[183,36,183,42],\"els\":[\"0:3528\"]},{\"tk\":[183,42,183,43],\"els\":[\"0:3528\"]},{\"tk\":[183,43,183,44],\"els\":[\"0:3528\"]},{\"tk\":[184,7,184,14],\"els\":[\"0:3528\"]},{\"tk\":[184,15,184,16],\"els\":[\"0:3528\"]},{\"tk\":[184,17,184,23],\"els\":[\"0:3528\"]},{\"tk\":[184,23,184,24],\"els\":[\"0:3528\"]},{\"tk\":[185,5,185,6],\"els\":[\"0:3528\"]},{\"tk\":[188,5,188,6],\"els\":[\"0:3527\"]},{\"tk\":[189,7,189,15],\"els\":[\"0:3527\"]},{\"tk\":[189,16,189,22],\"els\":[\"0:3527\"]},{\"tk\":[189,22,189,23],\"els\":[\"0:3527\"]},{\"tk\":[192,7,192,27],\"els\":[\"0:3527\"]},{\"tk\":[192,27,192,28],\"els\":[\"0:3527\"]},{\"tk\":[192,28,192,29],\"els\":[\"0:3527\"]},{\"tk\":[192,29,192,30],\"els\":[\"0:3527\"]},{\"tk\":[192,30,192,31],\"els\":[\"0:3527\"]},{\"tk\":[193,7,193,28],\"els\":[\"0:3527\"]},{\"tk\":[193,28,193,29],\"els\":[\"0:3527\"]},{\"tk\":[193,29,193,30],\"els\":[\"0:3527\"]},{\"tk\":[193,30,193,31],\"els\":[\"0:3527\"]},{\"tk\":[193,32,193,33],\"els\":[\"0:3527\"]},{\"tk\":[193,33,193,34],\"els\":[\"0:3527\"]},{\"tk\":[193,35,193,36],\"els\":[\"0:3527\"]},{\"tk\":[193,36,193,42],\"els\":[\"0:3527\"]},{\"tk\":[193,42,193,43],\"els\":[\"0:3527\"]},{\"tk\":[193,43,193,44],\"els\":[\"0:3527\"]},{\"tk\":[194,7,194,14],\"els\":[\"0:3527\"]},{\"tk\":[194,15,194,16],\"els\":[\"0:3527\"]},{\"tk\":[194,17,194,23],\"els\":[\"0:3527\"]},{\"tk\":[194,23,194,24],\"els\":[\"0:3527\"]},{\"tk\":[195,5,195,6],\"els\":[\"0:3527\"]},{\"tk\":[198,5,198,32],\"els\":[\"0:3531\"]},{\"tk\":[198,32,198,33],\"els\":[\"0:3531\"]},{\"tk\":[198,33,198,40],\"els\":[\"0:3531\"]},{\"tk\":[198,40,198,41],\"els\":[\"0:3531\"]},{\"tk\":[198,42,198,49],\"els\":[\"0:3531\"]},{\"tk\":[198,49,198,50],\"els\":[\"0:3531\"]},{\"tk\":[205,5,205,32],\"els\":[\"0:2552\",\"0:3556\"]},{\"tk\":[205,32,205,33],\"els\":[\"0:2552\",\"0:3556\"]},{\"tk\":[205,33,205,34],\"els\":[\"0:2552\",\"0:3556\"]},{\"tk\":[226,3,226,8],\"els\":[\"0:3493\",\"0:3495\"]},{\"tk\":[226,9,226,10],\"els\":[\"0:3493\",\"0:3495\"]},{\"tk\":[226,11,226,15],\"els\":[\"0:3493\",\"0:3495\"]},{\"tk\":[226,15,226,16],\"els\":[\"0:3493\",\"0:3495\"]},{\"tk\":[229,3,229,20],\"els\":[\"0:3494\"]},{\"tk\":[229,20,229,21],\"els\":[\"0:3494\"]},{\"tk\":[229,21,229,29],\"els\":[\"0:3494\"]},{\"tk\":[229,29,229,30],\"els\":[\"0:3494\"]},{\"tk\":[229,30,229,31],\"els\":[\"0:3494\"]},{\"tk\":[232,3,232,25],\"els\":[\"0:3496\"]},{\"tk\":[232,25,232,26],\"els\":[\"0:3496\"]},{\"tk\":[232,26,232,27],\"els\":[\"0:3496\"]},{\"tk\":[232,27,232,39],\"els\":[\"0:3496\"]},{\"tk\":[232,39,232,40],\"els\":[\"0:3496\"]},{\"tk\":[232,41,232,53],\"els\":[\"0:3496\"]},{\"tk\":[232,53,232,54],\"els\":[\"0:3496\"]},{\"tk\":[232,54,232,55],\"els\":[\"0:3496\"]},{\"tk\":[293,3,293,17],\"els\":[\"0:3552#out:1\"]},{\"tk\":[293,18,293,19],\"els\":[\"0:3552\"]},{\"tk\":[293,21,293,22],\"els\":[\"0:3540\"]},{\"tk\":[293,31,293,38],\"els\":[\"0:3540\"]},{\"tk\":[293,39,293,40],\"els\":[\"0:3537\"]},{\"tk\":[293,41,293,46],\"els\":[\"0:3537\",\"0:3534\"]},{\"tk\":[293,48,293,49],\"els\":[\"0:3552\"]},{\"tk\":[293,50,293,63],\"els\":[\"0:3552\",\"0:3555\"]},{\"tk\":[299,3,299,18],\"els\":[\"0:3553#out:1\",\"0:3553\"]},{\"tk\":[299,19,299,20],\"els\":[\"0:3553#out:1\",\"0:3553\"]},{\"tk\":[299,21,299,22],\"els\":[\"0:3553#out:1\",\"0:3553\",\"0:3539\"]},{\"tk\":[299,22,299,30],\"els\":[\"0:3553#out:1\",\"0:3553\"]},{\"tk\":[299,30,299,31],\"els\":[\"0:3553#out:1\",\"0:3553\"]},{\"tk\":[299,31,299,38],\"els\":[\"0:3553#out:1\",\"0:3553\",\"0:3539\"]},{\"tk\":[299,39,299,40],\"els\":[\"0:3553#out:1\",\"0:3553\"]},{\"tk\":[299,41,299,48],\"els\":[\"0:3553#out:1\",\"0:3553\",\"0:3535\"]},{\"tk\":[299,48,299,49],\"els\":[\"0:3553#out:1\",\"0:3553\"]},{\"tk\":[305,3,305,5],\"els\":[\"0:3538\"]},{\"tk\":[305,8,305,22],\"els\":[\"0:3552#out:1\"]},{\"tk\":[305,23,305,24],\"els\":[\"0:3538\"]},{\"tk\":[305,25,305,29],\"els\":[\"0:3538\"]},{\"tk\":[305,31,305,33],\"els\":[\"0:3538\"]},{\"tk\":[305,35,305,49],\"els\":[\"0:3552#out:1\"]},{\"tk\":[305,50,305,51],\"els\":[\"0:3538\"]},{\"tk\":[305,52,305,57],\"els\":[\"0:3538\"]},{\"tk\":[305,59,305,61],\"els\":[\"0:3538\"]},{\"tk\":[305,63,305,78],\"els\":[\"0:3551\"]},{\"tk\":[305,79,305,80],\"els\":[\"0:3551\"]},{\"tk\":[306,8,306,22],\"els\":[\"0:3551\",\"0:3554\"]},{\"tk\":[306,23,306,24],\"els\":[\"0:3538\"]},{\"tk\":[306,25,306,29],\"els\":[\"0:3538\"]},{\"tk\":[313,5,313,7],\"els\":[\"0:3550\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[313,9,313,10],\"els\":[\"0:3550\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[313,10,313,15],\"els\":[\"0:3550\",\"0:3541\",\"0:3538\",\"0:3542\",\"0:3543\"]},{\"tk\":[318,7,318,24],\"els\":[\"0:3547\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[318,24,318,25],\"els\":[\"0:3547\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[318,25,318,33],\"els\":[\"0:3547\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[318,33,318,34],\"els\":[\"0:3547\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[318,34,318,35],\"els\":[\"0:3547\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[323,7,323,12],\"els\":[\"0:3546\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\",\"0:3548\"]},{\"tk\":[323,13,323,14],\"els\":[\"0:3546\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\",\"0:3548\"]},{\"tk\":[323,15,323,19],\"els\":[\"0:3546\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\",\"0:3548\"]},{\"tk\":[323,19,323,20],\"els\":[\"0:3546\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\",\"0:3548\"]},{\"tk\":[326,7,326,29],\"els\":[\"0:3549\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[326,29,326,30],\"els\":[\"0:3549\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[326,30,326,31],\"els\":[\"0:3549\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[326,31,326,43],\"els\":[\"0:3549\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[326,43,326,44],\"els\":[\"0:3549\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[326,45,326,57],\"els\":[\"0:3549\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[326,57,326,58],\"els\":[\"0:3549\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[326,58,326,59],\"els\":[\"0:3549\",\"0:3544\",\"0:3550\",\"0:3545\",\"0:3541\",\"0:3538\",\"0:3542\"]},{\"tk\":[348,17,348,18],\"els\":[\"0:2687:261\"]},{\"tk\":[348,19,348,27],\"els\":[\"0:2687:261\",\"0:2687:260\"]},{\"tk\":[361,17,361,18],\"els\":[\"0:2687:265\"]},{\"tk\":[361,19,361,27],\"els\":[\"0:2687:265\",\"0:2687:264\"]},{\"tk\":[374,17,374,18],\"els\":[\"0:2687:269\"]},{\"tk\":[374,19,374,23],\"els\":[\"0:2687:269\",\"0:2687:268\"]},{\"tk\":[387,17,387,18],\"els\":[\"0:2687:273\"]},{\"tk\":[387,19,387,27],\"els\":[\"0:2687:273\",\"0:2687:272\"]},{\"tk\":[400,17,400,18],\"els\":[\"0:2687:277\"]},{\"tk\":[400,19,400,27],\"els\":[\"0:2687:277\",\"0:2687:276\"]},{\"tk\":[415,17,415,18],\"els\":[\"0:2687:435\"]},{\"tk\":[415,19,415,23],\"els\":[\"0:2687:435\",\"0:2687:434\"]},{\"tk\":[424,3,424,19],\"els\":[\"0:3074\"]},{\"tk\":[424,20,424,21],\"els\":[\"0:3074\"]},{\"tk\":[424,21,424,24],\"els\":[\"0:3074\"]},{\"tk\":[424,24,424,25],\"els\":[\"0:3074\"]},{\"tk\":[424,26,424,41],\"els\":[\"0:3074\"]},{\"tk\":[424,41,424,42],\"els\":[\"0:3074\"]},{\"tk\":[424,43,424,47],\"els\":[\"0:3074\"]},{\"tk\":[424,47,424,48],\"els\":[\"0:3074\"]},{\"tk\":[424,48,424,49],\"els\":[\"0:3074\"]},{\"tk\":[427,3,427,21],\"els\":[\"0:3074\"]},{\"tk\":[427,22,427,23],\"els\":[\"0:3074\"]},{\"tk\":[427,23,427,28],\"els\":[\"0:3074\"]},{\"tk\":[427,28,427,29],\"els\":[\"0:3074\"]},{\"tk\":[427,30,427,31],\"els\":[\"0:3074\"]},{\"tk\":[427,31,427,32],\"els\":[\"0:3074\"]},{\"tk\":[427,33,427,46],\"els\":[\"0:3074\"]},{\"tk\":[427,46,427,47],\"els\":[\"0:3074\"]},{\"tk\":[427,47,427,48],\"els\":[\"0:3074\"]},{\"tk\":[430,3,430,19],\"els\":[\"0:3074\"]},{\"tk\":[430,20,430,21],\"els\":[\"0:3074\"]},{\"tk\":[430,21,430,24],\"els\":[\"0:3074\"]},{\"tk\":[430,24,430,25],\"els\":[\"0:3074\"]},{\"tk\":[430,26,430,41],\"els\":[\"0:3074\"]},{\"tk\":[430,41,430,42],\"els\":[\"0:3074\"]},{\"tk\":[430,43,430,47],\"els\":[\"0:3074\"]},{\"tk\":[430,47,430,48],\"els\":[\"0:3074\"]},{\"tk\":[430,48,430,49],\"els\":[\"0:3074\"]},{\"tk\":[433,3,433,21],\"els\":[\"0:3074\"]},{\"tk\":[433,22,433,23],\"els\":[\"0:3074\"]},{\"tk\":[433,23,433,28],\"els\":[\"0:3074\"]},{\"tk\":[433,28,433,29],\"els\":[\"0:3074\"]},{\"tk\":[433,30,433,31],\"els\":[\"0:3074\"]},{\"tk\":[433,31,433,32],\"els\":[\"0:3074\"]},{\"tk\":[433,33,433,46],\"els\":[\"0:3074\"]},{\"tk\":[433,46,433,47],\"els\":[\"0:3074\"]},{\"tk\":[433,47,433,48],\"els\":[\"0:3074\"]},{\"tk\":[436,3,436,19],\"els\":[\"0:3074\"]},{\"tk\":[436,20,436,21],\"els\":[\"0:3074\"]},{\"tk\":[436,21,436,24],\"els\":[\"0:3074\"]},{\"tk\":[436,24,436,25],\"els\":[\"0:3074\"]},{\"tk\":[436,26,436,41],\"els\":[\"0:3074\"]},{\"tk\":[436,41,436,42],\"els\":[\"0:3074\"]},{\"tk\":[436,43,436,47],\"els\":[\"0:3074\"]},{\"tk\":[436,47,436,48],\"els\":[\"0:3074\"]},{\"tk\":[436,48,436,49],\"els\":[\"0:3074\"]},{\"tk\":[439,3,439,21],\"els\":[\"0:3074\"]},{\"tk\":[439,22,439,23],\"els\":[\"0:3074\"]},{\"tk\":[439,23,439,28],\"els\":[\"0:3074\"]},{\"tk\":[439,28,439,29],\"els\":[\"0:3074\"]},{\"tk\":[439,30,439,32],\"els\":[\"0:3074\"]},{\"tk\":[439,32,439,33],\"els\":[\"0:3074\"]},{\"tk\":[439,34,439,47],\"els\":[\"0:3074\"]},{\"tk\":[439,47,439,48],\"els\":[\"0:3074\"]},{\"tk\":[439,48,439,49],\"els\":[\"0:3074\"]},{\"tk\":[442,3,442,19],\"els\":[\"0:3074\"]},{\"tk\":[442,20,442,21],\"els\":[\"0:3074\"]},{\"tk\":[442,21,442,24],\"els\":[\"0:3074\"]},{\"tk\":[442,24,442,25],\"els\":[\"0:3074\"]},{\"tk\":[442,26,442,41],\"els\":[\"0:3074\"]},{\"tk\":[442,41,442,42],\"els\":[\"0:3074\"]},{\"tk\":[442,43,442,47],\"els\":[\"0:3074\"]},{\"tk\":[442,47,442,48],\"els\":[\"0:3074\"]},{\"tk\":[442,48,442,49],\"els\":[\"0:3074\"]},{\"tk\":[445,3,445,21],\"els\":[\"0:3074\"]},{\"tk\":[445,22,445,23],\"els\":[\"0:3074\"]},{\"tk\":[445,23,445,28],\"els\":[\"0:3074\"]},{\"tk\":[445,28,445,29],\"els\":[\"0:3074\"]},{\"tk\":[445,30,445,32],\"els\":[\"0:3074\"]},{\"tk\":[445,32,445,33],\"els\":[\"0:3074\"]},{\"tk\":[445,34,445,47],\"els\":[\"0:3074\"]},{\"tk\":[445,47,445,48],\"els\":[\"0:3074\"]},{\"tk\":[445,48,445,49],\"els\":[\"0:3074\"]},{\"tk\":[448,3,448,19],\"els\":[\"0:3074\"]},{\"tk\":[448,20,448,21],\"els\":[\"0:3074\"]},{\"tk\":[448,21,448,24],\"els\":[\"0:3074\"]},{\"tk\":[448,24,448,25],\"els\":[\"0:3074\"]},{\"tk\":[448,26,448,41],\"els\":[\"0:3074\"]},{\"tk\":[448,41,448,42],\"els\":[\"0:3074\"]},{\"tk\":[448,43,448,47],\"els\":[\"0:3074\"]},{\"tk\":[448,47,448,48],\"els\":[\"0:3074\"]},{\"tk\":[448,48,448,49],\"els\":[\"0:3074\"]},{\"tk\":[451,3,451,21],\"els\":[\"0:3074\"]},{\"tk\":[451,22,451,23],\"els\":[\"0:3074\"]},{\"tk\":[451,23,451,28],\"els\":[\"0:3074\"]},{\"tk\":[451,28,451,29],\"els\":[\"0:3074\"]},{\"tk\":[451,30,451,32],\"els\":[\"0:3074\"]},{\"tk\":[451,32,451,33],\"els\":[\"0:3074\"]},{\"tk\":[451,34,451,47],\"els\":[\"0:3074\"]},{\"tk\":[451,47,451,48],\"els\":[\"0:3074\"]},{\"tk\":[451,48,451,49],\"els\":[\"0:3074\"]},{\"tk\":[454,3,454,19],\"els\":[\"0:3074\"]},{\"tk\":[454,20,454,21],\"els\":[\"0:3074\"]},{\"tk\":[454,21,454,24],\"els\":[\"0:3074\"]},{\"tk\":[454,24,454,25],\"els\":[\"0:3074\"]},{\"tk\":[454,26,454,41],\"els\":[\"0:3074\"]},{\"tk\":[454,41,454,42],\"els\":[\"0:3074\"]},{\"tk\":[454,43,454,47],\"els\":[\"0:3074\"]},{\"tk\":[454,47,454,48],\"els\":[\"0:3074\"]},{\"tk\":[454,48,454,49],\"els\":[\"0:3074\"]},{\"tk\":[457,3,457,21],\"els\":[\"0:3074\"]},{\"tk\":[457,22,457,23],\"els\":[\"0:3074\"]},{\"tk\":[457,23,457,28],\"els\":[\"0:3074\"]},{\"tk\":[457,28,457,29],\"els\":[\"0:3074\"]},{\"tk\":[457,30,457,32],\"els\":[\"0:3074\"]},{\"tk\":[457,32,457,33],\"els\":[\"0:3074\"]},{\"tk\":[457,34,457,47],\"els\":[\"0:3074\"]},{\"tk\":[457,47,457,48],\"els\":[\"0:3074\"]},{\"tk\":[457,48,457,49],\"els\":[\"0:3074\"]},{\"tk\":[460,3,460,32],\"els\":[\"0:3074\"]},{\"tk\":[460,33,460,34],\"els\":[\"0:3074\"]},{\"tk\":[460,34,460,37],\"els\":[\"0:3074\"]},{\"tk\":[460,37,460,38],\"els\":[\"0:3074\"]},{\"tk\":[460,39,460,47],\"els\":[\"0:3074\"]},{\"tk\":[460,47,460,48],\"els\":[\"0:3074\"]},{\"tk\":[460,49,460,53],\"els\":[\"0:3074\"]},{\"tk\":[460,53,460,54],\"els\":[\"0:3074\"]},{\"tk\":[460,55,460,67],\"els\":[\"0:3074\"]},{\"tk\":[460,67,460,68],\"els\":[\"0:3074\"]},{\"tk\":[460,69,460,70],\"els\":[\"0:3074\"]},{\"tk\":[460,70,460,71],\"els\":[\"0:3074\"]},{\"tk\":[460,72,460,73],\"els\":[\"0:3074\"]},{\"tk\":[460,73,460,74],\"els\":[\"0:3074\"]},{\"tk\":[460,74,460,75],\"els\":[\"0:3074\"]},{\"tk\":[463,3,463,19],\"els\":[\"0:3074\"]},{\"tk\":[463,20,463,21],\"els\":[\"0:3074\"]},{\"tk\":[463,21,463,24],\"els\":[\"0:3074\"]},{\"tk\":[463,24,463,25],\"els\":[\"0:3074\"]},{\"tk\":[463,26,463,34],\"els\":[\"0:3074\"]},{\"tk\":[463,34,463,35],\"els\":[\"0:3074\"]},{\"tk\":[463,36,463,40],\"els\":[\"0:3074\"]},{\"tk\":[463,40,463,41],\"els\":[\"0:3074\"]},{\"tk\":[463,41,463,42],\"els\":[\"0:3074\"]},{\"tk\":[466,3,466,15],\"els\":[\"0:3074\"]},{\"tk\":[466,16,466,17],\"els\":[\"0:3074\"]},{\"tk\":[466,17,466,25],\"els\":[\"0:3074\"]},{\"tk\":[466,25,466,26],\"els\":[\"0:3074\"]},{\"tk\":[466,27,466,28],\"els\":[\"0:3074\"]},{\"tk\":[466,28,466,53],\"els\":[\"0:3074\"]},{\"tk\":[466,53,466,54],\"els\":[\"0:3074\"]},{\"tk\":[466,55,466,56],\"els\":[\"0:3074\"]},{\"tk\":[466,56,466,71],\"els\":[\"0:3074\"]},{\"tk\":[466,71,466,72],\"els\":[\"0:3074\"]},{\"tk\":[466,72,466,73],\"els\":[\"0:3074\"]},{\"tk\":[467,3,467,27],\"els\":[\"0:3074\"]},{\"tk\":[467,27,467,28],\"els\":[\"0:3074\"]},{\"tk\":[467,28,467,32],\"els\":[\"0:3074\"]},{\"tk\":[467,32,467,33],\"els\":[\"0:3074\"]},{\"tk\":[467,34,467,35],\"els\":[\"0:3074\"]},{\"tk\":[467,35,467,36],\"els\":[\"0:3074\"]},{\"tk\":[467,37,467,42],\"els\":[\"0:3074\"]},{\"tk\":[467,42,467,43],\"els\":[\"0:3074\"]},{\"tk\":[467,43,467,44],\"els\":[\"0:3074\"]},{\"tk\":[468,3,468,27],\"els\":[\"0:3074\"]},{\"tk\":[468,27,468,28],\"els\":[\"0:3074\"]},{\"tk\":[468,28,468,32],\"els\":[\"0:3074\"]},{\"tk\":[468,32,468,33],\"els\":[\"0:3074\"]},{\"tk\":[468,34,468,35],\"els\":[\"0:3074\"]},{\"tk\":[468,35,468,36],\"els\":[\"0:3074\"]},{\"tk\":[468,37,468,42],\"els\":[\"0:3074\"]},{\"tk\":[468,42,468,43],\"els\":[\"0:3074\"]},{\"tk\":[468,43,468,44],\"els\":[\"0:3074\"]},{\"tk\":[469,3,469,27],\"els\":[\"0:3074\"]},{\"tk\":[469,27,469,28],\"els\":[\"0:3074\"]},{\"tk\":[469,28,469,32],\"els\":[\"0:3074\"]},{\"tk\":[469,32,469,33],\"els\":[\"0:3074\"]},{\"tk\":[469,34,469,35],\"els\":[\"0:3074\"]},{\"tk\":[469,35,469,36],\"els\":[\"0:3074\"]},{\"tk\":[469,37,469,42],\"els\":[\"0:3074\"]},{\"tk\":[469,42,469,43],\"els\":[\"0:3074\"]},{\"tk\":[469,43,469,44],\"els\":[\"0:3074\"]},{\"tk\":[472,3,472,4],\"els\":[\"0:3581\"]},{\"tk\":[474,5,474,34],\"els\":[\"0:3581\"]},{\"tk\":[474,34,474,35],\"els\":[\"0:3581\"]},{\"tk\":[474,35,474,38],\"els\":[\"0:3581\"]},{\"tk\":[474,38,474,39],\"els\":[\"0:3581\"]},{\"tk\":[474,40,474,49],\"els\":[\"0:3581\"]},{\"tk\":[474,49,474,50],\"els\":[\"0:3581\"]},{\"tk\":[474,51,474,55],\"els\":[\"0:3581\"]},{\"tk\":[474,55,474,56],\"els\":[\"0:3581\"]},{\"tk\":[474,57,474,69],\"els\":[\"0:3581\"]},{\"tk\":[474,69,474,70],\"els\":[\"0:3581\"]},{\"tk\":[474,71,474,72],\"els\":[\"0:3581\"]},{\"tk\":[474,72,474,73],\"els\":[\"0:3581\"]},{\"tk\":[474,74,474,75],\"els\":[\"0:3581\"]},{\"tk\":[474,75,474,76],\"els\":[\"0:3581\"]},{\"tk\":[474,76,474,77],\"els\":[\"0:3581\"]},{\"tk\":[475,3,475,4],\"els\":[\"0:3581\"]},{\"tk\":[477,3,477,16],\"els\":[\"0:3581\"]},{\"tk\":[477,16,477,17],\"els\":[\"0:3581\"]},{\"tk\":[477,17,477,18],\"els\":[\"0:3581\"]},{\"tk\":[477,18,477,19],\"els\":[\"0:3581\"]},{\"tk\":[480,3,480,22],\"els\":[\"0:2687:431:343\"]},{\"tk\":[480,23,480,43],\"els\":[\"0:2687:431:343\"]},{\"tk\":[480,44,480,45],\"els\":[\"0:2687:431:343\"]},{\"tk\":[480,46,480,50],\"els\":[\"0:2687:431:343\"]},{\"tk\":[483,3,483,22],\"els\":[\"0:2687:431:342\"]},{\"tk\":[483,23,483,42],\"els\":[\"0:2687:431:342\"]},{\"tk\":[483,43,483,44],\"els\":[\"0:2687:431:342\"]},{\"tk\":[483,45,483,49],\"els\":[\"0:2687:431:342\"]},{\"tk\":[486,3,486,22],\"els\":[\"0:4204\"]},{\"tk\":[486,23,486,54],\"els\":[\"0:4204\"]},{\"tk\":[486,55,486,56],\"els\":[\"0:4204\"]},{\"tk\":[486,57,486,58],\"els\":[\"0:4204\"]},{\"tk\":[491,3,491,19],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[491,19,491,20],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[491,20,491,23],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[491,23,491,24],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[491,25,491,33],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[491,33,491,34],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[491,35,491,39],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[491,39,491,40],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[491,40,491,41],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[500,3,500,22],\"els\":[\"0:2687:431:343\"]},{\"tk\":[500,23,500,43],\"els\":[\"0:2687:431:343\"]},{\"tk\":[500,44,500,45],\"els\":[\"0:2687:431:343\"]},{\"tk\":[500,46,500,50],\"els\":[\"0:2687:431:343\"]},{\"tk\":[503,3,503,22],\"els\":[\"0:2687:431:342\"]},{\"tk\":[503,23,503,42],\"els\":[\"0:2687:431:342\"]},{\"tk\":[503,43,503,44],\"els\":[\"0:2687:431:342\"]},{\"tk\":[503,45,503,49],\"els\":[\"0:2687:431:342\"]},{\"tk\":[506,3,506,22],\"els\":[\"0:4204\"]},{\"tk\":[506,23,506,54],\"els\":[\"0:4204\"]},{\"tk\":[506,55,506,56],\"els\":[\"0:4204\"]},{\"tk\":[506,57,506,58],\"els\":[\"0:4204\"]},{\"tk\":[507,3,507,22],\"els\":[\"0:4204\"]},{\"tk\":[507,23,507,52],\"els\":[\"0:4204\"]},{\"tk\":[507,53,507,54],\"els\":[\"0:4204\"]},{\"tk\":[507,55,507,59],\"els\":[\"0:4204\"]},{\"tk\":[510,3,510,22],\"els\":[\"0:4227\"]},{\"tk\":[510,23,510,54],\"els\":[\"0:4227\"]},{\"tk\":[510,55,510,56],\"els\":[\"0:4227\"]},{\"tk\":[510,57,510,58],\"els\":[\"0:4227\"]},{\"tk\":[511,3,511,22],\"els\":[\"0:4227\"]},{\"tk\":[511,23,511,54],\"els\":[\"0:4227\"]},{\"tk\":[511,55,511,56],\"els\":[\"0:4227\"]},{\"tk\":[511,57,511,61],\"els\":[\"0:4227\"]},{\"tk\":[520,3,520,22],\"els\":[\"0:4204\"]},{\"tk\":[520,23,520,54],\"els\":[\"0:4204\"]},{\"tk\":[520,55,520,56],\"els\":[\"0:4204\"]},{\"tk\":[520,57,520,59],\"els\":[\"0:4204\"]},{\"tk\":[523,3,523,22],\"els\":[\"0:4227\"]},{\"tk\":[523,23,523,54],\"els\":[\"0:4227\"]},{\"tk\":[523,55,523,56],\"els\":[\"0:4227\"]},{\"tk\":[523,57,523,59],\"els\":[\"0:4227\"]},{\"tk\":[573,5,573,23],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[573,23,573,24],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[573,24,573,37],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[573,38,573,39],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[573,40,573,41],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[573,41,573,42],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[573,42,573,43],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[573,43,573,51],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[573,52,573,53],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[573,53,573,54],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[573,55,573,65],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[573,65,573,66],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[573,66,573,67],\"els\":[\"0:2679\",\"0:2663\"]},{\"tk\":[576,5,576,23],\"els\":[\"0:2667#out:1\"]},{\"tk\":[576,24,576,25],\"els\":[\"0:2667\",\"0:2663\"]},{\"tk\":[576,26,576,45],\"els\":[\"0:2667\",\"0:2663\"]},{\"tk\":[581,5,581,23],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[581,23,581,24],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[581,24,581,44],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[581,45,581,46],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[581,47,581,48],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[581,48,581,65],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[581,65,581,66],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[581,66,581,69],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[581,69,581,70],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[581,71,581,73],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[581,74,581,75],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[581,75,581,76],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[581,77,581,78],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[582,7,582,11],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[582,11,582,12],\"els\":[\"0:3029\",\"0:2663\"]},{\"tk\":[590,5,590,22],\"els\":[\"0:3024:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3024:481::180\",\"0:3024:481\",\"0:3024\",\"0:2663\"]},{\"tk\":[590,23,590,24],\"els\":[\"0:3024:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3024:481::180\",\"0:3024:481\",\"0:3024\",\"0:2663\"]},{\"tk\":[590,25,590,26],\"els\":[\"0:3024:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3024:481::180\",\"0:3024:481\",\"0:3024\",\"0:2663\",\"0:3027\"]},{\"tk\":[590,26,590,34],\"els\":[\"0:3024:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3024:481::180\",\"0:3024:481\",\"0:3024\",\"0:2663\"]},{\"tk\":[590,34,590,35],\"els\":[\"0:3024:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3024:481::180\",\"0:3024:481\",\"0:3024\",\"0:2663\"]},{\"tk\":[590,35,590,53],\"els\":[\"0:3024:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3024:481::180\",\"0:3024:481\",\"0:3024\",\"0:2663\",\"0:3027\"]},{\"tk\":[590,53,590,54],\"els\":[\"0:3024:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3024:481::180\",\"0:3024:481\",\"0:3024\",\"0:2663\"]},{\"tk\":[590,54,590,74],\"els\":[\"0:3024:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3024:481::180\",\"0:3024:481\",\"0:3024\",\"0:2663\",\"0:3027\"]},{\"tk\":[590,75,590,77],\"els\":[\"0:3024:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3024:481::180\",\"0:3024:481\",\"0:3024\",\"0:2663\"]},{\"tk\":[590,78,590,79],\"els\":[\"0:3024:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3024:481::180\",\"0:3024:481\",\"0:3024\",\"0:2663\"]},{\"tk\":[590,79,590,80],\"els\":[\"0:3024:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3024:481::180\",\"0:3024:481\",\"0:3024\",\"0:2663\"]},{\"tk\":[597,5,597,23],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[597,23,597,24],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[597,24,597,44],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[597,45,597,46],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[597,47,597,48],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[597,48,597,65],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[597,65,597,66],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[597,66,597,69],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[597,69,597,70],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[597,71,597,73],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[597,74,597,76],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[597,76,597,77],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[597,78,597,79],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[598,7,598,11],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[598,11,598,12],\"els\":[\"0:3030\",\"0:2663\"]},{\"tk\":[606,5,606,22],\"els\":[\"0:3025:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3025:481::180\",\"0:3025:481\",\"0:3025\",\"0:2663\"]},{\"tk\":[606,23,606,24],\"els\":[\"0:3025:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3025:481::180\",\"0:3025:481\",\"0:3025\",\"0:2663\"]},{\"tk\":[606,25,606,26],\"els\":[\"0:3025:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3025:481::180\",\"0:3025:481\",\"0:3025\",\"0:2663\",\"0:3026\"]},{\"tk\":[606,26,606,34],\"els\":[\"0:3025:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3025:481::180\",\"0:3025:481\",\"0:3025\",\"0:2663\"]},{\"tk\":[606,34,606,35],\"els\":[\"0:3025:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3025:481::180\",\"0:3025:481\",\"0:3025\",\"0:2663\"]},{\"tk\":[606,35,606,53],\"els\":[\"0:3025:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3025:481::180\",\"0:3025:481\",\"0:3025\",\"0:2663\",\"0:3026\"]},{\"tk\":[606,53,606,54],\"els\":[\"0:3025:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3025:481::180\",\"0:3025:481\",\"0:3025\",\"0:2663\"]},{\"tk\":[606,54,606,74],\"els\":[\"0:3025:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3025:481::180\",\"0:3025:481\",\"0:3025\",\"0:2663\",\"0:3026\"]},{\"tk\":[606,75,606,77],\"els\":[\"0:3025:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3025:481::180\",\"0:3025:481\",\"0:3025\",\"0:2663\"]},{\"tk\":[606,78,606,79],\"els\":[\"0:3025:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3025:481::180\",\"0:3025:481\",\"0:3025\",\"0:2663\"]},{\"tk\":[606,79,606,80],\"els\":[\"0:3025:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:3025:481::180\",\"0:3025:481\",\"0:3025\",\"0:2663\"]},{\"tk\":[613,5,613,23],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[613,23,613,24],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[613,24,613,44],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[613,45,613,46],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[613,47,613,48],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[613,48,613,65],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[613,65,613,66],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[613,66,613,69],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[613,69,613,70],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[613,71,613,73],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[613,74,613,76],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[613,76,613,77],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[613,78,613,79],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[614,7,614,11],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[614,11,614,12],\"els\":[\"0:3031\",\"0:2663\"]},{\"tk\":[617,5,617,22],\"els\":[\"0:3028#out:1\",\"0:3028\",\"0:2663\"]},{\"tk\":[617,23,617,24],\"els\":[\"0:3028#out:1\",\"0:3028\",\"0:2663\"]},{\"tk\":[617,25,617,26],\"els\":[\"0:3028#out:1\",\"0:3028\",\"0:2663\"]},{\"tk\":[617,26,617,34],\"els\":[\"0:3028#out:1\",\"0:3028\",\"0:2663\"]},{\"tk\":[617,34,617,35],\"els\":[\"0:3028#out:1\",\"0:3028\",\"0:2663\"]},{\"tk\":[617,35,617,53],\"els\":[\"0:3028#out:1\",\"0:3028\",\"0:2663\"]},{\"tk\":[617,53,617,54],\"els\":[\"0:3028#out:1\",\"0:3028\",\"0:2663\"]},{\"tk\":[617,54,617,74],\"els\":[\"0:3028#out:1\",\"0:3028\",\"0:2663\"]},{\"tk\":[617,74,617,75],\"els\":[\"0:3028#out:1\",\"0:3028\",\"0:2663\"]},{\"tk\":[620,5,620,13],\"els\":[\"0:3023#out:1\"]},{\"tk\":[620,14,620,15],\"els\":[\"0:3023\",\"0:2663\"]},{\"tk\":[620,17,620,34],\"els\":[\"0:3023\",\"0:2663\"]},{\"tk\":[620,35,620,36],\"els\":[\"0:3023\",\"0:2663\"]},{\"tk\":[620,37,620,54],\"els\":[\"0:3023\",\"0:2663\"]},{\"tk\":[620,56,620,57],\"els\":[\"0:3023\",\"0:2663\"]},{\"tk\":[620,58,620,75],\"els\":[\"0:3023\",\"0:2663\"]},{\"tk\":[627,5,627,7],\"els\":[\"0:2687:512\"]},{\"tk\":[627,9,627,28],\"els\":[\"0:2667\",\"0:2663\"]},{\"tk\":[627,29,627,31],\"els\":[\"0:2687:512\"]},{\"tk\":[627,32,627,33],\"els\":[\"0:2687:512\"]},{\"tk\":[628,7,628,26],\"els\":[\"0:2687:512\"]},{\"tk\":[628,27,628,28],\"els\":[\"0:2687:512\"]},{\"tk\":[628,29,628,31],\"els\":[\"0:2687:512\"]},{\"tk\":[628,31,628,32],\"els\":[\"0:2687:512\"]},{\"tk\":[638,5,638,7],\"els\":[\"0:2687:431:344#out:1\"]},{\"tk\":[638,8,638,9],\"els\":[\"0:2687:431:344#out:1\",\"0:2687:431:344\"]},{\"tk\":[638,11,638,30],\"els\":[\"0:2687:431:343\"]},{\"tk\":[638,31,638,51],\"els\":[\"0:2687:431:343\"]},{\"tk\":[638,52,638,54],\"els\":[\"0:2687:431:344\"]},{\"tk\":[638,56,638,74],\"els\":[\"0:2667#out:1\"]},{\"tk\":[638,75,638,77],\"els\":[\"0:2687:539\"]},{\"tk\":[638,78,638,79],\"els\":[\"0:2687:539\"]},{\"tk\":[643,5,643,7],\"els\":[\"0:2687:431:342\"]},{\"tk\":[643,9,643,11],\"els\":[\"0:2687:431:342\"]},{\"tk\":[644,7,644,9],\"els\":[\"0:2687:431:342\"]},{\"tk\":[644,11,644,29],\"els\":[\"0:2667#out:1\"]},{\"tk\":[644,30,644,32],\"els\":[\"0:2687:539\"]},{\"tk\":[644,33,644,34],\"els\":[\"0:2687:539\"]},{\"tk\":[645,9,645,28],\"els\":[\"0:2687:431:342\"]},{\"tk\":[645,29,645,48],\"els\":[\"0:2687:431:342\"]},{\"tk\":[645,49,645,50],\"els\":[\"0:2687:431:342\"]},{\"tk\":[645,51,645,55],\"els\":[\"0:2687:431:342\"]},{\"tk\":[651,7,651,25],\"els\":[\"0:2687:431:342#out:1\"]},{\"tk\":[651,26,651,38],\"els\":[\"0:2687:431:342#out:1\"]},{\"tk\":[651,39,651,40],\"els\":[\"0:2687:431:342#out:1\",\"0:2687:431:342\"]},{\"tk\":[651,41,651,60],\"els\":[\"0:2687:431:342\"]},{\"tk\":[651,61,651,80],\"els\":[\"0:2687:431:342\"]},{\"tk\":[659,5,659,16],\"els\":[\"0:2687:431:340:2#out:1\"]},{\"tk\":[659,17,659,18],\"els\":[\"0:2687:431:340:2\"]},{\"tk\":[659,20,659,38],\"els\":[\"0:2687:431:340:2\"]},{\"tk\":[659,39,659,51],\"els\":[\"0:2687:431:340:2\"]},{\"tk\":[659,52,659,53],\"els\":[\"0:2687:431:340:2\"]},{\"tk\":[659,54,659,55],\"els\":[\"0:2687:431:340:2\",\"0:2687:431:340:3\"]},{\"tk\":[664,5,664,7],\"els\":[\"0:2687:315\"]},{\"tk\":[664,9,664,20],\"els\":[\"0:2687:431:340:2#out:1\"]},{\"tk\":[669,7,669,9],\"els\":[\"0:2687:157\",\"0:2687:315\"]},{\"tk\":[669,11,669,27],\"els\":[\"0:2687:157\",\"0:2687:315\",\"0:2664\"]},{\"tk\":[669,28,669,30],\"els\":[\"0:2687:157\",\"0:2687:315\"]},{\"tk\":[669,31,669,32],\"els\":[\"0:2687:496\"]},{\"tk\":[669,41,669,59],\"els\":[\"0:2687:496\"]},{\"tk\":[669,60,669,73],\"els\":[\"0:2687:496\"]},{\"tk\":[670,9,670,27],\"els\":[\"0:2667#out:1\"]},{\"tk\":[670,28,670,29],\"els\":[\"0:2687:157\",\"0:2687:315\"]},{\"tk\":[670,30,670,46],\"els\":[\"0:2687:157\",\"0:2687:315\",\"0:2664\"]},{\"tk\":[672,9,672,27],\"els\":[\"0:2667#out:1\"]},{\"tk\":[672,28,672,29],\"els\":[\"0:2687:157\",\"0:2687:315\"]},{\"tk\":[672,30,672,31],\"els\":[\"0:2687:496\"]},{\"tk\":[672,40,672,58],\"els\":[\"0:2687:496\"]},{\"tk\":[672,59,672,72],\"els\":[\"0:2687:496\"]},{\"tk\":[682,7,682,9],\"els\":[\"0:2687:314\",\"0:2687:315\"]},{\"tk\":[682,11,682,29],\"els\":[\"0:2667#out:1\"]},{\"tk\":[682,30,682,32],\"els\":[\"0:2687:314\",\"0:2687:315\"]},{\"tk\":[682,33,682,38],\"els\":[\"0:2687:314\",\"0:2687:315\"]},{\"tk\":[683,9,683,27],\"els\":[\"0:2667#out:1\"]},{\"tk\":[683,28,683,29],\"els\":[\"0:2687:314\",\"0:2687:315\"]},{\"tk\":[683,30,683,32],\"els\":[\"0:2687:314\",\"0:2687:315\",\"0:2687:148\"]},{\"tk\":[685,9,685,27],\"els\":[\"0:2667#out:1\"]},{\"tk\":[685,28,685,29],\"els\":[\"0:2687:315\",\"0:2687:314\"]},{\"tk\":[685,30,685,31],\"els\":[\"0:2687:314\",\"0:2687:315\"]},{\"tk\":[685,42,685,61],\"els\":[\"0:2687:540\",\"0:2666\"]},{\"tk\":[685,62,685,64],\"els\":[\"0:2687:540\"]},{\"tk\":[685,65,685,66],\"els\":[\"0:2687:540\"]},{\"tk\":[685,68,685,70],\"els\":[\"0:2687:156\",\"0:2687:314\",\"0:2687:315\"]},{\"tk\":[686,11,686,29],\"els\":[\"0:2687:156\",\"0:2687:314\",\"0:2687:315\"]},{\"tk\":[686,30,686,43],\"els\":[\"0:2687:156\",\"0:2687:314\",\"0:2687:315\"]},{\"tk\":[691,7,691,25],\"els\":[\"0:2667#out:1\"]},{\"tk\":[691,26,691,27],\"els\":[\"0:2687:315\"]},{\"tk\":[691,28,691,30],\"els\":[\"0:2687:315\",\"0:2687:148\"]},{\"tk\":[697,5,697,7],\"els\":[\"0:2687:155\"]},{\"tk\":[697,9,697,27],\"els\":[\"0:2667#out:1\"]},{\"tk\":[697,28,697,30],\"els\":[\"0:2687:155\"]},{\"tk\":[697,31,697,32],\"els\":[\"0:2687:155\"]},{\"tk\":[704,7,704,9],\"els\":[\"0:2687:527\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[704,11,704,26],\"els\":[\"0:2687:527\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2665\"]},{\"tk\":[704,27,704,28],\"els\":[\"0:2687:527\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[704,29,704,30],\"els\":[\"0:2687:527\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[714,9,714,20],\"els\":[\"0:2687:158#out:1\"]},{\"tk\":[714,21,714,22],\"els\":[\"0:2687:527\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:519\",\"0:2687:518\",\"0:2687:520\"]},{\"tk\":[714,23,714,46],\"els\":[\"0:2687:214\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[714,47,714,61],\"els\":[\"0:2687:214\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[714,62,714,63],\"els\":[\"0:2687:214\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[714,64,714,65],\"els\":[\"0:2687:515\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[715,11,715,27],\"els\":[\"0:2687:515\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2664\"]},{\"tk\":[715,28,715,29],\"els\":[\"0:2687:517\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[715,30,715,35],\"els\":[\"0:2687:517\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[728,9,728,20],\"els\":[\"0:2687:158#out:1\"]},{\"tk\":[728,21,728,22],\"els\":[\"0:2687:532\",\"0:2687:522\",\"0:2687:527\",\"0:2687:530\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[728,23,728,24],\"els\":[\"0:2687:532\",\"0:2687:522\",\"0:2687:527\",\"0:2687:530\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[728,25,728,48],\"els\":[\"0:2687:214\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[728,49,728,63],\"els\":[\"0:2687:214\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[728,64,728,65],\"els\":[\"0:2687:214\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[728,66,728,67],\"els\":[\"0:2687:515\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[729,25,729,41],\"els\":[\"0:2687:515\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2664\"]},{\"tk\":[729,42,729,43],\"els\":[\"0:2687:517\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[729,44,729,49],\"els\":[\"0:2687:517\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[750,7,750,17],\"els\":[\"0:2687:451#out:1\"]},{\"tk\":[750,18,750,19],\"els\":[\"0:2687:295\",\"0:2687:291\",\"0:2687:444\",\"0:2687:450\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[750,20,750,21],\"els\":[\"0:2687:485\",\"0:2687:291\",\"0:2687:444\",\"0:2687:450\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[750,30,750,31],\"els\":[\"0:2687:496\"]},{\"tk\":[750,40,750,58],\"els\":[\"0:2687:496\"]},{\"tk\":[750,59,750,72],\"els\":[\"0:2687:496\"]},{\"tk\":[750,73,750,74],\"els\":[\"0:2687:294\",\"0:2687:291\",\"0:2687:444\",\"0:2687:450\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[751,9,751,10],\"els\":[\"0:2687:484\",\"0:2687:291\",\"0:2687:444\",\"0:2687:450\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[751,19,751,35],\"els\":[\"0:2687:484\",\"0:2687:291\",\"0:2687:444\",\"0:2687:450\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2664\"]},{\"tk\":[751,36,751,37],\"els\":[\"0:2687:295\",\"0:2687:291\",\"0:2687:444\",\"0:2687:450\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[751,38,751,50],\"els\":[\"0:2687:295\",\"0:2687:291\",\"0:2687:444\",\"0:2687:450\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[756,7,756,9],\"els\":[\"0:2687:289\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[756,11,756,21],\"els\":[\"0:2687:451#out:1\"]},{\"tk\":[756,22,756,23],\"els\":[\"0:2687:289\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[756,24,756,32],\"els\":[\"0:2687:289\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[757,9,757,19],\"els\":[\"0:2687:451#out:1\"]},{\"tk\":[757,20,757,21],\"els\":[\"0:2687:289\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[757,22,757,30],\"els\":[\"0:2687:289\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[765,7,765,9],\"els\":[\"0:2687:287\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[765,11,765,26],\"els\":[\"0:2687:287\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2665\"]},{\"tk\":[765,27,765,29],\"els\":[\"0:2687:287\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[765,30,765,31],\"els\":[\"0:2687:287\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[770,9,770,15],\"els\":[\"0:2687:284\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[770,17,770,18],\"els\":[\"0:2687:284\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[770,26,770,34],\"els\":[\"0:3023#out:1\"]},{\"tk\":[771,15,771,16],\"els\":[\"0:2687:284\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[775,11,775,38],\"els\":[\"0:2687:258\",\"0:2687:284\",\"0:2687:259\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[775,38,775,39],\"els\":[\"0:2687:258\",\"0:2687:284\",\"0:2687:259\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[775,39,775,40],\"els\":[\"0:2687:258\",\"0:2687:284\",\"0:2687:259\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[775,40,775,52],\"els\":[\"0:2687:258\",\"0:2687:284\",\"0:2687:259\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[775,52,775,53],\"els\":[\"0:2687:258\",\"0:2687:284\",\"0:2687:259\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[780,15,780,16],\"els\":[\"0:2687:284\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[784,11,784,38],\"els\":[\"0:2687:262\",\"0:2687:284\",\"0:2687:263\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[784,38,784,39],\"els\":[\"0:2687:262\",\"0:2687:284\",\"0:2687:263\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[784,39,784,40],\"els\":[\"0:2687:262\",\"0:2687:284\",\"0:2687:263\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[784,40,784,52],\"els\":[\"0:2687:262\",\"0:2687:284\",\"0:2687:263\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[784,52,784,53],\"els\":[\"0:2687:262\",\"0:2687:284\",\"0:2687:263\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[789,15,789,16],\"els\":[\"0:2687:284\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[793,11,793,38],\"els\":[\"0:2687:266\",\"0:2687:284\",\"0:2687:267\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[793,38,793,39],\"els\":[\"0:2687:266\",\"0:2687:284\",\"0:2687:267\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[793,39,793,40],\"els\":[\"0:2687:266\",\"0:2687:284\",\"0:2687:267\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[793,40,793,52],\"els\":[\"0:2687:266\",\"0:2687:284\",\"0:2687:267\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[793,52,793,53],\"els\":[\"0:2687:266\",\"0:2687:284\",\"0:2687:267\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[798,15,798,16],\"els\":[\"0:2687:284\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[802,11,802,38],\"els\":[\"0:2687:270\",\"0:2687:284\",\"0:2687:271\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[802,38,802,39],\"els\":[\"0:2687:270\",\"0:2687:284\",\"0:2687:271\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[802,39,802,40],\"els\":[\"0:2687:270\",\"0:2687:284\",\"0:2687:271\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[802,40,802,52],\"els\":[\"0:2687:270\",\"0:2687:284\",\"0:2687:271\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[802,52,802,53],\"els\":[\"0:2687:270\",\"0:2687:284\",\"0:2687:271\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[807,15,807,16],\"els\":[\"0:2687:284\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[811,11,811,38],\"els\":[\"0:2687:274\",\"0:2687:284\",\"0:2687:275\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[811,38,811,39],\"els\":[\"0:2687:274\",\"0:2687:284\",\"0:2687:275\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[811,39,811,40],\"els\":[\"0:2687:274\",\"0:2687:284\",\"0:2687:275\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[811,40,811,52],\"els\":[\"0:2687:274\",\"0:2687:284\",\"0:2687:275\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[811,52,811,53],\"els\":[\"0:2687:274\",\"0:2687:284\",\"0:2687:275\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[816,15,816,16],\"els\":[\"0:2687:284\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[823,11,823,23],\"els\":[\"0:2687:250#out:1\"]},{\"tk\":[823,24,823,25],\"els\":[\"0:2687:281\",\"0:2687:278\",\"0:2687:284\",\"0:2687:279\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[823,26,823,30],\"els\":[\"0:2687:281\",\"0:2687:278\",\"0:2687:284\",\"0:2687:279\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:280\"]},{\"tk\":[832,11,832,38],\"els\":[\"0:2687:432\",\"0:2687:284\",\"0:2687:433\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[832,38,832,39],\"els\":[\"0:2687:432\",\"0:2687:284\",\"0:2687:433\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[832,39,832,40],\"els\":[\"0:2687:432\",\"0:2687:284\",\"0:2687:433\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[832,40,832,52],\"els\":[\"0:2687:432\",\"0:2687:284\",\"0:2687:433\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[832,52,832,53],\"els\":[\"0:2687:432\",\"0:2687:284\",\"0:2687:433\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[843,9,843,27],\"els\":[\"0:2687:288#out:1\"]},{\"tk\":[843,28,843,33],\"els\":[\"0:2687:288#out:1\"]},{\"tk\":[843,34,843,35],\"els\":[\"0:2687:288#out:1\",\"0:2687:283\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[843,36,843,48],\"els\":[\"0:2687:250#out:1\"]},{\"tk\":[843,49,843,50],\"els\":[\"0:2687:283\",\"0:2687:254\",\"0:2687:287\",\"0:2687:257\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[843,51,843,61],\"els\":[\"0:2687:451#out:1\"]},{\"tk\":[851,9,851,15],\"els\":[\"0:2687:252\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[851,17,851,18],\"els\":[\"0:2687:252\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[851,26,851,34],\"els\":[\"0:3023#out:1\"]},{\"tk\":[852,15,852,16],\"els\":[\"0:2687:252\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[856,11,856,38],\"els\":[\"0:2687:226\",\"0:2687:252\",\"0:2687:227\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[856,38,856,39],\"els\":[\"0:2687:226\",\"0:2687:252\",\"0:2687:227\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[856,39,856,40],\"els\":[\"0:2687:226\",\"0:2687:252\",\"0:2687:227\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[856,40,856,52],\"els\":[\"0:2687:226\",\"0:2687:252\",\"0:2687:227\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[856,52,856,53],\"els\":[\"0:2687:226\",\"0:2687:252\",\"0:2687:227\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[861,15,861,16],\"els\":[\"0:2687:252\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[865,11,865,38],\"els\":[\"0:2687:230\",\"0:2687:252\",\"0:2687:231\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[865,38,865,39],\"els\":[\"0:2687:230\",\"0:2687:252\",\"0:2687:231\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[865,39,865,40],\"els\":[\"0:2687:230\",\"0:2687:252\",\"0:2687:231\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[865,40,865,52],\"els\":[\"0:2687:230\",\"0:2687:252\",\"0:2687:231\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[865,52,865,53],\"els\":[\"0:2687:230\",\"0:2687:252\",\"0:2687:231\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[870,15,870,16],\"els\":[\"0:2687:252\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[874,11,874,38],\"els\":[\"0:2687:234\",\"0:2687:252\",\"0:2687:235\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[874,38,874,39],\"els\":[\"0:2687:234\",\"0:2687:252\",\"0:2687:235\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[874,39,874,40],\"els\":[\"0:2687:234\",\"0:2687:252\",\"0:2687:235\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[874,40,874,52],\"els\":[\"0:2687:234\",\"0:2687:252\",\"0:2687:235\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[874,52,874,53],\"els\":[\"0:2687:234\",\"0:2687:252\",\"0:2687:235\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[879,15,879,16],\"els\":[\"0:2687:252\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[883,11,883,38],\"els\":[\"0:2687:238\",\"0:2687:252\",\"0:2687:239\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[883,38,883,39],\"els\":[\"0:2687:238\",\"0:2687:252\",\"0:2687:239\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[883,39,883,40],\"els\":[\"0:2687:238\",\"0:2687:252\",\"0:2687:239\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[883,40,883,52],\"els\":[\"0:2687:238\",\"0:2687:252\",\"0:2687:239\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[883,52,883,53],\"els\":[\"0:2687:238\",\"0:2687:252\",\"0:2687:239\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[888,15,888,16],\"els\":[\"0:2687:252\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[892,11,892,38],\"els\":[\"0:2687:242\",\"0:2687:252\",\"0:2687:243\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[892,38,892,39],\"els\":[\"0:2687:242\",\"0:2687:252\",\"0:2687:243\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[892,39,892,40],\"els\":[\"0:2687:242\",\"0:2687:252\",\"0:2687:243\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[892,40,892,52],\"els\":[\"0:2687:242\",\"0:2687:252\",\"0:2687:243\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[892,52,892,53],\"els\":[\"0:2687:242\",\"0:2687:252\",\"0:2687:243\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[897,15,897,16],\"els\":[\"0:2687:252\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[901,11,901,38],\"els\":[\"0:2687:246\",\"0:2687:252\",\"0:2687:247\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[901,38,901,39],\"els\":[\"0:2687:246\",\"0:2687:252\",\"0:2687:247\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[901,39,901,40],\"els\":[\"0:2687:246\",\"0:2687:252\",\"0:2687:247\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[901,40,901,52],\"els\":[\"0:2687:246\",\"0:2687:252\",\"0:2687:247\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[901,52,901,53],\"els\":[\"0:2687:246\",\"0:2687:252\",\"0:2687:247\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[910,11,910,38],\"els\":[\"0:2687:436\",\"0:2687:252\",\"0:2687:437\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[910,38,910,39],\"els\":[\"0:2687:436\",\"0:2687:252\",\"0:2687:437\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[910,39,910,40],\"els\":[\"0:2687:436\",\"0:2687:252\",\"0:2687:437\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[910,40,910,52],\"els\":[\"0:2687:436\",\"0:2687:252\",\"0:2687:437\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\",\"0:2687:250#out:1\"]},{\"tk\":[910,52,910,53],\"els\":[\"0:2687:436\",\"0:2687:252\",\"0:2687:437\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[921,9,921,27],\"els\":[\"0:2687:288#out:1\"]},{\"tk\":[921,28,921,33],\"els\":[\"0:2687:288#out:1\"]},{\"tk\":[921,34,921,35],\"els\":[\"0:2687:288#out:1\",\"0:2687:251\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[921,36,921,48],\"els\":[\"0:2687:250#out:1\"]},{\"tk\":[921,49,921,50],\"els\":[\"0:2687:251\",\"0:2687:222\",\"0:2687:287\",\"0:2687:225\",\"0:2687:513\",\"0:2687:216\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[921,51,921,61],\"els\":[\"0:2687:451#out:1\"]},{\"tk\":[932,7,932,17],\"els\":[\"0:2687:159#out:1\",\"0:2687:313\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[932,18,932,19],\"els\":[\"0:2687:159#out:1\",\"0:2687:313\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[932,20,932,38],\"els\":[\"0:2687:159#out:1\",\"0:2687:313\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[932,38,932,39],\"els\":[\"0:2687:159#out:1\",\"0:2687:313\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[932,39,932,44],\"els\":[\"0:2687:159#out:1\",\"0:2687:313\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[932,44,932,45],\"els\":[\"0:2687:159#out:1\",\"0:2687:313\",\"0:2687:205\",\"0:2687:155\",\"0:2687:212\"]},{\"tk\":[940,7,940,13],\"els\":[\"0:2687:201\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[940,15,940,16],\"els\":[\"0:2687:201\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[940,24,940,32],\"els\":[\"0:3023#out:1\"]},{\"tk\":[941,13,941,14],\"els\":[\"0:2687:201\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[949,9,949,19],\"els\":[\"0:2687:159#out:1\",\"0:2687:179\",\"0:2687:176\",\"0:2687:201\",\"0:2687:177\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:178\"]},{\"tk\":[949,20,949,21],\"els\":[\"0:2687:159#out:1\",\"0:2687:179\",\"0:2687:176\",\"0:2687:201\",\"0:2687:177\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:178\"]},{\"tk\":[949,22,949,31],\"els\":[\"0:2687:159#out:1\",\"0:2687:179\",\"0:2687:176\",\"0:2687:201\",\"0:2687:177\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:178\"]},{\"tk\":[949,31,949,32],\"els\":[\"0:2687:159#out:1\",\"0:2687:179\",\"0:2687:176\",\"0:2687:201\",\"0:2687:177\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:178\"]},{\"tk\":[954,13,954,14],\"els\":[\"0:2687:201\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[962,9,962,19],\"els\":[\"0:2687:159#out:1\",\"0:2687:183\",\"0:2687:180\",\"0:2687:201\",\"0:2687:181\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:182\"]},{\"tk\":[962,20,962,21],\"els\":[\"0:2687:159#out:1\",\"0:2687:183\",\"0:2687:180\",\"0:2687:201\",\"0:2687:181\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:182\"]},{\"tk\":[962,22,962,27],\"els\":[\"0:2687:159#out:1\",\"0:2687:183\",\"0:2687:180\",\"0:2687:201\",\"0:2687:181\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:182\"]},{\"tk\":[962,27,962,28],\"els\":[\"0:2687:159#out:1\",\"0:2687:183\",\"0:2687:180\",\"0:2687:201\",\"0:2687:181\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:182\"]},{\"tk\":[967,13,967,14],\"els\":[\"0:2687:201\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[975,9,975,19],\"els\":[\"0:2687:159#out:1\",\"0:2687:187\",\"0:2687:184\",\"0:2687:201\",\"0:2687:185\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:186\"]},{\"tk\":[975,20,975,21],\"els\":[\"0:2687:159#out:1\",\"0:2687:187\",\"0:2687:184\",\"0:2687:201\",\"0:2687:185\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:186\"]},{\"tk\":[975,22,975,30],\"els\":[\"0:2687:159#out:1\",\"0:2687:187\",\"0:2687:184\",\"0:2687:201\",\"0:2687:185\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:186\"]},{\"tk\":[975,30,975,31],\"els\":[\"0:2687:159#out:1\",\"0:2687:187\",\"0:2687:184\",\"0:2687:201\",\"0:2687:185\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:186\"]},{\"tk\":[980,13,980,14],\"els\":[\"0:2687:201\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[988,9,988,19],\"els\":[\"0:2687:159#out:1\",\"0:2687:191\",\"0:2687:188\",\"0:2687:201\",\"0:2687:189\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:190\"]},{\"tk\":[988,20,988,21],\"els\":[\"0:2687:159#out:1\",\"0:2687:191\",\"0:2687:188\",\"0:2687:201\",\"0:2687:189\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:190\"]},{\"tk\":[988,22,988,30],\"els\":[\"0:2687:159#out:1\",\"0:2687:191\",\"0:2687:188\",\"0:2687:201\",\"0:2687:189\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:190\"]},{\"tk\":[988,30,988,31],\"els\":[\"0:2687:159#out:1\",\"0:2687:191\",\"0:2687:188\",\"0:2687:201\",\"0:2687:189\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:190\"]},{\"tk\":[993,13,993,14],\"els\":[\"0:2687:201\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[1001,9,1001,19],\"els\":[\"0:2687:159#out:1\",\"0:2687:195\",\"0:2687:192\",\"0:2687:201\",\"0:2687:193\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:194\"]},{\"tk\":[1001,20,1001,21],\"els\":[\"0:2687:159#out:1\",\"0:2687:195\",\"0:2687:192\",\"0:2687:201\",\"0:2687:193\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:194\"]},{\"tk\":[1001,22,1001,27],\"els\":[\"0:2687:159#out:1\",\"0:2687:195\",\"0:2687:192\",\"0:2687:201\",\"0:2687:193\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:194\"]},{\"tk\":[1001,27,1001,28],\"els\":[\"0:2687:159#out:1\",\"0:2687:195\",\"0:2687:192\",\"0:2687:201\",\"0:2687:193\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:194\"]},{\"tk\":[1006,13,1006,14],\"els\":[\"0:2687:201\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[1014,9,1014,19],\"els\":[\"0:2687:159#out:1\",\"0:2687:199\",\"0:2687:196\",\"0:2687:201\",\"0:2687:197\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:198\"]},{\"tk\":[1014,20,1014,21],\"els\":[\"0:2687:159#out:1\",\"0:2687:199\",\"0:2687:196\",\"0:2687:201\",\"0:2687:197\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:198\"]},{\"tk\":[1014,22,1014,30],\"els\":[\"0:2687:159#out:1\",\"0:2687:199\",\"0:2687:196\",\"0:2687:201\",\"0:2687:197\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:198\"]},{\"tk\":[1014,30,1014,31],\"els\":[\"0:2687:159#out:1\",\"0:2687:199\",\"0:2687:196\",\"0:2687:201\",\"0:2687:197\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:198\"]},{\"tk\":[1023,9,1023,36],\"els\":[\"0:2687:440\",\"0:2687:201\",\"0:2687:441\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[1023,36,1023,37],\"els\":[\"0:2687:440\",\"0:2687:201\",\"0:2687:441\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[1023,37,1023,38],\"els\":[\"0:2687:440\",\"0:2687:201\",\"0:2687:441\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[1023,38,1023,46],\"els\":[\"0:2687:440\",\"0:2687:201\",\"0:2687:441\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[1023,47,1023,48],\"els\":[\"0:2687:440\",\"0:2687:201\",\"0:2687:441\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[1023,48,1023,49],\"els\":[\"0:2687:440\",\"0:2687:201\",\"0:2687:441\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[1023,49,1023,50],\"els\":[\"0:2687:440\",\"0:2687:201\",\"0:2687:441\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[1023,50,1023,60],\"els\":[\"0:2687:440\",\"0:2687:201\",\"0:2687:441\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[1023,60,1023,61],\"els\":[\"0:2687:440\",\"0:2687:201\",\"0:2687:441\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[1034,7,1034,18],\"els\":[\"0:2687:158#out:1\"]},{\"tk\":[1034,19,1034,20],\"els\":[\"0:2687:204\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\"]},{\"tk\":[1034,21,1034,25],\"els\":[\"0:2687:204\",\"0:2687:168\",\"0:2687:155\",\"0:2687:171\",\"0:2687:172\"]},{\"tk\":[1042,5,1042,23],\"els\":[\"0:2667#out:1\"]},{\"tk\":[1042,24,1042,25],\"els\":[\"0:2687:431:345\"]},{\"tk\":[1042,26,1042,44],\"els\":[\"0:2687:431:345\"]},{\"tk\":[1042,45,1042,57],\"els\":[\"0:2687:431:345\"]},{\"tk\":[1048,5,1048,7],\"els\":[\"0:2688:897\"]},{\"tk\":[1048,9,1048,19],\"els\":[\"0:2688:897\"]},{\"tk\":[1048,20,1048,22],\"els\":[\"0:2688:897\"]},{\"tk\":[1048,23,1048,30],\"els\":[\"0:2688:925\",\"0:2688:914\"]},{\"tk\":[1055,7,1055,17],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1055,18,1055,19],\"els\":[\"0:2688:897\",\"0:2688:902\",\"0:2688:898\",\"0:2688:901\"]},{\"tk\":[1055,21,1055,31],\"els\":[\"0:2688:902\",\"0:2688:898\",\"0:2688:897\",\"0:2688:901\"]},{\"tk\":[1055,32,1055,33],\"els\":[\"0:2688:902\",\"0:2688:898\",\"0:2688:897\",\"0:2688:901\"]},{\"tk\":[1055,34,1055,38],\"els\":[\"0:2688:902\",\"0:2688:898\",\"0:2688:897\",\"0:2688:901\",\"0:2688:903\"]},{\"tk\":[1055,40,1055,41],\"els\":[\"0:2688:902\",\"0:2688:898\",\"0:2688:897\",\"0:2688:901\"]},{\"tk\":[1055,42,1055,49],\"els\":[\"0:2688:925\",\"0:2688:914\"]},{\"tk\":[1063,7,1063,17],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1063,18,1063,19],\"els\":[\"0:2688:909\",\"0:2688:905\",\"0:2688:897\",\"0:2688:908\"]},{\"tk\":[1063,20,1063,30],\"els\":[\"0:2688:909\",\"0:2688:905\",\"0:2688:897\",\"0:2688:908\"]},{\"tk\":[1063,31,1063,32],\"els\":[\"0:2688:909\",\"0:2688:905\",\"0:2688:897\",\"0:2688:908\"]},{\"tk\":[1063,33,1063,40],\"els\":[\"0:2688:925\",\"0:2688:914\"]},{\"tk\":[1073,5,1073,12],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1073,13,1073,14],\"els\":[\"0:2688:918\"]},{\"tk\":[1073,15,1073,25],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1073,26,1073,27],\"els\":[\"0:2688:918\"]},{\"tk\":[1073,28,1073,29],\"els\":[\"0:2688:919\"]},{\"tk\":[1073,38,1073,43],\"els\":[\"0:2688:919\"]},{\"tk\":[1073,44,1073,54],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1081,5,1081,21],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1081,21,1081,22],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1081,22,1081,23],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1081,23,1081,24],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1081,25,1081,26],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1081,27,1081,35],\"els\":[\"0:2693#out:1\",\"0:2693\",\"0:2694\"]},{\"tk\":[1081,36,1081,37],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1081,38,1081,43],\"els\":[\"0:2693#out:1\",\"0:2693\",\"0:3307\"]},{\"tk\":[1081,43,1081,44],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1082,5,1082,21],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1082,21,1082,22],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1082,22,1082,23],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1082,23,1082,24],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1082,25,1082,26],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1082,27,1082,35],\"els\":[\"0:2693#out:1\",\"0:2693\",\"0:2695\"]},{\"tk\":[1082,36,1082,37],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1082,38,1082,43],\"els\":[\"0:2693#out:1\",\"0:2693\",\"0:3308\"]},{\"tk\":[1082,43,1082,44],\"els\":[\"0:2693#out:1\",\"0:2693\"]},{\"tk\":[1085,5,1085,16],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1085,17,1085,18],\"els\":[\"0:2698\"]},{\"tk\":[1085,19,1085,33],\"els\":[\"0:2698\"]},{\"tk\":[1085,34,1085,35],\"els\":[\"0:2698\"]},{\"tk\":[1085,36,1085,52],\"els\":[\"0:2698\"]},{\"tk\":[1085,52,1085,53],\"els\":[\"0:2698\"]},{\"tk\":[1085,53,1085,54],\"els\":[\"0:2698\"]},{\"tk\":[1085,54,1085,55],\"els\":[\"0:2698\"]},{\"tk\":[1086,5,1086,13],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1086,14,1086,15],\"els\":[\"0:2698\"]},{\"tk\":[1086,16,1086,30],\"els\":[\"0:2698\"]},{\"tk\":[1086,31,1086,32],\"els\":[\"0:2698\"]},{\"tk\":[1086,33,1086,49],\"els\":[\"0:2698\"]},{\"tk\":[1086,49,1086,50],\"els\":[\"0:2698\"]},{\"tk\":[1086,50,1086,51],\"els\":[\"0:2698\"]},{\"tk\":[1086,51,1086,52],\"els\":[\"0:2698\"]},{\"tk\":[1092,5,1092,13],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1092,14,1092,15],\"els\":[\"0:2562:634\",\"0:2562:627\"]},{\"tk\":[1092,18,1092,29],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1092,30,1092,31],\"els\":[\"0:2562:633\",\"0:2562:627\"]},{\"tk\":[1092,32,1092,40],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1092,42,1092,43],\"els\":[\"0:2562:633\",\"0:2562:627\"]},{\"tk\":[1092,44,1092,52],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1092,54,1092,55],\"els\":[\"0:2562:634\",\"0:2562:627\"]},{\"tk\":[1092,56,1092,68],\"els\":[\"0:2562:634\",\"0:2562:627\"]},{\"tk\":[1097,5,1097,15],\"els\":[\"0:2687:451#out:1\"]},{\"tk\":[1097,16,1097,17],\"els\":[\"0:4892\"]},{\"tk\":[1097,18,1097,37],\"els\":[\"0:4892\"]},{\"tk\":[1097,38,1097,56],\"els\":[\"0:4892\"]},{\"tk\":[1102,5,1102,7],\"els\":[\"0:4204\"]},{\"tk\":[1102,9,1102,28],\"els\":[\"0:4204\"]},{\"tk\":[1102,29,1102,60],\"els\":[\"0:4204\"]},{\"tk\":[1102,61,1102,63],\"els\":[\"0:4204\"]},{\"tk\":[1102,64,1102,65],\"els\":[\"0:4204\"]},{\"tk\":[1104,7,1104,19],\"els\":[\"0:2687:250#out:1\"]},{\"tk\":[1104,20,1104,21],\"els\":[\"0:4204#out:1\",\"0:4204\"]},{\"tk\":[1104,22,1104,41],\"els\":[\"0:4204\"]},{\"tk\":[1104,42,1104,73],\"els\":[\"0:4204\"]},{\"tk\":[1105,12,1105,14],\"els\":[\"0:4204\"]},{\"tk\":[1105,17,1105,36],\"els\":[\"0:4892\"]},{\"tk\":[1105,37,1105,55],\"els\":[\"0:4892\"]},{\"tk\":[1105,56,1105,57],\"els\":[\"0:4204\"]},{\"tk\":[1105,58,1105,62],\"els\":[\"0:4204\"]},{\"tk\":[1105,64,1105,66],\"els\":[\"0:4204\"]},{\"tk\":[1106,17,1106,36],\"els\":[\"0:4204\"]},{\"tk\":[1106,37,1106,68],\"els\":[\"0:4204\"]},{\"tk\":[1106,69,1106,71],\"els\":[\"0:4204\"]},{\"tk\":[1106,72,1106,73],\"els\":[\"0:4204\"]},{\"tk\":[1107,7,1107,26],\"els\":[\"0:4204\"]},{\"tk\":[1107,27,1107,58],\"els\":[\"0:4204\"]},{\"tk\":[1107,59,1107,60],\"els\":[\"0:4204\"]},{\"tk\":[1107,61,1107,65],\"els\":[\"0:4204\"]},{\"tk\":[1110,7,1110,19],\"els\":[\"0:2687:250#out:1\"]},{\"tk\":[1110,20,1110,21],\"els\":[\"0:4204#out:1\",\"0:4204\"]},{\"tk\":[1110,22,1110,41],\"els\":[\"0:4204\"]},{\"tk\":[1110,42,1110,73],\"els\":[\"0:4204\"]},{\"tk\":[1113,7,1113,19],\"els\":[\"0:2687:250#out:1\"]},{\"tk\":[1113,20,1113,21],\"els\":[\"0:4204#out:1\",\"0:4204\"]},{\"tk\":[1113,22,1113,29],\"els\":[\"0:4204\"]},{\"tk\":[1113,30,1113,31],\"els\":[\"0:4204\"]},{\"tk\":[1113,32,1113,33],\"els\":[\"0:4204\"]},{\"tk\":[1113,42,1113,64],\"els\":[\"0:4204\"]},{\"tk\":[1114,9,1114,10],\"els\":[\"0:4204\"]},{\"tk\":[1114,11,1114,30],\"els\":[\"0:4204\"]},{\"tk\":[1114,31,1114,60],\"els\":[\"0:4204\"]},{\"tk\":[1114,61,1114,62],\"els\":[\"0:4204\"]},{\"tk\":[1115,9,1115,28],\"els\":[\"0:4204\"]},{\"tk\":[1115,29,1115,60],\"els\":[\"0:4204\"]},{\"tk\":[1131,5,1131,7],\"els\":[\"0:2604:76:683\"]},{\"tk\":[1131,9,1131,16],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1131,17,1131,18],\"els\":[\"0:2604:76:692:2\"]},{\"tk\":[1131,19,1131,23],\"els\":[\"0:2604:76:692:2\",\"0:2604:76:692:3\"]},{\"tk\":[1135,7,1135,15],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1135,16,1135,17],\"els\":[\"0:2604:76:683\"]},{\"tk\":[1135,18,1135,25],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1135,26,1135,27],\"els\":[\"0:2604:76:693\",\"0:2604:76:684\",\"0:2604:76:683\",\"0:2604:76:686\"]},{\"tk\":[1135,28,1135,29],\"els\":[\"0:2604:76:695\",\"0:2604:76:684\",\"0:2604:76:683\",\"0:2604:76:686\"]},{\"tk\":[1135,38,1135,39],\"els\":[\"0:2604:76:694\",\"0:2604:76:684\",\"0:2604:76:683\",\"0:2604:76:686\"]},{\"tk\":[1135,47,1135,48],\"els\":[\"0:2604:76:694\",\"0:2604:76:684\",\"0:2604:76:683\",\"0:2604:76:686\"]},{\"tk\":[1135,57,1135,62],\"els\":[\"0:2604:76:694\",\"0:2604:76:684\",\"0:2604:76:683\",\"0:2604:76:686\"]},{\"tk\":[1135,63,1135,70],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1142,7,1142,15],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1142,16,1142,17],\"els\":[\"0:2604:76:683\"]},{\"tk\":[1142,18,1142,25],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1142,26,1142,27],\"els\":[\"0:2604:76:700\",\"0:2604:76:688\",\"0:2604:76:683\",\"0:2604:76:690\"]},{\"tk\":[1142,28,1142,29],\"els\":[\"0:2604:76:698\",\"0:2604:76:688\",\"0:2604:76:683\",\"0:2604:76:690\"]},{\"tk\":[1142,38,1142,39],\"els\":[\"0:2604:76:697\",\"0:2604:76:688\",\"0:2604:76:683\",\"0:2604:76:690\"]},{\"tk\":[1142,47,1142,54],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1147,5,1147,15],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1147,16,1147,17],\"els\":[\"0:2604:76:605\"]},{\"tk\":[1147,18,1147,24],\"els\":[\"0:2604:76:605\"]},{\"tk\":[1147,25,1147,26],\"els\":[\"0:2604:76:605\"]},{\"tk\":[1147,27,1147,35],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1155,5,1155,13],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1155,14,1155,15],\"els\":[\"0:2604:76:612\"]},{\"tk\":[1155,16,1155,26],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1155,27,1155,28],\"els\":[\"0:2604:76:612\"]},{\"tk\":[1155,29,1155,30],\"els\":[\"0:2604:76:653\"]},{\"tk\":[1155,39,1155,40],\"els\":[\"0:2604:76:608\"]},{\"tk\":[1155,49,1155,59],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1161,5,1161,12],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1161,13,1161,14],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1161,15,1161,38],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1161,39,1161,62],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1161,62,1161,63],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1161,63,1161,64],\"els\":[\"0:2604:76:608\"]},{\"tk\":[1162,7,1162,17],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1173,5,1173,13],\"els\":[\"0:2604:76:615#out:1\"]},{\"tk\":[1173,14,1173,15],\"els\":[\"0:2604:76:615\"]},{\"tk\":[1173,17,1173,40],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1173,41,1173,64],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1173,64,1173,65],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1173,65,1173,66],\"els\":[\"0:2604:76:614\"]},{\"tk\":[1174,18,1174,19],\"els\":[\"0:2604:76:608\"]},{\"tk\":[1174,28,1174,38],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1174,39,1174,40],\"els\":[\"0:2604:76:610\"]},{\"tk\":[1174,41,1174,43],\"els\":[\"0:2604:76:610\",\"0:2604:76:657\"]},{\"tk\":[1174,46,1174,47],\"els\":[\"0:2604:76:614\"]},{\"tk\":[1174,48,1174,55],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1174,57,1174,58],\"els\":[\"0:2604:76:616\"]},{\"tk\":[1174,59,1174,67],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1174,68,1174,69],\"els\":[\"0:2604:76:615\"]},{\"tk\":[1183,5,1183,12],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1183,13,1183,14],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1183,15,1183,38],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1183,39,1183,62],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1183,62,1183,63],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1183,63,1183,64],\"els\":[\"0:2604:76:622\"]},{\"tk\":[1184,8,1184,9],\"els\":[\"0:2604:76:608\"]},{\"tk\":[1184,18,1184,28],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1184,29,1184,30],\"els\":[\"0:2604:76:610\"]},{\"tk\":[1184,31,1184,35],\"els\":[\"0:2604:76:610\",\"0:2604:76:657\"]},{\"tk\":[1195,5,1195,15],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1195,16,1195,17],\"els\":[\"0:2604:76:623\"]},{\"tk\":[1195,19,1195,42],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1195,43,1195,66],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1195,66,1195,67],\"els\":[\"0:2604:76:557\",\"0:2604:76:549\"]},{\"tk\":[1195,67,1195,68],\"els\":[\"0:2604:76:622\"]},{\"tk\":[1196,20,1196,21],\"els\":[\"0:2604:76:608\"]},{\"tk\":[1196,30,1196,40],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1196,41,1196,42],\"els\":[\"0:2604:76:610\"]},{\"tk\":[1196,43,1196,47],\"els\":[\"0:2604:76:610\",\"0:2604:76:657\"]},{\"tk\":[1196,50,1196,51],\"els\":[\"0:2604:76:622\"]},{\"tk\":[1196,52,1196,59],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1196,61,1196,62],\"els\":[\"0:2604:76:621\"]},{\"tk\":[1196,63,1196,71],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1196,72,1196,73],\"els\":[\"0:2604:76:623\"]},{\"tk\":[1206,5,1206,10],\"els\":[\"0:3666#out:1\",\"0:3666\",\"0:2603:243\",\"0:2603:522\"]},{\"tk\":[1206,11,1206,12],\"els\":[\"0:3666#out:1\",\"0:3666\",\"0:2603:243\",\"0:2603:522\"]},{\"tk\":[1206,13,1206,21],\"els\":[\"0:3666#out:1\",\"0:3666\",\"0:2603:243\",\"0:2603:522\",\"0:2605:1409#out:1\"]},{\"tk\":[1206,22,1206,23],\"els\":[\"0:3666#out:1\",\"0:3666\",\"0:2603:243\",\"0:2603:522\",\"0:2603:241\"]},{\"tk\":[1206,24,1206,34],\"els\":[\"0:3666#out:1\",\"0:3666\",\"0:2603:243\",\"0:2603:522\",\"0:2605:1407#out:1\"]},{\"tk\":[1206,35,1206,36],\"els\":[\"0:3666#out:1\",\"0:3666\",\"0:2603:243\",\"0:2603:522\"]},{\"tk\":[1206,37,1206,48],\"els\":[\"0:3666#out:1\",\"0:3666\",\"0:2603:243\",\"0:2603:522\",\"0:4203:473-484\"]},{\"tk\":[1206,49,1206,50],\"els\":[\"0:3666#out:1\",\"0:3666\",\"0:2603:243\",\"0:2603:522\",\"0:2603:240\"]},{\"tk\":[1206,51,1206,59],\"els\":[\"0:3666#out:1\",\"0:3666\",\"0:2603:243\",\"0:2603:522\",\"0:2604:76:615#out:1\"]},{\"tk\":[1206,59,1206,60],\"els\":[\"0:3666#out:1\",\"0:3666\",\"0:2603:243\",\"0:2603:522\"]},{\"tk\":[1214,5,1214,10],\"els\":[\"0:3667#out:1\",\"0:3667\",\"0:2603:242\",\"0:2603:522\"]},{\"tk\":[1214,11,1214,12],\"els\":[\"0:3667#out:1\",\"0:3667\",\"0:2603:242\",\"0:2603:522\"]},{\"tk\":[1214,13,1214,24],\"els\":[\"0:3667#out:1\",\"0:3667\",\"0:2603:242\",\"0:2603:522\",\"0:4203:473-484\"]},{\"tk\":[1214,25,1214,26],\"els\":[\"0:3667#out:1\",\"0:3667\",\"0:2603:242\",\"0:2603:522\",\"0:2603:239\"]},{\"tk\":[1214,27,1214,37],\"els\":[\"0:3667#out:1\",\"0:3667\",\"0:2603:242\",\"0:2603:522\",\"0:2605:1407#out:1\"]},{\"tk\":[1214,38,1214,39],\"els\":[\"0:3667#out:1\",\"0:3667\",\"0:2603:242\",\"0:2603:522\"]},{\"tk\":[1214,40,1214,48],\"els\":[\"0:3667#out:1\",\"0:3667\",\"0:2603:242\",\"0:2603:522\",\"0:2605:1409#out:1\"]},{\"tk\":[1214,49,1214,50],\"els\":[\"0:3667#out:1\",\"0:3667\",\"0:2603:242\",\"0:2603:522\",\"0:2603:238\"]},{\"tk\":[1214,51,1214,59],\"els\":[\"0:3667#out:1\",\"0:3667\",\"0:2603:242\",\"0:2603:522\",\"0:2604:76:615#out:1\"]},{\"tk\":[1214,59,1214,60],\"els\":[\"0:3667#out:1\",\"0:3667\",\"0:2603:242\",\"0:2603:522\"]},{\"tk\":[1220,5,1220,12],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1220,13,1220,14],\"els\":[\"0:4871\"]},{\"tk\":[1220,15,1220,21],\"els\":[\"0:4871\"]},{\"tk\":[1220,22,1220,23],\"els\":[\"0:4871\"]},{\"tk\":[1220,24,1220,29],\"els\":[\"0:4871\"]},{\"tk\":[1233,5,1233,13],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1233,14,1233,15],\"els\":[\"0:4203:249-274\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1233,16,1233,24],\"els\":[\"0:4203::25\",\"0:4203\",\"0:4243\"]},{\"tk\":[1233,25,1233,26],\"els\":[\"0:4203:261-274\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1233,27,1233,39],\"els\":[\"0:2687:250#out:1\"]},{\"tk\":[1233,40,1233,41],\"els\":[\"0:4203:253-274\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1233,42,1233,49],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1236,5,1236,7],\"els\":[\"0:4203:371-467\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1236,9,1236,10],\"els\":[\"0:4203:374-380\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1236,19,1236,23],\"els\":[\"0:4203:374-380\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1236,24,1236,32],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1236,34,1236,35],\"els\":[\"0:4203:374-390\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1236,36,1236,45],\"els\":[\"0:4203::25\",\"0:4203\",\"0:4244\"]},{\"tk\":[1239,7,1239,9],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1239,11,1239,19],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1239,20,1239,28],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1240,9,1240,17],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1240,18,1240,19],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1240,20,1240,21],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1241,14,1241,16],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1241,18,1241,26],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1241,27,1241,28],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1241,29,1241,33],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1242,9,1242,17],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1242,18,1242,19],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1242,20,1242,21],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1244,9,1244,17],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1244,18,1244,19],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1244,20,1244,21],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1244,31,1244,39],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1244,40,1244,41],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1244,42,1244,46],\"els\":[\"0:4203:410-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1247,7,1247,15],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1247,16,1247,18],\"els\":[\"0:4203:399-417\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1247,19,1247,20],\"els\":[\"0:4203:405-409\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1247,20,1247,25],\"els\":[\"0:4203::25\",\"0:4203\",\"0:4245\"]},{\"tk\":[1250,7,1250,15],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1250,16,1250,17],\"els\":[\"0:4203:436-458\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1250,18,1250,26],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1250,27,1250,28],\"els\":[\"0:4203:448-457\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1250,29,1250,38],\"els\":[\"0:4203::25\",\"0:4203\",\"0:4244\"]},{\"tk\":[1250,39,1250,40],\"els\":[\"0:4203:442-458\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1250,41,1250,42],\"els\":[\"0:4203:442-446\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1250,42,1250,47],\"els\":[\"0:4203::25\",\"0:4203\",\"0:4245\"]},{\"tk\":[1259,5,1259,18],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1259,19,1259,20],\"els\":[\"0:4826\",\"0:4821\"]},{\"tk\":[1259,21,1259,28],\"els\":[\"0:4873\"]},{\"tk\":[1259,29,1259,30],\"els\":[\"0:4873\"]},{\"tk\":[1259,31,1259,42],\"els\":[\"0:2687:158#out:1\"]},{\"tk\":[1259,43,1259,44],\"els\":[\"0:4876\"]},{\"tk\":[1259,45,1259,57],\"els\":[\"0:4876\"]},{\"tk\":[1259,58,1259,59],\"els\":[\"0:4826\"]},{\"tk\":[1259,60,1259,64],\"els\":[\"0:4826\"]},{\"tk\":[1270,5,1270,16],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1270,17,1270,18],\"els\":[\"0:4203:473-497\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1270,20,1270,32],\"els\":[\"0:4203:320-327\",\"0:4203\",\"0:4203::25\",\"0:4824\"]},{\"tk\":[1270,33,1270,34],\"els\":[\"0:4203:320-327\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1270,35,1270,42],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1270,43,1270,44],\"els\":[\"0:4203:320-360\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1270,46,1270,52],\"els\":[\"0:4872\"]},{\"tk\":[1270,53,1270,54],\"els\":[\"0:4872\"]},{\"tk\":[1270,55,1270,60],\"els\":[\"0:4872\"]},{\"tk\":[1270,61,1270,62],\"els\":[\"0:4203:334-342\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1270,63,1270,76],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1270,77,1270,78],\"els\":[\"0:4203:334-359\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1271,7,1271,15],\"els\":[\"0:4203::25\",\"0:4203\",\"0:4243\"]},{\"tk\":[1271,16,1271,17],\"els\":[\"0:4203:345-359\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1271,18,1271,25],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1271,27,1271,28],\"els\":[\"0:4203:330-360\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1271,29,1271,38],\"els\":[\"0:4203:330-360\",\"0:4203\",\"0:4203::25\",\"0:4825\"]},{\"tk\":[1271,40,1271,41],\"els\":[\"0:4203:487-497\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1271,42,1271,50],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1272,5,1272,7],\"els\":[\"0:4203:579-794\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1272,9,1272,20],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1272,21,1272,23],\"els\":[\"0:4203:582-602\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1272,24,1272,35],\"els\":[\"0:4203\",\"0:4203::25\",\"0:3661\"]},{\"tk\":[1275,7,1275,18],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1275,19,1275,20],\"els\":[\"0:4203:611-630\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1275,21,1275,32],\"els\":[\"0:4203\",\"0:4203::25\",\"0:3661\"]},{\"tk\":[1278,7,1278,19],\"els\":[\"0:4203::25#out:2\"]},{\"tk\":[1278,20,1278,21],\"els\":[\"0:4203:640-657\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1278,22,1278,23],\"els\":[\"0:4203:648-657\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1279,12,1279,14],\"els\":[\"0:4203:663-751\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1279,16,1279,27],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1279,28,1279,30],\"els\":[\"0:4203:670-692\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1279,31,1279,32],\"els\":[\"0:4203:685-692\",\"0:4203\",\"0:4203::25\",\"0:3661\"]},{\"tk\":[1282,7,1282,18],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1282,19,1282,20],\"els\":[\"0:4203:701-722\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1282,21,1282,22],\"els\":[\"0:4203:715-722\",\"0:4203\",\"0:4203::25\",\"0:3661\"]},{\"tk\":[1285,7,1285,19],\"els\":[\"0:4203::25#out:2\"]},{\"tk\":[1285,20,1285,21],\"els\":[\"0:4203:732-749\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1285,22,1285,23],\"els\":[\"0:4203:740-749\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1288,7,1288,19],\"els\":[\"0:4203::25#out:2\"]},{\"tk\":[1288,20,1288,21],\"els\":[\"0:4203:768-785\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1288,22,1288,23],\"els\":[\"0:4203:776-785\",\"0:4203\",\"0:4203::25\"]},{\"tk\":[1294,5,1294,20],\"els\":[\"0:4891#out:1\"]},{\"tk\":[1294,21,1294,22],\"els\":[\"0:4891\"]},{\"tk\":[1294,23,1294,42],\"els\":[\"0:4891\"]},{\"tk\":[1294,43,1294,61],\"els\":[\"0:4891\"]},{\"tk\":[1299,5,1299,7],\"els\":[\"0:4227\"]},{\"tk\":[1299,9,1299,28],\"els\":[\"0:4227\"]},{\"tk\":[1299,29,1299,60],\"els\":[\"0:4227\"]},{\"tk\":[1299,61,1299,63],\"els\":[\"0:4227\"]},{\"tk\":[1299,64,1299,65],\"els\":[\"0:4227\"]},{\"tk\":[1301,7,1301,31],\"els\":[\"0:4227#out:1\"]},{\"tk\":[1301,32,1301,33],\"els\":[\"0:4227#out:1\",\"0:4227\"]},{\"tk\":[1302,9,1302,28],\"els\":[\"0:4227\"]},{\"tk\":[1302,29,1302,60],\"els\":[\"0:4227\"]},{\"tk\":[1303,12,1303,14],\"els\":[\"0:4227\"]},{\"tk\":[1303,17,1303,36],\"els\":[\"0:4891\"]},{\"tk\":[1303,37,1303,55],\"els\":[\"0:4891\"]},{\"tk\":[1303,56,1303,58],\"els\":[\"0:4227\"]},{\"tk\":[1303,59,1303,63],\"els\":[\"0:4227\"]},{\"tk\":[1303,65,1303,67],\"els\":[\"0:4227\"]},{\"tk\":[1304,17,1304,36],\"els\":[\"0:4227\"]},{\"tk\":[1304,37,1304,68],\"els\":[\"0:4227\"]},{\"tk\":[1304,69,1304,71],\"els\":[\"0:4227\"]},{\"tk\":[1304,72,1304,73],\"els\":[\"0:4227\"]},{\"tk\":[1305,7,1305,26],\"els\":[\"0:4227\"]},{\"tk\":[1305,27,1305,58],\"els\":[\"0:4227\"]},{\"tk\":[1305,59,1305,60],\"els\":[\"0:4227\"]},{\"tk\":[1305,61,1305,65],\"els\":[\"0:4227\"]},{\"tk\":[1308,7,1308,31],\"els\":[\"0:4227#out:1\"]},{\"tk\":[1308,32,1308,33],\"els\":[\"0:4227#out:1\",\"0:4227\"]},{\"tk\":[1309,9,1309,28],\"els\":[\"0:4227\"]},{\"tk\":[1309,29,1309,60],\"els\":[\"0:4227\"]},{\"tk\":[1312,7,1312,31],\"els\":[\"0:4227#out:1\"]},{\"tk\":[1312,32,1312,33],\"els\":[\"0:4227#out:1\",\"0:4227\"]},{\"tk\":[1312,34,1312,41],\"els\":[\"0:4227\"]},{\"tk\":[1312,42,1312,43],\"els\":[\"0:4227\"]},{\"tk\":[1312,44,1312,45],\"els\":[\"0:4227\"]},{\"tk\":[1312,54,1312,76],\"els\":[\"0:4227\"]},{\"tk\":[1313,9,1313,10],\"els\":[\"0:4227\"]},{\"tk\":[1313,11,1313,30],\"els\":[\"0:4227\"]},{\"tk\":[1313,31,1313,62],\"els\":[\"0:4227\"]},{\"tk\":[1313,63,1313,64],\"els\":[\"0:4227\"]},{\"tk\":[1314,9,1314,28],\"els\":[\"0:4227\"]},{\"tk\":[1314,29,1314,60],\"els\":[\"0:4227\"]},{\"tk\":[1320,5,1320,13],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1320,14,1320,15],\"els\":[\"0:4867\"]},{\"tk\":[1320,16,1320,22],\"els\":[\"0:4867\"]},{\"tk\":[1320,23,1320,24],\"els\":[\"0:4867\"]},{\"tk\":[1320,25,1320,30],\"els\":[\"0:4867\"]},{\"tk\":[1325,5,1325,11],\"els\":[\"0:4231#out:1\",\"0:4231\"]},{\"tk\":[1325,12,1325,13],\"els\":[\"0:4231#out:1\",\"0:4231\"]},{\"tk\":[1325,14,1325,22],\"els\":[\"0:4231#out:1\",\"0:4231\",\"0:2605:1409#out:1\"]},{\"tk\":[1325,23,1325,24],\"els\":[\"0:4231#out:1\",\"0:4231\"]},{\"tk\":[1325,25,1325,31],\"els\":[\"0:4231#out:1\",\"0:4231\",\"0:4865\"]},{\"tk\":[1325,32,1325,33],\"els\":[\"0:4231#out:1\",\"0:4231\",\"0:4865\"]},{\"tk\":[1325,34,1325,43],\"els\":[\"0:4231#out:1\",\"0:4231\",\"0:4865\"]},{\"tk\":[1325,43,1325,44],\"els\":[\"0:4231#out:1\",\"0:4231\"]},{\"tk\":[1343,5,1343,13],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1343,14,1343,15],\"els\":[\"0:4229:263-287\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1343,16,1343,24],\"els\":[\"0:4229::25\",\"0:4229\",\"0:4253\"]},{\"tk\":[1343,25,1343,26],\"els\":[\"0:4229:273-287\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1343,27,1343,51],\"els\":[\"0:4229\",\"0:4229::25\"]},{\"tk\":[1343,52,1343,53],\"els\":[\"0:4229:267-287\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1343,54,1343,60],\"els\":[\"0:4229\",\"0:4229::25\"]},{\"tk\":[1344,5,1344,7],\"els\":[\"0:4229:313-409\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1344,9,1344,10],\"els\":[\"0:4229:316-322\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1344,19,1344,23],\"els\":[\"0:4229:316-322\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1344,24,1344,32],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1344,34,1344,35],\"els\":[\"0:4229:316-332\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1344,36,1344,45],\"els\":[\"0:4229::25\",\"0:4229\",\"0:4254\"]},{\"tk\":[1347,7,1347,9],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1347,11,1347,19],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1347,20,1347,28],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1348,9,1348,17],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1348,18,1348,19],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1348,20,1348,21],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1349,14,1349,16],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1349,18,1349,26],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1349,27,1349,28],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1349,29,1349,33],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1350,9,1350,17],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1350,18,1350,19],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1350,20,1350,21],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1352,9,1352,17],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1352,18,1352,19],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1352,20,1352,21],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1352,31,1352,39],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1352,40,1352,41],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1352,42,1352,46],\"els\":[\"0:4229:352-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1355,7,1355,15],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1355,16,1355,18],\"els\":[\"0:4229:341-359\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1355,19,1355,20],\"els\":[\"0:4229:347-351\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1355,20,1355,25],\"els\":[\"0:4229::25\",\"0:4229\",\"0:4255\"]},{\"tk\":[1358,7,1358,15],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1358,16,1358,17],\"els\":[\"0:4229:378-400\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1358,18,1358,26],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1358,27,1358,28],\"els\":[\"0:4229:390-399\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1358,29,1358,38],\"els\":[\"0:4229::25\",\"0:4229\",\"0:4254\"]},{\"tk\":[1358,39,1358,40],\"els\":[\"0:4229:384-400\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1358,41,1358,42],\"els\":[\"0:4229:384-388\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1358,42,1358,47],\"els\":[\"0:4229::25\",\"0:4229\",\"0:4255\"]},{\"tk\":[1363,5,1363,18],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1363,19,1363,20],\"els\":[\"0:4229:501-525\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1363,23,1363,29],\"els\":[\"0:4868\"]},{\"tk\":[1363,30,1363,31],\"els\":[\"0:4868\"]},{\"tk\":[1363,32,1363,37],\"els\":[\"0:4868\"]},{\"tk\":[1363,38,1363,39],\"els\":[\"0:4229:471-479\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1363,54,1363,55],\"els\":[\"0:4229:471-494\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1363,56,1363,64],\"els\":[\"0:4229::25\",\"0:4229\",\"0:4253\"]},{\"tk\":[1363,65,1363,66],\"els\":[\"0:4229:482-494\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1363,67,1363,73],\"els\":[\"0:4229\",\"0:4229::25\"]},{\"tk\":[1363,75,1363,76],\"els\":[\"0:4229:467-495\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1364,22,1364,31],\"els\":[\"0:4229:467-495\",\"0:4229\",\"0:4229::25\",\"0:4225\"]},{\"tk\":[1364,32,1364,33],\"els\":[\"0:4229:447-495\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1364,35,1364,47],\"els\":[\"0:4229:447-454\",\"0:4229\",\"0:4229::25\",\"0:4224\"]},{\"tk\":[1364,48,1364,49],\"els\":[\"0:4229:447-454\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1364,50,1364,58],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1364,59,1364,60],\"els\":[\"0:4229:447-464\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1364,61,1364,75],\"els\":[\"0:4229:457-464\",\"0:4229\",\"0:4229::25\",\"0:4220\"]},{\"tk\":[1364,76,1364,77],\"els\":[\"0:4229:457-464\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1365,23,1365,24],\"els\":[\"0:4229:515-525\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1365,25,1365,33],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1366,5,1366,7],\"els\":[\"0:4229:607-822\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1366,9,1366,22],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1366,23,1366,25],\"els\":[\"0:4229:610-630\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1366,26,1366,37],\"els\":[\"0:4229\",\"0:4229::25\",\"0:4228\"]},{\"tk\":[1369,7,1369,20],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1369,21,1369,22],\"els\":[\"0:4229:639-658\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1369,23,1369,34],\"els\":[\"0:4229\",\"0:4229::25\",\"0:4228\"]},{\"tk\":[1372,7,1372,16],\"els\":[\"0:4229::25#out:2\"]},{\"tk\":[1372,17,1372,18],\"els\":[\"0:4229:668-685\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1372,19,1372,20],\"els\":[\"0:4229:676-685\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1373,12,1373,14],\"els\":[\"0:4229:691-779\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1373,16,1373,29],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1373,30,1373,32],\"els\":[\"0:4229:698-720\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1373,33,1373,34],\"els\":[\"0:4229:713-720\",\"0:4229\",\"0:4229::25\",\"0:4228\"]},{\"tk\":[1376,7,1376,20],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1376,21,1376,22],\"els\":[\"0:4229:729-750\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1376,23,1376,24],\"els\":[\"0:4229:743-750\",\"0:4229\",\"0:4229::25\",\"0:4228\"]},{\"tk\":[1379,7,1379,16],\"els\":[\"0:4229::25#out:2\"]},{\"tk\":[1379,17,1379,18],\"els\":[\"0:4229:760-777\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1379,19,1379,20],\"els\":[\"0:4229:768-777\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1382,7,1382,16],\"els\":[\"0:4229::25#out:2\"]},{\"tk\":[1382,17,1382,18],\"els\":[\"0:4229:796-813\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1382,19,1382,20],\"els\":[\"0:4229:804-813\",\"0:4229\",\"0:4229::25\"]},{\"tk\":[1388,5,1388,13],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1388,14,1388,15],\"els\":[\"0:3621\"]},{\"tk\":[1388,16,1388,20],\"els\":[\"0:3621\"]},{\"tk\":[1388,21,1388,22],\"els\":[\"0:3621\"]},{\"tk\":[1388,23,1388,34],\"els\":[\"0:2687:158#out:1\"]},{\"tk\":[1399,5,1399,13],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1399,14,1399,15],\"els\":[\"0:3629\"]},{\"tk\":[1399,17,1399,29],\"els\":[\"0:4870\"]},{\"tk\":[1399,30,1399,31],\"els\":[\"0:4870\"]},{\"tk\":[1399,32,1399,45],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1399,46,1399,47],\"els\":[\"0:3629\"]},{\"tk\":[1399,48,1399,49],\"els\":[\"0:3610\"]},{\"tk\":[1399,59,1399,80],\"els\":[\"0:3614\",\"0:3611\"]},{\"tk\":[1399,81,1399,82],\"els\":[\"0:3614\"]},{\"tk\":[1400,7,1400,15],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1400,18,1400,19],\"els\":[\"0:3629\"]},{\"tk\":[1400,20,1400,28],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1400,29,1400,30],\"els\":[\"0:3613\"]},{\"tk\":[1400,31,1400,36],\"els\":[\"0:3613\"]},{\"tk\":[1400,37,1400,38],\"els\":[\"0:3612\"]},{\"tk\":[1400,39,1400,48],\"els\":[\"0:3612\"]},{\"tk\":[1409,5,1409,16],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1409,17,1409,18],\"els\":[\"0:3662\"]},{\"tk\":[1409,19,1409,31],\"els\":[\"0:4874\"]},{\"tk\":[1409,32,1409,33],\"els\":[\"0:4874\"]},{\"tk\":[1409,34,1409,45],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1409,46,1409,47],\"els\":[\"0:3662\"]},{\"tk\":[1409,48,1409,52],\"els\":[\"0:3618\"]},{\"tk\":[1409,53,1409,54],\"els\":[\"0:3618\"]},{\"tk\":[1409,55,1409,66],\"els\":[\"0:2687:158#out:1\"]},{\"tk\":[1409,67,1409,68],\"els\":[\"0:3607\"]},{\"tk\":[1409,69,1409,74],\"els\":[\"0:3607\"]},{\"tk\":[1409,75,1409,76],\"els\":[\"0:3606\"]},{\"tk\":[1410,7,1410,16],\"els\":[\"0:3606\"]},{\"tk\":[1416,5,1416,13],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1416,14,1416,15],\"els\":[\"0:2567:1207\"]},{\"tk\":[1416,16,1416,27],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1416,28,1416,29],\"els\":[\"0:2567:1557\"]},{\"tk\":[1416,30,1416,41],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1416,42,1416,43],\"els\":[\"0:2567:1207\"]},{\"tk\":[1416,44,1416,52],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1416,53,1416,54],\"els\":[\"0:2567:1559\"]},{\"tk\":[1416,55,1416,63],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1425,5,1425,7],\"els\":[\"0:2567:1546\",\"0:2567:1302\",\"0:2567:1301\",\"0:2567:1304\"]},{\"tk\":[1425,9,1425,17],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1425,18,1425,19],\"els\":[\"0:2567:1606\",\"0:2567:1302\",\"0:2567:1301\",\"0:2567:1304\",\"0:2567:1546\"]},{\"tk\":[1425,20,1425,27],\"els\":[\"0:2567:1606\",\"0:2567:1302\",\"0:2567:1301\",\"0:2567:1304\"]},{\"tk\":[1430,7,1430,15],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1430,16,1430,17],\"els\":[\"0:2567:1571\",\"0:2567:1547\",\"0:2567:1546\",\"0:2567:1549\",\"0:2567:1302\",\"0:2567:1301\",\"0:2567:1304\"]},{\"tk\":[1430,18,1430,19],\"els\":[\"0:2567:1571\",\"0:2567:1547\",\"0:2567:1546\",\"0:2567:1549\",\"0:2567:1302\",\"0:2567:1301\",\"0:2567:1304\"]},{\"tk\":[1430,28,1430,32],\"els\":[\"0:2567:1571\",\"0:2567:1547\",\"0:2567:1546\",\"0:2567:1549\",\"0:2567:1302\",\"0:2567:1301\",\"0:2567:1304\"]},{\"tk\":[1430,33,1430,41],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1438,7,1438,18],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1438,19,1438,20],\"els\":[\"0:2567:1672\",\"0:2567:1547\",\"0:2567:1546\",\"0:2567:1549\",\"0:2567:1302\",\"0:2567:1301\",\"0:2567:1304\"]},{\"tk\":[1438,21,1438,32],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1438,33,1438,34],\"els\":[\"0:2567:1666\",\"0:2567:1547\",\"0:2567:1546\",\"0:2567:1549\",\"0:2567:1302\",\"0:2567:1301\",\"0:2567:1304\"]},{\"tk\":[1438,35,1438,40],\"els\":[\"0:2567:1282\",\"0:2567:1280\"]},{\"tk\":[1438,41,1438,42],\"els\":[\"0:2567:1672\",\"0:2567:1547\",\"0:2567:1546\",\"0:2567:1549\",\"0:2567:1302\",\"0:2567:1301\",\"0:2567:1304\"]},{\"tk\":[1438,43,1438,51],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1439,7,1439,15],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1439,16,1439,17],\"els\":[\"0:2567:1672\",\"0:2567:1547\",\"0:2567:1546\",\"0:2567:1549\",\"0:2567:1302\",\"0:2567:1301\",\"0:2567:1304\"]},{\"tk\":[1439,18,1439,26],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1439,27,1439,28],\"els\":[\"0:2567:1666\",\"0:2567:1547\",\"0:2567:1546\",\"0:2567:1549\",\"0:2567:1302\",\"0:2567:1301\",\"0:2567:1304\"]},{\"tk\":[1439,29,1439,34],\"els\":[\"0:2567:1282\",\"0:2567:1280\"]},{\"tk\":[1439,35,1439,36],\"els\":[\"0:2567:1672\",\"0:2567:1547\",\"0:2567:1546\",\"0:2567:1549\",\"0:2567:1302\",\"0:2567:1301\",\"0:2567:1304\"]},{\"tk\":[1439,37,1439,45],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1453,5,1453,18],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1453,19,1453,20],\"els\":[\"0:2601:755\",\"0:2601:778\"]},{\"tk\":[1453,21,1453,32],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1453,33,1453,34],\"els\":[\"0:2601:431\",\"0:2601:778\"]},{\"tk\":[1453,35,1453,45],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1453,46,1453,47],\"els\":[\"0:2601:432\",\"0:2601:778\"]},{\"tk\":[1453,48,1453,56],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1453,57,1453,58],\"els\":[\"0:2601:433\",\"0:2601:778\"]},{\"tk\":[1453,59,1453,67],\"els\":[\"0:2604:76:615#out:1\"]},{\"tk\":[1458,5,1458,13],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1458,14,1458,15],\"els\":[\"0:2605:1632:493\"]},{\"tk\":[1458,16,1458,20],\"els\":[\"0:2605:1632:493\"]},{\"tk\":[1458,21,1458,22],\"els\":[\"0:2605:1632:493\"]},{\"tk\":[1458,23,1458,36],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1465,5,1465,13],\"els\":[\"0:2604:76:615#out:1\"]},{\"tk\":[1465,14,1465,15],\"els\":[\"0:2605:1632:492\"]},{\"tk\":[1465,17,1465,25],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1465,26,1465,27],\"els\":[\"0:2601:434\",\"0:2601:778\"]},{\"tk\":[1465,28,1465,38],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1465,39,1465,40],\"els\":[\"0:2601:436\",\"0:2601:778\"]},{\"tk\":[1465,41,1465,52],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1465,53,1465,54],\"els\":[\"0:2601:435\",\"0:2601:778\"]},{\"tk\":[1465,55,1465,63],\"els\":[\"0:2604:76:615#out:1\"]},{\"tk\":[1465,65,1465,66],\"els\":[\"0:2605:1632:492\"]},{\"tk\":[1465,67,1465,79],\"els\":[\"0:2605:1632:492\"]},{\"tk\":[1470,5,1470,15],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1470,16,1470,17],\"els\":[\"0:2605:1632:490\"]},{\"tk\":[1470,18,1470,26],\"els\":[\"0:2604:76:615#out:1\"]},{\"tk\":[1470,27,1470,28],\"els\":[\"0:2605:1632:490\"]},{\"tk\":[1470,29,1470,37],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1473,5,1473,13],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1473,14,1473,15],\"els\":[\"0:2605:1632:499\"]},{\"tk\":[1473,17,1473,21],\"els\":[\"0:2605:1632:499\"]},{\"tk\":[1473,22,1473,23],\"els\":[\"0:2605:1632:499\"]},{\"tk\":[1473,24,1473,32],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1473,34,1473,35],\"els\":[\"0:2605:1632:499\"]},{\"tk\":[1473,36,1473,44],\"els\":[\"0:2604:76:615#out:1\"]},{\"tk\":[1479,5,1479,8],\"els\":[\"0:2605:1403\"]},{\"tk\":[1479,9,1479,10],\"els\":[\"0:2605:1403\",\"0:2605:1404\"]},{\"tk\":[1479,11,1479,19],\"els\":[\"0:2605:1403\"]},{\"tk\":[1479,20,1479,30],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1482,5,1482,7],\"els\":[\"0:2605:1403\"]},{\"tk\":[1482,10,1482,23],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1482,24,1482,26],\"els\":[\"0:2605:1403\"]},{\"tk\":[1482,27,1482,37],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1482,39,1482,41],\"els\":[\"0:2605:1403\"]},{\"tk\":[1482,42,1482,45],\"els\":[\"0:2605:1403\"]},{\"tk\":[1483,7,1483,15],\"els\":[\"0:2604:76:615#out:1\"]},{\"tk\":[1483,16,1483,17],\"els\":[\"0:2605:1403\"]},{\"tk\":[1483,18,1483,31],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1485,7,1485,15],\"els\":[\"0:2604:76:615#out:1\"]},{\"tk\":[1485,16,1485,17],\"els\":[\"0:2605:1403\"]},{\"tk\":[1485,18,1485,28],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1491,5,1491,7],\"els\":[\"0:2605:1404\"]},{\"tk\":[1491,10,1491,23],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1491,24,1491,26],\"els\":[\"0:2605:1404\"]},{\"tk\":[1491,27,1491,37],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1491,39,1491,41],\"els\":[\"0:2605:1404\"]},{\"tk\":[1492,7,1492,18],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1492,19,1492,20],\"els\":[\"0:2605:1404\"]},{\"tk\":[1492,21,1492,34],\"els\":[\"0:4229:501-512\"]},{\"tk\":[1494,7,1494,18],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1494,19,1494,20],\"els\":[\"0:2605:1404\"]},{\"tk\":[1494,21,1494,31],\"els\":[\"0:2605:1407#out:1\"]},{\"tk\":[1502,5,1502,8],\"els\":[\"0:2605:1403\"]},{\"tk\":[1502,9,1502,10],\"els\":[\"0:2605:1403\",\"0:2605:1404\"]},{\"tk\":[1502,11,1502,12],\"els\":[\"0:2605:1403\"]},{\"tk\":[1502,12,1502,20],\"els\":[\"0:2605:1403\"]},{\"tk\":[1502,21,1502,29],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1503,5,1503,7],\"els\":[\"0:2605:1403\"]},{\"tk\":[1503,10,1503,11],\"els\":[\"0:2605:1403\"]},{\"tk\":[1503,12,1503,20],\"els\":[\"0:2604:76:615#out:1\"]},{\"tk\":[1503,21,1503,23],\"els\":[\"0:2605:1403\"]},{\"tk\":[1503,24,1503,32],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1503,35,1503,37],\"els\":[\"0:2605:1403\"]},{\"tk\":[1503,38,1503,41],\"els\":[\"0:2605:1403\"]},{\"tk\":[1504,7,1504,15],\"els\":[\"0:2604:76:615#out:1\"]},{\"tk\":[1504,16,1504,17],\"els\":[\"0:2605:1403\"]},{\"tk\":[1504,18,1504,26],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1508,5,1508,7],\"els\":[\"0:2605:1404\"]},{\"tk\":[1508,10,1508,11],\"els\":[\"0:2605:1404\"]},{\"tk\":[1508,12,1508,23],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1508,24,1508,26],\"els\":[\"0:2605:1404\"]},{\"tk\":[1508,27,1508,35],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1508,38,1508,40],\"els\":[\"0:2605:1404\"]},{\"tk\":[1509,7,1509,18],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1509,19,1509,20],\"els\":[\"0:2605:1404\"]},{\"tk\":[1509,21,1509,29],\"els\":[\"0:2605:1408#out:1\"]},{\"tk\":[1517,5,1517,13],\"els\":[\"0:2605:1409#out:1\"]},{\"tk\":[1517,14,1517,15],\"els\":[\"0:2605:1405\"]},{\"tk\":[1517,17,1517,25],\"els\":[\"0:2604:76:615#out:1\"]},{\"tk\":[1517,26,1517,27],\"els\":[\"0:2605:1400\"]},{\"tk\":[1517,28,1517,39],\"els\":[\"0:4203:473-484\"]},{\"tk\":[1517,41,1517,42],\"els\":[\"0:2605:1405\"]},{\"tk\":[1517,43,1517,44],\"els\":[\"0:2605:1405\"]},{\"tk\":[1529,5,1529,20],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1529,20,1529,21],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1529,21,1529,22],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1529,22,1529,23],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1529,24,1529,25],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1529,26,1529,27],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1529,27,1529,28],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1529,28,1529,41],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:4229:501-512\"]},{\"tk\":[1529,42,1529,43],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1409\"]},{\"tk\":[1529,44,1529,52],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1409#out:1\"]},{\"tk\":[1529,52,1529,53],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1529,54,1529,55],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1551\"]},{\"tk\":[1529,56,1529,67],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1551\"]},{\"tk\":[1529,68,1529,69],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:3091\"]},{\"tk\":[1529,70,1529,74],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:3091\",\"0:3089\"]},{\"tk\":[1529,74,1529,75],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1529,76,1529,77],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1530,7,1530,11],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1530,11,1530,12],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1533,5,1533,20],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1533,20,1533,21],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1533,21,1533,22],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1533,22,1533,23],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1533,24,1533,25],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1533,26,1533,27],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1533,27,1533,28],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1533,28,1533,38],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1407#out:1\"]},{\"tk\":[1533,39,1533,40],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1407\"]},{\"tk\":[1533,41,1533,49],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1409#out:1\"]},{\"tk\":[1533,49,1533,50],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1533,51,1533,52],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1551\"]},{\"tk\":[1533,53,1533,64],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1551\"]},{\"tk\":[1533,65,1533,66],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:3091\"]},{\"tk\":[1533,67,1533,71],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:3091\",\"0:3089\"]},{\"tk\":[1533,71,1533,72],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1533,73,1533,74],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1533,75,1533,79],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1533,79,1533,80],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1534,5,1534,20],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1534,20,1534,21],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1534,21,1534,22],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1534,22,1534,23],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1534,24,1534,25],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1534,26,1534,27],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1534,27,1534,28],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1534,28,1534,36],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1409#out:1\"]},{\"tk\":[1534,37,1534,38],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1408\"]},{\"tk\":[1534,39,1534,47],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1408#out:1\"]},{\"tk\":[1534,47,1534,48],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1534,49,1534,50],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1551\"]},{\"tk\":[1534,51,1534,62],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:2605:1551\"]},{\"tk\":[1534,63,1534,64],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:3091\"]},{\"tk\":[1534,65,1534,69],\"els\":[\"0:3090#out:1\",\"0:3090\",\"0:3091\",\"0:3089\"]},{\"tk\":[1534,69,1534,70],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1534,71,1534,72],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1534,73,1534,77],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1534,77,1534,78],\"els\":[\"0:3090#out:1\",\"0:3090\"]},{\"tk\":[1539,5,1539,15],\"els\":[\"0:2830#out:1\",\"0:2830\"]},{\"tk\":[1539,16,1539,17],\"els\":[\"0:2830#out:1\",\"0:2830\"]},{\"tk\":[1539,18,1539,19],\"els\":[\"0:2830#out:1\",\"0:2830\"]},{\"tk\":[1539,19,1539,27],\"els\":[\"0:2830#out:1\",\"0:2830\"]},{\"tk\":[1539,27,1539,28],\"els\":[\"0:2830#out:1\",\"0:2830\"]},{\"tk\":[1539,28,1539,34],\"els\":[\"0:2830#out:1\",\"0:2830\",\"0:2831\"]},{\"tk\":[1539,34,1539,35],\"els\":[\"0:2830#out:1\",\"0:2830\"]},{\"tk\":[1542,5,1542,7],\"els\":[\"0:2791\"]},{\"tk\":[1542,9,1542,19],\"els\":[\"0:2791\"]},{\"tk\":[1542,20,1542,22],\"els\":[\"0:2791\"]},{\"tk\":[1542,23,1542,27],\"els\":[\"0:2791\"]},{\"tk\":[1544,7,1544,10],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1544,10,1544,11],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1544,11,1544,12],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1544,12,1544,13],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1544,14,1544,15],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1544,16,1544,31],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1544,31,1544,32],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1544,32,1544,33],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1544,33,1544,34],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1544,34,1544,35],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1545,7,1545,10],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1545,10,1545,11],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1545,11,1545,12],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1545,12,1545,13],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1545,14,1545,15],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1545,16,1545,31],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1545,31,1545,32],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1545,32,1545,33],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1545,33,1545,34],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1545,34,1545,35],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1546,7,1546,10],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1546,10,1546,11],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1546,11,1546,12],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1546,12,1546,13],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1546,14,1546,15],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1546,16,1546,31],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1546,31,1546,32],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1546,32,1546,33],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1546,33,1546,34],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1546,34,1546,35],\"els\":[\"0:2791\",\"0:2791#out:1\"]},{\"tk\":[1551,7,1551,10],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1551,10,1551,11],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1551,11,1551,12],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1551,12,1551,13],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1551,14,1551,15],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1551,16,1551,20],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1551,20,1551,21],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1552,7,1552,10],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1552,10,1552,11],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1552,11,1552,12],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1552,12,1552,13],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1552,14,1552,15],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1552,16,1552,20],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1552,20,1552,21],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1553,7,1553,10],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1553,10,1553,11],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1553,11,1553,12],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1553,12,1553,13],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1553,14,1553,15],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1553,16,1553,20],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1553,20,1553,21],\"els\":[\"0:2791#out:1\",\"0:2791\",\"0:2792\"]},{\"tk\":[1559,5,1559,6],\"els\":[\"0:3074\"]},{\"tk\":[1560,7,1560,15],\"els\":[\"0:3074\"]},{\"tk\":[1560,16,1560,21],\"els\":[\"0:3074\"]},{\"tk\":[1560,22,1560,23],\"els\":[\"0:3074\"]},{\"tk\":[1560,24,1560,42],\"els\":[\"0:3074\"]},{\"tk\":[1560,43,1560,44],\"els\":[\"0:3074\"]},{\"tk\":[1560,45,1560,48],\"els\":[\"0:3074\"]},{\"tk\":[1560,48,1560,49],\"els\":[\"0:3074\"]},{\"tk\":[1560,49,1560,50],\"els\":[\"0:3074\"]},{\"tk\":[1560,50,1560,51],\"els\":[\"0:3074\"]},{\"tk\":[1560,51,1560,52],\"els\":[\"0:3074\"]},{\"tk\":[1561,7,1561,31],\"els\":[\"0:3074\"]},{\"tk\":[1561,31,1561,32],\"els\":[\"0:3074\"]},{\"tk\":[1561,32,1561,40],\"els\":[\"0:3074\"]},{\"tk\":[1561,40,1561,41],\"els\":[\"0:3074\"]},{\"tk\":[1561,42,1561,44],\"els\":[\"0:3074\"]},{\"tk\":[1561,44,1561,45],\"els\":[\"0:3074\"]},{\"tk\":[1561,46,1561,74],\"els\":[\"0:3074\"]},{\"tk\":[1561,74,1561,75],\"els\":[\"0:3074\"]},{\"tk\":[1561,76,1561,81],\"els\":[\"0:3074\"]},{\"tk\":[1561,81,1561,82],\"els\":[\"0:3074\"]},{\"tk\":[1562,9,1562,10],\"els\":[\"0:3074\"]},{\"tk\":[1562,10,1562,11],\"els\":[\"0:3074\"]},{\"tk\":[1562,12,1562,16],\"els\":[\"0:3074\"]},{\"tk\":[1562,16,1562,17],\"els\":[\"0:3074\"]},{\"tk\":[1562,17,1562,18],\"els\":[\"0:3074\"]},{\"tk\":[1563,5,1563,6],\"els\":[\"0:3074\"]},{\"tk\":[1565,5,1565,6],\"els\":[\"0:3074\"]},{\"tk\":[1566,7,1566,15],\"els\":[\"0:3074\"]},{\"tk\":[1566,16,1566,21],\"els\":[\"0:3074\"]},{\"tk\":[1566,22,1566,23],\"els\":[\"0:3074\"]},{\"tk\":[1566,24,1566,42],\"els\":[\"0:3074\"]},{\"tk\":[1566,43,1566,44],\"els\":[\"0:3074\"]},{\"tk\":[1566,45,1566,48],\"els\":[\"0:3074\"]},{\"tk\":[1566,48,1566,49],\"els\":[\"0:3074\"]},{\"tk\":[1566,49,1566,50],\"els\":[\"0:3074\"]},{\"tk\":[1566,50,1566,51],\"els\":[\"0:3074\"]},{\"tk\":[1566,51,1566,52],\"els\":[\"0:3074\"]},{\"tk\":[1567,7,1567,31],\"els\":[\"0:3074\"]},{\"tk\":[1567,31,1567,32],\"els\":[\"0:3074\"]},{\"tk\":[1567,32,1567,40],\"els\":[\"0:3074\"]},{\"tk\":[1567,40,1567,41],\"els\":[\"0:3074\"]},{\"tk\":[1567,42,1567,44],\"els\":[\"0:3074\"]},{\"tk\":[1567,44,1567,45],\"els\":[\"0:3074\"]},{\"tk\":[1567,46,1567,74],\"els\":[\"0:3074\"]},{\"tk\":[1567,74,1567,75],\"els\":[\"0:3074\"]},{\"tk\":[1567,76,1567,81],\"els\":[\"0:3074\"]},{\"tk\":[1567,81,1567,82],\"els\":[\"0:3074\"]},{\"tk\":[1568,9,1568,10],\"els\":[\"0:3074\"]},{\"tk\":[1568,10,1568,11],\"els\":[\"0:3074\"]},{\"tk\":[1568,12,1568,16],\"els\":[\"0:3074\"]},{\"tk\":[1568,16,1568,17],\"els\":[\"0:3074\"]},{\"tk\":[1568,17,1568,18],\"els\":[\"0:3074\"]},{\"tk\":[1569,5,1569,6],\"els\":[\"0:3074\"]},{\"tk\":[1571,5,1571,6],\"els\":[\"0:3074\"]},{\"tk\":[1572,7,1572,15],\"els\":[\"0:3074\"]},{\"tk\":[1572,16,1572,21],\"els\":[\"0:3074\"]},{\"tk\":[1572,22,1572,23],\"els\":[\"0:3074\"]},{\"tk\":[1572,24,1572,42],\"els\":[\"0:3074\"]},{\"tk\":[1572,43,1572,44],\"els\":[\"0:3074\"]},{\"tk\":[1572,45,1572,48],\"els\":[\"0:3074\"]},{\"tk\":[1572,48,1572,49],\"els\":[\"0:3074\"]},{\"tk\":[1572,49,1572,50],\"els\":[\"0:3074\"]},{\"tk\":[1572,50,1572,51],\"els\":[\"0:3074\"]},{\"tk\":[1572,51,1572,52],\"els\":[\"0:3074\"]},{\"tk\":[1573,7,1573,31],\"els\":[\"0:3074\"]},{\"tk\":[1573,31,1573,32],\"els\":[\"0:3074\"]},{\"tk\":[1573,32,1573,40],\"els\":[\"0:3074\"]},{\"tk\":[1573,40,1573,41],\"els\":[\"0:3074\"]},{\"tk\":[1573,42,1573,44],\"els\":[\"0:3074\"]},{\"tk\":[1573,44,1573,45],\"els\":[\"0:3074\"]},{\"tk\":[1573,46,1573,74],\"els\":[\"0:3074\"]},{\"tk\":[1573,74,1573,75],\"els\":[\"0:3074\"]},{\"tk\":[1573,76,1573,81],\"els\":[\"0:3074\"]},{\"tk\":[1573,81,1573,82],\"els\":[\"0:3074\"]},{\"tk\":[1574,9,1574,10],\"els\":[\"0:3074\"]},{\"tk\":[1574,10,1574,11],\"els\":[\"0:3074\"]},{\"tk\":[1574,12,1574,16],\"els\":[\"0:3074\"]},{\"tk\":[1574,16,1574,17],\"els\":[\"0:3074\"]},{\"tk\":[1574,17,1574,18],\"els\":[\"0:3074\"]},{\"tk\":[1575,5,1575,6],\"els\":[\"0:3074\"]},{\"tk\":[1578,5,1578,19],\"els\":[\"0:2787\"]},{\"tk\":[1578,19,1578,20],\"els\":[\"0:2787\"]},{\"tk\":[1578,20,1578,21],\"els\":[\"0:2787\"]},{\"tk\":[1578,21,1578,22],\"els\":[\"0:2787\"]},{\"tk\":[1581,5,1581,18],\"els\":[\"0:2919\"]},{\"tk\":[1581,19,1581,20],\"els\":[\"0:2919\"]},{\"tk\":[1581,21,1581,32],\"els\":[\"0:2919\",\"0:2687:158#out:1\"]},{\"tk\":[1581,32,1581,33],\"els\":[\"0:2919\"]},{\"tk\":[1584,5,1584,24],\"els\":[\"0:2687:431:343\"]},{\"tk\":[1584,25,1584,45],\"els\":[\"0:2687:431:343\"]},{\"tk\":[1584,46,1584,47],\"els\":[\"0:2687:431:343\"]},{\"tk\":[1584,48,1584,59],\"els\":[\"0:2687:431:340:2#out:1\"]},{\"tk\":[1590,5,1590,7],\"els\":[\"0:2687:431:342\"]},{\"tk\":[1590,9,1590,11],\"els\":[\"0:2687:431:342\"]},{\"tk\":[1591,7,1591,26],\"els\":[\"0:2687:431:342\"]},{\"tk\":[1591,27,1591,46],\"els\":[\"0:2687:431:342\"]},{\"tk\":[1591,47,1591,48],\"els\":[\"0:2687:431:342\"]},{\"tk\":[1591,49,1591,50],\"els\":[\"0:2687:431:345\",\"0:2687:431:341\"]},{\"tk\":[1591,60,1591,78],\"els\":[\"0:2667#out:1\"]},{\"tk\":[1591,79,1591,80],\"els\":[\"0:2687:431:345\",\"0:2687:431:341\"]},{\"tk\":[1592,9,1592,10],\"els\":[\"0:2687:431:345\",\"0:2687:431:341\"]},{\"tk\":[1598,5,1598,24],\"els\":[\"0:4892\"]},{\"tk\":[1598,25,1598,43],\"els\":[\"0:4892\"]},{\"tk\":[1598,44,1598,45],\"els\":[\"0:4892\"]},{\"tk\":[1598,46,1598,47],\"els\":[\"0:4892\"]},{\"tk\":[1598,56,1598,68],\"els\":[\"0:4203::25#out:2\"]},{\"tk\":[1601,5,1601,24],\"els\":[\"0:4204\"]},{\"tk\":[1601,25,1601,56],\"els\":[\"0:4204\"]},{\"tk\":[1601,57,1601,58],\"els\":[\"0:4204\"]},{\"tk\":[1601,59,1601,61],\"els\":[\"0:4204\"]},{\"tk\":[1602,5,1602,24],\"els\":[\"0:4204\"]},{\"tk\":[1602,25,1602,56],\"els\":[\"0:4204\"]},{\"tk\":[1602,57,1602,58],\"els\":[\"0:4204\"]},{\"tk\":[1602,59,1602,71],\"els\":[\"0:2687:250#out:1\"]},{\"tk\":[1603,5,1603,7],\"els\":[\"0:4204\"]},{\"tk\":[1603,9,1603,19],\"els\":[\"0:2687:451#out:1\"]},{\"tk\":[1603,20,1603,21],\"els\":[\"0:4204\"]},{\"tk\":[1603,22,1603,26],\"els\":[\"0:4204\"]},{\"tk\":[1604,7,1604,26],\"els\":[\"0:4204\"]},{\"tk\":[1604,27,1604,58],\"els\":[\"0:4204\"]},{\"tk\":[1604,59,1604,60],\"els\":[\"0:4204\"]},{\"tk\":[1604,61,1604,62],\"els\":[\"0:4204\"]},{\"tk\":[1605,12,1605,14],\"els\":[\"0:4204\"]},{\"tk\":[1605,16,1605,26],\"els\":[\"0:2687:451#out:1\"]},{\"tk\":[1605,27,1605,28],\"els\":[\"0:4204\"]},{\"tk\":[1605,29,1605,33],\"els\":[\"0:4204\"]},{\"tk\":[1606,7,1606,26],\"els\":[\"0:4204\"]},{\"tk\":[1606,27,1606,58],\"els\":[\"0:4204\"]},{\"tk\":[1606,59,1606,60],\"els\":[\"0:4204\"]},{\"tk\":[1606,61,1606,62],\"els\":[\"0:4204\"]},{\"tk\":[1607,12,1607,14],\"els\":[\"0:4204\"]},{\"tk\":[1607,16,1607,26],\"els\":[\"0:2687:451#out:1\"]},{\"tk\":[1607,27,1607,29],\"els\":[\"0:4204\"]},{\"tk\":[1607,30,1607,34],\"els\":[\"0:4204\"]},{\"tk\":[1608,7,1608,26],\"els\":[\"0:4204\"]},{\"tk\":[1608,27,1608,58],\"els\":[\"0:4204\"]},{\"tk\":[1608,59,1608,60],\"els\":[\"0:4204\"]},{\"tk\":[1608,61,1608,62],\"els\":[\"0:4204\"]},{\"tk\":[1610,7,1610,26],\"els\":[\"0:4204\"]},{\"tk\":[1610,27,1610,58],\"els\":[\"0:4204\"]},{\"tk\":[1610,59,1610,60],\"els\":[\"0:4204\"]},{\"tk\":[1610,61,1610,62],\"els\":[\"0:4204\"]},{\"tk\":[1613,5,1613,24],\"els\":[\"0:4204\"]},{\"tk\":[1613,25,1613,54],\"els\":[\"0:4204\"]},{\"tk\":[1613,55,1613,56],\"els\":[\"0:4204\"]},{\"tk\":[1613,57,1613,64],\"els\":[\"0:2688:918#out:1\"]},{\"tk\":[1618,5,1618,24],\"els\":[\"0:4891\"]},{\"tk\":[1618,25,1618,43],\"els\":[\"0:4891\"]},{\"tk\":[1618,44,1618,45],\"els\":[\"0:4891\"]},{\"tk\":[1618,46,1618,47],\"els\":[\"0:4891\"]},{\"tk\":[1618,56,1618,65],\"els\":[\"0:4229::25#out:2\"]},{\"tk\":[1621,5,1621,24],\"els\":[\"0:4227\"]},{\"tk\":[1621,25,1621,56],\"els\":[\"0:4227\"]},{\"tk\":[1621,57,1621,58],\"els\":[\"0:4227\"]},{\"tk\":[1621,59,1621,61],\"els\":[\"0:4227\"]},{\"tk\":[1622,5,1622,24],\"els\":[\"0:4227\"]},{\"tk\":[1622,25,1622,56],\"els\":[\"0:4227\"]},{\"tk\":[1622,57,1622,58],\"els\":[\"0:4227\"]},{\"tk\":[1623,7,1623,31],\"els\":[\"0:4227\"]},{\"tk\":[1624,5,1624,7],\"els\":[\"0:4227\"]},{\"tk\":[1624,9,1624,24],\"els\":[\"0:4891#out:1\"]},{\"tk\":[1624,25,1624,26],\"els\":[\"0:4227\"]},{\"tk\":[1624,27,1624,31],\"els\":[\"0:4227\"]},{\"tk\":[1625,7,1625,26],\"els\":[\"0:4227\"]},{\"tk\":[1625,27,1625,58],\"els\":[\"0:4227\"]},{\"tk\":[1625,59,1625,60],\"els\":[\"0:4227\"]},{\"tk\":[1625,61,1625,62],\"els\":[\"0:4227\"]},{\"tk\":[1626,12,1626,14],\"els\":[\"0:4227\"]},{\"tk\":[1626,16,1626,31],\"els\":[\"0:4891#out:1\"]},{\"tk\":[1626,32,1626,33],\"els\":[\"0:4227\"]},{\"tk\":[1626,34,1626,38],\"els\":[\"0:4227\"]},{\"tk\":[1627,7,1627,26],\"els\":[\"0:4227\"]},{\"tk\":[1627,27,1627,58],\"els\":[\"0:4227\"]},{\"tk\":[1627,59,1627,60],\"els\":[\"0:4227\"]},{\"tk\":[1627,61,1627,62],\"els\":[\"0:4227\"]},{\"tk\":[1628,12,1628,14],\"els\":[\"0:4227\"]},{\"tk\":[1628,16,1628,31],\"els\":[\"0:4891#out:1\"]},{\"tk\":[1628,32,1628,34],\"els\":[\"0:4227\"]},{\"tk\":[1628,35,1628,39],\"els\":[\"0:4227\"]},{\"tk\":[1629,7,1629,26],\"els\":[\"0:4227\"]},{\"tk\":[1629,27,1629,58],\"els\":[\"0:4227\"]},{\"tk\":[1629,59,1629,60],\"els\":[\"0:4227\"]},{\"tk\":[1629,61,1629,62],\"els\":[\"0:4227\"]},{\"tk\":[1631,7,1631,26],\"els\":[\"0:4227\"]},{\"tk\":[1631,27,1631,58],\"els\":[\"0:4227\"]},{\"tk\":[1631,59,1631,60],\"els\":[\"0:4227\"]},{\"tk\":[1631,61,1631,62],\"els\":[\"0:4227\"]},{\"tk\":[1634,5,1634,24],\"els\":[\"0:4227\"]},{\"tk\":[1634,25,1634,56],\"els\":[\"0:4227\"]},{\"tk\":[1634,57,1634,58],\"els\":[\"0:4227\"]},{\"tk\":[1634,59,1634,65],\"els\":[\"0:4227\"]},{\"tk\":[1670,5,1670,7],\"els\":[\"0:2521\",\"0:2516\"]},{\"tk\":[1670,9,1670,10],\"els\":[\"0:3086\",\"0:2516\"]},{\"tk\":[1670,19,1670,25],\"els\":[\"0:3086\",\"0:2516\",\"0:2519\"]},{\"tk\":[1670,26,1670,27],\"els\":[\"0:2521\",\"0:2516\"]},{\"tk\":[1670,28,1670,32],\"els\":[\"0:2521\",\"0:2516\"]},{\"tk\":[1672,7,1672,16],\"els\":[\"0:2521\",\"0:2516\",\"0:2521#out:1\"]},{\"tk\":[1672,17,1672,18],\"els\":[\"0:2521\",\"0:2516\",\"0:2521#out:1\"]},{\"tk\":[1672,19,1672,31],\"els\":[\"0:2521\",\"0:2516\",\"0:2521#out:1\"]},{\"tk\":[1672,31,1672,32],\"els\":[\"0:2521\",\"0:2516\",\"0:2521#out:1\"]},{\"tk\":[1675,7,1675,16],\"els\":[\"0:2521#out:1\",\"0:2521\",\"0:2516\"]},{\"tk\":[1675,17,1675,18],\"els\":[\"0:2521#out:1\",\"0:2521\",\"0:2516\"]},{\"tk\":[1675,19,1675,27],\"els\":[\"0:2521#out:1\",\"0:2521\",\"0:2516\"]},{\"tk\":[1675,27,1675,28],\"els\":[\"0:2521#out:1\",\"0:2521\",\"0:2516\"]},{\"tk\":[1686,5,1686,12],\"els\":[\"0:4201:5#out:1\"]},{\"tk\":[1686,13,1686,14],\"els\":[\"0:4857\",\"0:2505\"]},{\"tk\":[1686,15,1686,27],\"els\":[\"0:4877\",\"0:2505\"]},{\"tk\":[1686,28,1686,29],\"els\":[\"0:4877\",\"0:2505\"]},{\"tk\":[1686,30,1686,39],\"els\":[\"0:4877\",\"0:2505\"]},{\"tk\":[1686,40,1686,41],\"els\":[\"0:4861\",\"0:2505\"]},{\"tk\":[1686,42,1686,49],\"els\":[\"0:4861\",\"0:2505\"]},{\"tk\":[1686,50,1686,51],\"els\":[\"0:4857\",\"0:2505\"]},{\"tk\":[1686,52,1686,56],\"els\":[\"0:4857\",\"0:2505\"]},{\"tk\":[1692,5,1692,16],\"els\":[\"0:4858#out:1\"]},{\"tk\":[1692,17,1692,18],\"els\":[\"0:4858\",\"0:2505\"]},{\"tk\":[1692,19,1692,31],\"els\":[\"0:4878\",\"0:2505\"]},{\"tk\":[1692,32,1692,33],\"els\":[\"0:4878\",\"0:2505\"]},{\"tk\":[1692,34,1692,42],\"els\":[\"0:4878\",\"0:2505\"]},{\"tk\":[1692,43,1692,44],\"els\":[\"0:4863\",\"0:2505\"]},{\"tk\":[1692,45,1692,52],\"els\":[\"0:4863\",\"0:2505\"]},{\"tk\":[1692,53,1692,54],\"els\":[\"0:4858\",\"0:2505\"]},{\"tk\":[1692,55,1692,59],\"els\":[\"0:4858\",\"0:2505\"]},{\"tk\":[1695,5,1695,15],\"els\":[\"0:2514#out:1\",\"0:2514\",\"0:2505\"]},{\"tk\":[1695,16,1695,17],\"els\":[\"0:2514#out:1\",\"0:2514\",\"0:2505\"]},{\"tk\":[1695,18,1695,29],\"els\":[\"0:2514#out:1\",\"0:2514\",\"0:2505\",\"0:4858#out:1\"]},{\"tk\":[1695,30,1695,31],\"els\":[\"0:2514#out:1\",\"0:2514\",\"0:2505\"]},{\"tk\":[1695,32,1695,39],\"els\":[\"0:2514#out:1\",\"0:2514\",\"0:2505\",\"0:4201:5#out:1\"]},{\"tk\":[1695,39,1695,40],\"els\":[\"0:2514#out:1\",\"0:2514\",\"0:2505\"]},{\"tk\":[1698,5,1698,20],\"els\":[\"0:4893#out:1\"]},{\"tk\":[1698,21,1698,22],\"els\":[\"0:4893\",\"0:2505\"]},{\"tk\":[1698,23,1698,42],\"els\":[\"0:4893\",\"0:2505\"]},{\"tk\":[1698,43,1698,59],\"els\":[\"0:4893\",\"0:2505\"]},{\"tk\":[1703,5,1703,7],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1703,10,1703,29],\"els\":[\"0:4893\",\"0:2505\"]},{\"tk\":[1703,30,1703,46],\"els\":[\"0:4893\",\"0:2505\"]},{\"tk\":[1703,47,1703,49],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1703,50,1703,54],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1703,56,1703,58],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1704,10,1704,29],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1704,30,1704,61],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1704,62,1704,64],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1704,65,1704,66],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1705,7,1705,26],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1705,27,1705,56],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1705,57,1705,58],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1705,59,1705,63],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1713,5,1713,12],\"els\":[\"0:4201:5#out:1\"]},{\"tk\":[1713,13,1713,15],\"els\":[\"0:4201:4\",\"0:2505\"]},{\"tk\":[1713,16,1713,23],\"els\":[\"0:4201:4\",\"0:2505\"]},{\"tk\":[1737,5,1737,6],\"els\":[\"0:3730:269-270\"]},{\"tk\":[1737,7,1737,8],\"els\":[\"0:3730:269-293\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1737,9,1737,17],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\",\"0:3816\"]},{\"tk\":[1737,18,1737,19],\"els\":[\"0:3730:279-293\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1737,20,1737,39],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1737,40,1737,69],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1737,70,1737,71],\"els\":[\"0:3730:273-293\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1738,7,1738,17],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1739,5,1739,7],\"els\":[\"0:3730:312-410\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1739,9,1739,10],\"els\":[\"0:3730:315-321\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1739,19,1739,23],\"els\":[\"0:3730:315-321\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1739,24,1739,25],\"els\":[\"0:3730:269-270\"]},{\"tk\":[1739,27,1739,28],\"els\":[\"0:3730:315-331\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1739,29,1739,38],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\",\"0:3818\"]},{\"tk\":[1742,7,1742,9],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1742,11,1742,19],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1742,20,1742,21],\"els\":[\"0:3730:269-270\"]},{\"tk\":[1743,9,1743,10],\"els\":[\"0:3730:269-270\"]},{\"tk\":[1743,11,1743,12],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1743,13,1743,14],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1744,14,1744,16],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1744,18,1744,19],\"els\":[\"0:3730:269-270\"]},{\"tk\":[1744,20,1744,21],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1744,22,1744,26],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1745,9,1745,10],\"els\":[\"0:3730:269-270\"]},{\"tk\":[1745,11,1745,12],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1745,13,1745,14],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1747,9,1747,10],\"els\":[\"0:3730:269-270\"]},{\"tk\":[1747,11,1747,12],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1747,13,1747,14],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1747,24,1747,25],\"els\":[\"0:3730:269-270\"]},{\"tk\":[1747,26,1747,27],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1747,28,1747,32],\"els\":[\"0:3730:352-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1750,7,1750,8],\"els\":[\"0:3730:269-270\"]},{\"tk\":[1750,9,1750,11],\"els\":[\"0:3730:340-359\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1750,12,1750,13],\"els\":[\"0:3730:346-351\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1750,13,1750,18],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\",\"0:3819\"]},{\"tk\":[1753,7,1753,8],\"els\":[\"0:3730:269-270\"]},{\"tk\":[1753,9,1753,10],\"els\":[\"0:3730:378-401\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1753,11,1753,12],\"els\":[\"0:3730:269-270\"]},{\"tk\":[1753,13,1753,14],\"els\":[\"0:3730:391-400\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1753,15,1753,24],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\",\"0:3818\"]},{\"tk\":[1753,25,1753,26],\"els\":[\"0:3730:384-401\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1753,27,1753,28],\"els\":[\"0:3730:384-389\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1753,28,1753,33],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\",\"0:3819\"]},{\"tk\":[1759,5,1759,16],\"els\":[\"0:4858#out:1\"]},{\"tk\":[1759,17,1759,18],\"els\":[\"0:3730:542-570\",\"0:3730:565-569\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1759,23,1759,30],\"els\":[\"0:4201:5#out:1\"]},{\"tk\":[1759,31,1759,32],\"els\":[\"0:4201:3\",\"0:2505\"]},{\"tk\":[1759,33,1759,52],\"els\":[\"0:4201:5\",\"0:2505\"]},{\"tk\":[1759,53,1759,62],\"els\":[\"0:4201:5\",\"0:2505\"]},{\"tk\":[1759,64,1759,65],\"els\":[\"0:3730:460-484\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1759,66,1759,74],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\",\"0:3816\"]},{\"tk\":[1759,75,1759,76],\"els\":[\"0:3730:472-484\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1760,22,1760,32],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1760,34,1760,35],\"els\":[\"0:3730:457-485\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1760,36,1760,59],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1760,60,1760,72],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1760,73,1760,74],\"els\":[\"0:3730:448-485\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1761,21,1761,44],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1761,45,1761,58],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1761,59,1761,60],\"els\":[\"0:3730:448-454\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1761,61,1761,72],\"els\":[\"0:4858#out:1\"]},{\"tk\":[1761,74,1761,75],\"els\":[\"0:3730:525-535\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1761,76,1761,77],\"els\":[\"0:3730:269-270\"]},{\"tk\":[1761,79,1761,80],\"els\":[\"0:3730:565-569\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1762,7,1762,30],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1762,31,1762,44],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1763,5,1763,7],\"els\":[\"0:3730:597-820\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1763,9,1763,20],\"els\":[\"0:4858#out:1\"]},{\"tk\":[1763,21,1763,23],\"els\":[\"0:3730:600-622\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1763,24,1763,47],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1763,48,1763,61],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1766,7,1766,18],\"els\":[\"0:4858#out:1\"]},{\"tk\":[1766,19,1766,20],\"els\":[\"0:3730:631-652\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1766,21,1766,44],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1766,45,1766,58],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1770,7,1770,26],\"els\":[\"0:4893\",\"0:2505\"]},{\"tk\":[1770,27,1770,43],\"els\":[\"0:4893\",\"0:2505\"]},{\"tk\":[1770,44,1770,45],\"els\":[\"0:4893\",\"0:2505\",\"0:3730:662-679\",\"0:3730::25\",\"0:3730\"]},{\"tk\":[1770,46,1770,50],\"els\":[\"0:3730:670-679\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1771,12,1771,14],\"els\":[\"0:3730:685-777\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1771,16,1771,27],\"els\":[\"0:4858#out:1\"]},{\"tk\":[1771,28,1771,30],\"els\":[\"0:3730:692-716\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1771,31,1771,32],\"els\":[\"0:3730:709-716\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1771,32,1771,55],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1771,56,1771,69],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1774,7,1774,18],\"els\":[\"0:4858#out:1\"]},{\"tk\":[1774,19,1774,20],\"els\":[\"0:3730:725-748\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1774,21,1774,22],\"els\":[\"0:3730:741-748\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1774,22,1774,45],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1774,46,1774,59],\"els\":[\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1778,7,1778,26],\"els\":[\"0:4893\",\"0:2505\"]},{\"tk\":[1778,27,1778,43],\"els\":[\"0:4893\",\"0:2505\"]},{\"tk\":[1778,44,1778,45],\"els\":[\"0:4893\",\"0:2505\",\"0:3730:758-775\",\"0:3730::25\",\"0:3730\"]},{\"tk\":[1778,46,1778,50],\"els\":[\"0:3730:766-775\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1782,7,1782,26],\"els\":[\"0:4893\",\"0:2505\"]},{\"tk\":[1782,27,1782,43],\"els\":[\"0:4893\",\"0:2505\"]},{\"tk\":[1782,44,1782,45],\"els\":[\"0:4893\",\"0:2505\",\"0:3730:794-811\",\"0:3730::25\",\"0:3730\"]},{\"tk\":[1782,46,1782,50],\"els\":[\"0:3730:802-811\",\"0:3730::25\",\"0:3730\",\"0:2505\"]},{\"tk\":[1790,5,1790,23],\"els\":[\"0:4864#out:1\"]},{\"tk\":[1790,24,1790,29],\"els\":[\"0:4864#out:1\"]},{\"tk\":[1790,30,1790,31],\"els\":[\"0:4864#out:1\",\"0:4864\",\"0:2505\"]},{\"tk\":[1790,32,1790,38],\"els\":[\"0:4864\",\"0:2505\"]},{\"tk\":[1790,39,1790,40],\"els\":[\"0:4864\",\"0:2505\"]},{\"tk\":[1790,41,1790,52],\"els\":[\"0:4858#out:1\"]},{\"tk\":[1793,5,1793,24],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1793,25,1793,54],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1793,55,1793,57],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1793,58,1793,64],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1793,65,1793,66],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1793,67,1793,77],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1794,5,1794,7],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1794,9,1794,24],\"els\":[\"0:4893#out:1\"]},{\"tk\":[1794,25,1794,26],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1794,27,1794,31],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1795,7,1795,26],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1795,27,1795,58],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1795,59,1795,60],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1795,61,1795,62],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1796,12,1796,14],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1796,16,1796,31],\"els\":[\"0:4893#out:1\"]},{\"tk\":[1796,32,1796,33],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1796,34,1796,38],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1797,7,1797,26],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1797,27,1797,58],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1797,59,1797,60],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1797,61,1797,62],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1798,12,1798,14],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1798,16,1798,31],\"els\":[\"0:4893#out:1\"]},{\"tk\":[1798,32,1798,34],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1798,35,1798,39],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1799,7,1799,26],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1799,27,1799,58],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1799,59,1799,60],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1799,61,1799,62],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1801,7,1801,26],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1801,27,1801,58],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1801,59,1801,60],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1801,61,1801,62],\"els\":[\"0:4194\",\"0:2505\"]},{\"tk\":[1812,5,1812,24],\"els\":[\"0:4201:5\",\"0:2505\"]},{\"tk\":[1812,25,1812,34],\"els\":[\"0:4201:5\",\"0:2505\"]},{\"tk\":[1812,35,1812,36],\"els\":[\"0:4201:5\",\"0:2505\"]},{\"tk\":[1812,37,1812,44],\"els\":[\"0:4201:5#out:1\"]},{\"tk\":[1840,3,1840,16],\"els\":[\"0:3285\"]},{\"tk\":[1840,17,1840,18],\"els\":[\"0:3285\"]},{\"tk\":[1840,19,1840,26],\"els\":[\"0:3285\"]},{\"tk\":[1840,26,1840,27],\"els\":[\"0:3285\"]},{\"tk\":[1843,3,1843,12],\"els\":[\"0:2443\"]},{\"tk\":[1843,13,1843,14],\"els\":[\"0:2443\"]},{\"tk\":[1843,15,1843,34],\"els\":[\"0:2443\"]},{\"tk\":[1843,34,1843,35],\"els\":[\"0:2443\"]},{\"tk\":[1843,35,1843,47],\"els\":[\"0:2443\"]},{\"tk\":[1843,47,1843,48],\"els\":[\"0:2443\"]},{\"tk\":[1851,3,1851,8],\"els\":[\"0:3561\",\"0:3522\",\"0:3563\"]},{\"tk\":[1851,9,1851,10],\"els\":[\"0:3561\",\"0:3522\",\"0:3563\"]},{\"tk\":[1851,11,1851,12],\"els\":[\"0:3561\",\"0:3522\",\"0:3563\"]},{\"tk\":[1851,12,1851,20],\"els\":[\"0:3561\",\"0:3522\",\"0:3563\"]},{\"tk\":[1851,20,1851,21],\"els\":[\"0:3561\",\"0:3522\",\"0:3563\"]},{\"tk\":[1851,21,1851,27],\"els\":[\"0:3561\",\"0:3522\",\"0:3563\"]},{\"tk\":[1851,27,1851,28],\"els\":[\"0:3561\",\"0:3522\",\"0:3563\"]},{\"tk\":[1856,3,1856,8],\"els\":[\"0:3562\",\"0:3522\",\"0:3563\"]},{\"tk\":[1856,9,1856,10],\"els\":[\"0:3562\",\"0:3522\",\"0:3563\"]},{\"tk\":[1856,11,1856,12],\"els\":[\"0:3562\",\"0:3522\",\"0:3563\"]},{\"tk\":[1856,12,1856,20],\"els\":[\"0:3562\",\"0:3522\",\"0:3563\"]},{\"tk\":[1856,20,1856,21],\"els\":[\"0:3562\",\"0:3522\",\"0:3563\"]},{\"tk\":[1856,21,1856,27],\"els\":[\"0:3562\",\"0:3522\",\"0:3563\"]},{\"tk\":[1856,27,1856,28],\"els\":[\"0:3562\",\"0:3522\",\"0:3563\"]},{\"tk\":[1860,3,1860,4],\"els\":[\"0:3478\"]},{\"tk\":[1861,3,1861,4],\"els\":[\"0:3478\"]},{\"tk\":[1866,3,1866,5],\"els\":[\"0:3498\"]},{\"tk\":[1866,7,1866,8],\"els\":[\"0:3498\"]},{\"tk\":[1866,8,1866,13],\"els\":[\"0:3498\",\"0:3481\"]},{\"tk\":[1875,5,1875,7],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1875,8,1875,9],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1875,9,1875,14],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1875,14,1875,15],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1875,16,1875,17],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1876,7,1876,23],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1876,23,1876,24],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1876,24,1876,27],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1876,27,1876,28],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1876,29,1876,32],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1876,32,1876,34],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1876,34,1876,36],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1876,36,1876,37],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1876,37,1876,38],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1877,5,1877,6],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1877,7,1877,11],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1877,12,1877,13],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1878,7,1878,25],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1878,25,1878,26],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1878,26,1878,29],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1878,29,1878,30],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1878,31,1878,34],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1878,34,1878,36],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1878,36,1878,38],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1878,38,1878,39],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1878,39,1878,40],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1879,5,1879,6],\"els\":[\"0:3502\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1886,5,1886,7],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1886,8,1886,9],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1886,9,1886,13],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1886,13,1886,14],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1886,15,1886,16],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1887,7,1887,23],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1887,23,1887,24],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1887,24,1887,27],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1887,27,1887,28],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1887,29,1887,32],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1887,32,1887,34],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1887,34,1887,36],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1887,36,1887,37],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1887,37,1887,38],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1888,5,1888,6],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1888,7,1888,11],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1888,12,1888,13],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1889,7,1889,25],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1889,25,1889,26],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1889,26,1889,29],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1889,29,1889,30],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1889,31,1889,34],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1889,34,1889,36],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1889,36,1889,38],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1889,38,1889,39],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1889,39,1889,40],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1890,5,1890,6],\"els\":[\"0:3504\",\"0:3499\",\"0:3498\",\"0:3500\"]},{\"tk\":[1902,5,1902,7],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1902,8,1902,9],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1902,9,1902,13],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1902,13,1902,14],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1902,15,1902,16],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1903,7,1903,23],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1903,23,1903,24],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1903,24,1903,27],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1903,27,1903,28],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1903,29,1903,32],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1903,32,1903,34],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1903,34,1903,36],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1903,36,1903,37],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1903,37,1903,38],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1904,5,1904,6],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1904,7,1904,11],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1904,12,1904,13],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1905,7,1905,25],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1905,25,1905,26],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1905,26,1905,29],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1905,29,1905,30],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1905,31,1905,34],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1905,34,1905,36],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1905,36,1905,38],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1905,38,1905,39],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1905,39,1905,40],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1906,5,1906,6],\"els\":[\"0:3485\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1913,5,1913,7],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1913,8,1913,9],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1913,9,1913,14],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1913,14,1913,15],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1913,16,1913,17],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1914,7,1914,23],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1914,23,1914,24],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1914,24,1914,27],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1914,27,1914,28],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1914,29,1914,32],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1914,32,1914,34],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1914,34,1914,36],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1914,36,1914,37],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1914,37,1914,38],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1915,5,1915,6],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1915,7,1915,11],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1915,12,1915,13],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1916,7,1916,25],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1916,25,1916,26],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1916,26,1916,29],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1916,29,1916,30],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1916,31,1916,34],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1916,34,1916,36],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1916,36,1916,38],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1916,38,1916,39],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1916,39,1916,40],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1917,5,1917,6],\"els\":[\"0:3486\",\"0:3483\",\"0:3498\",\"0:3484\"]},{\"tk\":[1927,3,1927,5],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1927,7,1927,26],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1927,27,1927,56],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1927,57,1927,59],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1927,60,1927,61],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1929,5,1929,24],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1929,25,1929,54],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1929,55,1929,56],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1929,57,1929,59],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1933,5,1933,24],\"els\":[\"0:3482:5\",\"0:3482\",\"0:3482::47\"]},{\"tk\":[1933,25,1933,47],\"els\":[\"0:3482:5\",\"0:3482\",\"0:3482::47\"]},{\"tk\":[1933,48,1933,49],\"els\":[\"0:3482:5\",\"0:3482\",\"0:3482::47\"]},{\"tk\":[1933,50,1933,71],\"els\":[\"0:3482:5\",\"0:3482\",\"0:3482::47\"]},{\"tk\":[1934,10,1934,12],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1934,14,1934,33],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1934,34,1934,56],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1934,57,1934,59],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1934,60,1934,81],\"els\":[\"0:3482\",\"0:3482::47\"]},{\"tk\":[1942,5,1942,20],\"els\":[\"0:3513\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1942,20,1942,21],\"els\":[\"0:3513\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1942,21,1942,29],\"els\":[\"0:3513\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1942,29,1942,30],\"els\":[\"0:3513\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1942,31,1942,32],\"els\":[\"0:3513\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1942,32,1942,56],\"els\":[\"0:3513\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1942,56,1942,57],\"els\":[\"0:3513\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1942,57,1942,58],\"els\":[\"0:3513\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1947,5,1947,30],\"els\":[\"0:3512\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1947,30,1947,31],\"els\":[\"0:3512\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1947,31,1947,35],\"els\":[\"0:3512\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1947,35,1947,36],\"els\":[\"0:3512\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1947,37,1947,41],\"els\":[\"0:3512\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1947,41,1947,42],\"els\":[\"0:3512\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1947,42,1947,43],\"els\":[\"0:3512\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1952,5,1952,19],\"els\":[\"0:3514\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1952,19,1952,20],\"els\":[\"0:3514\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1952,20,1952,21],\"els\":[\"0:3514\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1952,21,1952,22],\"els\":[\"0:3514\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1952,22,1952,23],\"els\":[\"0:3514\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1957,5,1957,19],\"els\":[\"0:3515\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1957,19,1957,20],\"els\":[\"0:3515\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1957,20,1957,21],\"els\":[\"0:3515\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1957,21,1957,22],\"els\":[\"0:3515\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1957,22,1957,23],\"els\":[\"0:3515\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1960,5,1960,25],\"els\":[\"0:3516\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1960,25,1960,26],\"els\":[\"0:3516\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1960,26,1960,28],\"els\":[\"0:3516\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1960,28,1960,29],\"els\":[\"0:3516\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1960,29,1960,30],\"els\":[\"0:3516\",\"0:3509\",\"0:3482::47\",\"0:3482\"]},{\"tk\":[1969,5,1969,24],\"els\":[\"0:3482:39\",\"0:3482:5\",\"0:3482\",\"0:3482::47\"]},{\"tk\":[1969,25,1969,47],\"els\":[\"0:3482:39\",\"0:3482:5\",\"0:3482\",\"0:3482::47\"]},{\"tk\":[1969,48,1969,49],\"els\":[\"0:3482:39\",\"0:3482:5\",\"0:3482\",\"0:3482::47\"]},{\"tk\":[1969,50,1969,73],\"els\":[\"0:3482:39\",\"0:3482:5\",\"0:3482\",\"0:3482::47\"]},{\"tk\":[1974,5,1974,24],\"els\":[\"0:3482:39\",\"0:3482\",\"0:3482::47\"]},{\"tk\":[1974,25,1974,47],\"els\":[\"0:3482:39\",\"0:3482\",\"0:3482::47\"]},{\"tk\":[1974,48,1974,49],\"els\":[\"0:3482:39\",\"0:3482\",\"0:3482::47\"]},{\"tk\":[1974,50,1974,73],\"els\":[\"0:3482:39\",\"0:3482\",\"0:3482::47\"]},{\"tk\":[1993,3,1993,15],\"els\":[\"0:2444\"]},{\"tk\":[1993,16,1993,17],\"els\":[\"0:2444\"]},{\"tk\":[1993,18,1993,37],\"els\":[\"0:2444\"]},{\"tk\":[1993,37,1993,38],\"els\":[\"0:2444\"]},{\"tk\":[1993,38,1993,49],\"els\":[\"0:2444\"]},{\"tk\":[1993,49,1993,50],\"els\":[\"0:2444\"]},{\"tk\":[1996,3,1996,11],\"els\":[\"0:3177\"]},{\"tk\":[1996,12,1996,13],\"els\":[\"0:3177\"]},{\"tk\":[1996,14,1996,27],\"els\":[\"0:3177\"]},{\"tk\":[1996,27,1996,28],\"els\":[\"0:3177\"]},{\"tk\":[1999,3,1999,30],\"els\":[\"0:2500\"]},{\"tk\":[1999,30,1999,31],\"els\":[\"0:2500\"]},{\"tk\":[1999,31,1999,32],\"els\":[\"0:2500\"]},{\"tk\":[2004,36,2004,37],\"els\":[\"0:2443\"]},{\"tk\":[2004,38,2004,56],\"els\":[\"0:2443\"]},{\"tk\":[2004,57,2004,62],\"els\":[\"0:2443\"]},{\"tk\":[2017,35,2017,36],\"els\":[\"0:2444\"]},{\"tk\":[2017,37,2017,44],\"els\":[\"0:2468\",\"0:2452\",\"0:3297\"]},{\"tk\":[2017,45,2017,46],\"els\":[\"0:2468\",\"0:2452\",\"0:3297\"]},{\"tk\":[2017,47,2017,59],\"els\":[\"0:2468\",\"0:2452\",\"0:3297\",\"0:2997\"]},{\"tk\":[2031,3,2031,25],\"els\":[\"0:3506\"]},{\"tk\":[2031,25,2031,26],\"els\":[\"0:3506\"]},{\"tk\":[2031,26,2031,27],\"els\":[\"0:3506\"]},{\"tk\":[2031,27,2031,28],\"els\":[\"0:3506\"]},{\"tk\":[2031,29,2031,30],\"els\":[\"0:3506\"]},{\"tk\":[2031,31,2031,48],\"els\":[\"0:3506\"]},{\"tk\":[2031,48,2031,49],\"els\":[\"0:3506\"]},{\"tk\":[2032,3,2032,25],\"els\":[\"0:3506\"]},{\"tk\":[2032,25,2032,26],\"els\":[\"0:3506\"]},{\"tk\":[2032,26,2032,27],\"els\":[\"0:3506\"]},{\"tk\":[2032,27,2032,28],\"els\":[\"0:3506\"]},{\"tk\":[2032,29,2032,30],\"els\":[\"0:3506\"]},{\"tk\":[2032,31,2032,48],\"els\":[\"0:3506\"]},{\"tk\":[2032,48,2032,49],\"els\":[\"0:3506\"]},{\"tk\":[2035,3,2035,18],\"els\":[\"0:3506\"]},{\"tk\":[2035,18,2035,19],\"els\":[\"0:3506\"]},{\"tk\":[2035,19,2035,20],\"els\":[\"0:3506\"]},{\"tk\":[2035,20,2035,21],\"els\":[\"0:3506\"]},{\"tk\":[2035,22,2035,23],\"els\":[\"0:3506\"]},{\"tk\":[2035,23,2035,42],\"els\":[\"0:3506\"]},{\"tk\":[2035,42,2035,43],\"els\":[\"0:3506\"]},{\"tk\":[2035,43,2035,44],\"els\":[\"0:3506\"]},{\"tk\":[2038,3,2038,32],\"els\":[\"0:3506\"]},{\"tk\":[2038,32,2038,33],\"els\":[\"0:3506\"]},{\"tk\":[2038,33,2038,36],\"els\":[\"0:3506\"]},{\"tk\":[2038,36,2038,37],\"els\":[\"0:3506\"]},{\"tk\":[2038,38,2038,46],\"els\":[\"0:3506\"]},{\"tk\":[2038,46,2038,47],\"els\":[\"0:3506\"]},{\"tk\":[2038,48,2038,52],\"els\":[\"0:3506\"]},{\"tk\":[2038,52,2038,53],\"els\":[\"0:3506\"]},{\"tk\":[2038,54,2038,66],\"els\":[\"0:3506\"]},{\"tk\":[2038,66,2038,67],\"els\":[\"0:3506\"]},{\"tk\":[2038,68,2038,69],\"els\":[\"0:3506\"]},{\"tk\":[2038,69,2038,70],\"els\":[\"0:3506\"]},{\"tk\":[2038,71,2038,72],\"els\":[\"0:3506\"]},{\"tk\":[2038,72,2038,73],\"els\":[\"0:3506\"]},{\"tk\":[2038,73,2038,74],\"els\":[\"0:3506\"]},{\"tk\":[2041,3,2041,19],\"els\":[\"0:3506\"]},{\"tk\":[2041,19,2041,20],\"els\":[\"0:3506\"]},{\"tk\":[2041,20,2041,23],\"els\":[\"0:3506\"]},{\"tk\":[2041,23,2041,24],\"els\":[\"0:3506\"]},{\"tk\":[2041,25,2041,33],\"els\":[\"0:3506\"]},{\"tk\":[2041,33,2041,34],\"els\":[\"0:3506\"]},{\"tk\":[2041,35,2041,39],\"els\":[\"0:3506\"]},{\"tk\":[2041,39,2041,40],\"els\":[\"0:3506\"]},{\"tk\":[2041,40,2041,41],\"els\":[\"0:3506\"]},{\"tk\":[2044,3,2044,15],\"els\":[\"0:3506\"]},{\"tk\":[2044,15,2044,16],\"els\":[\"0:3506\"]},{\"tk\":[2044,16,2044,17],\"els\":[\"0:3506\"]},{\"tk\":[2044,17,2044,18],\"els\":[\"0:3506\"]},{\"tk\":[2044,19,2044,20],\"els\":[\"0:3506\"]},{\"tk\":[2044,20,2044,35],\"els\":[\"0:3506\"]},{\"tk\":[2044,35,2044,36],\"els\":[\"0:3506\"]},{\"tk\":[2044,36,2044,37],\"els\":[\"0:3506\"]},{\"tk\":[2047,3,2047,31],\"els\":[\"0:3506\"]},{\"tk\":[2047,31,2047,32],\"els\":[\"0:3506\"]},{\"tk\":[2047,32,2047,33],\"els\":[\"0:3506\"]},{\"tk\":[2047,33,2047,34],\"els\":[\"0:3506\"]},{\"tk\":[2047,35,2047,40],\"els\":[\"0:3506\"]},{\"tk\":[2047,40,2047,41],\"els\":[\"0:3506\"]},{\"tk\":[2047,41,2047,42],\"els\":[\"0:3506\"]},{\"tk\":[2050,3,2050,30],\"els\":[\"0:3506\"]},{\"tk\":[2050,30,2050,31],\"els\":[\"0:3506\"]},{\"tk\":[2050,31,2050,32],\"els\":[\"0:3506\"]},{\"tk\":[2050,32,2050,33],\"els\":[\"0:3506\"]},{\"tk\":[2050,34,2050,36],\"els\":[\"0:3506\"]},{\"tk\":[2050,36,2050,37],\"els\":[\"0:3506\"]},{\"tk\":[2050,38,2050,39],\"els\":[\"0:3506\"]},{\"tk\":[2050,39,2050,62],\"els\":[\"0:3506\"]},{\"tk\":[2050,62,2050,63],\"els\":[\"0:3506\"]},{\"tk\":[2050,63,2050,64],\"els\":[\"0:3506\"]},{\"tk\":[2053,3,2053,37],\"els\":[\"0:3506\"]},{\"tk\":[2053,37,2053,38],\"els\":[\"0:3506\"]},{\"tk\":[2053,38,2053,39],\"els\":[\"0:3506\"]},{\"tk\":[2053,39,2053,40],\"els\":[\"0:3506\"]},{\"tk\":[2053,41,2053,43],\"els\":[\"0:3506\"]},{\"tk\":[2053,43,2053,44],\"els\":[\"0:3506\"]},{\"tk\":[2053,45,2053,47],\"els\":[\"0:3506\"]},{\"tk\":[2053,47,2053,48],\"els\":[\"0:3506\"]},{\"tk\":[2053,49,2053,54],\"els\":[\"0:3506\"]},{\"tk\":[2053,54,2053,55],\"els\":[\"0:3506\"]},{\"tk\":[2053,55,2053,56],\"els\":[\"0:3506\"]},{\"tk\":[2056,3,2056,24],\"els\":[\"0:3506\"]},{\"tk\":[2056,24,2056,25],\"els\":[\"0:3506\"]},{\"tk\":[2056,25,2056,26],\"els\":[\"0:3506\"]},{\"tk\":[2056,26,2056,27],\"els\":[\"0:3506\"]},{\"tk\":[2056,27,2056,28],\"els\":[\"0:3506\"]},{\"tk\":[2059,3,2059,25],\"els\":[\"0:3507\"]},{\"tk\":[2059,25,2059,26],\"els\":[\"0:3507\"]},{\"tk\":[2059,26,2059,27],\"els\":[\"0:3507\"]},{\"tk\":[2059,27,2059,28],\"els\":[\"0:3507\"]},{\"tk\":[2059,29,2059,30],\"els\":[\"0:3507\"]},{\"tk\":[2059,31,2059,48],\"els\":[\"0:3507\"]},{\"tk\":[2059,48,2059,49],\"els\":[\"0:3507\"]},{\"tk\":[2060,3,2060,25],\"els\":[\"0:3507\"]},{\"tk\":[2060,25,2060,26],\"els\":[\"0:3507\"]},{\"tk\":[2060,26,2060,27],\"els\":[\"0:3507\"]},{\"tk\":[2060,27,2060,28],\"els\":[\"0:3507\"]},{\"tk\":[2060,29,2060,30],\"els\":[\"0:3507\"]},{\"tk\":[2060,31,2060,48],\"els\":[\"0:3507\"]},{\"tk\":[2060,48,2060,49],\"els\":[\"0:3507\"]},{\"tk\":[2063,3,2063,18],\"els\":[\"0:3507\"]},{\"tk\":[2063,18,2063,19],\"els\":[\"0:3507\"]},{\"tk\":[2063,19,2063,20],\"els\":[\"0:3507\"]},{\"tk\":[2063,20,2063,21],\"els\":[\"0:3507\"]},{\"tk\":[2063,22,2063,23],\"els\":[\"0:3507\"]},{\"tk\":[2063,23,2063,42],\"els\":[\"0:3507\"]},{\"tk\":[2063,42,2063,43],\"els\":[\"0:3507\"]},{\"tk\":[2063,43,2063,44],\"els\":[\"0:3507\"]},{\"tk\":[2066,3,2066,32],\"els\":[\"0:3507\"]},{\"tk\":[2066,32,2066,33],\"els\":[\"0:3507\"]},{\"tk\":[2066,33,2066,36],\"els\":[\"0:3507\"]},{\"tk\":[2066,36,2066,37],\"els\":[\"0:3507\"]},{\"tk\":[2066,38,2066,46],\"els\":[\"0:3507\"]},{\"tk\":[2066,46,2066,47],\"els\":[\"0:3507\"]},{\"tk\":[2066,48,2066,52],\"els\":[\"0:3507\"]},{\"tk\":[2066,52,2066,53],\"els\":[\"0:3507\"]},{\"tk\":[2066,54,2066,66],\"els\":[\"0:3507\"]},{\"tk\":[2066,66,2066,67],\"els\":[\"0:3507\"]},{\"tk\":[2066,68,2066,69],\"els\":[\"0:3507\"]},{\"tk\":[2066,69,2066,70],\"els\":[\"0:3507\"]},{\"tk\":[2066,71,2066,72],\"els\":[\"0:3507\"]},{\"tk\":[2066,72,2066,73],\"els\":[\"0:3507\"]},{\"tk\":[2066,73,2066,74],\"els\":[\"0:3507\"]},{\"tk\":[2069,3,2069,19],\"els\":[\"0:3507\"]},{\"tk\":[2069,19,2069,20],\"els\":[\"0:3507\"]},{\"tk\":[2069,20,2069,23],\"els\":[\"0:3507\"]},{\"tk\":[2069,23,2069,24],\"els\":[\"0:3507\"]},{\"tk\":[2069,25,2069,33],\"els\":[\"0:3507\"]},{\"tk\":[2069,33,2069,34],\"els\":[\"0:3507\"]},{\"tk\":[2069,35,2069,39],\"els\":[\"0:3507\"]},{\"tk\":[2069,39,2069,40],\"els\":[\"0:3507\"]},{\"tk\":[2069,40,2069,41],\"els\":[\"0:3507\"]},{\"tk\":[2072,3,2072,15],\"els\":[\"0:3507\"]},{\"tk\":[2072,15,2072,16],\"els\":[\"0:3507\"]},{\"tk\":[2072,16,2072,17],\"els\":[\"0:3507\"]},{\"tk\":[2072,17,2072,18],\"els\":[\"0:3507\"]},{\"tk\":[2072,19,2072,20],\"els\":[\"0:3507\"]},{\"tk\":[2072,20,2072,35],\"els\":[\"0:3507\"]},{\"tk\":[2072,35,2072,36],\"els\":[\"0:3507\"]},{\"tk\":[2072,36,2072,37],\"els\":[\"0:3507\"]},{\"tk\":[2075,3,2075,31],\"els\":[\"0:3507\"]},{\"tk\":[2075,31,2075,32],\"els\":[\"0:3507\"]},{\"tk\":[2075,32,2075,33],\"els\":[\"0:3507\"]},{\"tk\":[2075,33,2075,34],\"els\":[\"0:3507\"]},{\"tk\":[2075,35,2075,40],\"els\":[\"0:3507\"]},{\"tk\":[2075,40,2075,41],\"els\":[\"0:3507\"]},{\"tk\":[2075,41,2075,42],\"els\":[\"0:3507\"]},{\"tk\":[2078,3,2078,30],\"els\":[\"0:3507\"]},{\"tk\":[2078,30,2078,31],\"els\":[\"0:3507\"]},{\"tk\":[2078,31,2078,32],\"els\":[\"0:3507\"]},{\"tk\":[2078,32,2078,33],\"els\":[\"0:3507\"]},{\"tk\":[2078,34,2078,36],\"els\":[\"0:3507\"]},{\"tk\":[2078,36,2078,37],\"els\":[\"0:3507\"]},{\"tk\":[2078,38,2078,39],\"els\":[\"0:3507\"]},{\"tk\":[2078,39,2078,62],\"els\":[\"0:3507\"]},{\"tk\":[2078,62,2078,63],\"els\":[\"0:3507\"]},{\"tk\":[2078,63,2078,64],\"els\":[\"0:3507\"]},{\"tk\":[2081,3,2081,37],\"els\":[\"0:3507\"]},{\"tk\":[2081,37,2081,38],\"els\":[\"0:3507\"]},{\"tk\":[2081,38,2081,39],\"els\":[\"0:3507\"]},{\"tk\":[2081,39,2081,40],\"els\":[\"0:3507\"]},{\"tk\":[2081,41,2081,43],\"els\":[\"0:3507\"]},{\"tk\":[2081,43,2081,44],\"els\":[\"0:3507\"]},{\"tk\":[2081,45,2081,47],\"els\":[\"0:3507\"]},{\"tk\":[2081,47,2081,48],\"els\":[\"0:3507\"]},{\"tk\":[2081,49,2081,51],\"els\":[\"0:3507\"]},{\"tk\":[2081,51,2081,52],\"els\":[\"0:3507\"]},{\"tk\":[2081,52,2081,53],\"els\":[\"0:3507\"]},{\"tk\":[2084,3,2084,30],\"els\":[\"0:3507\"]},{\"tk\":[2084,30,2084,31],\"els\":[\"0:3507\"]},{\"tk\":[2084,31,2084,32],\"els\":[\"0:3507\"]},{\"tk\":[2084,32,2084,33],\"els\":[\"0:3507\"]},{\"tk\":[2084,34,2084,36],\"els\":[\"0:3507\"]},{\"tk\":[2084,36,2084,37],\"els\":[\"0:3507\"]},{\"tk\":[2084,38,2084,39],\"els\":[\"0:3507\"]},{\"tk\":[2084,39,2084,62],\"els\":[\"0:3507\"]},{\"tk\":[2084,62,2084,63],\"els\":[\"0:3507\"]},{\"tk\":[2084,63,2084,64],\"els\":[\"0:3507\"]},{\"tk\":[2087,3,2087,37],\"els\":[\"0:3507\"]},{\"tk\":[2087,37,2087,38],\"els\":[\"0:3507\"]},{\"tk\":[2087,38,2087,39],\"els\":[\"0:3507\"]},{\"tk\":[2087,39,2087,40],\"els\":[\"0:3507\"]},{\"tk\":[2087,41,2087,43],\"els\":[\"0:3507\"]},{\"tk\":[2087,43,2087,44],\"els\":[\"0:3507\"]},{\"tk\":[2087,45,2087,47],\"els\":[\"0:3507\"]},{\"tk\":[2087,47,2087,48],\"els\":[\"0:3507\"]},{\"tk\":[2087,49,2087,54],\"els\":[\"0:3507\"]},{\"tk\":[2087,54,2087,55],\"els\":[\"0:3507\"]},{\"tk\":[2087,55,2087,56],\"els\":[\"0:3507\"]},{\"tk\":[2090,3,2090,30],\"els\":[\"0:3507\"]},{\"tk\":[2090,30,2090,31],\"els\":[\"0:3507\"]},{\"tk\":[2090,31,2090,32],\"els\":[\"0:3507\"]},{\"tk\":[2090,32,2090,33],\"els\":[\"0:3507\"]},{\"tk\":[2090,34,2090,36],\"els\":[\"0:3507\"]},{\"tk\":[2090,36,2090,37],\"els\":[\"0:3507\"]},{\"tk\":[2090,38,2090,39],\"els\":[\"0:3507\"]},{\"tk\":[2090,39,2090,62],\"els\":[\"0:3507\"]},{\"tk\":[2090,62,2090,63],\"els\":[\"0:3507\"]},{\"tk\":[2090,63,2090,64],\"els\":[\"0:3507\"]},{\"tk\":[2093,3,2093,37],\"els\":[\"0:3507\"]},{\"tk\":[2093,37,2093,38],\"els\":[\"0:3507\"]},{\"tk\":[2093,38,2093,39],\"els\":[\"0:3507\"]},{\"tk\":[2093,39,2093,40],\"els\":[\"0:3507\"]},{\"tk\":[2093,41,2093,43],\"els\":[\"0:3507\"]},{\"tk\":[2093,43,2093,44],\"els\":[\"0:3507\"]},{\"tk\":[2093,45,2093,47],\"els\":[\"0:3507\"]},{\"tk\":[2093,47,2093,48],\"els\":[\"0:3507\"]},{\"tk\":[2093,49,2093,54],\"els\":[\"0:3507\"]},{\"tk\":[2093,54,2093,55],\"els\":[\"0:3507\"]},{\"tk\":[2093,55,2093,56],\"els\":[\"0:3507\"]},{\"tk\":[2096,3,2096,24],\"els\":[\"0:3507\"]},{\"tk\":[2096,24,2096,25],\"els\":[\"0:3507\"]},{\"tk\":[2096,25,2096,26],\"els\":[\"0:3507\"]},{\"tk\":[2096,26,2096,27],\"els\":[\"0:3507\"]},{\"tk\":[2096,27,2096,28],\"els\":[\"0:3507\"]},{\"tk\":[2099,3,2099,4],\"els\":[\"0:3477\"]},{\"tk\":[2100,5,2100,10],\"els\":[\"0:3477\"]},{\"tk\":[2100,11,2100,33],\"els\":[\"0:3477\"]},{\"tk\":[2100,34,2100,42],\"els\":[\"0:3477\"]},{\"tk\":[2100,43,2100,44],\"els\":[\"0:3477\"]},{\"tk\":[2100,45,2100,46],\"els\":[\"0:3477\"]},{\"tk\":[2101,7,2101,8],\"els\":[\"0:3477\"]},{\"tk\":[2101,8,2101,19],\"els\":[\"0:3477\"]},{\"tk\":[2101,20,2101,21],\"els\":[\"0:3477\"]},{\"tk\":[2101,22,2101,38],\"els\":[\"0:3477\"]},{\"tk\":[2101,38,2101,39],\"els\":[\"0:3477\"]},{\"tk\":[2102,7,2102,8],\"els\":[\"0:3477\"]},{\"tk\":[2102,8,2102,18],\"els\":[\"0:3477\"]},{\"tk\":[2102,19,2102,20],\"els\":[\"0:3477\"]},{\"tk\":[2102,21,2102,24],\"els\":[\"0:3477\"]},{\"tk\":[2102,24,2102,25],\"els\":[\"0:3477\"]},{\"tk\":[2103,7,2103,8],\"els\":[\"0:3477\"]},{\"tk\":[2103,8,2103,18],\"els\":[\"0:3477\"]},{\"tk\":[2103,19,2103,20],\"els\":[\"0:3477\"]},{\"tk\":[2103,21,2103,41],\"els\":[\"0:3477\"]},{\"tk\":[2103,41,2103,42],\"els\":[\"0:3477\"]},{\"tk\":[2104,7,2104,8],\"els\":[\"0:3477\"]},{\"tk\":[2104,8,2104,18],\"els\":[\"0:3477\"]},{\"tk\":[2104,19,2104,20],\"els\":[\"0:3477\"]},{\"tk\":[2104,21,2104,34],\"els\":[\"0:3477\"]},{\"tk\":[2104,34,2104,35],\"els\":[\"0:3477\"]},{\"tk\":[2105,7,2105,8],\"els\":[\"0:3477\"]},{\"tk\":[2105,8,2105,15],\"els\":[\"0:3477\"]},{\"tk\":[2105,16,2105,17],\"els\":[\"0:3477\"]},{\"tk\":[2105,18,2105,38],\"els\":[\"0:3477\"]},{\"tk\":[2105,38,2105,39],\"els\":[\"0:3477\"]},{\"tk\":[2106,7,2106,8],\"els\":[\"0:3477\"]},{\"tk\":[2106,8,2106,21],\"els\":[\"0:3477\"]},{\"tk\":[2106,22,2106,23],\"els\":[\"0:3477\"]},{\"tk\":[2106,24,2106,46],\"els\":[\"0:3477\"]},{\"tk\":[2106,46,2106,47],\"els\":[\"0:3477\"]},{\"tk\":[2107,7,2107,8],\"els\":[\"0:3477\"]},{\"tk\":[2107,8,2107,18],\"els\":[\"0:3477\"]},{\"tk\":[2107,19,2107,20],\"els\":[\"0:3477\"]},{\"tk\":[2107,21,2107,40],\"els\":[\"0:3477\"]},{\"tk\":[2107,40,2107,41],\"els\":[\"0:3477\"]},{\"tk\":[2108,7,2108,8],\"els\":[\"0:3477\"]},{\"tk\":[2108,8,2108,17],\"els\":[\"0:3477\"]},{\"tk\":[2108,18,2108,19],\"els\":[\"0:3477\"]},{\"tk\":[2108,20,2108,25],\"els\":[\"0:3477\"]},{\"tk\":[2108,25,2108,26],\"els\":[\"0:3477\"]},{\"tk\":[2109,7,2109,8],\"els\":[\"0:3477\"]},{\"tk\":[2109,8,2109,18],\"els\":[\"0:3477\"]},{\"tk\":[2109,19,2109,20],\"els\":[\"0:3477\"]},{\"tk\":[2109,21,2109,40],\"els\":[\"0:3477\"]},{\"tk\":[2109,40,2109,41],\"els\":[\"0:3477\"]},{\"tk\":[2110,7,2110,8],\"els\":[\"0:3477\"]},{\"tk\":[2110,8,2110,28],\"els\":[\"0:3477\"]},{\"tk\":[2110,29,2110,30],\"els\":[\"0:3477\"]},{\"tk\":[2110,31,2110,36],\"els\":[\"0:3477\"]},{\"tk\":[2110,36,2110,37],\"els\":[\"0:3477\"]},{\"tk\":[2111,7,2111,8],\"els\":[\"0:3477\"]},{\"tk\":[2111,8,2111,30],\"els\":[\"0:3477\"]},{\"tk\":[2111,31,2111,32],\"els\":[\"0:3477\"]},{\"tk\":[2111,33,2111,38],\"els\":[\"0:3477\"]},{\"tk\":[2112,5,2112,6],\"els\":[\"0:3477\"]},{\"tk\":[2112,6,2112,7],\"els\":[\"0:3477\"]},{\"tk\":[2114,5,2114,10],\"els\":[\"0:3477\"]},{\"tk\":[2114,11,2114,31],\"els\":[\"0:3477\"]},{\"tk\":[2114,32,2114,44],\"els\":[\"0:3477\"]},{\"tk\":[2114,45,2114,46],\"els\":[\"0:3477\"]},{\"tk\":[2114,47,2114,48],\"els\":[\"0:3477\"]},{\"tk\":[2115,7,2115,8],\"els\":[\"0:3477\"]},{\"tk\":[2115,8,2115,21],\"els\":[\"0:3477\"]},{\"tk\":[2115,22,2115,23],\"els\":[\"0:3477\"]},{\"tk\":[2115,24,2115,29],\"els\":[\"0:3477\"]},{\"tk\":[2115,29,2115,30],\"els\":[\"0:3477\"]},{\"tk\":[2116,7,2116,8],\"els\":[\"0:3477\"]},{\"tk\":[2116,8,2116,32],\"els\":[\"0:3477\"]},{\"tk\":[2116,33,2116,34],\"els\":[\"0:3477\"]},{\"tk\":[2116,35,2116,40],\"els\":[\"0:3477\"]},{\"tk\":[2116,40,2116,41],\"els\":[\"0:3477\"]},{\"tk\":[2117,7,2117,8],\"els\":[\"0:3477\"]},{\"tk\":[2117,8,2117,30],\"els\":[\"0:3477\"]},{\"tk\":[2117,31,2117,32],\"els\":[\"0:3477\"]},{\"tk\":[2117,33,2117,38],\"els\":[\"0:3477\"]},{\"tk\":[2117,38,2117,39],\"els\":[\"0:3477\"]},{\"tk\":[2118,7,2118,8],\"els\":[\"0:3477\"]},{\"tk\":[2118,8,2118,16],\"els\":[\"0:3477\"]},{\"tk\":[2118,17,2118,18],\"els\":[\"0:3477\"]},{\"tk\":[2118,19,2118,20],\"els\":[\"0:3477\"]},{\"tk\":[2118,20,2118,21],\"els\":[\"0:3477\"]},{\"tk\":[2119,7,2119,8],\"els\":[\"0:3477\"]},{\"tk\":[2119,8,2119,16],\"els\":[\"0:3477\"]},{\"tk\":[2119,17,2119,18],\"els\":[\"0:3477\"]},{\"tk\":[2119,19,2119,20],\"els\":[\"0:3477\"]},{\"tk\":[2120,5,2120,6],\"els\":[\"0:3477\"]},{\"tk\":[2120,6,2120,7],\"els\":[\"0:3477\"]},{\"tk\":[2122,5,2122,10],\"els\":[\"0:3477\"]},{\"tk\":[2122,11,2122,31],\"els\":[\"0:3477\"]},{\"tk\":[2122,32,2122,45],\"els\":[\"0:3477\"]},{\"tk\":[2122,46,2122,47],\"els\":[\"0:3477\"]},{\"tk\":[2122,48,2122,49],\"els\":[\"0:3477\"]},{\"tk\":[2123,7,2123,8],\"els\":[\"0:3477\"]},{\"tk\":[2123,8,2123,19],\"els\":[\"0:3477\"]},{\"tk\":[2123,20,2123,21],\"els\":[\"0:3477\"]},{\"tk\":[2123,22,2123,27],\"els\":[\"0:3477\"]},{\"tk\":[2123,27,2123,28],\"els\":[\"0:3477\"]},{\"tk\":[2124,7,2124,8],\"els\":[\"0:3477\"]},{\"tk\":[2124,8,2124,17],\"els\":[\"0:3477\"]},{\"tk\":[2124,18,2124,19],\"els\":[\"0:3477\"]},{\"tk\":[2124,20,2124,33],\"els\":[\"0:3477\"]},{\"tk\":[2125,5,2125,6],\"els\":[\"0:3477\"]},{\"tk\":[2125,6,2125,7],\"els\":[\"0:3477\"]},{\"tk\":[2128,5,2128,21],\"els\":[\"0:3477\"]},{\"tk\":[2128,21,2128,22],\"els\":[\"0:3477\"]},{\"tk\":[2128,22,2128,25],\"els\":[\"0:3477\"]},{\"tk\":[2128,25,2128,26],\"els\":[\"0:3477\"]},{\"tk\":[2128,27,2128,41],\"els\":[\"0:3477\"]},{\"tk\":[2128,41,2128,42],\"els\":[\"0:3477\"]},{\"tk\":[2128,43,2128,48],\"els\":[\"0:3477\"]},{\"tk\":[2128,48,2128,49],\"els\":[\"0:3477\"]},{\"tk\":[2128,49,2128,50],\"els\":[\"0:3477\"]},{\"tk\":[2131,5,2131,34],\"els\":[\"0:3477\"]},{\"tk\":[2131,34,2131,35],\"els\":[\"0:3477\"]},{\"tk\":[2131,35,2131,38],\"els\":[\"0:3477\"]},{\"tk\":[2131,38,2131,39],\"els\":[\"0:3477\"]},{\"tk\":[2131,40,2131,54],\"els\":[\"0:3477\"]},{\"tk\":[2131,54,2131,55],\"els\":[\"0:3477\"]},{\"tk\":[2131,56,2131,60],\"els\":[\"0:3477\"]},{\"tk\":[2131,60,2131,61],\"els\":[\"0:3477\"]},{\"tk\":[2131,62,2131,74],\"els\":[\"0:3477\"]},{\"tk\":[2131,74,2131,75],\"els\":[\"0:3477\"]},{\"tk\":[2131,76,2131,77],\"els\":[\"0:3477\"]},{\"tk\":[2131,77,2131,78],\"els\":[\"0:3477\"]},{\"tk\":[2131,79,2131,80],\"els\":[\"0:3477\"]},{\"tk\":[2131,80,2131,81],\"els\":[\"0:3477\"]},{\"tk\":[2131,81,2131,82],\"els\":[\"0:3477\"]},{\"tk\":[2134,5,2134,21],\"els\":[\"0:3477\"]},{\"tk\":[2134,21,2134,22],\"els\":[\"0:3477\"]},{\"tk\":[2134,22,2134,25],\"els\":[\"0:3477\"]},{\"tk\":[2134,25,2134,26],\"els\":[\"0:3477\"]},{\"tk\":[2134,27,2134,41],\"els\":[\"0:3477\"]},{\"tk\":[2134,41,2134,42],\"els\":[\"0:3477\"]},{\"tk\":[2134,43,2134,47],\"els\":[\"0:3477\"]},{\"tk\":[2134,47,2134,48],\"els\":[\"0:3477\"]},{\"tk\":[2134,48,2134,49],\"els\":[\"0:3477\"]},{\"tk\":[2135,5,2135,18],\"els\":[\"0:3477\"]},{\"tk\":[2135,18,2135,19],\"els\":[\"0:3477\"]},{\"tk\":[2135,19,2135,20],\"els\":[\"0:3477\"]},{\"tk\":[2135,20,2135,21],\"els\":[\"0:3477\"]},{\"tk\":[2135,21,2135,22],\"els\":[\"0:3477\"]},{\"tk\":[2138,5,2138,28],\"els\":[\"0:3477\"]},{\"tk\":[2138,28,2138,29],\"els\":[\"0:3477\"]},{\"tk\":[2138,29,2138,30],\"els\":[\"0:3477\"]},{\"tk\":[2138,30,2138,31],\"els\":[\"0:3477\"]},{\"tk\":[2138,32,2138,33],\"els\":[\"0:3477\"]},{\"tk\":[2138,33,2138,41],\"els\":[\"0:3477\"]},{\"tk\":[2138,41,2138,42],\"els\":[\"0:3477\"]},{\"tk\":[2138,42,2138,43],\"els\":[\"0:3477\"]},{\"tk\":[2139,5,2139,28],\"els\":[\"0:3477\"]},{\"tk\":[2139,28,2139,29],\"els\":[\"0:3477\"]},{\"tk\":[2139,29,2139,30],\"els\":[\"0:3477\"]},{\"tk\":[2139,30,2139,31],\"els\":[\"0:3477\"]},{\"tk\":[2139,31,2139,57],\"els\":[\"0:3477\"]},{\"tk\":[2139,57,2139,58],\"els\":[\"0:3477\"]},{\"tk\":[2139,58,2139,59],\"els\":[\"0:3477\"]},{\"tk\":[2140,5,2140,28],\"els\":[\"0:3477\"]},{\"tk\":[2140,28,2140,29],\"els\":[\"0:3477\"]},{\"tk\":[2140,29,2140,30],\"els\":[\"0:3477\"]},{\"tk\":[2140,30,2140,31],\"els\":[\"0:3477\"]},{\"tk\":[2140,32,2140,33],\"els\":[\"0:3477\"]},{\"tk\":[2140,33,2140,45],\"els\":[\"0:3477\"]},{\"tk\":[2140,45,2140,46],\"els\":[\"0:3477\"]},{\"tk\":[2140,46,2140,47],\"els\":[\"0:3477\"]},{\"tk\":[2141,5,2141,28],\"els\":[\"0:3477\"]},{\"tk\":[2141,28,2141,29],\"els\":[\"0:3477\"]},{\"tk\":[2141,29,2141,30],\"els\":[\"0:3477\"]},{\"tk\":[2141,30,2141,31],\"els\":[\"0:3477\"]},{\"tk\":[2141,32,2141,33],\"els\":[\"0:3477\"]},{\"tk\":[2141,33,2141,46],\"els\":[\"0:3477\"]},{\"tk\":[2141,46,2141,47],\"els\":[\"0:3477\"]},{\"tk\":[2141,47,2141,48],\"els\":[\"0:3477\"]},{\"tk\":[2144,5,2144,28],\"els\":[\"0:3477\"]},{\"tk\":[2144,28,2144,29],\"els\":[\"0:3477\"]},{\"tk\":[2144,29,2144,30],\"els\":[\"0:3477\"]},{\"tk\":[2144,30,2144,31],\"els\":[\"0:3477\"]},{\"tk\":[2144,31,2144,32],\"els\":[\"0:3477\"]},{\"tk\":[2145,3,2145,4],\"els\":[\"0:3477\"]},{\"tk\":[2148,3,2148,4],\"els\":[\"0:3479\"]},{\"tk\":[2149,5,2149,10],\"els\":[\"0:3479\"]},{\"tk\":[2149,11,2149,33],\"els\":[\"0:3479\"]},{\"tk\":[2149,34,2149,42],\"els\":[\"0:3479\"]},{\"tk\":[2149,43,2149,44],\"els\":[\"0:3479\"]},{\"tk\":[2149,45,2149,46],\"els\":[\"0:3479\"]},{\"tk\":[2150,7,2150,8],\"els\":[\"0:3479\"]},{\"tk\":[2150,8,2150,19],\"els\":[\"0:3479\"]},{\"tk\":[2150,20,2150,21],\"els\":[\"0:3479\"]},{\"tk\":[2150,22,2150,38],\"els\":[\"0:3479\"]},{\"tk\":[2150,38,2150,39],\"els\":[\"0:3479\"]},{\"tk\":[2151,7,2151,8],\"els\":[\"0:3479\"]},{\"tk\":[2151,8,2151,18],\"els\":[\"0:3479\"]},{\"tk\":[2151,19,2151,20],\"els\":[\"0:3479\"]},{\"tk\":[2151,21,2151,24],\"els\":[\"0:3479\"]},{\"tk\":[2151,24,2151,25],\"els\":[\"0:3479\"]},{\"tk\":[2152,7,2152,8],\"els\":[\"0:3479\"]},{\"tk\":[2152,8,2152,18],\"els\":[\"0:3479\"]},{\"tk\":[2152,19,2152,20],\"els\":[\"0:3479\"]},{\"tk\":[2152,21,2152,41],\"els\":[\"0:3479\"]},{\"tk\":[2152,41,2152,42],\"els\":[\"0:3479\"]},{\"tk\":[2153,7,2153,8],\"els\":[\"0:3479\"]},{\"tk\":[2153,8,2153,18],\"els\":[\"0:3479\"]},{\"tk\":[2153,19,2153,20],\"els\":[\"0:3479\"]},{\"tk\":[2153,21,2153,34],\"els\":[\"0:3479\"]},{\"tk\":[2153,34,2153,35],\"els\":[\"0:3479\"]},{\"tk\":[2154,7,2154,8],\"els\":[\"0:3479\"]},{\"tk\":[2154,8,2154,15],\"els\":[\"0:3479\"]},{\"tk\":[2154,16,2154,17],\"els\":[\"0:3479\"]},{\"tk\":[2154,18,2154,38],\"els\":[\"0:3479\"]},{\"tk\":[2154,38,2154,39],\"els\":[\"0:3479\"]},{\"tk\":[2155,7,2155,8],\"els\":[\"0:3479\"]},{\"tk\":[2155,8,2155,21],\"els\":[\"0:3479\"]},{\"tk\":[2155,22,2155,23],\"els\":[\"0:3479\"]},{\"tk\":[2155,24,2155,46],\"els\":[\"0:3479\"]},{\"tk\":[2155,46,2155,47],\"els\":[\"0:3479\"]},{\"tk\":[2156,7,2156,8],\"els\":[\"0:3479\"]},{\"tk\":[2156,8,2156,18],\"els\":[\"0:3479\"]},{\"tk\":[2156,19,2156,20],\"els\":[\"0:3479\"]},{\"tk\":[2156,21,2156,40],\"els\":[\"0:3479\"]},{\"tk\":[2156,40,2156,41],\"els\":[\"0:3479\"]},{\"tk\":[2157,7,2157,8],\"els\":[\"0:3479\"]},{\"tk\":[2157,8,2157,17],\"els\":[\"0:3479\"]},{\"tk\":[2157,18,2157,19],\"els\":[\"0:3479\"]},{\"tk\":[2157,20,2157,25],\"els\":[\"0:3479\"]},{\"tk\":[2157,25,2157,26],\"els\":[\"0:3479\"]},{\"tk\":[2158,7,2158,8],\"els\":[\"0:3479\"]},{\"tk\":[2158,8,2158,18],\"els\":[\"0:3479\"]},{\"tk\":[2158,19,2158,20],\"els\":[\"0:3479\"]},{\"tk\":[2158,21,2158,40],\"els\":[\"0:3479\"]},{\"tk\":[2158,40,2158,41],\"els\":[\"0:3479\"]},{\"tk\":[2159,7,2159,8],\"els\":[\"0:3479\"]},{\"tk\":[2159,8,2159,28],\"els\":[\"0:3479\"]},{\"tk\":[2159,29,2159,30],\"els\":[\"0:3479\"]},{\"tk\":[2159,31,2159,36],\"els\":[\"0:3479\"]},{\"tk\":[2159,36,2159,37],\"els\":[\"0:3479\"]},{\"tk\":[2160,7,2160,8],\"els\":[\"0:3479\"]},{\"tk\":[2160,8,2160,30],\"els\":[\"0:3479\"]},{\"tk\":[2160,31,2160,32],\"els\":[\"0:3479\"]},{\"tk\":[2160,33,2160,38],\"els\":[\"0:3479\"]},{\"tk\":[2161,5,2161,6],\"els\":[\"0:3479\"]},{\"tk\":[2161,6,2161,7],\"els\":[\"0:3479\"]},{\"tk\":[2163,5,2163,10],\"els\":[\"0:3479\"]},{\"tk\":[2163,11,2163,31],\"els\":[\"0:3479\"]},{\"tk\":[2163,32,2163,44],\"els\":[\"0:3479\"]},{\"tk\":[2163,45,2163,46],\"els\":[\"0:3479\"]},{\"tk\":[2163,47,2163,48],\"els\":[\"0:3479\"]},{\"tk\":[2164,7,2164,8],\"els\":[\"0:3479\"]},{\"tk\":[2164,8,2164,21],\"els\":[\"0:3479\"]},{\"tk\":[2164,22,2164,23],\"els\":[\"0:3479\"]},{\"tk\":[2164,24,2164,29],\"els\":[\"0:3479\"]},{\"tk\":[2164,29,2164,30],\"els\":[\"0:3479\"]},{\"tk\":[2165,7,2165,8],\"els\":[\"0:3479\"]},{\"tk\":[2165,8,2165,32],\"els\":[\"0:3479\"]},{\"tk\":[2165,33,2165,34],\"els\":[\"0:3479\"]},{\"tk\":[2165,35,2165,40],\"els\":[\"0:3479\"]},{\"tk\":[2165,40,2165,41],\"els\":[\"0:3479\"]},{\"tk\":[2166,7,2166,8],\"els\":[\"0:3479\"]},{\"tk\":[2166,8,2166,30],\"els\":[\"0:3479\"]},{\"tk\":[2166,31,2166,32],\"els\":[\"0:3479\"]},{\"tk\":[2166,33,2166,38],\"els\":[\"0:3479\"]},{\"tk\":[2166,38,2166,39],\"els\":[\"0:3479\"]},{\"tk\":[2167,7,2167,8],\"els\":[\"0:3479\"]},{\"tk\":[2167,8,2167,16],\"els\":[\"0:3479\"]},{\"tk\":[2167,17,2167,18],\"els\":[\"0:3479\"]},{\"tk\":[2167,19,2167,20],\"els\":[\"0:3479\"]},{\"tk\":[2167,20,2167,21],\"els\":[\"0:3479\"]},{\"tk\":[2168,7,2168,8],\"els\":[\"0:3479\"]},{\"tk\":[2168,8,2168,16],\"els\":[\"0:3479\"]},{\"tk\":[2168,17,2168,18],\"els\":[\"0:3479\"]},{\"tk\":[2168,19,2168,20],\"els\":[\"0:3479\"]},{\"tk\":[2169,5,2169,6],\"els\":[\"0:3479\"]},{\"tk\":[2169,6,2169,7],\"els\":[\"0:3479\"]},{\"tk\":[2171,5,2171,10],\"els\":[\"0:3479\"]},{\"tk\":[2171,11,2171,31],\"els\":[\"0:3479\"]},{\"tk\":[2171,32,2171,45],\"els\":[\"0:3479\"]},{\"tk\":[2171,46,2171,47],\"els\":[\"0:3479\"]},{\"tk\":[2171,48,2171,49],\"els\":[\"0:3479\"]},{\"tk\":[2172,7,2172,8],\"els\":[\"0:3479\"]},{\"tk\":[2172,8,2172,19],\"els\":[\"0:3479\"]},{\"tk\":[2172,20,2172,21],\"els\":[\"0:3479\"]},{\"tk\":[2172,22,2172,27],\"els\":[\"0:3479\"]},{\"tk\":[2172,27,2172,28],\"els\":[\"0:3479\"]},{\"tk\":[2173,7,2173,8],\"els\":[\"0:3479\"]},{\"tk\":[2173,8,2173,17],\"els\":[\"0:3479\"]},{\"tk\":[2173,18,2173,19],\"els\":[\"0:3479\"]},{\"tk\":[2173,20,2173,33],\"els\":[\"0:3479\"]},{\"tk\":[2174,5,2174,6],\"els\":[\"0:3479\"]},{\"tk\":[2174,6,2174,7],\"els\":[\"0:3479\"]},{\"tk\":[2177,5,2177,21],\"els\":[\"0:3479\"]},{\"tk\":[2177,21,2177,22],\"els\":[\"0:3479\"]},{\"tk\":[2177,22,2177,25],\"els\":[\"0:3479\"]},{\"tk\":[2177,25,2177,26],\"els\":[\"0:3479\"]},{\"tk\":[2177,27,2177,41],\"els\":[\"0:3479\"]},{\"tk\":[2177,41,2177,42],\"els\":[\"0:3479\"]},{\"tk\":[2177,43,2177,48],\"els\":[\"0:3479\"]},{\"tk\":[2177,48,2177,49],\"els\":[\"0:3479\"]},{\"tk\":[2177,49,2177,50],\"els\":[\"0:3479\"]},{\"tk\":[2180,5,2180,34],\"els\":[\"0:3479\"]},{\"tk\":[2180,34,2180,35],\"els\":[\"0:3479\"]},{\"tk\":[2180,35,2180,38],\"els\":[\"0:3479\"]},{\"tk\":[2180,38,2180,39],\"els\":[\"0:3479\"]},{\"tk\":[2180,40,2180,54],\"els\":[\"0:3479\"]},{\"tk\":[2180,54,2180,55],\"els\":[\"0:3479\"]},{\"tk\":[2180,56,2180,60],\"els\":[\"0:3479\"]},{\"tk\":[2180,60,2180,61],\"els\":[\"0:3479\"]},{\"tk\":[2180,62,2180,74],\"els\":[\"0:3479\"]},{\"tk\":[2180,74,2180,75],\"els\":[\"0:3479\"]},{\"tk\":[2180,76,2180,77],\"els\":[\"0:3479\"]},{\"tk\":[2180,77,2180,78],\"els\":[\"0:3479\"]},{\"tk\":[2180,79,2180,80],\"els\":[\"0:3479\"]},{\"tk\":[2180,80,2180,81],\"els\":[\"0:3479\"]},{\"tk\":[2180,81,2180,82],\"els\":[\"0:3479\"]},{\"tk\":[2183,5,2183,21],\"els\":[\"0:3479\"]},{\"tk\":[2183,21,2183,22],\"els\":[\"0:3479\"]},{\"tk\":[2183,22,2183,25],\"els\":[\"0:3479\"]},{\"tk\":[2183,25,2183,26],\"els\":[\"0:3479\"]},{\"tk\":[2183,27,2183,41],\"els\":[\"0:3479\"]},{\"tk\":[2183,41,2183,42],\"els\":[\"0:3479\"]},{\"tk\":[2183,43,2183,47],\"els\":[\"0:3479\"]},{\"tk\":[2183,47,2183,48],\"els\":[\"0:3479\"]},{\"tk\":[2183,48,2183,49],\"els\":[\"0:3479\"]},{\"tk\":[2184,5,2184,18],\"els\":[\"0:3479\"]},{\"tk\":[2184,18,2184,19],\"els\":[\"0:3479\"]},{\"tk\":[2184,19,2184,20],\"els\":[\"0:3479\"]},{\"tk\":[2184,20,2184,21],\"els\":[\"0:3479\"]},{\"tk\":[2184,21,2184,22],\"els\":[\"0:3479\"]},{\"tk\":[2187,5,2187,28],\"els\":[\"0:3479\"]},{\"tk\":[2187,28,2187,29],\"els\":[\"0:3479\"]},{\"tk\":[2187,29,2187,30],\"els\":[\"0:3479\"]},{\"tk\":[2187,30,2187,31],\"els\":[\"0:3479\"]},{\"tk\":[2187,32,2187,33],\"els\":[\"0:3479\"]},{\"tk\":[2187,33,2187,41],\"els\":[\"0:3479\"]},{\"tk\":[2187,41,2187,42],\"els\":[\"0:3479\"]},{\"tk\":[2187,42,2187,43],\"els\":[\"0:3479\"]},{\"tk\":[2188,5,2188,28],\"els\":[\"0:3479\"]},{\"tk\":[2188,28,2188,29],\"els\":[\"0:3479\"]},{\"tk\":[2188,29,2188,30],\"els\":[\"0:3479\"]},{\"tk\":[2188,30,2188,31],\"els\":[\"0:3479\"]},{\"tk\":[2188,31,2188,57],\"els\":[\"0:3479\"]},{\"tk\":[2188,57,2188,58],\"els\":[\"0:3479\"]},{\"tk\":[2188,58,2188,59],\"els\":[\"0:3479\"]},{\"tk\":[2189,5,2189,28],\"els\":[\"0:3479\"]},{\"tk\":[2189,28,2189,29],\"els\":[\"0:3479\"]},{\"tk\":[2189,29,2189,30],\"els\":[\"0:3479\"]},{\"tk\":[2189,30,2189,31],\"els\":[\"0:3479\"]},{\"tk\":[2189,32,2189,33],\"els\":[\"0:3479\"]},{\"tk\":[2189,33,2189,45],\"els\":[\"0:3479\"]},{\"tk\":[2189,45,2189,46],\"els\":[\"0:3479\"]},{\"tk\":[2189,46,2189,47],\"els\":[\"0:3479\"]},{\"tk\":[2190,5,2190,28],\"els\":[\"0:3479\"]},{\"tk\":[2190,28,2190,29],\"els\":[\"0:3479\"]},{\"tk\":[2190,29,2190,30],\"els\":[\"0:3479\"]},{\"tk\":[2190,30,2190,31],\"els\":[\"0:3479\"]},{\"tk\":[2190,32,2190,33],\"els\":[\"0:3479\"]},{\"tk\":[2190,33,2190,46],\"els\":[\"0:3479\"]},{\"tk\":[2190,46,2190,47],\"els\":[\"0:3479\"]},{\"tk\":[2190,47,2190,48],\"els\":[\"0:3479\"]},{\"tk\":[2193,5,2193,28],\"els\":[\"0:3479\"]},{\"tk\":[2193,28,2193,29],\"els\":[\"0:3479\"]},{\"tk\":[2193,29,2193,30],\"els\":[\"0:3479\"]},{\"tk\":[2193,30,2193,31],\"els\":[\"0:3479\"]},{\"tk\":[2193,31,2193,32],\"els\":[\"0:3479\"]},{\"tk\":[2194,3,2194,4],\"els\":[\"0:3479\"]},{\"tk\":[2197,3,2197,4],\"els\":[\"0:3478\"]},{\"tk\":[2198,5,2198,22],\"els\":[\"0:3478\"]},{\"tk\":[2198,23,2198,36],\"els\":[\"0:3478\"]},{\"tk\":[2198,37,2198,38],\"els\":[\"0:3478\"]},{\"tk\":[2198,39,2198,40],\"els\":[\"0:3478\"]},{\"tk\":[2199,7,2199,8],\"els\":[\"0:3478\"]},{\"tk\":[2199,8,2199,23],\"els\":[\"0:3478\"]},{\"tk\":[2199,24,2199,25],\"els\":[\"0:3478\"]},{\"tk\":[2199,26,2199,30],\"els\":[\"0:3478\"]},{\"tk\":[2199,30,2199,31],\"els\":[\"0:3478\"]},{\"tk\":[2200,7,2200,8],\"els\":[\"0:3478\"]},{\"tk\":[2200,8,2200,15],\"els\":[\"0:3478\"]},{\"tk\":[2200,16,2200,17],\"els\":[\"0:3478\"]},{\"tk\":[2200,18,2200,37],\"els\":[\"0:3478\"]},{\"tk\":[2201,5,2201,6],\"els\":[\"0:3478\"]},{\"tk\":[2201,6,2201,7],\"els\":[\"0:3478\"]},{\"tk\":[2204,5,2204,23],\"els\":[\"0:3478\"]},{\"tk\":[2204,23,2204,24],\"els\":[\"0:3478\"]},{\"tk\":[2204,24,2204,25],\"els\":[\"0:3478\"]},{\"tk\":[2204,25,2204,26],\"els\":[\"0:3478\"]},{\"tk\":[2204,27,2204,28],\"els\":[\"0:3478\"]},{\"tk\":[2204,28,2204,29],\"els\":[\"0:3478\"]},{\"tk\":[2204,30,2204,31],\"els\":[\"0:3478\"]},{\"tk\":[2204,31,2204,44],\"els\":[\"0:3478\"]},{\"tk\":[2204,44,2204,45],\"els\":[\"0:3478\"]},{\"tk\":[2204,45,2204,46],\"els\":[\"0:3478\"]},{\"tk\":[2205,3,2205,4],\"els\":[\"0:3478\"]},{\"tk\":[2208,3,2208,30],\"els\":[\"0:3480\"]},{\"tk\":[2208,30,2208,31],\"els\":[\"0:3480\"]},{\"tk\":[2208,31,2208,34],\"els\":[\"0:3480\"]},{\"tk\":[2208,34,2208,35],\"els\":[\"0:3480\"]},{\"tk\":[2208,36,2208,38],\"els\":[\"0:3480\"]},{\"tk\":[2208,38,2208,39],\"els\":[\"0:3480\"]},{\"tk\":[2208,39,2208,40],\"els\":[\"0:3480\"]},{\"tk\":[2213,3,2213,28],\"els\":[\"0:3489\"]},{\"tk\":[2213,28,2213,29],\"els\":[\"0:3489\"]},{\"tk\":[2213,29,2213,30],\"els\":[\"0:3489\"]},{\"tk\":[2213,30,2213,31],\"els\":[\"0:3489\"]},{\"tk\":[2214,3,2214,32],\"els\":[\"0:3489\"]},{\"tk\":[2214,32,2214,33],\"els\":[\"0:3489\"]},{\"tk\":[2214,33,2214,34],\"els\":[\"0:3489\"]},{\"tk\":[2214,34,2214,35],\"els\":[\"0:3489\"]},{\"tk\":[2215,3,2215,13],\"els\":[\"0:3489\"]},{\"tk\":[2215,13,2215,14],\"els\":[\"0:3489\"]},{\"tk\":[2215,14,2215,15],\"els\":[\"0:3489\"]},{\"tk\":[2215,15,2215,16],\"els\":[\"0:3489\"]},{\"tk\":[2218,3,2218,4],\"els\":[\"0:3505\"]},{\"tk\":[2220,5,2220,34],\"els\":[\"0:3505\"]},{\"tk\":[2220,34,2220,35],\"els\":[\"0:3505\"]},{\"tk\":[2220,35,2220,38],\"els\":[\"0:3505\"]},{\"tk\":[2220,38,2220,39],\"els\":[\"0:3505\"]},{\"tk\":[2220,40,2220,50],\"els\":[\"0:3505\"]},{\"tk\":[2220,50,2220,51],\"els\":[\"0:3505\"]},{\"tk\":[2220,52,2220,56],\"els\":[\"0:3505\"]},{\"tk\":[2220,56,2220,57],\"els\":[\"0:3505\"]},{\"tk\":[2220,58,2220,75],\"els\":[\"0:3505\"]},{\"tk\":[2220,75,2220,76],\"els\":[\"0:3505\"]},{\"tk\":[2221,7,2221,20],\"els\":[\"0:3505\"]},{\"tk\":[2221,20,2221,21],\"els\":[\"0:3505\"]},{\"tk\":[2221,22,2221,37],\"els\":[\"0:3505\"]},{\"tk\":[2221,37,2221,38],\"els\":[\"0:3505\"]},{\"tk\":[2221,38,2221,39],\"els\":[\"0:3505\"]},{\"tk\":[2224,5,2224,34],\"els\":[\"0:3505\"]},{\"tk\":[2224,34,2224,35],\"els\":[\"0:3505\"]},{\"tk\":[2224,35,2224,38],\"els\":[\"0:3505\"]},{\"tk\":[2224,38,2224,39],\"els\":[\"0:3505\"]},{\"tk\":[2224,40,2224,49],\"els\":[\"0:3505\"]},{\"tk\":[2224,49,2224,50],\"els\":[\"0:3505\"]},{\"tk\":[2224,51,2224,55],\"els\":[\"0:3505\"]},{\"tk\":[2224,55,2224,56],\"els\":[\"0:3505\"]},{\"tk\":[2224,57,2224,68],\"els\":[\"0:3505\"]},{\"tk\":[2224,68,2224,69],\"els\":[\"0:3505\"]},{\"tk\":[2225,7,2225,20],\"els\":[\"0:3505\"]},{\"tk\":[2225,20,2225,21],\"els\":[\"0:3505\"]},{\"tk\":[2225,22,2225,37],\"els\":[\"0:3505\"]},{\"tk\":[2225,37,2225,38],\"els\":[\"0:3505\"]},{\"tk\":[2225,38,2225,39],\"els\":[\"0:3505\"]},{\"tk\":[2228,5,2228,34],\"els\":[\"0:3505\"]},{\"tk\":[2228,34,2228,35],\"els\":[\"0:3505\"]},{\"tk\":[2228,35,2228,38],\"els\":[\"0:3505\"]},{\"tk\":[2228,38,2228,39],\"els\":[\"0:3505\"]},{\"tk\":[2228,40,2228,49],\"els\":[\"0:3505\"]},{\"tk\":[2228,49,2228,50],\"els\":[\"0:3505\"]},{\"tk\":[2228,51,2228,55],\"els\":[\"0:3505\"]},{\"tk\":[2228,55,2228,56],\"els\":[\"0:3505\"]},{\"tk\":[2228,57,2228,68],\"els\":[\"0:3505\"]},{\"tk\":[2228,68,2228,69],\"els\":[\"0:3505\"]},{\"tk\":[2229,7,2229,20],\"els\":[\"0:3505\"]},{\"tk\":[2229,20,2229,21],\"els\":[\"0:3505\"]},{\"tk\":[2229,22,2229,37],\"els\":[\"0:3505\"]},{\"tk\":[2229,37,2229,38],\"els\":[\"0:3505\"]},{\"tk\":[2229,38,2229,39],\"els\":[\"0:3505\"]},{\"tk\":[2232,5,2232,34],\"els\":[\"0:3505\"]},{\"tk\":[2232,34,2232,35],\"els\":[\"0:3505\"]},{\"tk\":[2232,35,2232,38],\"els\":[\"0:3505\"]},{\"tk\":[2232,38,2232,39],\"els\":[\"0:3505\"]},{\"tk\":[2232,40,2232,49],\"els\":[\"0:3505\"]},{\"tk\":[2232,49,2232,50],\"els\":[\"0:3505\"]},{\"tk\":[2232,51,2232,55],\"els\":[\"0:3505\"]},{\"tk\":[2232,55,2232,56],\"els\":[\"0:3505\"]},{\"tk\":[2232,57,2232,68],\"els\":[\"0:3505\"]},{\"tk\":[2232,68,2232,69],\"els\":[\"0:3505\"]},{\"tk\":[2233,7,2233,20],\"els\":[\"0:3505\"]},{\"tk\":[2233,20,2233,21],\"els\":[\"0:3505\"]},{\"tk\":[2233,22,2233,37],\"els\":[\"0:3505\"]},{\"tk\":[2233,37,2233,38],\"els\":[\"0:3505\"]},{\"tk\":[2233,38,2233,39],\"els\":[\"0:3505\"]},{\"tk\":[2236,5,2236,34],\"els\":[\"0:3505\"]},{\"tk\":[2236,34,2236,35],\"els\":[\"0:3505\"]},{\"tk\":[2236,35,2236,38],\"els\":[\"0:3505\"]},{\"tk\":[2236,38,2236,39],\"els\":[\"0:3505\"]},{\"tk\":[2236,40,2236,49],\"els\":[\"0:3505\"]},{\"tk\":[2236,49,2236,50],\"els\":[\"0:3505\"]},{\"tk\":[2236,51,2236,55],\"els\":[\"0:3505\"]},{\"tk\":[2236,55,2236,56],\"els\":[\"0:3505\"]},{\"tk\":[2236,57,2236,68],\"els\":[\"0:3505\"]},{\"tk\":[2236,68,2236,69],\"els\":[\"0:3505\"]},{\"tk\":[2237,7,2237,20],\"els\":[\"0:3505\"]},{\"tk\":[2237,20,2237,21],\"els\":[\"0:3505\"]},{\"tk\":[2237,22,2237,37],\"els\":[\"0:3505\"]},{\"tk\":[2237,37,2237,38],\"els\":[\"0:3505\"]},{\"tk\":[2237,38,2237,39],\"els\":[\"0:3505\"]},{\"tk\":[2240,5,2240,26],\"els\":[\"0:3505\"]},{\"tk\":[2240,27,2240,38],\"els\":[\"0:3505\"]},{\"tk\":[2240,38,2240,39],\"els\":[\"0:3505\"]},{\"tk\":[2240,39,2240,41],\"els\":[\"0:3505\"]},{\"tk\":[2240,41,2240,42],\"els\":[\"0:3505\"]},{\"tk\":[2240,42,2240,43],\"els\":[\"0:3505\"]},{\"tk\":[2240,44,2240,45],\"els\":[\"0:3505\"]},{\"tk\":[2241,7,2241,8],\"els\":[\"0:3505\"]},{\"tk\":[2243,9,2243,10],\"els\":[\"0:3505\"]},{\"tk\":[2243,10,2243,14],\"els\":[\"0:3505\"]},{\"tk\":[2243,15,2243,16],\"els\":[\"0:3505\"]},{\"tk\":[2243,17,2243,22],\"els\":[\"0:3505\"]},{\"tk\":[2243,22,2243,23],\"els\":[\"0:3505\"]},{\"tk\":[2244,9,2244,10],\"els\":[\"0:3505\"]},{\"tk\":[2244,10,2244,20],\"els\":[\"0:3505\"]},{\"tk\":[2244,21,2244,22],\"els\":[\"0:3505\"]},{\"tk\":[2244,23,2244,24],\"els\":[\"0:3505\"]},{\"tk\":[2244,24,2244,25],\"els\":[\"0:3505\"]},{\"tk\":[2245,9,2245,10],\"els\":[\"0:3505\"]},{\"tk\":[2245,10,2245,20],\"els\":[\"0:3505\"]},{\"tk\":[2245,21,2245,22],\"els\":[\"0:3505\"]},{\"tk\":[2245,23,2245,53],\"els\":[\"0:3505\"]},{\"tk\":[2245,53,2245,54],\"els\":[\"0:3505\"]},{\"tk\":[2246,9,2246,10],\"els\":[\"0:3505\"]},{\"tk\":[2246,10,2246,23],\"els\":[\"0:3505\"]},{\"tk\":[2246,24,2246,25],\"els\":[\"0:3505\"]},{\"tk\":[2246,26,2246,31],\"els\":[\"0:3505\"]},{\"tk\":[2246,31,2246,32],\"els\":[\"0:3505\"]},{\"tk\":[2247,9,2247,10],\"els\":[\"0:3505\"]},{\"tk\":[2247,10,2247,21],\"els\":[\"0:3505\"]},{\"tk\":[2247,22,2247,23],\"els\":[\"0:3505\"]},{\"tk\":[2247,24,2247,47],\"els\":[\"0:3505\"]},{\"tk\":[2247,47,2247,48],\"els\":[\"0:3505\"]},{\"tk\":[2248,9,2248,10],\"els\":[\"0:3505\"]},{\"tk\":[2248,10,2248,13],\"els\":[\"0:3505\"]},{\"tk\":[2248,14,2248,15],\"els\":[\"0:3505\"]},{\"tk\":[2248,16,2248,29],\"els\":[\"0:3505\"]},{\"tk\":[2248,29,2248,30],\"els\":[\"0:3505\"]},{\"tk\":[2249,9,2249,10],\"els\":[\"0:3505\"]},{\"tk\":[2249,10,2249,17],\"els\":[\"0:3505\"]},{\"tk\":[2249,18,2249,19],\"els\":[\"0:3505\"]},{\"tk\":[2249,20,2249,25],\"els\":[\"0:3505\"]},{\"tk\":[2249,25,2249,26],\"els\":[\"0:3505\"]},{\"tk\":[2250,9,2250,10],\"els\":[\"0:3505\"]},{\"tk\":[2250,10,2250,19],\"els\":[\"0:3505\"]},{\"tk\":[2250,20,2250,21],\"els\":[\"0:3505\"]},{\"tk\":[2250,22,2250,43],\"els\":[\"0:3505\"]},{\"tk\":[2250,43,2250,44],\"els\":[\"0:3505\"]},{\"tk\":[2251,9,2251,10],\"els\":[\"0:3505\"]},{\"tk\":[2251,10,2251,22],\"els\":[\"0:3505\"]},{\"tk\":[2251,23,2251,24],\"els\":[\"0:3505\"]},{\"tk\":[2251,25,2251,30],\"els\":[\"0:3505\"]},{\"tk\":[2251,30,2251,31],\"els\":[\"0:3505\"]},{\"tk\":[2252,7,2252,8],\"els\":[\"0:3505\"]},{\"tk\":[2252,8,2252,9],\"els\":[\"0:3505\"]},{\"tk\":[2254,7,2254,8],\"els\":[\"0:3505\"]},{\"tk\":[2256,9,2256,10],\"els\":[\"0:3505\"]},{\"tk\":[2256,10,2256,14],\"els\":[\"0:3505\"]},{\"tk\":[2256,15,2256,16],\"els\":[\"0:3505\"]},{\"tk\":[2256,17,2256,22],\"els\":[\"0:3505\"]},{\"tk\":[2256,22,2256,23],\"els\":[\"0:3505\"]},{\"tk\":[2257,9,2257,10],\"els\":[\"0:3505\"]},{\"tk\":[2257,10,2257,20],\"els\":[\"0:3505\"]},{\"tk\":[2257,21,2257,22],\"els\":[\"0:3505\"]},{\"tk\":[2257,23,2257,24],\"els\":[\"0:3505\"]},{\"tk\":[2257,24,2257,25],\"els\":[\"0:3505\"]},{\"tk\":[2258,9,2258,10],\"els\":[\"0:3505\"]},{\"tk\":[2258,10,2258,20],\"els\":[\"0:3505\"]},{\"tk\":[2258,21,2258,22],\"els\":[\"0:3505\"]},{\"tk\":[2258,23,2258,53],\"els\":[\"0:3505\"]},{\"tk\":[2258,53,2258,54],\"els\":[\"0:3505\"]},{\"tk\":[2259,9,2259,10],\"els\":[\"0:3505\"]},{\"tk\":[2259,10,2259,23],\"els\":[\"0:3505\"]},{\"tk\":[2259,24,2259,25],\"els\":[\"0:3505\"]},{\"tk\":[2259,26,2259,31],\"els\":[\"0:3505\"]},{\"tk\":[2259,31,2259,32],\"els\":[\"0:3505\"]},{\"tk\":[2260,9,2260,10],\"els\":[\"0:3505\"]},{\"tk\":[2260,10,2260,21],\"els\":[\"0:3505\"]},{\"tk\":[2260,22,2260,23],\"els\":[\"0:3505\"]},{\"tk\":[2260,24,2260,47],\"els\":[\"0:3505\"]},{\"tk\":[2260,47,2260,48],\"els\":[\"0:3505\"]},{\"tk\":[2261,9,2261,10],\"els\":[\"0:3505\"]},{\"tk\":[2261,10,2261,13],\"els\":[\"0:3505\"]},{\"tk\":[2261,14,2261,15],\"els\":[\"0:3505\"]},{\"tk\":[2261,16,2261,29],\"els\":[\"0:3505\"]},{\"tk\":[2261,29,2261,30],\"els\":[\"0:3505\"]},{\"tk\":[2262,9,2262,10],\"els\":[\"0:3505\"]},{\"tk\":[2262,10,2262,17],\"els\":[\"0:3505\"]},{\"tk\":[2262,18,2262,19],\"els\":[\"0:3505\"]},{\"tk\":[2262,20,2262,25],\"els\":[\"0:3505\"]},{\"tk\":[2262,25,2262,26],\"els\":[\"0:3505\"]},{\"tk\":[2263,9,2263,10],\"els\":[\"0:3505\"]},{\"tk\":[2263,10,2263,19],\"els\":[\"0:3505\"]},{\"tk\":[2263,20,2263,21],\"els\":[\"0:3505\"]},{\"tk\":[2263,22,2263,43],\"els\":[\"0:3505\"]},{\"tk\":[2263,43,2263,44],\"els\":[\"0:3505\"]},{\"tk\":[2264,9,2264,10],\"els\":[\"0:3505\"]},{\"tk\":[2264,10,2264,22],\"els\":[\"0:3505\"]},{\"tk\":[2264,23,2264,24],\"els\":[\"0:3505\"]},{\"tk\":[2264,25,2264,30],\"els\":[\"0:3505\"]},{\"tk\":[2264,30,2264,31],\"els\":[\"0:3505\"]},{\"tk\":[2265,7,2265,8],\"els\":[\"0:3505\"]},{\"tk\":[2265,8,2265,9],\"els\":[\"0:3505\"]},{\"tk\":[2267,7,2267,8],\"els\":[\"0:3505\"]},{\"tk\":[2269,9,2269,10],\"els\":[\"0:3505\"]},{\"tk\":[2269,10,2269,14],\"els\":[\"0:3505\"]},{\"tk\":[2269,15,2269,16],\"els\":[\"0:3505\"]},{\"tk\":[2269,17,2269,22],\"els\":[\"0:3505\"]},{\"tk\":[2269,22,2269,23],\"els\":[\"0:3505\"]},{\"tk\":[2270,9,2270,10],\"els\":[\"0:3505\"]},{\"tk\":[2270,10,2270,20],\"els\":[\"0:3505\"]},{\"tk\":[2270,21,2270,22],\"els\":[\"0:3505\"]},{\"tk\":[2270,23,2270,24],\"els\":[\"0:3505\"]},{\"tk\":[2270,24,2270,25],\"els\":[\"0:3505\"]},{\"tk\":[2271,9,2271,10],\"els\":[\"0:3505\"]},{\"tk\":[2271,10,2271,20],\"els\":[\"0:3505\"]},{\"tk\":[2271,21,2271,22],\"els\":[\"0:3505\"]},{\"tk\":[2271,23,2271,53],\"els\":[\"0:3505\"]},{\"tk\":[2271,53,2271,54],\"els\":[\"0:3505\"]},{\"tk\":[2272,9,2272,10],\"els\":[\"0:3505\"]},{\"tk\":[2272,10,2272,23],\"els\":[\"0:3505\"]},{\"tk\":[2272,24,2272,25],\"els\":[\"0:3505\"]},{\"tk\":[2272,26,2272,31],\"els\":[\"0:3505\"]},{\"tk\":[2272,31,2272,32],\"els\":[\"0:3505\"]},{\"tk\":[2273,9,2273,10],\"els\":[\"0:3505\"]},{\"tk\":[2273,10,2273,21],\"els\":[\"0:3505\"]},{\"tk\":[2273,22,2273,23],\"els\":[\"0:3505\"]},{\"tk\":[2273,24,2273,47],\"els\":[\"0:3505\"]},{\"tk\":[2273,47,2273,48],\"els\":[\"0:3505\"]},{\"tk\":[2274,9,2274,10],\"els\":[\"0:3505\"]},{\"tk\":[2274,10,2274,13],\"els\":[\"0:3505\"]},{\"tk\":[2274,14,2274,15],\"els\":[\"0:3505\"]},{\"tk\":[2274,16,2274,29],\"els\":[\"0:3505\"]},{\"tk\":[2274,29,2274,30],\"els\":[\"0:3505\"]},{\"tk\":[2275,9,2275,10],\"els\":[\"0:3505\"]},{\"tk\":[2275,10,2275,17],\"els\":[\"0:3505\"]},{\"tk\":[2275,18,2275,19],\"els\":[\"0:3505\"]},{\"tk\":[2275,20,2275,25],\"els\":[\"0:3505\"]},{\"tk\":[2275,25,2275,26],\"els\":[\"0:3505\"]},{\"tk\":[2276,9,2276,10],\"els\":[\"0:3505\"]},{\"tk\":[2276,10,2276,19],\"els\":[\"0:3505\"]},{\"tk\":[2276,20,2276,21],\"els\":[\"0:3505\"]},{\"tk\":[2276,22,2276,43],\"els\":[\"0:3505\"]},{\"tk\":[2276,43,2276,44],\"els\":[\"0:3505\"]},{\"tk\":[2277,9,2277,10],\"els\":[\"0:3505\"]},{\"tk\":[2277,10,2277,22],\"els\":[\"0:3505\"]},{\"tk\":[2277,23,2277,24],\"els\":[\"0:3505\"]},{\"tk\":[2277,25,2277,30],\"els\":[\"0:3505\"]},{\"tk\":[2277,30,2277,31],\"els\":[\"0:3505\"]},{\"tk\":[2278,7,2278,8],\"els\":[\"0:3505\"]},{\"tk\":[2278,8,2278,9],\"els\":[\"0:3505\"]},{\"tk\":[2280,7,2280,8],\"els\":[\"0:3505\"]},{\"tk\":[2282,9,2282,10],\"els\":[\"0:3505\"]},{\"tk\":[2282,10,2282,14],\"els\":[\"0:3505\"]},{\"tk\":[2282,15,2282,16],\"els\":[\"0:3505\"]},{\"tk\":[2282,17,2282,22],\"els\":[\"0:3505\"]},{\"tk\":[2282,22,2282,23],\"els\":[\"0:3505\"]},{\"tk\":[2283,9,2283,10],\"els\":[\"0:3505\"]},{\"tk\":[2283,10,2283,20],\"els\":[\"0:3505\"]},{\"tk\":[2283,21,2283,22],\"els\":[\"0:3505\"]},{\"tk\":[2283,23,2283,24],\"els\":[\"0:3505\"]},{\"tk\":[2283,24,2283,25],\"els\":[\"0:3505\"]},{\"tk\":[2284,9,2284,10],\"els\":[\"0:3505\"]},{\"tk\":[2284,10,2284,20],\"els\":[\"0:3505\"]},{\"tk\":[2284,21,2284,22],\"els\":[\"0:3505\"]},{\"tk\":[2284,23,2284,53],\"els\":[\"0:3505\"]},{\"tk\":[2284,53,2284,54],\"els\":[\"0:3505\"]},{\"tk\":[2285,9,2285,10],\"els\":[\"0:3505\"]},{\"tk\":[2285,10,2285,23],\"els\":[\"0:3505\"]},{\"tk\":[2285,24,2285,25],\"els\":[\"0:3505\"]},{\"tk\":[2285,26,2285,31],\"els\":[\"0:3505\"]},{\"tk\":[2285,31,2285,32],\"els\":[\"0:3505\"]},{\"tk\":[2286,9,2286,10],\"els\":[\"0:3505\"]},{\"tk\":[2286,10,2286,21],\"els\":[\"0:3505\"]},{\"tk\":[2286,22,2286,23],\"els\":[\"0:3505\"]},{\"tk\":[2286,24,2286,47],\"els\":[\"0:3505\"]},{\"tk\":[2286,47,2286,48],\"els\":[\"0:3505\"]},{\"tk\":[2287,9,2287,10],\"els\":[\"0:3505\"]},{\"tk\":[2287,10,2287,13],\"els\":[\"0:3505\"]},{\"tk\":[2287,14,2287,15],\"els\":[\"0:3505\"]},{\"tk\":[2287,16,2287,29],\"els\":[\"0:3505\"]},{\"tk\":[2287,29,2287,30],\"els\":[\"0:3505\"]},{\"tk\":[2288,9,2288,10],\"els\":[\"0:3505\"]},{\"tk\":[2288,10,2288,17],\"els\":[\"0:3505\"]},{\"tk\":[2288,18,2288,19],\"els\":[\"0:3505\"]},{\"tk\":[2288,20,2288,25],\"els\":[\"0:3505\"]},{\"tk\":[2288,25,2288,26],\"els\":[\"0:3505\"]},{\"tk\":[2289,9,2289,10],\"els\":[\"0:3505\"]},{\"tk\":[2289,10,2289,19],\"els\":[\"0:3505\"]},{\"tk\":[2289,20,2289,21],\"els\":[\"0:3505\"]},{\"tk\":[2289,22,2289,43],\"els\":[\"0:3505\"]},{\"tk\":[2289,43,2289,44],\"els\":[\"0:3505\"]},{\"tk\":[2290,9,2290,10],\"els\":[\"0:3505\"]},{\"tk\":[2290,10,2290,22],\"els\":[\"0:3505\"]},{\"tk\":[2290,23,2290,24],\"els\":[\"0:3505\"]},{\"tk\":[2290,25,2290,30],\"els\":[\"0:3505\"]},{\"tk\":[2290,30,2290,31],\"els\":[\"0:3505\"]},{\"tk\":[2291,7,2291,8],\"els\":[\"0:3505\"]},{\"tk\":[2291,8,2291,9],\"els\":[\"0:3505\"]},{\"tk\":[2292,5,2292,6],\"els\":[\"0:3505\"]},{\"tk\":[2292,6,2292,7],\"els\":[\"0:3505\"]},{\"tk\":[2294,5,2294,18],\"els\":[\"0:3505\"]},{\"tk\":[2294,18,2294,19],\"els\":[\"0:3505\"]},{\"tk\":[2294,19,2294,21],\"els\":[\"0:3505\"]},{\"tk\":[2294,21,2294,22],\"els\":[\"0:3505\"]},{\"tk\":[2294,23,2294,34],\"els\":[\"0:3505\"]},{\"tk\":[2294,34,2294,35],\"els\":[\"0:3505\"]},{\"tk\":[2294,35,2294,36],\"els\":[\"0:3505\"]},{\"tk\":[2295,3,2295,4],\"els\":[\"0:3505\"]},{\"tk\":[2297,3,2297,4],\"els\":[\"0:3505\"]},{\"tk\":[2299,5,2299,26],\"els\":[\"0:3505\"]},{\"tk\":[2299,27,2299,37],\"els\":[\"0:3505\"]},{\"tk\":[2299,38,2299,39],\"els\":[\"0:3505\"]},{\"tk\":[2299,40,2299,41],\"els\":[\"0:3505\"]},{\"tk\":[2300,7,2300,8],\"els\":[\"0:3505\"]},{\"tk\":[2300,8,2300,18],\"els\":[\"0:3505\"]},{\"tk\":[2300,19,2300,20],\"els\":[\"0:3505\"]},{\"tk\":[2300,21,2300,29],\"els\":[\"0:3505\"]},{\"tk\":[2300,29,2300,30],\"els\":[\"0:3505\"]},{\"tk\":[2301,7,2301,8],\"els\":[\"0:3505\"]},{\"tk\":[2301,8,2301,16],\"els\":[\"0:3505\"]},{\"tk\":[2301,17,2301,18],\"els\":[\"0:3505\"]},{\"tk\":[2301,19,2301,29],\"els\":[\"0:3505\"]},{\"tk\":[2301,29,2301,30],\"els\":[\"0:3505\"]},{\"tk\":[2302,7,2302,8],\"els\":[\"0:3505\"]},{\"tk\":[2302,8,2302,19],\"els\":[\"0:3505\"]},{\"tk\":[2302,20,2302,21],\"els\":[\"0:3505\"]},{\"tk\":[2302,22,2302,38],\"els\":[\"0:3505\"]},{\"tk\":[2302,38,2302,39],\"els\":[\"0:3505\"]},{\"tk\":[2303,7,2303,8],\"els\":[\"0:3505\"]},{\"tk\":[2303,8,2303,23],\"els\":[\"0:3505\"]},{\"tk\":[2303,24,2303,25],\"els\":[\"0:3505\"]},{\"tk\":[2303,26,2303,31],\"els\":[\"0:3505\"]},{\"tk\":[2303,31,2303,32],\"els\":[\"0:3505\"]},{\"tk\":[2304,7,2304,8],\"els\":[\"0:3505\"]},{\"tk\":[2304,8,2304,16],\"els\":[\"0:3505\"]},{\"tk\":[2304,17,2304,18],\"els\":[\"0:3505\"]},{\"tk\":[2304,19,2304,21],\"els\":[\"0:3505\"]},{\"tk\":[2304,21,2304,22],\"els\":[\"0:3505\"]},{\"tk\":[2305,7,2305,8],\"els\":[\"0:3505\"]},{\"tk\":[2305,8,2305,16],\"els\":[\"0:3505\"]},{\"tk\":[2305,17,2305,18],\"els\":[\"0:3505\"]},{\"tk\":[2305,19,2305,45],\"els\":[\"0:3505\"]},{\"tk\":[2305,45,2305,46],\"els\":[\"0:3505\"]},{\"tk\":[2306,7,2306,8],\"els\":[\"0:3505\"]},{\"tk\":[2306,8,2306,19],\"els\":[\"0:3505\"]},{\"tk\":[2306,20,2306,21],\"els\":[\"0:3505\"]},{\"tk\":[2306,22,2306,43],\"els\":[\"0:3505\"]},{\"tk\":[2306,43,2306,44],\"els\":[\"0:3505\"]},{\"tk\":[2307,7,2307,8],\"els\":[\"0:3505\"]},{\"tk\":[2307,8,2307,16],\"els\":[\"0:3505\"]},{\"tk\":[2307,17,2307,18],\"els\":[\"0:3505\"]},{\"tk\":[2307,19,2307,24],\"els\":[\"0:3505\"]},{\"tk\":[2307,24,2307,25],\"els\":[\"0:3505\"]},{\"tk\":[2308,7,2308,8],\"els\":[\"0:3505\"]},{\"tk\":[2308,8,2308,20],\"els\":[\"0:3505\"]},{\"tk\":[2308,21,2308,22],\"els\":[\"0:3505\"]},{\"tk\":[2308,23,2308,45],\"els\":[\"0:3505\"]},{\"tk\":[2308,45,2308,46],\"els\":[\"0:3505\"]},{\"tk\":[2309,7,2309,8],\"els\":[\"0:3505\"]},{\"tk\":[2309,8,2309,16],\"els\":[\"0:3505\"]},{\"tk\":[2309,17,2309,18],\"els\":[\"0:3505\"]},{\"tk\":[2309,19,2309,20],\"els\":[\"0:3505\"]},{\"tk\":[2309,20,2309,34],\"els\":[\"0:3505\"]},{\"tk\":[2309,34,2309,35],\"els\":[\"0:3505\"]},{\"tk\":[2309,35,2309,66],\"els\":[\"0:3505\"]},{\"tk\":[2309,66,2309,67],\"els\":[\"0:3505\"]},{\"tk\":[2310,5,2310,6],\"els\":[\"0:3505\"]},{\"tk\":[2310,6,2310,7],\"els\":[\"0:3505\"]},{\"tk\":[2313,5,2313,13],\"els\":[\"0:3505\"]},{\"tk\":[2313,14,2313,23],\"els\":[\"0:3505\"]},{\"tk\":[2313,23,2313,24],\"els\":[\"0:3505\"]},{\"tk\":[2314,5,2314,22],\"els\":[\"0:3505\"]},{\"tk\":[2314,22,2314,23],\"els\":[\"0:3505\"]},{\"tk\":[2314,23,2314,33],\"els\":[\"0:3505\"]},{\"tk\":[2314,33,2314,34],\"els\":[\"0:3505\"]},{\"tk\":[2314,35,2314,36],\"els\":[\"0:3505\"]},{\"tk\":[2314,36,2314,45],\"els\":[\"0:3505\"]},{\"tk\":[2314,45,2314,46],\"els\":[\"0:3505\"]},{\"tk\":[2314,46,2314,47],\"els\":[\"0:3505\"]},{\"tk\":[2315,5,2315,15],\"els\":[\"0:3505\"]},{\"tk\":[2315,15,2315,16],\"els\":[\"0:3505\"]},{\"tk\":[2315,16,2315,27],\"els\":[\"0:3505\"]},{\"tk\":[2315,28,2315,29],\"els\":[\"0:3505\"]},{\"tk\":[2315,30,2315,39],\"els\":[\"0:3505\"]},{\"tk\":[2315,39,2315,40],\"els\":[\"0:3505\"]},{\"tk\":[2318,5,2318,25],\"els\":[\"0:3505\"]},{\"tk\":[2318,25,2318,26],\"els\":[\"0:3505\"]},{\"tk\":[2318,26,2318,27],\"els\":[\"0:3505\"]},{\"tk\":[2318,27,2318,28],\"els\":[\"0:3505\"]},{\"tk\":[2318,29,2318,30],\"els\":[\"0:3505\"]},{\"tk\":[2318,30,2318,47],\"els\":[\"0:3505\"]},{\"tk\":[2318,47,2318,48],\"els\":[\"0:3505\"]},{\"tk\":[2318,49,2318,50],\"els\":[\"0:3505\"]},{\"tk\":[2318,50,2318,60],\"els\":[\"0:3505\"]},{\"tk\":[2318,60,2318,61],\"els\":[\"0:3505\"]},{\"tk\":[2318,61,2318,62],\"els\":[\"0:3505\"]},{\"tk\":[2319,3,2319,4],\"els\":[\"0:3505\"]},{\"tk\":[2322,3,2322,12],\"els\":[\"0:4233\"]},{\"tk\":[2322,13,2322,14],\"els\":[\"0:4233\"]},{\"tk\":[2322,15,2322,20],\"els\":[\"0:4233\"]},{\"tk\":[2322,20,2322,21],\"els\":[\"0:4233\"]},{\"tk\":[2325,3,2325,11],\"els\":[\"0:4234\"]},{\"tk\":[2325,12,2325,13],\"els\":[\"0:4234\"]},{\"tk\":[2325,14,2325,19],\"els\":[\"0:4234\"]},{\"tk\":[2325,19,2325,20],\"els\":[\"0:4234\"]},{\"tk\":[2328,3,2328,12],\"els\":[\"0:4235\"]},{\"tk\":[2328,13,2328,14],\"els\":[\"0:4235\"]},{\"tk\":[2328,15,2328,19],\"els\":[\"0:4235\"]},{\"tk\":[2328,19,2328,20],\"els\":[\"0:4235\"]},{\"tk\":[2331,3,2331,11],\"els\":[\"0:4236\"]},{\"tk\":[2331,12,2331,13],\"els\":[\"0:4236\"]},{\"tk\":[2331,14,2331,19],\"els\":[\"0:4236\"]},{\"tk\":[2331,19,2331,20],\"els\":[\"0:4236\"]},{\"tk\":[2334,3,2334,8],\"els\":[\"0:4237\"]},{\"tk\":[2334,9,2334,10],\"els\":[\"0:4237\"]},{\"tk\":[2334,11,2334,15],\"els\":[\"0:4237\"]},{\"tk\":[2334,15,2334,16],\"els\":[\"0:4237\"]},{\"tk\":[2337,3,2337,11],\"els\":[\"0:265\"]},{\"tk\":[2337,12,2337,13],\"els\":[\"0:265\"]},{\"tk\":[2337,14,2337,21],\"els\":[\"0:265\"]},{\"tk\":[2337,21,2337,22],\"els\":[\"0:265\"]},{\"tk\":[2340,3,2340,11],\"els\":[\"0:266\"]},{\"tk\":[2340,12,2340,13],\"els\":[\"0:266\"]},{\"tk\":[2340,14,2340,21],\"els\":[\"0:266\"]},{\"tk\":[2340,21,2340,22],\"els\":[\"0:266\"]},{\"tk\":[2343,3,2343,8],\"els\":[\"0:4232\"]},{\"tk\":[2343,9,2343,10],\"els\":[\"0:4232\"]},{\"tk\":[2343,11,2343,15],\"els\":[\"0:4232\"]},{\"tk\":[2343,15,2343,16],\"els\":[\"0:4232\"]},{\"tk\":[2346,3,2346,8],\"els\":[\"0:3814\"]},{\"tk\":[2346,9,2346,10],\"els\":[\"0:3814\"]},{\"tk\":[2346,11,2346,15],\"els\":[\"0:3814\"]},{\"tk\":[2346,15,2346,16],\"els\":[\"0:3814\"]},{\"tk\":[2349,3,2349,12],\"els\":[\"0:3815\"]},{\"tk\":[2349,13,2349,14],\"els\":[\"0:3815\"]},{\"tk\":[2349,15,2349,20],\"els\":[\"0:3815\"]},{\"tk\":[2349,20,2349,21],\"els\":[\"0:3815\"]},{\"tk\":[2352,3,2352,11],\"els\":[\"0:3813\"]},{\"tk\":[2352,12,2352,13],\"els\":[\"0:3813\"]},{\"tk\":[2352,14,2352,19],\"els\":[\"0:3813\"]},{\"tk\":[2352,19,2352,20],\"els\":[\"0:3813\"]},{\"tk\":[2360,3,2360,4],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2362,5,2362,21],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2362,21,2362,22],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2362,22,2362,25],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2362,25,2362,26],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2362,27,2362,42],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2362,42,2362,43],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2362,44,2362,48],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2362,48,2362,49],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2362,49,2362,50],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2365,5,2365,10],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2365,11,2365,32],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2365,33,2365,46],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2365,47,2365,48],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2365,49,2365,50],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2366,7,2366,8],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2366,8,2366,12],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2366,13,2366,14],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2366,15,2366,20],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2366,20,2366,21],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2367,7,2367,8],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2367,8,2367,18],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2367,19,2367,20],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2367,21,2367,22],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2367,22,2367,23],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2368,7,2368,8],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2368,8,2368,18],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2368,19,2368,20],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2368,21,2368,51],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2368,51,2368,52],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2369,7,2369,8],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2369,8,2369,21],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2369,22,2369,23],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2369,24,2369,29],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2369,29,2369,30],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2370,7,2370,8],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2370,8,2370,19],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2370,20,2370,21],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2370,22,2370,45],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2370,45,2370,46],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2371,7,2371,8],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2371,8,2371,11],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2371,12,2371,13],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2371,14,2371,30],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2371,30,2371,31],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2372,7,2372,8],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2372,8,2372,15],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2372,16,2372,17],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2372,18,2372,23],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2372,23,2372,24],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2373,7,2373,8],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2373,8,2373,17],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2373,18,2373,19],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2373,20,2373,41],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2373,41,2373,42],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2374,7,2374,8],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2374,8,2374,20],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2374,21,2374,22],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2374,23,2374,27],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2374,27,2374,28],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2375,7,2375,8],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2375,8,2375,16],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2375,17,2375,18],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2375,19,2375,22],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2375,22,2375,23],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2376,7,2376,8],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2376,8,2376,17],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2376,18,2376,19],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2376,20,2376,40],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2376,40,2376,41],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2377,5,2377,6],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2377,6,2377,7],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2380,5,2380,18],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2380,18,2380,19],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2380,19,2380,20],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2380,20,2380,21],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2380,22,2380,23],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2380,23,2380,36],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2380,36,2380,37],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2380,37,2380,38],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2381,3,2381,4],\"els\":[\"0:1068\",\"0:1051\",\"0:1050\"]},{\"tk\":[2384,3,2384,4],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2386,5,2386,21],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2386,21,2386,22],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2386,22,2386,25],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2386,25,2386,26],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2386,27,2386,42],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2386,42,2386,43],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2386,44,2386,48],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2386,48,2386,49],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2386,49,2386,50],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2389,5,2389,10],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2389,11,2389,32],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2389,33,2389,47],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2389,48,2389,49],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2389,50,2389,51],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2390,7,2390,8],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2390,8,2390,12],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2390,13,2390,14],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2390,15,2390,20],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2390,20,2390,21],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2391,7,2391,8],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2391,8,2391,18],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2391,19,2391,20],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2391,21,2391,23],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2391,23,2391,24],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2392,7,2392,8],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2392,8,2392,18],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2392,19,2392,20],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2392,21,2392,51],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2392,51,2392,52],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2393,7,2393,8],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2393,8,2393,21],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2393,22,2393,23],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2393,24,2393,29],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2393,29,2393,30],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2394,7,2394,8],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2394,8,2394,19],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2394,20,2394,21],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2394,22,2394,45],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2394,45,2394,46],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2395,7,2395,8],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2395,8,2395,11],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2395,12,2395,13],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2395,14,2395,30],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2395,30,2395,31],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2396,7,2396,8],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2396,8,2396,15],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2396,16,2396,17],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2396,18,2396,23],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2396,23,2396,24],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2397,7,2397,8],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2397,8,2397,17],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2397,18,2397,19],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2397,20,2397,41],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2397,41,2397,42],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2398,7,2398,8],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2398,8,2398,20],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2398,21,2398,22],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2398,23,2398,27],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2398,27,2398,28],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2399,7,2399,8],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2399,8,2399,16],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2399,17,2399,18],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2399,19,2399,22],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2399,22,2399,23],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2400,7,2400,8],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2400,8,2400,17],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2400,18,2400,19],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2400,20,2400,40],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2400,40,2400,41],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2401,5,2401,6],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2401,6,2401,7],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2404,5,2404,18],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2404,18,2404,19],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2404,19,2404,20],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2404,20,2404,21],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2404,22,2404,23],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2404,23,2404,37],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2404,37,2404,38],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2404,38,2404,39],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2405,3,2405,4],\"els\":[\"0:1069\",\"0:1051\",\"0:1050\"]},{\"tk\":[2408,3,2408,4],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2410,5,2410,21],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2410,21,2410,22],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2410,22,2410,25],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2410,25,2410,26],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2410,27,2410,42],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2410,42,2410,43],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2410,44,2410,48],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2410,48,2410,49],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2410,49,2410,50],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2413,5,2413,10],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2413,11,2413,32],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2413,33,2413,47],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2413,48,2413,49],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2413,50,2413,51],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2414,7,2414,8],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2414,8,2414,12],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2414,13,2414,14],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2414,15,2414,20],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2414,20,2414,21],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2415,7,2415,8],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2415,8,2415,18],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2415,19,2415,20],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2415,21,2415,23],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2415,23,2415,24],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2416,7,2416,8],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2416,8,2416,18],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2416,19,2416,20],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2416,21,2416,51],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2416,51,2416,52],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2417,7,2417,8],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2417,8,2417,21],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2417,22,2417,23],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2417,24,2417,29],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2417,29,2417,30],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2418,7,2418,8],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2418,8,2418,19],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2418,20,2418,21],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2418,22,2418,45],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2418,45,2418,46],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2419,7,2419,8],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2419,8,2419,11],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2419,12,2419,13],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2419,14,2419,30],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2419,30,2419,31],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2420,7,2420,8],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2420,8,2420,15],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2420,16,2420,17],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2420,18,2420,23],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2420,23,2420,24],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2421,7,2421,8],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2421,8,2421,17],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2421,18,2421,19],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2421,20,2421,41],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2421,41,2421,42],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2422,7,2422,8],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2422,8,2422,20],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2422,21,2422,22],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2422,23,2422,27],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2422,27,2422,28],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2423,7,2423,8],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2423,8,2423,16],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2423,17,2423,18],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2423,19,2423,22],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2423,22,2423,23],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2424,7,2424,8],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2424,8,2424,17],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2424,18,2424,19],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2424,20,2424,40],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2424,40,2424,41],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2425,5,2425,6],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2425,6,2425,7],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2428,5,2428,18],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2428,18,2428,19],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2428,19,2428,20],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2428,20,2428,21],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2428,22,2428,23],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2428,23,2428,37],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2428,37,2428,38],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2428,38,2428,39],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2429,3,2429,4],\"els\":[\"0:1070\",\"0:1051\",\"0:1050\"]},{\"tk\":[2432,3,2432,32],\"els\":[\"0:1050\"]},{\"tk\":[2432,33,2432,34],\"els\":[\"0:1050\"]},{\"tk\":[2432,34,2432,37],\"els\":[\"0:1050\"]},{\"tk\":[2432,37,2432,38],\"els\":[\"0:1050\"]},{\"tk\":[2432,39,2432,47],\"els\":[\"0:1050\"]},{\"tk\":[2432,47,2432,48],\"els\":[\"0:1050\"]},{\"tk\":[2432,49,2432,53],\"els\":[\"0:1050\"]},{\"tk\":[2432,53,2432,54],\"els\":[\"0:1050\"]},{\"tk\":[2432,55,2432,67],\"els\":[\"0:1050\"]},{\"tk\":[2432,67,2432,68],\"els\":[\"0:1050\"]},{\"tk\":[2432,69,2432,70],\"els\":[\"0:1050\"]},{\"tk\":[2432,70,2432,71],\"els\":[\"0:1050\"]},{\"tk\":[2432,72,2432,73],\"els\":[\"0:1050\"]},{\"tk\":[2432,73,2432,74],\"els\":[\"0:1050\"]},{\"tk\":[2432,74,2432,75],\"els\":[\"0:1050\"]},{\"tk\":[2435,3,2435,19],\"els\":[\"0:1050\"]},{\"tk\":[2435,20,2435,21],\"els\":[\"0:1050\"]},{\"tk\":[2435,21,2435,24],\"els\":[\"0:1050\"]},{\"tk\":[2435,24,2435,25],\"els\":[\"0:1050\"]},{\"tk\":[2435,26,2435,34],\"els\":[\"0:1050\"]},{\"tk\":[2435,34,2435,35],\"els\":[\"0:1050\"]},{\"tk\":[2435,36,2435,40],\"els\":[\"0:1050\"]},{\"tk\":[2435,40,2435,41],\"els\":[\"0:1050\"]},{\"tk\":[2435,41,2435,42],\"els\":[\"0:1050\"]},{\"tk\":[2438,3,2438,9],\"els\":[\"0:1050\"]},{\"tk\":[2438,10,2438,21],\"els\":[\"0:1050\"]},{\"tk\":[2438,22,2438,37],\"els\":[\"0:1050\"]},{\"tk\":[2438,37,2438,38],\"els\":[\"0:1050\"]},{\"tk\":[2439,3,2439,15],\"els\":[\"0:1050\"]},{\"tk\":[2439,15,2439,16],\"els\":[\"0:1050\"]},{\"tk\":[2439,16,2439,17],\"els\":[\"0:1050\"]},{\"tk\":[2439,17,2439,18],\"els\":[\"0:1050\"]},{\"tk\":[2439,19,2439,20],\"els\":[\"0:1050\"]},{\"tk\":[2439,20,2439,44],\"els\":[\"0:1050\"]},{\"tk\":[2439,44,2439,45],\"els\":[\"0:1050\"]},{\"tk\":[2439,46,2439,47],\"els\":[\"0:1050\"]},{\"tk\":[2439,47,2439,62],\"els\":[\"0:1050\"]},{\"tk\":[2439,62,2439,63],\"els\":[\"0:1050\"]},{\"tk\":[2439,63,2439,64],\"els\":[\"0:1050\"]},{\"tk\":[2442,3,2442,27],\"els\":[\"0:1050\"]},{\"tk\":[2442,27,2442,28],\"els\":[\"0:1050\"]},{\"tk\":[2442,28,2442,29],\"els\":[\"0:1050\"]},{\"tk\":[2442,29,2442,30],\"els\":[\"0:1050\"]},{\"tk\":[2442,31,2442,32],\"els\":[\"0:1050\"]},{\"tk\":[2442,32,2442,64],\"els\":[\"0:1050\"]},{\"tk\":[2442,64,2442,65],\"els\":[\"0:1050\"]},{\"tk\":[2442,65,2442,66],\"els\":[\"0:1050\"]},{\"tk\":[2445,3,2445,19],\"els\":[\"0:1050\"]},{\"tk\":[2445,20,2445,21],\"els\":[\"0:1050\"]},{\"tk\":[2445,21,2445,24],\"els\":[\"0:1050\"]},{\"tk\":[2445,24,2445,25],\"els\":[\"0:1050\"]},{\"tk\":[2445,26,2445,41],\"els\":[\"0:1050\"]},{\"tk\":[2445,41,2445,42],\"els\":[\"0:1050\"]},{\"tk\":[2445,43,2445,47],\"els\":[\"0:1050\"]},{\"tk\":[2445,47,2445,48],\"els\":[\"0:1050\"]},{\"tk\":[2445,48,2445,49],\"els\":[\"0:1050\"]},{\"tk\":[2448,3,2448,21],\"els\":[\"0:1050\"]},{\"tk\":[2448,21,2448,22],\"els\":[\"0:1050\"]},{\"tk\":[2448,22,2448,27],\"els\":[\"0:1050\"]},{\"tk\":[2448,27,2448,28],\"els\":[\"0:1050\"]},{\"tk\":[2448,29,2448,30],\"els\":[\"0:1050\"]},{\"tk\":[2448,30,2448,31],\"els\":[\"0:1050\"]},{\"tk\":[2448,32,2448,45],\"els\":[\"0:1050\"]},{\"tk\":[2448,45,2448,46],\"els\":[\"0:1050\"]},{\"tk\":[2448,46,2448,47],\"els\":[\"0:1050\"]},{\"tk\":[2451,3,2451,19],\"els\":[\"0:1050\"]},{\"tk\":[2451,20,2451,21],\"els\":[\"0:1050\"]},{\"tk\":[2451,21,2451,24],\"els\":[\"0:1050\"]},{\"tk\":[2451,24,2451,25],\"els\":[\"0:1050\"]},{\"tk\":[2451,26,2451,41],\"els\":[\"0:1050\"]},{\"tk\":[2451,41,2451,42],\"els\":[\"0:1050\"]},{\"tk\":[2451,43,2451,47],\"els\":[\"0:1050\"]},{\"tk\":[2451,47,2451,48],\"els\":[\"0:1050\"]},{\"tk\":[2451,48,2451,49],\"els\":[\"0:1050\"]},{\"tk\":[2454,3,2454,21],\"els\":[\"0:1050\"]},{\"tk\":[2454,21,2454,22],\"els\":[\"0:1050\"]},{\"tk\":[2454,22,2454,27],\"els\":[\"0:1050\"]},{\"tk\":[2454,27,2454,28],\"els\":[\"0:1050\"]},{\"tk\":[2454,29,2454,31],\"els\":[\"0:1050\"]},{\"tk\":[2454,31,2454,32],\"els\":[\"0:1050\"]},{\"tk\":[2454,33,2454,46],\"els\":[\"0:1050\"]},{\"tk\":[2454,46,2454,47],\"els\":[\"0:1050\"]},{\"tk\":[2454,47,2454,48],\"els\":[\"0:1050\"]},{\"tk\":[2457,3,2457,19],\"els\":[\"0:1050\"]},{\"tk\":[2457,20,2457,21],\"els\":[\"0:1050\"]},{\"tk\":[2457,21,2457,24],\"els\":[\"0:1050\"]},{\"tk\":[2457,24,2457,25],\"els\":[\"0:1050\"]},{\"tk\":[2457,26,2457,41],\"els\":[\"0:1050\"]},{\"tk\":[2457,41,2457,42],\"els\":[\"0:1050\"]},{\"tk\":[2457,43,2457,47],\"els\":[\"0:1050\"]},{\"tk\":[2457,47,2457,48],\"els\":[\"0:1050\"]},{\"tk\":[2457,48,2457,49],\"els\":[\"0:1050\"]},{\"tk\":[2460,3,2460,21],\"els\":[\"0:1050\"]},{\"tk\":[2460,21,2460,22],\"els\":[\"0:1050\"]},{\"tk\":[2460,22,2460,27],\"els\":[\"0:1050\"]},{\"tk\":[2460,27,2460,28],\"els\":[\"0:1050\"]},{\"tk\":[2460,29,2460,31],\"els\":[\"0:1050\"]},{\"tk\":[2460,31,2460,32],\"els\":[\"0:1050\"]},{\"tk\":[2460,33,2460,46],\"els\":[\"0:1050\"]},{\"tk\":[2460,46,2460,47],\"els\":[\"0:1050\"]},{\"tk\":[2460,47,2460,48],\"els\":[\"0:1050\"]},{\"tk\":[2463,3,2463,20],\"els\":[\"0:1050\"]},{\"tk\":[2463,20,2463,21],\"els\":[\"0:1050\"]},{\"tk\":[2463,21,2463,25],\"els\":[\"0:1050\"]},{\"tk\":[2463,25,2463,26],\"els\":[\"0:1050\"]},{\"tk\":[2463,27,2463,28],\"els\":[\"0:1050\"]},{\"tk\":[2463,28,2463,29],\"els\":[\"0:1050\"]},{\"tk\":[2463,30,2463,49],\"els\":[\"0:1050\"]},{\"tk\":[2463,50,2463,51],\"els\":[\"0:1050\"]},{\"tk\":[2463,52,2463,66],\"els\":[\"0:1050\"]},{\"tk\":[2463,66,2463,67],\"els\":[\"0:1050\"]},{\"tk\":[2463,67,2463,71],\"els\":[\"0:1050\"]},{\"tk\":[2463,71,2463,72],\"els\":[\"0:1050\"]},{\"tk\":[2463,72,2463,73],\"els\":[\"0:1050\"]},{\"tk\":[2463,73,2463,74],\"els\":[\"0:1050\"]},{\"tk\":[2466,3,2466,23],\"els\":[\"0:1050\"]},{\"tk\":[2466,23,2466,24],\"els\":[\"0:1050\"]},{\"tk\":[2466,24,2466,28],\"els\":[\"0:1050\"]},{\"tk\":[2466,28,2466,29],\"els\":[\"0:1050\"]},{\"tk\":[2466,30,2466,31],\"els\":[\"0:1050\"]},{\"tk\":[2466,31,2466,32],\"els\":[\"0:1050\"]},{\"tk\":[2466,32,2466,33],\"els\":[\"0:1050\"]},{\"tk\":[2469,3,2469,6],\"els\":[\"0:1050\"]},{\"tk\":[2469,6,2469,8],\"els\":[\"0:1050\"]},{\"tk\":[2469,8,2469,15],\"els\":[\"0:1050\"]},{\"tk\":[2469,16,2469,18],\"els\":[\"0:1050\"]},{\"tk\":[2469,19,2469,41],\"els\":[\"0:1050\"]},{\"tk\":[2469,41,2469,42],\"els\":[\"0:1050\"]},{\"tk\":[2469,42,2469,43],\"els\":[\"0:1050\"]},{\"tk\":[2469,43,2469,44],\"els\":[\"0:1050\"]},{\"tk\":[2469,44,2469,45],\"els\":[\"0:1050\"]},{\"tk\":[2472,3,2472,22],\"els\":[\"0:1050\"]},{\"tk\":[2472,22,2472,23],\"els\":[\"0:1050\"]},{\"tk\":[2472,23,2472,40],\"els\":[\"0:1050\"]},{\"tk\":[2472,40,2472,41],\"els\":[\"0:1050\"]},{\"tk\":[2472,42,2472,45],\"els\":[\"0:1050\"]},{\"tk\":[2472,45,2472,46],\"els\":[\"0:1050\"]},{\"tk\":[2472,46,2472,47],\"els\":[\"0:1050\"]},{\"tk\":[2475,3,2475,20],\"els\":[\"0:1050\"]},{\"tk\":[2475,20,2475,21],\"els\":[\"0:1050\"]},{\"tk\":[2475,21,2475,38],\"els\":[\"0:1050\"]},{\"tk\":[2475,38,2475,39],\"els\":[\"0:1050\"]},{\"tk\":[2475,39,2475,40],\"els\":[\"0:1050\"]},{\"tk\":[2478,3,2478,25],\"els\":[\"0:1050\"]},{\"tk\":[2478,25,2478,26],\"els\":[\"0:1050\"]},{\"tk\":[2478,26,2478,43],\"els\":[\"0:1050\"]},{\"tk\":[2478,43,2478,44],\"els\":[\"0:1050\"]},{\"tk\":[2478,45,2478,66],\"els\":[\"0:1050\"]},{\"tk\":[2478,66,2478,67],\"els\":[\"0:1050\"]},{\"tk\":[2478,68,2478,69],\"els\":[\"0:1050\"]},{\"tk\":[2478,69,2478,74],\"els\":[\"0:1050\"]},{\"tk\":[2478,75,2478,76],\"els\":[\"0:1050\"]},{\"tk\":[2478,76,2478,77],\"els\":[\"0:1050\"]},{\"tk\":[2478,77,2478,78],\"els\":[\"0:1050\"]},{\"tk\":[2478,78,2478,79],\"els\":[\"0:1050\"]},{\"tk\":[2478,79,2478,80],\"els\":[\"0:1050\"]},{\"tk\":[2481,3,2481,30],\"els\":[\"0:1050\"]},{\"tk\":[2481,30,2481,31],\"els\":[\"0:1050\"]},{\"tk\":[2481,31,2481,32],\"els\":[\"0:1050\"]},{\"tk\":[2481,32,2481,33],\"els\":[\"0:1050\"]},{\"tk\":[2481,34,2481,35],\"els\":[\"0:1050\"]},{\"tk\":[2481,35,2481,36],\"els\":[\"0:1050\"]},{\"tk\":[2481,37,2481,61],\"els\":[\"0:1050\"]},{\"tk\":[2481,61,2481,62],\"els\":[\"0:1050\"]},{\"tk\":[2481,62,2481,63],\"els\":[\"0:1050\"]},{\"tk\":[2487,3,2487,9],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2487,10,2487,18],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2487,19,2487,20],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2487,21,2487,26],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2487,27,2487,36],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2487,36,2487,37],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2487,37,2487,55],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2487,55,2487,56],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2487,57,2487,58],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2487,59,2487,72],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2487,72,2487,73],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2490,3,2490,36],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2490,36,2490,37],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2490,37,2490,38],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2490,38,2490,39],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2490,40,2490,45],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2490,45,2490,46],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2490,46,2490,47],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2493,3,2493,24],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2493,24,2493,25],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2493,25,2493,26],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2493,26,2493,27],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2493,27,2493,28],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2495,3,2495,4],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2496,5,2496,13],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2496,14,2496,16],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2496,17,2496,18],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2496,19,2496,20],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2496,20,2496,21],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2497,5,2497,13],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2497,14,2497,15],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2497,16,2497,20],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2497,21,2497,22],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2497,23,2497,32],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2497,32,2497,33],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2497,33,2497,34],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2497,34,2497,35],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2497,35,2497,36],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2498,5,2498,7],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2498,8,2498,9],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2498,10,2498,14],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2498,14,2498,16],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2498,16,2498,18],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2498,18,2498,19],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2499,5,2499,7],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2499,8,2499,10],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2499,11,2499,12],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2499,12,2499,13],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2499,13,2499,14],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2499,14,2499,22],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2499,22,2499,23],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2499,24,2499,42],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2499,43,2499,44],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2500,13,2500,14],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2500,14,2500,22],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2500,22,2500,23],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2500,23,2500,40],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2500,40,2500,41],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2500,41,2500,42],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2503,5,2503,7],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2503,8,2503,10],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2503,11,2503,28],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2503,28,2503,29],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2504,5,2504,9],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2504,9,2504,11],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2504,11,2504,13],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2504,14,2504,15],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2504,16,2504,18],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2504,18,2504,19],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,5,2507,27],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,27,2507,28],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,28,2507,37],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,37,2507,38],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,39,2507,47],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,47,2507,48],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,49,2507,50],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,50,2507,55],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,56,2507,57],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,57,2507,58],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,58,2507,59],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,59,2507,60],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2507,60,2507,61],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2508,5,2508,24],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2508,24,2508,25],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2508,25,2508,34],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2508,34,2508,35],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2508,36,2508,37],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2508,37,2508,38],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2508,38,2508,39],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2509,5,2509,22],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2509,22,2509,23],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2509,23,2509,32],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2509,32,2509,33],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2509,33,2509,34],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2510,3,2510,4],\"els\":[\"0:3568\",\"0:3522\"]},{\"tk\":[2518,3,2518,4],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2519,5,2519,22],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2519,23,2519,36],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2519,37,2519,38],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2519,39,2519,40],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2520,7,2520,8],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2520,8,2520,23],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2520,24,2520,25],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2520,26,2520,31],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2520,31,2520,32],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2521,7,2521,8],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2521,8,2521,15],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2521,16,2521,17],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2521,18,2521,36],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2522,5,2522,6],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2522,6,2522,7],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2525,5,2525,23],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2525,23,2525,24],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2525,24,2525,25],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2525,25,2525,26],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2525,27,2525,28],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2525,28,2525,29],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2525,30,2525,31],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2525,31,2525,44],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2525,44,2525,45],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2525,45,2525,46],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2526,3,2526,4],\"els\":[\"0:3526\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2529,3,2529,4],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2530,5,2530,22],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2530,23,2530,36],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2530,37,2530,38],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2530,39,2530,40],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2531,7,2531,8],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2531,8,2531,23],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2531,24,2531,25],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2531,26,2531,31],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2531,31,2531,32],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2532,7,2532,8],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2532,8,2532,15],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2532,16,2532,17],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2532,18,2532,36],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2533,5,2533,6],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2533,6,2533,7],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2536,5,2536,23],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2536,23,2536,24],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2536,24,2536,25],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2536,25,2536,26],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2536,27,2536,28],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2536,28,2536,29],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2536,30,2536,31],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2536,31,2536,44],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2536,44,2536,45],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2536,45,2536,46],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2537,3,2537,4],\"els\":[\"0:3528\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2540,3,2540,4],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2541,5,2541,22],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2541,23,2541,36],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2541,37,2541,38],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2541,39,2541,40],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2542,7,2542,8],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2542,8,2542,23],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2542,24,2542,25],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2542,26,2542,31],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2542,31,2542,32],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2543,7,2543,8],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2543,8,2543,15],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2543,16,2543,17],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2543,18,2543,36],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2544,5,2544,6],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2544,6,2544,7],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2547,5,2547,23],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2547,23,2547,24],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2547,24,2547,25],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2547,25,2547,26],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2547,27,2547,28],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2547,28,2547,29],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2547,30,2547,31],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2547,31,2547,44],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2547,44,2547,45],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2547,45,2547,46],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2548,3,2548,4],\"els\":[\"0:3527\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2553,3,2553,30],\"els\":[\"0:2552\",\"0:3556\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2553,30,2553,31],\"els\":[\"0:2552\",\"0:3556\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2553,31,2553,32],\"els\":[\"0:2552\",\"0:3556\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2553,32,2553,33],\"els\":[\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2556,3,2556,22],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2556,22,2556,23],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2556,23,2556,24],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2556,24,2556,25],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2556,26,2556,28],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2556,28,2556,29],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2556,30,2556,52],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2556,52,2556,53],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2556,53,2556,54],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2559,3,2559,22],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2559,22,2559,23],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2559,23,2559,32],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2559,32,2559,33],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2559,34,2559,35],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2559,35,2559,36],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2559,36,2559,37],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2562,3,2562,20],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2562,20,2562,21],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2562,21,2562,30],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2562,30,2562,31],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2562,31,2562,32],\"els\":[\"0:3560\",\"0:3522\"]},{\"tk\":[2568,3,2568,4],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2570,5,2570,21],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2570,21,2570,22],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2570,22,2570,25],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2570,25,2570,26],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2570,27,2570,42],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2570,42,2570,43],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2570,44,2570,48],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2570,48,2570,49],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2570,49,2570,50],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2573,5,2573,10],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2573,11,2573,32],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2573,33,2573,47],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2573,48,2573,49],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2573,50,2573,51],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2574,7,2574,8],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2574,8,2574,12],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2574,13,2574,14],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2574,15,2574,20],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2574,20,2574,21],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2575,7,2575,8],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2575,8,2575,18],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2575,19,2575,20],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2575,21,2575,23],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2575,23,2575,24],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2576,7,2576,8],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2576,8,2576,18],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2576,19,2576,20],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2576,21,2576,51],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2576,51,2576,52],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2577,7,2577,8],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2577,8,2577,21],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2577,22,2577,23],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2577,24,2577,29],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2577,29,2577,30],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2578,7,2578,8],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2578,8,2578,19],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2578,20,2578,21],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2578,22,2578,45],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2578,45,2578,46],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2579,7,2579,8],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2579,8,2579,11],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2579,12,2579,13],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2579,14,2579,30],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2579,30,2579,31],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2580,7,2580,8],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2580,8,2580,15],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2580,16,2580,17],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2580,18,2580,23],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2580,23,2580,24],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2581,7,2581,8],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2581,8,2581,17],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2581,18,2581,19],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2581,20,2581,41],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2581,41,2581,42],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2582,7,2582,8],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2582,8,2582,20],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2582,21,2582,22],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2582,23,2582,27],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2582,27,2582,28],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2583,7,2583,8],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2583,8,2583,16],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2583,17,2583,18],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2583,19,2583,22],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2583,22,2583,23],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2584,7,2584,8],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2584,8,2584,17],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2584,18,2584,19],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2584,20,2584,41],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2584,41,2584,42],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2585,7,2585,8],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2585,8,2585,17],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2585,18,2585,19],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2585,20,2585,22],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2586,5,2586,6],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2586,6,2586,7],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2589,5,2589,18],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2589,18,2589,19],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2589,19,2589,20],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2589,20,2589,21],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2589,22,2589,23],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2589,23,2589,37],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2589,37,2589,38],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2589,38,2589,39],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2590,3,2590,4],\"els\":[\"0:3485\",\"0:3483\"]},{\"tk\":[2595,3,2595,4],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2597,5,2597,21],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2597,21,2597,22],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2597,22,2597,25],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2597,25,2597,26],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2597,27,2597,42],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2597,42,2597,43],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2597,44,2597,48],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2597,48,2597,49],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2597,49,2597,50],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2600,5,2600,10],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2600,11,2600,32],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2600,33,2600,47],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2600,48,2600,49],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2600,50,2600,51],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2601,7,2601,8],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2601,8,2601,12],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2601,13,2601,14],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2601,15,2601,20],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2601,20,2601,21],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2602,7,2602,8],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2602,8,2602,18],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2602,19,2602,20],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2602,21,2602,23],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2602,23,2602,24],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2603,7,2603,8],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2603,8,2603,18],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2603,19,2603,20],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2603,21,2603,51],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2603,51,2603,52],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2604,7,2604,8],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2604,8,2604,21],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2604,22,2604,23],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2604,24,2604,29],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2604,29,2604,30],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2605,7,2605,8],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2605,8,2605,19],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2605,20,2605,21],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2605,22,2605,45],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2605,45,2605,46],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2606,7,2606,8],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2606,8,2606,11],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2606,12,2606,13],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2606,14,2606,30],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2606,30,2606,31],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2607,7,2607,8],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2607,8,2607,15],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2607,16,2607,17],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2607,18,2607,23],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2607,23,2607,24],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2608,7,2608,8],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2608,8,2608,17],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2608,18,2608,19],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2608,20,2608,41],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2608,41,2608,42],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2609,7,2609,8],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2609,8,2609,20],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2609,21,2609,22],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2609,23,2609,27],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2609,27,2609,28],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2610,7,2610,8],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2610,8,2610,16],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2610,17,2610,18],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2610,19,2610,22],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2610,22,2610,23],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2611,7,2611,8],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2611,8,2611,17],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2611,18,2611,19],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2611,20,2611,41],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2611,41,2611,42],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2612,7,2612,8],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2612,8,2612,17],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2612,18,2612,19],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2612,20,2612,22],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2613,5,2613,6],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2613,6,2613,7],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2616,5,2616,18],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2616,18,2616,19],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2616,19,2616,20],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2616,20,2616,21],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2616,22,2616,23],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2616,23,2616,37],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2616,37,2616,38],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2616,38,2616,39],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2617,3,2617,4],\"els\":[\"0:3486\",\"0:3483\"]},{\"tk\":[2625,3,2625,4],\"els\":[\"0:3497\"]},{\"tk\":[2626,3,2626,4],\"els\":[\"0:3497\"]},{\"tk\":[2638,3,2638,30],\"els\":[\"0:2552\",\"0:3556\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2638,30,2638,31],\"els\":[\"0:2552\",\"0:3556\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2638,31,2638,32],\"els\":[\"0:2552\",\"0:3556\",\"0:3523\",\"0:3560\",\"0:3522\"]},{\"tk\":[2638,32,2638,33],\"els\":[\"0:3523\",\"0:3560\",\"0:3522\"]}]},\"2\":{\"records\":[{\"tk\":[19,5,19,23],\"els\":[\"0:1068\"]},{\"tk\":[19,23,19,24],\"els\":[\"0:1068\"]},{\"tk\":[19,24,19,46],\"els\":[\"0:1068\"]},{\"tk\":[19,47,19,48],\"els\":[\"0:1068\"]},{\"tk\":[19,49,19,50],\"els\":[\"0:1068\"]},{\"tk\":[19,50,19,67],\"els\":[\"0:1068\"]},{\"tk\":[19,67,19,68],\"els\":[\"0:1068\"]},{\"tk\":[19,68,19,71],\"els\":[\"0:1068\"]},{\"tk\":[19,71,19,72],\"els\":[\"0:1068\"]},{\"tk\":[19,73,19,75],\"els\":[\"0:1068\"]},{\"tk\":[19,76,19,77],\"els\":[\"0:1068\"]},{\"tk\":[19,77,19,78],\"els\":[\"0:1068\"]},{\"tk\":[19,79,19,80],\"els\":[\"0:1068\"]},{\"tk\":[20,7,20,11],\"els\":[\"0:1068\"]},{\"tk\":[20,11,20,12],\"els\":[\"0:1068\"]},{\"tk\":[28,5,28,11],\"els\":[\"0:1055:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1055:481::180\",\"0:1055:481\",\"0:1055\"]},{\"tk\":[28,12,28,13],\"els\":[\"0:1055:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1055:481::180\",\"0:1055:481\",\"0:1055\"]},{\"tk\":[28,14,28,15],\"els\":[\"0:1055:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1055:481::180\",\"0:1055:481\",\"0:1055\",\"0:1065\"]},{\"tk\":[28,15,28,23],\"els\":[\"0:1055:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1055:481::180\",\"0:1055:481\",\"0:1055\"]},{\"tk\":[28,23,28,24],\"els\":[\"0:1055:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1055:481::180\",\"0:1055:481\",\"0:1055\"]},{\"tk\":[28,24,28,42],\"els\":[\"0:1055:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1055:481::180\",\"0:1055:481\",\"0:1055\",\"0:1065\"]},{\"tk\":[28,42,28,43],\"els\":[\"0:1055:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1055:481::180\",\"0:1055:481\",\"0:1055\"]},{\"tk\":[28,43,28,65],\"els\":[\"0:1055:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1055:481::180\",\"0:1055:481\",\"0:1055\",\"0:1065\"]},{\"tk\":[28,66,28,68],\"els\":[\"0:1055:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1055:481::180\",\"0:1055:481\",\"0:1055\"]},{\"tk\":[28,69,28,70],\"els\":[\"0:1055:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1055:481::180\",\"0:1055:481\",\"0:1055\"]},{\"tk\":[28,70,28,71],\"els\":[\"0:1055:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1055:481::180\",\"0:1055:481\",\"0:1055\"]},{\"tk\":[35,5,35,23],\"els\":[\"0:1069\"]},{\"tk\":[35,23,35,24],\"els\":[\"0:1069\"]},{\"tk\":[35,24,35,46],\"els\":[\"0:1069\"]},{\"tk\":[35,47,35,48],\"els\":[\"0:1069\"]},{\"tk\":[35,49,35,50],\"els\":[\"0:1069\"]},{\"tk\":[35,50,35,67],\"els\":[\"0:1069\"]},{\"tk\":[35,67,35,68],\"els\":[\"0:1069\"]},{\"tk\":[35,68,35,71],\"els\":[\"0:1069\"]},{\"tk\":[35,71,35,72],\"els\":[\"0:1069\"]},{\"tk\":[35,73,35,75],\"els\":[\"0:1069\"]},{\"tk\":[35,76,35,78],\"els\":[\"0:1069\"]},{\"tk\":[35,78,35,79],\"els\":[\"0:1069\"]},{\"tk\":[35,80,35,81],\"els\":[\"0:1069\"]},{\"tk\":[36,7,36,11],\"els\":[\"0:1069\"]},{\"tk\":[36,11,36,12],\"els\":[\"0:1069\"]},{\"tk\":[44,5,44,11],\"els\":[\"0:1056:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1056:481::180\",\"0:1056:481\",\"0:1056\"]},{\"tk\":[44,12,44,13],\"els\":[\"0:1056:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1056:481::180\",\"0:1056:481\",\"0:1056\"]},{\"tk\":[44,14,44,15],\"els\":[\"0:1056:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1056:481::180\",\"0:1056:481\",\"0:1056\",\"0:1064\"]},{\"tk\":[44,15,44,23],\"els\":[\"0:1056:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1056:481::180\",\"0:1056:481\",\"0:1056\"]},{\"tk\":[44,23,44,24],\"els\":[\"0:1056:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1056:481::180\",\"0:1056:481\",\"0:1056\"]},{\"tk\":[44,24,44,42],\"els\":[\"0:1056:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1056:481::180\",\"0:1056:481\",\"0:1056\",\"0:1064\"]},{\"tk\":[44,42,44,43],\"els\":[\"0:1056:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1056:481::180\",\"0:1056:481\",\"0:1056\"]},{\"tk\":[44,43,44,65],\"els\":[\"0:1056:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1056:481::180\",\"0:1056:481\",\"0:1056\",\"0:1064\"]},{\"tk\":[44,66,44,68],\"els\":[\"0:1056:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1056:481::180\",\"0:1056:481\",\"0:1056\"]},{\"tk\":[44,69,44,70],\"els\":[\"0:1056:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1056:481::180\",\"0:1056:481\",\"0:1056\"]},{\"tk\":[44,70,44,71],\"els\":[\"0:1056:481::180#out:2\",\"1:481:71-99\",\"1:481:75-99\",\"0:1056:481::180\",\"0:1056:481\",\"0:1056\"]},{\"tk\":[51,5,51,23],\"els\":[\"0:1070\"]},{\"tk\":[51,23,51,24],\"els\":[\"0:1070\"]},{\"tk\":[51,24,51,46],\"els\":[\"0:1070\"]},{\"tk\":[51,47,51,48],\"els\":[\"0:1070\"]},{\"tk\":[51,49,51,50],\"els\":[\"0:1070\"]},{\"tk\":[51,50,51,67],\"els\":[\"0:1070\"]},{\"tk\":[51,67,51,68],\"els\":[\"0:1070\"]},{\"tk\":[51,68,51,71],\"els\":[\"0:1070\"]},{\"tk\":[51,71,51,72],\"els\":[\"0:1070\"]},{\"tk\":[51,73,51,75],\"els\":[\"0:1070\"]},{\"tk\":[51,76,51,78],\"els\":[\"0:1070\"]},{\"tk\":[51,78,51,79],\"els\":[\"0:1070\"]},{\"tk\":[51,80,51,81],\"els\":[\"0:1070\"]},{\"tk\":[52,7,52,11],\"els\":[\"0:1070\"]},{\"tk\":[52,11,52,12],\"els\":[\"0:1070\"]},{\"tk\":[55,5,55,11],\"els\":[\"0:1067#out:1\",\"0:1067\"]},{\"tk\":[55,12,55,13],\"els\":[\"0:1067#out:1\",\"0:1067\"]},{\"tk\":[55,14,55,15],\"els\":[\"0:1067#out:1\",\"0:1067\"]},{\"tk\":[55,15,55,23],\"els\":[\"0:1067#out:1\",\"0:1067\"]},{\"tk\":[55,23,55,24],\"els\":[\"0:1067#out:1\",\"0:1067\"]},{\"tk\":[55,24,55,42],\"els\":[\"0:1067#out:1\",\"0:1067\"]},{\"tk\":[55,42,55,43],\"els\":[\"0:1067#out:1\",\"0:1067\"]},{\"tk\":[55,43,55,65],\"els\":[\"0:1067#out:1\",\"0:1067\"]},{\"tk\":[55,65,55,66],\"els\":[\"0:1067#out:1\",\"0:1067\"]},{\"tk\":[58,5,58,13],\"els\":[\"0:1054#out:1\"]},{\"tk\":[58,14,58,15],\"els\":[\"0:1054\"]},{\"tk\":[58,16,58,17],\"els\":[\"0:1054\"]},{\"tk\":[58,27,58,33],\"els\":[\"0:1054\"]},{\"tk\":[58,34,58,35],\"els\":[\"0:1054\"]},{\"tk\":[58,36,58,42],\"els\":[\"0:1054\"]},{\"tk\":[58,44,58,45],\"els\":[\"0:1054\"]},{\"tk\":[58,46,58,52],\"els\":[\"0:1054\"]},{\"tk\":[63,13,63,21],\"els\":[\"0:1054#out:1\"]},{\"tk\":[74,7,74,13],\"els\":[\"0:1071:131\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[74,15,74,23],\"els\":[\"0:1054#out:1\"]},{\"tk\":[75,13,75,14],\"els\":[\"0:1071:131\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[83,9,83,27],\"els\":[\"0:1071:123#out:1\"]},{\"tk\":[83,28,83,35],\"els\":[\"0:1071:123#out:1\"]},{\"tk\":[83,36,83,37],\"els\":[\"0:1071:123#out:1\",\"0:1071:75\",\"0:1071:71\",\"0:1071:131\",\"0:1071:72\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[83,38,83,40],\"els\":[\"0:1071:75\",\"0:1071:71\",\"0:1071:131\",\"0:1071:72\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:74\"]},{\"tk\":[89,9,89,27],\"els\":[\"0:1071:124#out:1\"]},{\"tk\":[89,28,89,34],\"els\":[\"0:1071:124#out:1\"]},{\"tk\":[89,35,89,36],\"els\":[\"0:1071:124#out:1\",\"0:1071:76\",\"0:1071:71\",\"0:1071:131\",\"0:1071:72\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[89,37,89,39],\"els\":[\"0:1071:76\",\"0:1071:71\",\"0:1071:131\",\"0:1071:72\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:73\"]},{\"tk\":[94,13,94,14],\"els\":[\"0:1071:131\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[102,9,102,27],\"els\":[\"0:1071:123#out:1\"]},{\"tk\":[102,28,102,35],\"els\":[\"0:1071:123#out:1\"]},{\"tk\":[102,36,102,37],\"els\":[\"0:1071:123#out:1\",\"0:1071:81\",\"0:1071:77\",\"0:1071:131\",\"0:1071:78\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[102,38,102,40],\"els\":[\"0:1071:81\",\"0:1071:77\",\"0:1071:131\",\"0:1071:78\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:80\"]},{\"tk\":[108,9,108,27],\"els\":[\"0:1071:124#out:1\"]},{\"tk\":[108,28,108,34],\"els\":[\"0:1071:124#out:1\"]},{\"tk\":[108,35,108,36],\"els\":[\"0:1071:124#out:1\",\"0:1071:82\",\"0:1071:77\",\"0:1071:131\",\"0:1071:78\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[108,37,108,39],\"els\":[\"0:1071:82\",\"0:1071:77\",\"0:1071:131\",\"0:1071:78\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:79\"]},{\"tk\":[113,13,113,14],\"els\":[\"0:1071:131\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[121,9,121,27],\"els\":[\"0:1071:123#out:1\"]},{\"tk\":[121,28,121,35],\"els\":[\"0:1071:123#out:1\"]},{\"tk\":[121,36,121,37],\"els\":[\"0:1071:123#out:1\",\"0:1071:87\",\"0:1071:83\",\"0:1071:131\",\"0:1071:84\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[121,38,121,40],\"els\":[\"0:1071:87\",\"0:1071:83\",\"0:1071:131\",\"0:1071:84\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:86\"]},{\"tk\":[127,9,127,27],\"els\":[\"0:1071:124#out:1\"]},{\"tk\":[127,28,127,34],\"els\":[\"0:1071:124#out:1\"]},{\"tk\":[127,35,127,36],\"els\":[\"0:1071:124#out:1\",\"0:1071:88\",\"0:1071:83\",\"0:1071:131\",\"0:1071:84\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[127,37,127,39],\"els\":[\"0:1071:88\",\"0:1071:83\",\"0:1071:131\",\"0:1071:84\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:85\"]},{\"tk\":[132,13,132,14],\"els\":[\"0:1071:131\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[140,9,140,27],\"els\":[\"0:1071:123#out:1\"]},{\"tk\":[140,28,140,35],\"els\":[\"0:1071:123#out:1\"]},{\"tk\":[140,36,140,37],\"els\":[\"0:1071:123#out:1\",\"0:1071:93\",\"0:1071:89\",\"0:1071:131\",\"0:1071:90\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[140,38,140,40],\"els\":[\"0:1071:93\",\"0:1071:89\",\"0:1071:131\",\"0:1071:90\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:92\"]},{\"tk\":[146,9,146,27],\"els\":[\"0:1071:124#out:1\"]},{\"tk\":[146,28,146,34],\"els\":[\"0:1071:124#out:1\"]},{\"tk\":[146,35,146,36],\"els\":[\"0:1071:124#out:1\",\"0:1071:94\",\"0:1071:89\",\"0:1071:131\",\"0:1071:90\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[146,37,146,39],\"els\":[\"0:1071:94\",\"0:1071:89\",\"0:1071:131\",\"0:1071:90\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:91\"]},{\"tk\":[151,13,151,14],\"els\":[\"0:1071:131\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[159,9,159,27],\"els\":[\"0:1071:123#out:1\"]},{\"tk\":[159,28,159,35],\"els\":[\"0:1071:123#out:1\"]},{\"tk\":[159,36,159,37],\"els\":[\"0:1071:123#out:1\",\"0:1071:99\",\"0:1071:95\",\"0:1071:131\",\"0:1071:96\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[159,38,159,40],\"els\":[\"0:1071:99\",\"0:1071:95\",\"0:1071:131\",\"0:1071:96\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:98\"]},{\"tk\":[165,9,165,27],\"els\":[\"0:1071:124#out:1\"]},{\"tk\":[165,28,165,34],\"els\":[\"0:1071:124#out:1\"]},{\"tk\":[165,35,165,36],\"els\":[\"0:1071:124#out:1\",\"0:1071:100\",\"0:1071:95\",\"0:1071:131\",\"0:1071:96\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[165,37,165,39],\"els\":[\"0:1071:100\",\"0:1071:95\",\"0:1071:131\",\"0:1071:96\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:97\"]},{\"tk\":[170,13,170,14],\"els\":[\"0:1071:131\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[178,9,178,27],\"els\":[\"0:1071:123#out:1\"]},{\"tk\":[178,28,178,35],\"els\":[\"0:1071:123#out:1\"]},{\"tk\":[178,36,178,37],\"els\":[\"0:1071:123#out:1\",\"0:1071:105\",\"0:1071:101\",\"0:1071:131\",\"0:1071:102\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[178,38,178,40],\"els\":[\"0:1071:105\",\"0:1071:101\",\"0:1071:131\",\"0:1071:102\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:104\"]},{\"tk\":[184,9,184,27],\"els\":[\"0:1071:124#out:1\"]},{\"tk\":[184,28,184,34],\"els\":[\"0:1071:124#out:1\"]},{\"tk\":[184,35,184,36],\"els\":[\"0:1071:124#out:1\",\"0:1071:106\",\"0:1071:101\",\"0:1071:131\",\"0:1071:102\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[184,37,184,39],\"els\":[\"0:1071:106\",\"0:1071:101\",\"0:1071:131\",\"0:1071:102\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:103\"]},{\"tk\":[200,7,200,9],\"els\":[\"0:1071:70\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[200,11,200,12],\"els\":[\"0:1071:348\"]},{\"tk\":[200,21,200,36],\"els\":[\"0:1071:348\",\"0:1057\"]},{\"tk\":[200,37,200,39],\"els\":[\"0:1071:70\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[200,40,200,58],\"els\":[\"0:1071:70\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[200,59,200,66],\"els\":[\"0:1071:70\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[208,9,208,27],\"els\":[\"0:1071:125#out:1\"]},{\"tk\":[208,28,208,34],\"els\":[\"0:1071:125#out:1\"]},{\"tk\":[208,35,208,36],\"els\":[\"0:1071:125#out:1\",\"0:1071:111\",\"0:1071:107\",\"0:1071:70\",\"0:1071:108\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[208,37,208,38],\"els\":[\"0:1071:111\",\"0:1071:107\",\"0:1071:70\",\"0:1071:108\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:109\"]},{\"tk\":[214,9,214,28],\"els\":[\"0:1071:126#out:1\",\"0:1071:112\",\"0:1071:107\",\"0:1071:70\",\"0:1071:108\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[214,29,214,30],\"els\":[\"0:1071:126#out:1\",\"0:1071:112\",\"0:1071:107\",\"0:1071:70\",\"0:1071:108\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[214,31,214,33],\"els\":[\"0:1071:126#out:1\",\"0:1071:112\",\"0:1071:107\",\"0:1071:70\",\"0:1071:108\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[214,33,214,34],\"els\":[\"0:1071:126#out:1\",\"0:1071:112\",\"0:1071:107\",\"0:1071:70\",\"0:1071:108\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[217,14,217,16],\"els\":[\"0:1071:70\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[217,18,217,19],\"els\":[\"0:1071:348\"]},{\"tk\":[217,28,217,43],\"els\":[\"0:1071:348\",\"0:1057\"]},{\"tk\":[217,44,217,46],\"els\":[\"0:1071:70\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[217,47,217,65],\"els\":[\"0:1071:70\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[217,66,217,72],\"els\":[\"0:1071:70\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[225,9,225,27],\"els\":[\"0:1071:125#out:1\"]},{\"tk\":[225,28,225,34],\"els\":[\"0:1071:125#out:1\"]},{\"tk\":[225,35,225,36],\"els\":[\"0:1071:125#out:1\",\"0:1071:117\",\"0:1071:113\",\"0:1071:70\",\"0:1071:114\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[225,37,225,38],\"els\":[\"0:1071:117\",\"0:1071:113\",\"0:1071:70\",\"0:1071:114\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:115\"]},{\"tk\":[231,9,231,28],\"els\":[\"0:1071:126#out:1\",\"0:1071:118\",\"0:1071:113\",\"0:1071:70\",\"0:1071:114\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[231,29,231,30],\"els\":[\"0:1071:126#out:1\",\"0:1071:118\",\"0:1071:113\",\"0:1071:70\",\"0:1071:114\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[231,31,231,33],\"els\":[\"0:1071:126#out:1\",\"0:1071:118\",\"0:1071:113\",\"0:1071:70\",\"0:1071:114\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[231,33,231,34],\"els\":[\"0:1071:126#out:1\",\"0:1071:118\",\"0:1071:113\",\"0:1071:70\",\"0:1071:114\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[242,9,242,28],\"els\":[\"0:1071:126#out:1\",\"0:1071:122\",\"0:1071:119\",\"0:1071:70\",\"0:1071:120\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[242,29,242,30],\"els\":[\"0:1071:126#out:1\",\"0:1071:122\",\"0:1071:119\",\"0:1071:70\",\"0:1071:120\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[242,31,242,33],\"els\":[\"0:1071:126#out:1\",\"0:1071:122\",\"0:1071:119\",\"0:1071:70\",\"0:1071:120\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[242,33,242,34],\"els\":[\"0:1071:126#out:1\",\"0:1071:122\",\"0:1071:119\",\"0:1071:70\",\"0:1071:120\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[250,7,250,17],\"els\":[\"0:1071:62#out:1\"]},{\"tk\":[250,18,250,19],\"els\":[\"0:1071:129\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[250,20,250,38],\"els\":[\"0:1071:129\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[250,39,250,45],\"els\":[\"0:1071:129\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[257,7,257,9],\"els\":[\"0:1071:130\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[257,11,257,30],\"els\":[\"0:1071:130\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[257,31,257,33],\"els\":[\"0:1071:130\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[257,34,257,35],\"els\":[\"0:1071:130\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[258,9,258,19],\"els\":[\"0:1071:63#out:1\"]},{\"tk\":[258,20,258,21],\"els\":[\"0:1071:130\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[258,22,258,27],\"els\":[\"0:1071:130\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1071:69\"]},{\"tk\":[260,9,260,19],\"els\":[\"0:1071:63#out:1\"]},{\"tk\":[260,20,260,21],\"els\":[\"0:1071:130\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[260,23,260,41],\"els\":[\"0:1071:127\",\"0:1071:130\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[260,42,260,48],\"els\":[\"0:1071:127\",\"0:1071:130\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[260,49,260,51],\"els\":[\"0:1071:127\",\"0:1071:130\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\"]},{\"tk\":[260,52,260,67],\"els\":[\"0:1071:127\",\"0:1071:130\",\"0:1071:64\",\"0:1071:60\",\"0:1071:68\",\"0:1058\"]},{\"tk\":[275,7,275,26],\"els\":[\"0:1071:61#out:1\",\"0:1071:53\",\"0:1071:6\",\"0:1071:60\",\"0:1071:9\"]},{\"tk\":[275,27,275,28],\"els\":[\"0:1071:61#out:1\",\"0:1071:53\",\"0:1071:6\",\"0:1071:60\",\"0:1071:9\"]},{\"tk\":[275,29,275,31],\"els\":[\"0:1071:61#out:1\",\"0:1071:53\",\"0:1071:6\",\"0:1071:60\",\"0:1071:9\"]},{\"tk\":[275,31,275,32],\"els\":[\"0:1071:61#out:1\",\"0:1071:53\",\"0:1071:6\",\"0:1071:60\",\"0:1071:9\"]},{\"tk\":[280,7,280,17],\"els\":[\"0:1071:62#out:1\"]},{\"tk\":[280,18,280,19],\"els\":[\"0:1071:50\",\"0:1071:6\",\"0:1071:60\",\"0:1071:9\"]},{\"tk\":[280,20,280,35],\"els\":[\"0:1071:50\",\"0:1071:6\",\"0:1071:60\",\"0:1071:9\",\"0:1058\"]},{\"tk\":[285,7,285,17],\"els\":[\"0:1071:63#out:1\"]},{\"tk\":[285,18,285,19],\"els\":[\"0:1071:55\",\"0:1071:6\",\"0:1071:60\",\"0:1071:9\"]},{\"tk\":[285,20,285,25],\"els\":[\"0:1071:55\",\"0:1071:6\",\"0:1071:60\",\"0:1071:9\",\"0:1071:11\"]},{\"tk\":[296,5,296,24],\"els\":[\"0:1071:365\"]},{\"tk\":[296,25,296,26],\"els\":[\"0:1071:365\"]},{\"tk\":[296,27,296,28],\"els\":[\"0:1071:365\"]},{\"tk\":[296,28,296,36],\"els\":[\"0:1071:365\"]},{\"tk\":[296,36,296,37],\"els\":[\"0:1071:365\"]},{\"tk\":[296,37,296,47],\"els\":[\"0:1071:365\",\"0:1071:63#out:1\"]},{\"tk\":[296,47,296,48],\"els\":[\"0:1071:365\"]},{\"tk\":[299,5,299,20],\"els\":[\"0:1060\"]},{\"tk\":[299,21,299,22],\"els\":[\"0:1060\"]},{\"tk\":[299,23,299,33],\"els\":[\"0:1060\",\"0:1071:62#out:1\"]},{\"tk\":[299,33,299,34],\"els\":[\"0:1060\"]},{\"tk\":[304,5,304,24],\"els\":[\"0:1061\"]},{\"tk\":[304,25,304,26],\"els\":[\"0:1061\"]},{\"tk\":[304,27,304,29],\"els\":[\"0:1061\"]},{\"tk\":[304,29,304,30],\"els\":[\"0:1061\"]},{\"tk\":[310,5,310,7],\"els\":[\"0:3283\"]},{\"tk\":[310,9,310,22],\"els\":[\"0:3283\",\"0:3286\"]},{\"tk\":[310,23,310,24],\"els\":[\"0:3283\"]},{\"tk\":[310,25,310,28],\"els\":[\"0:3283\"]},{\"tk\":[311,7,311,18],\"els\":[\"0:3283\"]},{\"tk\":[311,19,311,20],\"els\":[\"0:3283\"]},{\"tk\":[311,21,311,34],\"els\":[\"0:3283\",\"0:3286\"]},{\"tk\":[311,34,311,35],\"els\":[\"0:3283\"]},{\"tk\":[319,5,319,22],\"els\":[\"0:1182\"]},{\"tk\":[319,23,319,24],\"els\":[\"0:1182\"]},{\"tk\":[319,25,319,36],\"els\":[\"0:1182\",\"0:3278\"]},{\"tk\":[319,36,319,37],\"els\":[\"0:1182\"]},{\"tk\":[322,5,322,21],\"els\":[\"0:1062\"]},{\"tk\":[322,22,322,23],\"els\":[\"0:1062\"]},{\"tk\":[322,24,322,41],\"els\":[\"0:1062\"]},{\"tk\":[322,41,322,42],\"els\":[\"0:1062\"]},{\"tk\":[325,5,325,20],\"els\":[\"0:1063\"]},{\"tk\":[325,21,325,22],\"els\":[\"0:1063\"]},{\"tk\":[325,23,325,24],\"els\":[\"0:1063\"]},{\"tk\":[325,24,325,32],\"els\":[\"0:1063\"]},{\"tk\":[325,32,325,33],\"els\":[\"0:1063\"]},{\"tk\":[325,33,325,41],\"els\":[\"0:1063\",\"0:1054#out:1\"]},{\"tk\":[325,41,325,42],\"els\":[\"0:1063\"]}]},\"1\":{\"records\":[{\"tk\":[80,3,80,11],\"els\":[\"0:3560\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[80,12,80,23],\"els\":[\"0:3560\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[80,23,80,24],\"els\":[\"0:3560\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[81,3,81,11],\"els\":[\"0:2679\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[81,12,81,25],\"els\":[\"0:2679\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[81,25,81,26],\"els\":[\"0:2679\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[82,3,82,11],\"els\":[\"0:4864\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[82,12,82,17],\"els\":[\"0:4864\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[82,17,82,18],\"els\":[\"0:4864\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[83,3,83,11],\"els\":[\"0:2687:288\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[83,12,83,17],\"els\":[\"0:2687:288\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[83,17,83,18],\"els\":[\"0:2687:288\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[84,3,84,11],\"els\":[\"0:2687:153\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[84,12,84,27],\"els\":[\"0:2687:153\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[84,27,84,28],\"els\":[\"0:2687:153\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[85,3,85,11],\"els\":[\"0:2687:431:342\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[85,12,85,24],\"els\":[\"0:2687:431:342\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[85,24,85,25],\"els\":[\"0:2687:431:342\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[86,3,86,11],\"els\":[\"0:1071:123\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[86,12,86,19],\"els\":[\"0:1071:123\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[86,19,86,20],\"els\":[\"0:1071:123\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[87,3,87,11],\"els\":[\"0:1071:124\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[87,12,87,18],\"els\":[\"0:1071:124\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[87,18,87,19],\"els\":[\"0:1071:124\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[88,3,88,10],\"els\":[\"0:1071:125\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[88,11,88,17],\"els\":[\"0:1071:125\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[88,17,88,18],\"els\":[\"0:1071:125\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[89,3,89,10],\"els\":[\"0:3560\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[89,11,89,22],\"els\":[\"0:3560\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[89,22,89,23],\"els\":[\"0:3560\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[90,3,90,12],\"els\":[\"0:2687:154\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[90,13,90,26],\"els\":[\"0:2687:154\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[90,26,90,27],\"els\":[\"0:2687:154\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[91,3,91,12],\"els\":[\"0:3029\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[91,13,91,33],\"els\":[\"0:3029\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[91,33,91,34],\"els\":[\"0:3029\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[92,3,92,12],\"els\":[\"0:3030\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[92,13,92,33],\"els\":[\"0:3030\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[92,33,92,34],\"els\":[\"0:3030\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[93,3,93,12],\"els\":[\"0:3031\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[93,13,93,33],\"els\":[\"0:3031\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[93,33,93,34],\"els\":[\"0:3031\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[94,3,94,12],\"els\":[\"0:1068\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[94,13,94,35],\"els\":[\"0:1068\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[94,35,94,36],\"els\":[\"0:1068\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[95,3,95,12],\"els\":[\"0:1069\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[95,13,95,35],\"els\":[\"0:1069\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[95,35,95,36],\"els\":[\"0:1069\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[96,3,96,12],\"els\":[\"0:1070\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[96,13,96,35],\"els\":[\"0:1070\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[96,35,96,36],\"els\":[\"0:1070\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[101,3,101,11],\"els\":[\"0:4893\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[101,12,101,28],\"els\":[\"0:4893\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[101,28,101,29],\"els\":[\"0:4893\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[102,3,102,11],\"els\":[\"0:4194\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[102,12,102,41],\"els\":[\"0:4194\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[102,41,102,42],\"els\":[\"0:4194\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[103,3,103,11],\"els\":[\"0:4201:5\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[103,12,103,21],\"els\":[\"0:4201:5\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[103,21,103,22],\"els\":[\"0:4201:5\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[104,3,104,11],\"els\":[\"0:4892\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[104,12,104,30],\"els\":[\"0:4892\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[104,30,104,31],\"els\":[\"0:4892\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[105,3,105,11],\"els\":[\"0:4204\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[105,12,105,43],\"els\":[\"0:4204\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[105,43,105,44],\"els\":[\"0:4204\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[106,3,106,11],\"els\":[\"0:4891\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[106,12,106,30],\"els\":[\"0:4891\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[106,30,106,31],\"els\":[\"0:4891\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[107,3,107,11],\"els\":[\"0:4227\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[107,12,107,43],\"els\":[\"0:4227\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[107,43,107,44],\"els\":[\"0:4227\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[108,3,108,11],\"els\":[\"0:2443\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[108,12,108,20],\"els\":[\"0:2443\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[108,21,108,33],\"els\":[\"0:2443\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[108,33,108,34],\"els\":[\"0:2443\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[109,3,109,11],\"els\":[\"0:2444\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[109,12,109,20],\"els\":[\"0:2444\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[109,21,109,32],\"els\":[\"0:2444\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[109,32,109,33],\"els\":[\"0:2444\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[110,3,110,11],\"els\":[\"0:4204\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[110,12,110,41],\"els\":[\"0:4204\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[110,41,110,42],\"els\":[\"0:4204\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[111,3,111,11],\"els\":[\"0:4227\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[111,12,111,43],\"els\":[\"0:4227\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[111,43,111,44],\"els\":[\"0:4227\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[112,3,112,11],\"els\":[\"0:2552\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[112,12,112,33],\"els\":[\"0:2552\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[112,33,112,34],\"els\":[\"0:2552\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[113,3,113,11],\"els\":[\"0:2687:431:342\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[113,12,113,31],\"els\":[\"0:2687:431:342\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[113,31,113,32],\"els\":[\"0:2687:431:342\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[114,3,114,12],\"els\":[\"0:2687:431:343\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[114,13,114,33],\"els\":[\"0:2687:431:343\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[114,33,114,34],\"els\":[\"0:2687:431:343\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[115,3,115,9],\"els\":[\"0:4194\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[115,10,115,41],\"els\":[\"0:4194\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[115,41,115,42],\"els\":[\"0:4194\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[116,3,116,9],\"els\":[\"0:4204\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[116,10,116,41],\"els\":[\"0:4204\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[116,41,116,42],\"els\":[\"0:4204\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[117,3,117,9],\"els\":[\"0:4227\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[117,10,117,41],\"els\":[\"0:4227\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[117,41,117,42],\"els\":[\"0:4227\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[118,3,118,10],\"els\":[\"0:3482\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[118,11,118,40],\"els\":[\"0:3482\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[118,40,118,41],\"els\":[\"0:3482\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[119,3,119,10],\"els\":[\"0:3482\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[119,11,119,33],\"els\":[\"0:3482\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[119,33,119,34],\"els\":[\"0:3482\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[120,3,120,10],\"els\":[\"0:4204\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[120,11,120,42],\"els\":[\"0:4204\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[120,42,120,43],\"els\":[\"0:4204\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[121,3,121,10],\"els\":[\"0:4227\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[121,11,121,42],\"els\":[\"0:4227\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[121,42,121,43],\"els\":[\"0:4227\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[122,3,122,12],\"els\":[\"0:2552\"],\"ct\":{\"2\":3,\"1\":2}},{\"tk\":[122,13,122,41],\"els\":[\"0:2552\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[122,41,122,42],\"els\":[\"0:2552\"],\"ct\":{\"1\":2,\"2\":3}},{\"tk\":[127,3,127,8],\"els\":[\"0:4879\"],\"ct\":{\"1\":4,\"2\":3}},{\"tk\":[127,9,127,15],\"els\":[\"0:4879\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[127,16,127,21],\"els\":[\"0:4879\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[127,21,127,22],\"els\":[\"0:4879\"],\"ct\":{\"1\":4,\"2\":3}},{\"tk\":[128,3,128,8],\"els\":[\"0:4887\"],\"ct\":{\"1\":4,\"2\":3}},{\"tk\":[128,9,128,17],\"els\":[\"0:4887\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[128,18,128,30],\"els\":[\"0:4887\"],\"ct\":{\"1\":4,\"2\":3}},{\"tk\":[128,30,128,31],\"els\":[\"0:4887\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[129,3,129,8],\"els\":[\"0:4888\"],\"ct\":{\"1\":4,\"2\":3}},{\"tk\":[129,9,129,17],\"els\":[\"0:4888\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[129,18,129,31],\"els\":[\"0:4888\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[129,31,129,32],\"els\":[\"0:4888\"],\"ct\":{\"1\":4,\"2\":3}},{\"tk\":[130,3,130,8],\"els\":[\"0:4889\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[130,9,130,17],\"els\":[\"0:4889\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[130,18,130,31],\"els\":[\"0:4889\"],\"ct\":{\"1\":4,\"2\":3}},{\"tk\":[130,31,130,32],\"els\":[\"0:4889\"],\"ct\":{\"1\":4,\"2\":3}},{\"tk\":[131,3,131,8],\"els\":[\"0:4890\"],\"ct\":{\"1\":4,\"2\":3}},{\"tk\":[131,9,131,17],\"els\":[\"0:4890\"],\"ct\":{\"1\":4,\"2\":3}},{\"tk\":[131,18,131,31],\"els\":[\"0:4890\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[131,31,131,32],\"els\":[\"0:4890\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[132,3,132,8],\"els\":[\"0:2687:516\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[132,9,132,17],\"els\":[\"0:2687:516\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[132,18,132,32],\"els\":[\"0:2687:516\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[132,32,132,33],\"els\":[\"0:2687:516\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[140,3,140,11],\"els\":[\"0:2604:76:549\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[140,12,140,35],\"els\":[\"0:2604:76:549\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[140,35,140,36],\"els\":[\"0:2604:76:549\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[140,36,140,40],\"els\":[\"0:2604:76:549\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[140,40,140,41],\"els\":[\"0:2604:76:549\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[140,41,140,42],\"els\":[\"0:2604:76:549\"],\"ct\":{\"2\":3,\"1\":4}},{\"tk\":[185,1,185,7],\"els\":[\"0:3004\"],\"ct\":{\"4\":8,\"3\":5,\"2\":7,\"1\":6}},{\"tk\":[185,8,185,16],\"els\":[\"0:3004\"],\"ct\":{\"1\":6,\"4\":8,\"2\":7,\"3\":5}},{\"tk\":[185,17,185,25],\"els\":[\"0:3004\"],\"ct\":{\"1\":6,\"4\":8,\"2\":7,\"3\":5}},{\"tk\":[185,26,185,31],\"els\":[\"0:3004\"],\"ct\":{\"1\":6,\"4\":8,\"2\":7,\"3\":5}},{\"tk\":[185,31,185,32],\"els\":[\"0:3004\"],\"ct\":{\"1\":6,\"4\":8,\"3\":5,\"2\":7}},{\"tk\":[186,1,186,7],\"els\":[\"0:3007\"],\"ct\":{\"1\":6,\"4\":8,\"3\":9,\"2\":7}},{\"tk\":[186,8,186,16],\"els\":[\"0:3007\"],\"ct\":{\"1\":6,\"4\":8,\"3\":9,\"2\":7}},{\"tk\":[186,17,186,25],\"els\":[\"0:3007\"],\"ct\":{\"1\":6,\"4\":8,\"2\":7,\"3\":9}},{\"tk\":[186,26,186,31],\"els\":[\"0:3007\"],\"ct\":{\"3\":9,\"4\":8,\"1\":6,\"2\":7}},{\"tk\":[186,31,186,32],\"els\":[\"0:3007\"],\"ct\":{\"1\":6,\"3\":9,\"2\":7,\"4\":8}},{\"tk\":[187,1,187,7],\"els\":[\"0:3526\"],\"ct\":{\"1\":11,\"4\":8,\"2\":7,\"3\":10}},{\"tk\":[187,8,187,16],\"els\":[\"0:3526\"],\"ct\":{\"1\":11,\"3\":10,\"2\":7,\"4\":8}},{\"tk\":[187,17,187,25],\"els\":[\"0:3526\"],\"ct\":{\"1\":11,\"4\":8,\"2\":7,\"3\":10}},{\"tk\":[187,26,187,32],\"els\":[\"0:3526\"],\"ct\":{\"1\":11,\"3\":10,\"4\":8,\"2\":7}},{\"tk\":[187,32,187,33],\"els\":[\"0:3526\"],\"ct\":{\"1\":11,\"3\":10,\"2\":7,\"4\":8}},{\"tk\":[188,1,188,7],\"ct\":{\"1\":11,\"3\":12,\"4\":8,\"2\":7,\"0\":0}},{\"tk\":[188,8,188,16],\"ct\":{\"1\":11,\"0\":0,\"2\":7,\"3\":12,\"4\":8}},{\"tk\":[188,17,188,25],\"ct\":{\"1\":11,\"3\":12,\"4\":8,\"2\":7,\"0\":0}},{\"tk\":[188,26,188,32],\"ct\":{\"1\":11,\"3\":12,\"4\":8,\"2\":7,\"0\":0}},{\"tk\":[188,32,188,33],\"ct\":{\"1\":11,\"0\":0,\"4\":8,\"2\":7,\"3\":12}},{\"tk\":[189,1,189,7],\"els\":[\"0:3527\"],\"ct\":{\"1\":11,\"3\":13,\"4\":8,\"2\":7}},{\"tk\":[189,8,189,16],\"els\":[\"0:3527\"],\"ct\":{\"1\":11,\"2\":7,\"3\":13,\"4\":8}},{\"tk\":[189,17,189,25],\"els\":[\"0:3527\"],\"ct\":{\"1\":11,\"3\":13,\"2\":7,\"4\":8}},{\"tk\":[189,26,189,33],\"els\":[\"0:3527\"],\"ct\":{\"1\":11,\"3\":13,\"4\":8,\"2\":7}},{\"tk\":[189,33,189,34],\"els\":[\"0:3527\"],\"ct\":{\"1\":11,\"3\":13,\"4\":8,\"2\":7}},{\"tk\":[190,1,190,7],\"els\":[\"0:3528\"],\"ct\":{\"1\":11,\"4\":8,\"2\":7,\"3\":14}},{\"tk\":[190,8,190,16],\"els\":[\"0:3528\"],\"ct\":{\"1\":11,\"4\":8,\"2\":7,\"3\":14}},{\"tk\":[190,17,190,25],\"els\":[\"0:3528\"],\"ct\":{\"1\":11,\"3\":14,\"2\":7,\"4\":8}},{\"tk\":[190,26,190,33],\"els\":[\"0:3528\"],\"ct\":{\"1\":11,\"4\":8,\"2\":7,\"3\":14}},{\"tk\":[190,33,190,34],\"els\":[\"0:3528\"],\"ct\":{\"1\":11,\"2\":7,\"3\":14,\"4\":8}},{\"tk\":[191,1,191,7],\"els\":[\"0:3568\"],\"ct\":{\"1\":11,\"2\":7,\"3\":15,\"4\":8}},{\"tk\":[191,8,191,16],\"els\":[\"0:3568\"],\"ct\":{\"1\":11,\"3\":15,\"4\":8,\"2\":7}},{\"tk\":[191,17,191,25],\"els\":[\"0:3568\"],\"ct\":{\"1\":11,\"4\":8,\"3\":15,\"2\":7}},{\"tk\":[191,26,191,34],\"els\":[\"0:3568\"],\"ct\":{\"1\":11,\"4\":8,\"2\":7,\"3\":15}},{\"tk\":[191,34,191,35],\"els\":[\"0:3568\"],\"ct\":{\"1\":11,\"2\":7,\"3\":15,\"4\":8}},{\"tk\":[192,1,192,7],\"els\":[\"0:3568\"],\"ct\":{\"1\":11,\"4\":8,\"2\":7,\"3\":16}},{\"tk\":[192,8,192,16],\"els\":[\"0:3568\"],\"ct\":{\"1\":11,\"3\":16,\"4\":8,\"2\":7}},{\"tk\":[192,17,192,25],\"els\":[\"0:3568\"],\"ct\":{\"1\":11,\"3\":16,\"4\":8,\"2\":7}},{\"tk\":[192,26,192,34],\"els\":[\"0:3568\"],\"ct\":{\"1\":11,\"3\":16,\"4\":8,\"2\":7}},{\"tk\":[192,34,192,35],\"els\":[\"0:3568\"],\"ct\":{\"1\":11,\"4\":8,\"2\":7,\"3\":16}},{\"tk\":[193,1,193,7],\"els\":[\"0:1050\"],\"ct\":{\"1\":11,\"3\":17,\"4\":8,\"2\":7}},{\"tk\":[193,8,193,16],\"els\":[\"0:1050\"],\"ct\":{\"1\":11,\"3\":17,\"4\":8,\"2\":7}},{\"tk\":[193,17,193,25],\"els\":[\"0:1050\"],\"ct\":{\"1\":11,\"2\":7,\"3\":17,\"4\":8}},{\"tk\":[193,26,193,33],\"els\":[\"0:1050\"],\"ct\":{\"1\":11,\"2\":7,\"3\":17,\"4\":8}},{\"tk\":[193,33,193,34],\"els\":[\"0:1050\"],\"ct\":{\"1\":11,\"3\":17,\"4\":8,\"2\":7}},{\"tk\":[194,1,194,7],\"ct\":{\"1\":11,\"0\":1,\"2\":7,\"3\":18,\"4\":8}},{\"tk\":[194,8,194,16],\"ct\":{\"1\":11,\"2\":7,\"3\":18,\"0\":1,\"4\":8}},{\"tk\":[194,17,194,25],\"ct\":{\"1\":11,\"0\":1,\"3\":18,\"4\":8,\"2\":7}},{\"tk\":[194,26,194,43],\"ct\":{\"1\":11,\"0\":1,\"3\":18,\"2\":7,\"4\":8}},{\"tk\":[194,43,194,44],\"ct\":{\"3\":18,\"1\":11,\"4\":8,\"2\":7,\"0\":1}},{\"tk\":[196,1,196,7],\"els\":[\"0:1214\"],\"ct\":{\"1\":6,\"3\":19,\"4\":8,\"2\":7}},{\"tk\":[196,8,196,16],\"els\":[\"0:1214\"],\"ct\":{\"1\":6,\"3\":19,\"4\":8,\"2\":7}},{\"tk\":[196,17,196,25],\"els\":[\"0:1214\"],\"ct\":{\"3\":19,\"1\":6,\"4\":8,\"2\":7}},{\"tk\":[196,26,196,38],\"els\":[\"0:1214\"],\"ct\":{\"1\":6,\"3\":19,\"2\":7,\"4\":8}},{\"tk\":[196,38,196,39],\"els\":[\"0:1214\"],\"ct\":{\"1\":6,\"3\":19,\"4\":8,\"2\":7}},{\"tk\":[197,1,197,7],\"els\":[\"0:262\"],\"ct\":{\"1\":6,\"3\":20,\"4\":8,\"2\":7}},{\"tk\":[197,8,197,16],\"els\":[\"0:262\"],\"ct\":{\"3\":20,\"1\":6,\"4\":8,\"2\":7}},{\"tk\":[197,17,197,26],\"els\":[\"0:262\"],\"ct\":{\"3\":20,\"1\":6,\"4\":8,\"2\":7}},{\"tk\":[197,27,197,33],\"els\":[\"0:262\"],\"ct\":{\"1\":6,\"3\":20,\"2\":7,\"4\":8}},{\"tk\":[197,33,197,34],\"els\":[\"0:262\"],\"ct\":{\"1\":6,\"3\":20,\"4\":8,\"2\":7}},{\"tk\":[198,1,198,7],\"els\":[\"0:4235\"],\"ct\":{\"3\":21,\"1\":6,\"4\":8,\"2\":7}},{\"tk\":[198,8,198,16],\"els\":[\"0:4235\"],\"ct\":{\"1\":6,\"3\":21,\"4\":8,\"2\":7}},{\"tk\":[198,17,198,25],\"els\":[\"0:4235\"],\"ct\":{\"1\":6,\"3\":21,\"2\":7,\"4\":8}},{\"tk\":[198,26,198,35],\"els\":[\"0:4235\"],\"ct\":{\"1\":6,\"3\":21,\"4\":8,\"2\":7}},{\"tk\":[198,35,198,36],\"els\":[\"0:4235\"],\"ct\":{\"1\":6,\"4\":8,\"2\":7,\"3\":21}},{\"tk\":[199,1,199,7],\"els\":[\"0:4233\"],\"ct\":{\"3\":22,\"1\":6,\"4\":8,\"2\":7}},{\"tk\":[199,8,199,16],\"els\":[\"0:4233\"],\"ct\":{\"1\":6,\"3\":22,\"2\":7,\"4\":8}},{\"tk\":[199,17,199,25],\"els\":[\"0:4233\"],\"ct\":{\"1\":6,\"3\":22,\"2\":7,\"4\":8}},{\"tk\":[199,26,199,35],\"els\":[\"0:4233\"],\"ct\":{\"1\":6,\"2\":7,\"3\":22,\"4\":8}},{\"tk\":[199,35,199,36],\"els\":[\"0:4233\"],\"ct\":{\"1\":6,\"4\":8,\"2\":7,\"3\":22}},{\"tk\":[200,1,200,7],\"els\":[\"0:3815\"],\"ct\":{\"1\":6,\"4\":8,\"2\":7,\"3\":23}},{\"tk\":[200,8,200,16],\"els\":[\"0:3815\"],\"ct\":{\"4\":8,\"3\":23,\"1\":6,\"2\":7}},{\"tk\":[200,17,200,25],\"els\":[\"0:3815\"],\"ct\":{\"4\":8,\"1\":6,\"2\":7,\"3\":23}},{\"tk\":[200,26,200,35],\"els\":[\"0:3815\"],\"ct\":{\"3\":23,\"4\":8,\"1\":6,\"2\":7}},{\"tk\":[200,35,200,36],\"els\":[\"0:3815\"],\"ct\":{\"4\":8,\"2\":7,\"1\":6,\"3\":23}},{\"tk\":[201,1,201,7],\"els\":[\"0:1180\"],\"ct\":{\"4\":8,\"3\":24,\"1\":6,\"2\":7}},{\"tk\":[201,8,201,16],\"els\":[\"0:1180\"],\"ct\":{\"3\":24,\"4\":8,\"1\":6,\"2\":7}},{\"tk\":[201,17,201,26],\"els\":[\"0:1180\"],\"ct\":{\"4\":8,\"1\":6,\"2\":7,\"3\":24}},{\"tk\":[201,27,201,32],\"els\":[\"0:1180\"],\"ct\":{\"4\":8,\"1\":6,\"2\":7,\"3\":24}},{\"tk\":[201,32,201,33],\"els\":[\"0:1180\"],\"ct\":{\"4\":8,\"1\":6,\"2\":7,\"3\":24}},{\"tk\":[202,1,202,7],\"els\":[\"0:263\"],\"ct\":{\"2\":7,\"3\":25,\"4\":8,\"1\":6}},{\"tk\":[202,8,202,16],\"els\":[\"0:263\"],\"ct\":{\"2\":7,\"3\":25,\"4\":8,\"1\":6}},{\"tk\":[202,17,202,24],\"els\":[\"0:263\"],\"ct\":{\"3\":25,\"4\":8,\"1\":6,\"2\":7}},{\"tk\":[202,25,202,40],\"els\":[\"0:263\"],\"ct\":{\"3\":25,\"4\":8,\"1\":6,\"2\":7}},{\"tk\":[202,40,202,41],\"els\":[\"0:263\"],\"ct\":{\"4\":8,\"3\":25,\"1\":6,\"2\":7}},{\"tk\":[203,1,203,7],\"els\":[\"0:264\"],\"ct\":{\"4\":8,\"1\":6,\"2\":7,\"3\":26}},{\"tk\":[203,8,203,16],\"els\":[\"0:264\"],\"ct\":{\"4\":8,\"1\":6,\"2\":7,\"3\":26}},{\"tk\":[203,17,203,25],\"els\":[\"0:264\"],\"ct\":{\"4\":8,\"3\":26,\"1\":6,\"2\":7}},{\"tk\":[203,26,203,41],\"els\":[\"0:264\"],\"ct\":{\"3\":26,\"4\":8,\"1\":6,\"2\":7}},{\"tk\":[203,41,203,42],\"els\":[\"0:264\"],\"ct\":{\"4\":8,\"1\":6,\"2\":7,\"3\":26}},{\"tk\":[204,1,204,7],\"els\":[\"0:260\"],\"ct\":{\"2\":7,\"3\":27,\"4\":8,\"1\":6}},{\"tk\":[204,8,204,16],\"els\":[\"0:260\"],\"ct\":{\"3\":27,\"4\":8,\"1\":6,\"2\":7}},{\"tk\":[204,17,204,25],\"els\":[\"0:260\"],\"ct\":{\"3\":27,\"4\":8,\"1\":6,\"2\":7}},{\"tk\":[204,26,204,42],\"els\":[\"0:260\"],\"ct\":{\"3\":27,\"4\":8,\"1\":6,\"2\":7}},{\"tk\":[204,42,204,43],\"els\":[\"0:260\"],\"ct\":{\"4\":8,\"3\":27,\"1\":6,\"2\":7}},{\"tk\":[205,1,205,7],\"els\":[\"0:261\"],\"ct\":{\"4\":8,\"1\":6,\"2\":7,\"3\":28}},{\"tk\":[205,8,205,16],\"els\":[\"0:261\"],\"ct\":{\"3\":28,\"4\":8,\"1\":6,\"2\":7}},{\"tk\":[205,17,205,25],\"els\":[\"0:261\"],\"ct\":{\"4\":8,\"3\":28,\"1\":6,\"2\":7}},{\"tk\":[205,26,205,45],\"els\":[\"0:261\"],\"ct\":{\"3\":28,\"4\":8,\"1\":6,\"2\":7}},{\"tk\":[205,45,205,46],\"els\":[\"0:261\"],\"ct\":{\"2\":7,\"3\":28,\"4\":8,\"1\":6}},{\"tk\":[206,1,206,7],\"els\":[\"0:1055:481\"],\"ct\":{\"4\":8,\"1\":11,\"2\":7,\"3\":29}},{\"tk\":[206,8,206,16],\"els\":[\"0:1055:481\"],\"ct\":{\"3\":29,\"4\":8,\"1\":11,\"2\":7}},{\"tk\":[206,17,206,25],\"els\":[\"0:1055:481\"],\"ct\":{\"3\":29,\"4\":8,\"1\":11,\"2\":7}},{\"tk\":[206,26,206,32],\"els\":[\"0:1055:481\"],\"ct\":{\"4\":8,\"3\":29,\"1\":11,\"2\":7}},{\"tk\":[206,32,206,33],\"els\":[\"0:1055:481\"],\"ct\":{\"4\":8,\"1\":11,\"2\":7,\"3\":29}},{\"tk\":[207,1,207,7],\"els\":[\"0:3028\"],\"ct\":{\"3\":30,\"4\":8,\"1\":11,\"2\":7}},{\"tk\":[207,8,207,16],\"els\":[\"0:3028\"],\"ct\":{\"2\":7,\"3\":30,\"4\":8,\"1\":11}},{\"tk\":[207,17,207,25],\"els\":[\"0:3028\"],\"ct\":{\"3\":30,\"4\":8,\"1\":11,\"2\":7}},{\"tk\":[207,26,207,43],\"els\":[\"0:3028\"],\"ct\":{\"3\":30,\"4\":8,\"1\":11,\"2\":7}},{\"tk\":[207,43,207,44],\"els\":[\"0:3028\"],\"ct\":{\"4\":8,\"1\":11,\"2\":7,\"3\":30}},{\"tk\":[208,1,208,7],\"els\":[\"0:1056:481\"],\"ct\":{\"4\":8,\"3\":31,\"1\":11,\"2\":7}},{\"tk\":[208,8,208,16],\"els\":[\"0:1056:481\"],\"ct\":{\"2\":7,\"3\":31,\"4\":8,\"1\":11}},{\"tk\":[208,17,208,25],\"els\":[\"0:1056:481\"],\"ct\":{\"4\":8,\"1\":11,\"2\":7,\"3\":31}},{\"tk\":[208,26,208,32],\"els\":[\"0:1056:481\"],\"ct\":{\"4\":8,\"3\":31,\"2\":7,\"1\":11}},{\"tk\":[208,32,208,33],\"els\":[\"0:1056:481\"],\"ct\":{\"2\":7,\"3\":31,\"4\":8,\"1\":11}},{\"tk\":[209,1,209,7],\"els\":[\"0:3025:481\"],\"ct\":{\"2\":7,\"3\":32,\"4\":8,\"1\":11}},{\"tk\":[209,8,209,16],\"els\":[\"0:3025:481\"],\"ct\":{\"2\":7,\"1\":11,\"3\":32,\"4\":8}},{\"tk\":[209,17,209,25],\"els\":[\"0:3025:481\"],\"ct\":{\"2\":7,\"3\":32,\"4\":8,\"1\":11}},{\"tk\":[209,26,209,43],\"els\":[\"0:3025:481\"],\"ct\":{\"3\":32,\"4\":8,\"1\":11,\"2\":7}},{\"tk\":[209,43,209,44],\"els\":[\"0:3025:481\"],\"ct\":{\"3\":32,\"4\":8,\"1\":11,\"2\":7}},{\"tk\":[210,1,210,7],\"els\":[\"0:1067\"],\"ct\":{\"4\":8,\"3\":33,\"1\":11,\"2\":7}},{\"tk\":[210,8,210,16],\"els\":[\"0:1067\"],\"ct\":{\"4\":8,\"3\":33,\"1\":11,\"2\":7}},{\"tk\":[210,17,210,25],\"els\":[\"0:1067\"],\"ct\":{\"4\":8,\"1\":11,\"2\":7,\"3\":33}},{\"tk\":[210,26,210,32],\"els\":[\"0:1067\"],\"ct\":{\"2\":7,\"3\":33,\"4\":8,\"1\":11}},{\"tk\":[210,32,210,33],\"els\":[\"0:1067\"],\"ct\":{\"4\":8,\"1\":11,\"2\":7,\"3\":33}},{\"tk\":[211,1,211,7],\"els\":[\"0:3024:481\"],\"ct\":{\"2\":7,\"3\":34,\"4\":8,\"1\":11}},{\"tk\":[211,8,211,16],\"els\":[\"0:3024:481\"],\"ct\":{\"2\":7,\"3\":34,\"4\":8,\"1\":11}},{\"tk\":[211,17,211,25],\"els\":[\"0:3024:481\"],\"ct\":{\"4\":8,\"1\":11,\"2\":7,\"3\":34}},{\"tk\":[211,26,211,43],\"els\":[\"0:3024:481\"],\"ct\":{\"2\":7,\"3\":34,\"4\":8,\"1\":11}},{\"tk\":[211,43,211,44],\"els\":[\"0:3024:481\"],\"ct\":{\"2\":7,\"3\":34,\"4\":8,\"1\":11}},{\"tk\":[212,1,212,7],\"els\":[\"0:3284\"],\"ct\":{\"2\":7,\"3\":35,\"4\":8,\"1\":6}},{\"tk\":[212,8,212,16],\"els\":[\"0:3284\"],\"ct\":{\"4\":8,\"3\":35,\"1\":6,\"2\":7}},{\"tk\":[212,17,212,25],\"els\":[\"0:3284\"],\"ct\":{\"4\":8,\"3\":35,\"1\":6,\"2\":7}},{\"tk\":[212,26,212,39],\"els\":[\"0:3284\"],\"ct\":{\"4\":8,\"2\":7,\"1\":6,\"3\":35}},{\"tk\":[212,39,212,40],\"els\":[\"0:3284\"],\"ct\":{\"4\":8,\"1\":6,\"2\":7,\"3\":35}},{\"tk\":[213,1,213,7],\"els\":[\"0:3272\"],\"ct\":{\"2\":7,\"1\":6,\"3\":36,\"4\":8}},{\"tk\":[213,8,213,16],\"els\":[\"0:3272\"],\"ct\":{\"4\":8,\"2\":7,\"1\":6,\"3\":36}},{\"tk\":[213,17,213,25],\"els\":[\"0:3272\"],\"ct\":{\"2\":7,\"3\":36,\"1\":6,\"4\":8}},{\"tk\":[213,26,213,37],\"els\":[\"0:3272\"],\"ct\":{\"2\":7,\"1\":6,\"3\":36,\"4\":8}},{\"tk\":[213,37,213,38],\"els\":[\"0:3272\"],\"ct\":{\"2\":7,\"1\":6,\"3\":36,\"4\":8}},{\"tk\":[214,1,214,7],\"els\":[\"0:259\"],\"ct\":{\"2\":7,\"3\":37,\"1\":6,\"4\":8}},{\"tk\":[214,8,214,16],\"els\":[\"0:259\"],\"ct\":{\"2\":7,\"1\":6,\"3\":37,\"4\":8}},{\"tk\":[214,17,214,25],\"els\":[\"0:259\"],\"ct\":{\"2\":7,\"1\":6,\"4\":8,\"3\":37}},{\"tk\":[214,26,214,45],\"els\":[\"0:259\"],\"ct\":{\"4\":8,\"2\":7,\"1\":6,\"3\":37}},{\"tk\":[214,45,214,46],\"els\":[\"0:259\"],\"ct\":{\"2\":7,\"1\":6,\"4\":8,\"3\":37}},{\"tk\":[215,1,215,7],\"els\":[\"0:1071:61\"],\"ct\":{\"2\":7,\"1\":11,\"3\":38,\"4\":8}},{\"tk\":[215,8,215,16],\"els\":[\"0:1071:61\"],\"ct\":{\"2\":7,\"3\":38,\"1\":11,\"4\":8}},{\"tk\":[215,17,215,25],\"els\":[\"0:1071:61\"],\"ct\":{\"2\":7,\"1\":11,\"4\":8,\"3\":38}},{\"tk\":[215,26,215,45],\"els\":[\"0:1071:61\"],\"ct\":{\"2\":7,\"3\":38,\"1\":11,\"4\":8}},{\"tk\":[215,45,215,46],\"els\":[\"0:1071:61\"],\"ct\":{\"2\":7,\"3\":38,\"1\":11,\"4\":8}},{\"tk\":[216,1,216,7],\"els\":[\"0:2693\"],\"ct\":{\"2\":7,\"1\":11,\"4\":8,\"3\":39}},{\"tk\":[216,8,216,16],\"els\":[\"0:2693\"],\"ct\":{\"2\":7,\"3\":39,\"1\":11,\"4\":8}},{\"tk\":[216,17,216,25],\"els\":[\"0:2693\"],\"ct\":{\"2\":7,\"1\":11,\"3\":39,\"4\":8}},{\"tk\":[216,26,216,42],\"els\":[\"0:2693\"],\"ct\":{\"2\":7,\"1\":11,\"4\":8,\"3\":39}},{\"tk\":[216,42,216,43],\"els\":[\"0:2693\"],\"ct\":{\"4\":8,\"2\":7,\"1\":11,\"3\":39}},{\"tk\":[216,43,216,44],\"els\":[\"0:2693\"],\"ct\":{\"2\":7,\"1\":11,\"3\":39,\"4\":8}},{\"tk\":[216,44,216,45],\"els\":[\"0:2693\"],\"ct\":{\"2\":7,\"1\":11,\"3\":39,\"4\":8}},{\"tk\":[216,45,216,46],\"els\":[\"0:2693\"],\"ct\":{\"2\":7,\"1\":11,\"4\":8,\"3\":39}},{\"tk\":[217,1,217,7],\"els\":[\"0:265\"],\"ct\":{\"2\":7,\"1\":6,\"3\":40,\"4\":8}},{\"tk\":[217,8,217,16],\"els\":[\"0:265\"],\"ct\":{\"2\":7,\"1\":6,\"3\":40,\"4\":8}},{\"tk\":[217,17,217,25],\"els\":[\"0:265\"],\"ct\":{\"2\":7,\"3\":40,\"1\":6,\"4\":8}},{\"tk\":[217,26,217,34],\"els\":[\"0:265\"],\"ct\":{\"2\":7,\"1\":6,\"4\":8,\"3\":40}},{\"tk\":[217,34,217,35],\"els\":[\"0:265\"],\"ct\":{\"4\":8,\"2\":7,\"1\":6,\"3\":40}},{\"tk\":[218,1,218,7],\"els\":[\"0:266\"],\"ct\":{\"2\":7,\"3\":41,\"1\":6,\"4\":8}},{\"tk\":[218,8,218,16],\"els\":[\"0:266\"],\"ct\":{\"2\":7,\"1\":6,\"3\":41,\"4\":8}},{\"tk\":[218,17,218,25],\"els\":[\"0:266\"],\"ct\":{\"2\":7,\"1\":6,\"3\":41,\"4\":8}},{\"tk\":[218,26,218,34],\"els\":[\"0:266\"],\"ct\":{\"4\":8,\"2\":7,\"1\":6,\"3\":41}},{\"tk\":[218,34,218,35],\"els\":[\"0:266\"],\"ct\":{\"2\":7,\"1\":6,\"3\":41,\"4\":8}},{\"tk\":[219,1,219,7],\"els\":[\"0:4231\"],\"ct\":{\"2\":7,\"1\":11,\"3\":42,\"4\":8}},{\"tk\":[219,8,219,16],\"els\":[\"0:4231\"],\"ct\":{\"4\":8,\"2\":7,\"1\":11,\"3\":42}},{\"tk\":[219,17,219,25],\"els\":[\"0:4231\"],\"ct\":{\"4\":8,\"2\":7,\"1\":11,\"3\":42}},{\"tk\":[219,26,219,32],\"els\":[\"0:4231\"],\"ct\":{\"2\":7,\"1\":11,\"4\":8,\"3\":42}},{\"tk\":[219,32,219,33],\"els\":[\"0:4231\"],\"ct\":{\"2\":7,\"3\":42,\"1\":11,\"4\":8}},{\"tk\":[220,1,220,7],\"els\":[\"0:3667\"],\"ct\":{\"4\":8,\"2\":7,\"1\":11,\"3\":43}},{\"tk\":[220,8,220,16],\"els\":[\"0:3667\"],\"ct\":{\"3\":43,\"4\":8,\"2\":7,\"1\":11}},{\"tk\":[220,17,220,25],\"els\":[\"0:3667\"],\"ct\":{\"2\":7,\"1\":11,\"3\":43,\"4\":8}},{\"tk\":[220,26,220,31],\"els\":[\"0:3667\"],\"ct\":{\"2\":7,\"1\":11,\"3\":43,\"4\":8}},{\"tk\":[220,31,220,32],\"els\":[\"0:3667\"],\"ct\":{\"2\":7,\"1\":11,\"3\":43,\"4\":8}},{\"tk\":[221,1,221,7],\"els\":[\"0:3553\"],\"ct\":{\"4\":8,\"2\":7,\"1\":11,\"3\":44}},{\"tk\":[221,8,221,16],\"els\":[\"0:3553\"],\"ct\":{\"2\":7,\"3\":44,\"1\":11,\"4\":8}},{\"tk\":[221,17,221,25],\"els\":[\"0:3553\"],\"ct\":{\"2\":7,\"1\":11,\"3\":44,\"4\":8}},{\"tk\":[221,26,221,41],\"els\":[\"0:3553\"],\"ct\":{\"2\":7,\"1\":11,\"3\":44,\"4\":8}},{\"tk\":[221,41,221,42],\"els\":[\"0:3553\"],\"ct\":{\"2\":7,\"1\":11,\"3\":44,\"4\":8}},{\"tk\":[222,1,222,7],\"els\":[\"0:3666\"],\"ct\":{\"2\":7,\"1\":11,\"3\":45,\"4\":8}},{\"tk\":[222,8,222,16],\"els\":[\"0:3666\"],\"ct\":{\"2\":7,\"1\":11,\"3\":45,\"4\":8}},{\"tk\":[222,17,222,25],\"els\":[\"0:3666\"],\"ct\":{\"2\":7,\"1\":11,\"4\":8,\"3\":45}},{\"tk\":[222,26,222,31],\"els\":[\"0:3666\"],\"ct\":{\"2\":7,\"3\":45,\"1\":11,\"4\":8}},{\"tk\":[222,31,222,32],\"els\":[\"0:3666\"],\"ct\":{\"2\":7,\"3\":45,\"1\":11,\"4\":8}},{\"tk\":[223,1,223,7],\"els\":[\"0:2443\"],\"ct\":{\"2\":7,\"1\":11,\"4\":8,\"3\":46}},{\"tk\":[223,8,223,16],\"els\":[\"0:2443\"],\"ct\":{\"2\":7,\"1\":11,\"3\":46,\"4\":8}},{\"tk\":[223,17,223,25],\"els\":[\"0:2443\"],\"ct\":{\"2\":7,\"1\":11,\"3\":46,\"4\":8}},{\"tk\":[223,26,223,35],\"els\":[\"0:2443\"],\"ct\":{\"4\":8,\"2\":7,\"1\":11,\"3\":46}},{\"tk\":[223,35,223,36],\"els\":[\"0:2443\"],\"ct\":{\"2\":7,\"1\":11,\"3\":46,\"4\":8}},{\"tk\":[224,1,224,7],\"els\":[\"0:4236\"],\"ct\":{\"2\":7,\"3\":47,\"1\":6,\"4\":8}},{\"tk\":[224,8,224,16],\"els\":[\"0:4236\"],\"ct\":{\"4\":8,\"2\":7,\"1\":6,\"3\":47}},{\"tk\":[224,17,224,25],\"els\":[\"0:4236\"],\"ct\":{\"2\":7,\"1\":6,\"3\":47,\"4\":8}},{\"tk\":[224,26,224,34],\"els\":[\"0:4236\"],\"ct\":{\"2\":7,\"3\":47,\"1\":6,\"4\":8}},{\"tk\":[224,34,224,35],\"els\":[\"0:4236\"],\"ct\":{\"2\":7,\"1\":6,\"4\":8,\"3\":47}},{\"tk\":[225,1,225,7],\"els\":[\"0:4234\"],\"ct\":{\"2\":7,\"1\":6,\"4\":8,\"3\":48}},{\"tk\":[225,8,225,16],\"els\":[\"0:4234\"],\"ct\":{\"4\":8,\"2\":7,\"3\":48,\"1\":6}},{\"tk\":[225,17,225,25],\"els\":[\"0:4234\"],\"ct\":{\"4\":8,\"3\":48,\"2\":7,\"1\":6}},{\"tk\":[225,26,225,34],\"els\":[\"0:4234\"],\"ct\":{\"3\":48,\"4\":8,\"2\":7,\"1\":6}},{\"tk\":[225,34,225,35],\"els\":[\"0:4234\"],\"ct\":{\"3\":48,\"4\":8,\"2\":7,\"1\":6}},{\"tk\":[226,1,226,7],\"els\":[\"0:3813\"],\"ct\":{\"4\":8,\"3\":49,\"2\":7,\"1\":6}},{\"tk\":[226,8,226,16],\"els\":[\"0:3813\"],\"ct\":{\"3\":49,\"4\":8,\"2\":7,\"1\":6}},{\"tk\":[226,17,226,25],\"els\":[\"0:3813\"],\"ct\":{\"3\":49,\"4\":8,\"2\":7,\"1\":6}},{\"tk\":[226,26,226,34],\"els\":[\"0:3813\"],\"ct\":{\"3\":49,\"4\":8,\"2\":7,\"1\":6}},{\"tk\":[226,34,226,35],\"els\":[\"0:3813\"],\"ct\":{\"3\":49,\"4\":8,\"2\":7,\"1\":6}},{\"tk\":[227,1,227,7],\"els\":[\"0:2791\"],\"ct\":{\"3\":50,\"4\":8,\"2\":7,\"1\":11}},{\"tk\":[227,8,227,16],\"els\":[\"0:2791\"],\"ct\":{\"4\":8,\"2\":7,\"3\":50,\"1\":11}},{\"tk\":[227,17,227,25],\"els\":[\"0:2791\"],\"ct\":{\"4\":8,\"3\":50,\"2\":7,\"1\":11}},{\"tk\":[227,26,227,29],\"els\":[\"0:2791\"],\"ct\":{\"4\":8,\"3\":50,\"2\":7,\"1\":11}},{\"tk\":[227,29,227,30],\"els\":[\"0:2791\"],\"ct\":{\"4\":8,\"3\":50,\"2\":7,\"1\":11}},{\"tk\":[227,30,227,31],\"els\":[\"0:2791\"],\"ct\":{\"4\":8,\"3\":50,\"2\":7,\"1\":11}},{\"tk\":[227,31,227,32],\"els\":[\"0:2791\"],\"ct\":{\"3\":50,\"2\":7,\"1\":11,\"4\":8}},{\"tk\":[227,32,227,33],\"els\":[\"0:2791\"],\"ct\":{\"2\":7,\"1\":11,\"3\":50,\"4\":8}},{\"tk\":[228,1,228,7],\"els\":[\"0:3090\"],\"ct\":{\"1\":11,\"2\":7,\"3\":51,\"4\":8}},{\"tk\":[228,8,228,16],\"els\":[\"0:3090\"],\"ct\":{\"2\":7,\"4\":8,\"3\":51,\"1\":11}},{\"tk\":[228,17,228,25],\"els\":[\"0:3090\"],\"ct\":{\"2\":7,\"4\":8,\"1\":11,\"3\":51}},{\"tk\":[228,26,228,41],\"els\":[\"0:3090\"],\"ct\":{\"2\":7,\"4\":8,\"3\":51,\"1\":11}},{\"tk\":[228,41,228,42],\"els\":[\"0:3090\"],\"ct\":{\"2\":7,\"1\":11,\"3\":51,\"4\":8}},{\"tk\":[228,42,228,43],\"els\":[\"0:3090\"],\"ct\":{\"2\":7,\"4\":8,\"3\":51,\"1\":11}},{\"tk\":[228,43,228,44],\"els\":[\"0:3090\"],\"ct\":{\"2\":7,\"4\":8,\"1\":11,\"3\":51}},{\"tk\":[228,44,228,45],\"els\":[\"0:3090\"],\"ct\":{\"1\":11,\"2\":7,\"3\":51,\"4\":8}},{\"tk\":[229,1,229,7],\"els\":[\"0:2830\"],\"ct\":{\"2\":7,\"4\":8,\"3\":52,\"1\":11}},{\"tk\":[229,8,229,16],\"els\":[\"0:2830\"],\"ct\":{\"2\":7,\"1\":11,\"3\":52,\"4\":8}},{\"tk\":[229,17,229,25],\"els\":[\"0:2830\"],\"ct\":{\"2\":7,\"3\":52,\"4\":8,\"1\":11}},{\"tk\":[229,26,229,36],\"els\":[\"0:2830\"],\"ct\":{\"2\":7,\"4\":8,\"3\":52,\"1\":11}},{\"tk\":[229,36,229,37],\"els\":[\"0:2830\"],\"ct\":{\"3\":52,\"2\":7,\"1\":11,\"4\":8}},{\"tk\":[230,1,230,7],\"els\":[\"0:4237\"],\"ct\":{\"1\":6,\"2\":7,\"3\":53,\"4\":8}},{\"tk\":[230,8,230,16],\"els\":[\"0:4237\"],\"ct\":{\"1\":6,\"2\":7,\"3\":53,\"4\":8}},{\"tk\":[230,17,230,25],\"els\":[\"0:4237\"],\"ct\":{\"2\":7,\"3\":53,\"4\":8,\"1\":6}},{\"tk\":[230,26,230,31],\"els\":[\"0:4237\"],\"ct\":{\"2\":7,\"4\":8,\"3\":53,\"1\":6}},{\"tk\":[230,31,230,32],\"els\":[\"0:4237\"],\"ct\":{\"2\":7,\"3\":53,\"4\":8,\"1\":6}},{\"tk\":[231,1,231,7],\"els\":[\"0:4232\"],\"ct\":{\"2\":7,\"4\":8,\"1\":6,\"3\":54}},{\"tk\":[231,8,231,16],\"els\":[\"0:4232\"],\"ct\":{\"2\":7,\"4\":8,\"1\":6,\"3\":54}},{\"tk\":[231,17,231,25],\"els\":[\"0:4232\"],\"ct\":{\"2\":7,\"3\":54,\"4\":8,\"1\":6}},{\"tk\":[231,26,231,31],\"els\":[\"0:4232\"],\"ct\":{\"2\":7,\"1\":6,\"3\":54,\"4\":8}},{\"tk\":[231,31,231,32],\"els\":[\"0:4232\"],\"ct\":{\"2\":7,\"1\":6,\"4\":8,\"3\":54}},{\"tk\":[232,1,232,7],\"els\":[\"0:3814\"],\"ct\":{\"2\":7,\"3\":55,\"4\":8,\"1\":6}},{\"tk\":[232,8,232,16],\"els\":[\"0:3814\"],\"ct\":{\"1\":6,\"2\":7,\"3\":55,\"4\":8}},{\"tk\":[232,17,232,25],\"els\":[\"0:3814\"],\"ct\":{\"2\":7,\"1\":6,\"3\":55,\"4\":8}},{\"tk\":[232,26,232,31],\"els\":[\"0:3814\"],\"ct\":{\"3\":55,\"2\":7,\"1\":6,\"4\":8}},{\"tk\":[232,31,232,32],\"els\":[\"0:3814\"],\"ct\":{\"2\":7,\"3\":55,\"4\":8,\"1\":6}},{\"tk\":[233,1,233,7],\"els\":[\"0:3568\"],\"ct\":{\"3\":56,\"2\":7,\"4\":8,\"1\":11}},{\"tk\":[233,8,233,16],\"els\":[\"0:3568\"],\"ct\":{\"1\":11,\"2\":7,\"3\":56,\"4\":8}},{\"tk\":[233,17,233,25],\"els\":[\"0:3568\"],\"ct\":{\"2\":7,\"1\":11,\"3\":56,\"4\":8}},{\"tk\":[233,26,233,34],\"els\":[\"0:3568\"],\"ct\":{\"2\":7,\"3\":56,\"4\":8,\"1\":11}},{\"tk\":[233,34,233,35],\"els\":[\"0:3568\"],\"ct\":{\"2\":7,\"4\":8,\"3\":56,\"1\":11}},{\"tk\":[234,1,234,7],\"els\":[\"0:2514\"],\"ct\":{\"1\":11,\"2\":7,\"3\":57,\"4\":8}},{\"tk\":[234,8,234,16],\"els\":[\"0:2514\"],\"ct\":{\"1\":11,\"2\":7,\"3\":57,\"4\":8}},{\"tk\":[234,17,234,25],\"els\":[\"0:2514\"],\"ct\":{\"1\":11,\"2\":7,\"3\":57,\"4\":8}},{\"tk\":[234,26,234,36],\"els\":[\"0:2514\"],\"ct\":{\"1\":11,\"2\":7,\"3\":57,\"4\":8}},{\"tk\":[234,36,234,37],\"els\":[\"0:2514\"],\"ct\":{\"2\":7,\"1\":11,\"3\":57,\"4\":8}},{\"tk\":[235,1,235,7],\"els\":[\"0:2654\"],\"ct\":{\"2\":7,\"1\":11,\"3\":58,\"4\":8}},{\"tk\":[235,8,235,16],\"els\":[\"0:2654\"],\"ct\":{\"1\":11,\"2\":7,\"3\":58,\"4\":8}},{\"tk\":[235,17,235,25],\"els\":[\"0:2654\"],\"ct\":{\"1\":11,\"2\":7,\"3\":58,\"4\":8}},{\"tk\":[235,26,235,39],\"els\":[\"0:2654\"],\"ct\":{\"1\":11,\"2\":7,\"3\":58,\"4\":8}},{\"tk\":[235,39,235,40],\"els\":[\"0:2654\"],\"ct\":{\"2\":7,\"3\":58,\"4\":8,\"1\":11}},{\"tk\":[236,1,236,7],\"els\":[\"0:2521\"],\"ct\":{\"2\":7,\"1\":11,\"3\":59,\"4\":8}},{\"tk\":[236,8,236,16],\"els\":[\"0:2521\"],\"ct\":{\"4\":8,\"1\":11,\"2\":7,\"3\":59}},{\"tk\":[236,17,236,25],\"els\":[\"0:2521\"],\"ct\":{\"2\":7,\"4\":8,\"1\":11,\"3\":59}},{\"tk\":[236,26,236,35],\"els\":[\"0:2521\"],\"ct\":{\"2\":7,\"1\":11,\"3\":59,\"4\":8}},{\"tk\":[236,35,236,36],\"els\":[\"0:2521\"],\"ct\":{\"2\":7,\"1\":11,\"3\":59,\"4\":8}},{\"tk\":[237,1,237,7],\"els\":[\"0:2444\"],\"ct\":{\"2\":7,\"1\":11,\"3\":60,\"4\":8}},{\"tk\":[237,8,237,16],\"els\":[\"0:2444\"],\"ct\":{\"2\":7,\"4\":8,\"3\":60,\"1\":11}},{\"tk\":[237,17,237,25],\"els\":[\"0:2444\"],\"ct\":{\"2\":7,\"1\":11,\"3\":60,\"4\":8}},{\"tk\":[237,26,237,38],\"els\":[\"0:2444\"],\"ct\":{\"2\":7,\"4\":8,\"1\":11,\"3\":60}},{\"tk\":[237,38,237,39],\"els\":[\"0:2444\"],\"ct\":{\"2\":7,\"3\":60,\"4\":8,\"1\":11}},{\"tk\":[238,1,238,7],\"els\":[\"0:3177\"],\"ct\":{\"2\":7,\"3\":61,\"1\":11,\"4\":8}},{\"tk\":[238,8,238,16],\"els\":[\"0:3177\"],\"ct\":{\"2\":7,\"3\":61,\"1\":11,\"4\":8}},{\"tk\":[238,17,238,25],\"els\":[\"0:3177\"],\"ct\":{\"3\":61,\"2\":7,\"1\":11,\"4\":8}},{\"tk\":[238,26,238,34],\"els\":[\"0:3177\"],\"ct\":{\"2\":7,\"4\":8,\"1\":11,\"3\":61}},{\"tk\":[238,34,238,35],\"els\":[\"0:3177\"],\"ct\":{\"2\":7,\"4\":8,\"3\":61,\"1\":11}},{\"tk\":[239,1,239,7],\"els\":[\"0:2687:159\"],\"ct\":{\"2\":7,\"4\":8,\"3\":62,\"1\":11}},{\"tk\":[239,8,239,16],\"els\":[\"0:2687:159\"],\"ct\":{\"2\":7,\"4\":8,\"3\":62,\"1\":11}},{\"tk\":[239,17,239,25],\"els\":[\"0:2687:159\"],\"ct\":{\"2\":7,\"4\":8,\"3\":62,\"1\":11}},{\"tk\":[239,26,239,36],\"els\":[\"0:2687:159\"],\"ct\":{\"2\":7,\"4\":8,\"3\":62,\"1\":11}},{\"tk\":[239,36,239,37],\"els\":[\"0:2687:159\"],\"ct\":{\"4\":8,\"1\":11,\"2\":7,\"3\":62}}]}}}","blocks":[{"RTWName":"<S4294967295>/CurrentController_INT","SIDString":"Foc_model_Matlab:2379"},{"RTWName":"<S4294967295>/Hall_INT","SIDString":"Foc_model_Matlab:1095"},{"RTWName":"<S4294967295>/Mux","SIDString":"Foc_model_Matlab:3292"},{"RTWName":"<S4294967295>/SCI_Rx_INT","SIDString":"Foc_model_Matlab:3296"},{"RTWName":"<S4294967295>/SW_INT","SIDString":"Foc_model_Matlab:1094"},{"RTWName":"<S1>/Iq_ref_PU","SIDString":"Foc_model_Matlab:2553"},{"RTWName":"<S1>/Feedbacks_sim","SIDString":"Foc_model_Matlab:2554"},{"RTWName":"<S1>/Pos_Sim","SIDString":"Foc_model_Matlab:2555"},{"RTWName":"<S1>/Trigger","SIDString":"Foc_model_Matlab:2557"},{"RTWName":"<S9>/Speed_PU","SIDString":"Foc_model_Matlab:4816"},{"RTWName":"<S9>/Iab_meas_PU","SIDString":"Foc_model_Matlab:2559"},{"RTWName":"<S9>/Pos_PU","SIDString":"Foc_model_Matlab:2560"},{"RTWName":"<S9>/Iq_ref_PU","SIDString":"Foc_model_Matlab:2561"},{"RTWName":"<S14>/a","SIDString":"Foc_model_Matlab:2562:478"},{"RTWName":"<S14>/b","SIDString":"Foc_model_Matlab:2562:677"},{"RTWName":"<S4294967295>/abc","SIDString":"Foc_model_Matlab:2562:637"},{"RTWName":"<S4294967295>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2562:639"},{"RTWName":"<S4294967295>/Demux","SIDString":"Foc_model_Matlab:2562:640"},{"RTWName":"<S4294967295>/Kalphabeta0","SIDString":"Foc_model_Matlab:2562:641"},{"RTWName":"<S4294967295>/Mux","SIDString":"Foc_model_Matlab:2562:643"},{"RTWName":"<S4294967295>/Sum","SIDString":"Foc_model_Matlab:2562:644"},{"RTWName":"<S4294967295>/Sum1","SIDString":"Foc_model_Matlab:2562:645"},{"RTWName":"<S4294967295>/Sum2","SIDString":"Foc_model_Matlab:2562:646"},{"RTWName":"<S4294967295>/one_by_3","SIDString":"Foc_model_Matlab:2562:648"},{"RTWName":"<S4294967295>/one_by_sqrt3_","SIDString":"Foc_model_Matlab:2562:649"},{"RTWName":"<S4294967295>/alphabeta0","SIDString":"Foc_model_Matlab:2562:650"},{"RTWName":"<S20>/a","SIDString":"Foc_model_Matlab:2562:656"},{"RTWName":"<S20>/b","SIDString":"Foc_model_Matlab:2562:657"},{"RTWName":"<S20>/Kalpha","SIDString":"Foc_model_Matlab:2562:652"},{"RTWName":"<S20>/Kbeta","SIDString":"Foc_model_Matlab:2562:653"},{"RTWName":"<S21>/a","SIDString":"Foc_model_Matlab:2562:629"},{"RTWName":"<S21>/b","SIDString":"Foc_model_Matlab:2562:630"},{"RTWName":"<S21>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2562:631"},{"RTWName":"<S21>/a16","SIDString":"Foc_model_Matlab:2562:632"},{"RTWName":"<S21>/a_plus_2b","SIDString":"Foc_model_Matlab:2562:633"},{"RTWName":"<S21>/one_by_sqrt3","SIDString":"Foc_model_Matlab:2562:634"},{"RTWName":"<S21>/Alpha","SIDString":"Foc_model_Matlab:2562:635"},{"RTWName":"<S21>/Beta","SIDString":"Foc_model_Matlab:2562:636"},{"RTWName":"<S20>/alpha","SIDString":"Foc_model_Matlab:2562:658"},{"RTWName":"<S20>/beta","SIDString":"Foc_model_Matlab:2562:659"},{"RTWName":"<S14>/Alpha","SIDString":"Foc_model_Matlab:2562:509"},{"RTWName":"<S14>/Beta","SIDString":"Foc_model_Matlab:2562:678"},{"RTWName":"<S15>/Id","SIDString":"Foc_model_Matlab:2564"},{"RTWName":"<S15>/Iq","SIDString":"Foc_model_Matlab:2565"},{"RTWName":"<S15>/Iq_ref_PU","SIDString":"Foc_model_Matlab:2566"},{"RTWName":"<S15>/Speed_PU","SIDString":"Foc_model_Matlab:4817"},{"RTWName":"<S22>/Id_fb","SIDString":"Foc_model_Matlab:3643"},{"RTWName":"<S22>/Iq_fb","SIDString":"Foc_model_Matlab:4827"},{"RTWName":"<S22>/wr","SIDString":"Foc_model_Matlab:4822"},{"RTWName":"<S22>/Constant8","SIDString":"Foc_model_Matlab:4824"},{"RTWName":"<S22>/Constant9","SIDString":"Foc_model_Matlab:4825"},{"RTWName":"<S22>/Discrete-Time\nIntegrator","SIDString":"Foc_model_Matlab:4204"},{"RTWName":"<S22>/Gain","SIDString":"Foc_model_Matlab:4826"},{"RTWName":"<S22>/Gain1","SIDString":"Foc_model_Matlab:4872"},{"RTWName":"<S22>/Gain2","SIDString":"Foc_model_Matlab:4871"},{"RTWName":"<S22>/Gain3","SIDString":"Foc_model_Matlab:4873"},{"RTWName":"<S22>/Gain4","SIDString":"Foc_model_Matlab:4874"},{"RTWName":"<S22>/Gain6","SIDString":"Foc_model_Matlab:4876"},{"RTWName":"<S22>/Ki2","SIDString":"Foc_model_Matlab:3661"},{"RTWName":"<S27>:1","SIDString":"Foc_model_Matlab:4203:1"},{"RTWName":"<S28>/Constant12","SIDString":"Foc_model_Matlab:4208"},{"RTWName":"<S28>/Constant13","SIDString":"Foc_model_Matlab:4209"},{"RTWName":"<S28>/Constant2","SIDString":"Foc_model_Matlab:4206"},{"RTWName":"<S28>/Data Store\nRead2","SIDString":"Foc_model_Matlab:4243"},{"RTWName":"<S28>/Data Store\nRead3","SIDString":"Foc_model_Matlab:4244"},{"RTWName":"<S28>/Data Store\nRead4","SIDString":"Foc_model_Matlab:4245"},{"RTWName":"<S28>/Mux1","SIDString":"Foc_model_Matlab:4247"},{"RTWName":"<S28>/Mux2","SIDString":"Foc_model_Matlab:4249"},{"RTWName":"<S28>/Variant Source3","SIDString":"Foc_model_Matlab:4248"},{"RTWName":"<S28>/Out1","SIDString":"Foc_model_Matlab:4854"},{"RTWName":"<S22>/Scope","SIDString":"Foc_model_Matlab:4212"},{"RTWName":"<S22>/Unit Delay","SIDString":"Foc_model_Matlab:4892"},{"RTWName":"<S22>/V_ref","SIDString":"Foc_model_Matlab:2580"},{"RTWName":"<S23>/Iq_ref","SIDString":"Foc_model_Matlab:3651"},{"RTWName":"<S23>/Iq_fb","SIDString":"Foc_model_Matlab:3652"},{"RTWName":"<S23>/Id_fb","SIDString":"Foc_model_Matlab:4828"},{"RTWName":"<S23>/wr","SIDString":"Foc_model_Matlab:4820"},{"RTWName":"<S23>/Constant10","SIDString":"Foc_model_Matlab:4220"},{"RTWName":"<S23>/Constant8","SIDString":"Foc_model_Matlab:4224"},{"RTWName":"<S23>/Constant9","SIDString":"Foc_model_Matlab:4225"},{"RTWName":"<S23>/Discrete-Time\nIntegrator","SIDString":"Foc_model_Matlab:4227"},{"RTWName":"<S23>/Gain","SIDString":"Foc_model_Matlab:4821"},{"RTWName":"<S23>/Gain1","SIDString":"Foc_model_Matlab:4868"},{"RTWName":"<S23>/Gain2","SIDString":"Foc_model_Matlab:4865"},{"RTWName":"<S23>/Gain3","SIDString":"Foc_model_Matlab:4867"},{"RTWName":"<S23>/Gain4","SIDString":"Foc_model_Matlab:4869"},{"RTWName":"<S23>/Gain5","SIDString":"Foc_model_Matlab:4870"},{"RTWName":"<S23>/Gain6","SIDString":"Foc_model_Matlab:4875"},{"RTWName":"<S23>/Ki2","SIDString":"Foc_model_Matlab:4228"},{"RTWName":"<S29>:1","SIDString":"Foc_model_Matlab:4229:1"},{"RTWName":"<S30>/Constant12","SIDString":"Foc_model_Matlab:4250"},{"RTWName":"<S30>/Constant13","SIDString":"Foc_model_Matlab:4251"},{"RTWName":"<S30>/Constant2","SIDString":"Foc_model_Matlab:4252"},{"RTWName":"<S30>/Data Store\nRead2","SIDString":"Foc_model_Matlab:4253"},{"RTWName":"<S30>/Data Store\nRead3","SIDString":"Foc_model_Matlab:4254"},{"RTWName":"<S30>/Data Store\nRead4","SIDString":"Foc_model_Matlab:4255"},{"RTWName":"<S30>/Mux1","SIDString":"Foc_model_Matlab:4257"},{"RTWName":"<S30>/Mux2","SIDString":"Foc_model_Matlab:4258"},{"RTWName":"<S30>/Variant Source3","SIDString":"Foc_model_Matlab:4259"},{"RTWName":"<S30>/Out1","SIDString":"Foc_model_Matlab:4852"},{"RTWName":"<S23>/Scope","SIDString":"Foc_model_Matlab:4230"},{"RTWName":"<S23>/Sum1","SIDString":"Foc_model_Matlab:4231"},{"RTWName":"<S23>/Unit Delay","SIDString":"Foc_model_Matlab:4891"},{"RTWName":"<S23>/V_ref","SIDString":"Foc_model_Matlab:2591"},{"RTWName":"<S24>/dRef","SIDString":"Foc_model_Matlab:2567:788"},{"RTWName":"<S24>/qRef","SIDString":"Foc_model_Matlab:2567:789"},{"RTWName":"<S31>/dqRef","SIDString":"Foc_model_Matlab:2567:1472"},{"RTWName":"<S31>/magSquare","SIDString":"Foc_model_Matlab:2567:1619"},{"RTWName":"<S31>/satLim","SIDString":"Foc_model_Matlab:2567:1473"},{"RTWName":"<S31>/satLimSq","SIDString":"Foc_model_Matlab:2567:1628"},{"RTWName":"<S31>/Action Port","SIDString":"Foc_model_Matlab:2567:1304"},{"RTWName":"<S31>/Data Type Conversion","SIDString":"Foc_model_Matlab:2567:1605"},{"RTWName":"<S31>/If","SIDString":"Foc_model_Matlab:2567:1546"},{"RTWName":"<S35>/dqRef","SIDString":"Foc_model_Matlab:2567:1565"},{"RTWName":"<S35>/satLim","SIDString":"Foc_model_Matlab:2567:1566"},{"RTWName":"<S35>/magUnsatSq","SIDString":"Foc_model_Matlab:2567:1567"},{"RTWName":"<S35>/Action Port","SIDString":"Foc_model_Matlab:2567:1549"},{"RTWName":"<S35>/Constant","SIDString":"Foc_model_Matlab:2567:1568"},{"RTWName":"<S35>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2567:1569"},{"RTWName":"<S35>/Divide","SIDString":"Foc_model_Matlab:2567:1672"},{"RTWName":"<S35>/Product","SIDString":"Foc_model_Matlab:2567:1666"},{"RTWName":"<S35>/Square Root","SIDString":"Foc_model_Matlab:2567:1571"},{"RTWName":"<S35>/Switch","SIDString":"Foc_model_Matlab:2567:1572"},{"RTWName":"<S35>/dqSat","SIDString":"Foc_model_Matlab:2567:1573"},{"RTWName":"<S31>/Merge","SIDString":"Foc_model_Matlab:2567:1338"},{"RTWName":"<S36>/dqRef","SIDString":"Foc_model_Matlab:2567:1460"},{"RTWName":"<S36>/Action Port","SIDString":"Foc_model_Matlab:2567:1555"},{"RTWName":"<S36>/dqSat","SIDString":"Foc_model_Matlab:2567:1462"},{"RTWName":"<S31>/Relational\nOperator","SIDString":"Foc_model_Matlab:2567:1606"},{"RTWName":"<S31>/dqRef1","SIDString":"Foc_model_Matlab:2567:1622"},{"RTWName":"<S31>/magSquare1","SIDString":"Foc_model_Matlab:2567:1620"},{"RTWName":"<S31>/dqSat","SIDString":"Foc_model_Matlab:2567:1305"},{"RTWName":"<S32>/dqRef","SIDString":"Foc_model_Matlab:2567:1371"},{"RTWName":"<S32>/satLim","SIDString":"Foc_model_Matlab:2567:1373"},{"RTWName":"<S32>/satLimSq","SIDString":"Foc_model_Matlab:2567:1631"},{"RTWName":"<S32>/satMethod","SIDString":"Foc_model_Matlab:2567:1413"},{"RTWName":"<S32>/Action Port","SIDString":"Foc_model_Matlab:2567:1365"},{"RTWName":"<S37>/u","SIDString":"Foc_model_Matlab:2567:1422:1"},{"RTWName":"<S37>/Compare","SIDString":"Foc_model_Matlab:2567:1422:2"},{"RTWName":"<S37>/Constant","SIDString":"Foc_model_Matlab:2567:1422:3"},{"RTWName":"<S37>/y","SIDString":"Foc_model_Matlab:2567:1422:4"},{"RTWName":"<S38>/u","SIDString":"Foc_model_Matlab:2567:1423:1"},{"RTWName":"<S38>/Compare","SIDString":"Foc_model_Matlab:2567:1423:2"},{"RTWName":"<S38>/Constant","SIDString":"Foc_model_Matlab:2567:1423:3"},{"RTWName":"<S38>/y","SIDString":"Foc_model_Matlab:2567:1423:4"},{"RTWName":"<S32>/Switch","SIDString":"Foc_model_Matlab:2567:1419"},{"RTWName":"<S32>/Switch1","SIDString":"Foc_model_Matlab:2567:1425"},{"RTWName":"<S39>/in","SIDString":"Foc_model_Matlab:2567:1415"},{"RTWName":"<S39>/Demux","SIDString":"Foc_model_Matlab:2567:1416"},{"RTWName":"<S39>/Mux","SIDString":"Foc_model_Matlab:2567:1417"},{"RTWName":"<S39>/out","SIDString":"Foc_model_Matlab:2567:1418"},{"RTWName":"<S40>/in","SIDString":"Foc_model_Matlab:2567:1427"},{"RTWName":"<S40>/Demux","SIDString":"Foc_model_Matlab:2567:1428"},{"RTWName":"<S40>/Mux","SIDString":"Foc_model_Matlab:2567:1429"},{"RTWName":"<S40>/out","SIDString":"Foc_model_Matlab:2567:1430"},{"RTWName":"<S41>/dqRef","SIDString":"Foc_model_Matlab:2567:1452"},{"RTWName":"<S41>/satLim","SIDString":"Foc_model_Matlab:2567:1453"},{"RTWName":"<S41>/satLimSq","SIDString":"Foc_model_Matlab:2567:1632"},{"RTWName":"<S41>/Data Type Conversion","SIDString":"Foc_model_Matlab:2567:1604"},{"RTWName":"<S41>/Demux","SIDString":"Foc_model_Matlab:2567:1412"},{"RTWName":"<S41>/From2","SIDString":"Foc_model_Matlab:2567:1393"},{"RTWName":"<S41>/From5","SIDString":"Foc_model_Matlab:2567:1396"},{"RTWName":"<S41>/Gain","SIDString":"Foc_model_Matlab:2567:1397"},{"RTWName":"<S41>/Goto2","SIDString":"Foc_model_Matlab:2567:1400"},{"RTWName":"<S41>/Goto4","SIDString":"Foc_model_Matlab:2567:1402"},{"RTWName":"<S41>/If","SIDString":"Foc_model_Matlab:2567:1578"},{"RTWName":"<S41>/Merge","SIDString":"Foc_model_Matlab:2567:1403"},{"RTWName":"<S41>/Mux","SIDString":"Foc_model_Matlab:2567:1449"},{"RTWName":"<S41>/Product","SIDString":"Foc_model_Matlab:2567:1575"},{"RTWName":"<S41>/Product2","SIDString":"Foc_model_Matlab:2567:1577"},{"RTWName":"<S41>/Relational\nOperator","SIDString":"Foc_model_Matlab:2567:1603"},{"RTWName":"<S41>/Sum","SIDString":"Foc_model_Matlab:2567:1410"},{"RTWName":"<S42>/up","SIDString":"Foc_model_Matlab:2567:1406:1"},{"RTWName":"<S42>/u","SIDString":"Foc_model_Matlab:2567:1406:2"},{"RTWName":"<S42>/lo","SIDString":"Foc_model_Matlab:2567:1406:3"},{"RTWName":"<S42>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2567:1406:4"},{"RTWName":"<S42>/Data Type\nPropagation","SIDString":"Foc_model_Matlab:2567:1406:5"},{"RTWName":"<S42>/LowerRelop1","SIDString":"Foc_model_Matlab:2567:1406:6"},{"RTWName":"<S42>/Switch","SIDString":"Foc_model_Matlab:2567:1406:7"},{"RTWName":"<S42>/Switch2","SIDString":"Foc_model_Matlab:2567:1406:8"},{"RTWName":"<S42>/UpperRelop","SIDString":"Foc_model_Matlab:2567:1406:9"},{"RTWName":"<S42>/y","SIDString":"Foc_model_Matlab:2567:1406:10"},{"RTWName":"<S43>/ref2satsquare","SIDString":"Foc_model_Matlab:2567:1382"},{"RTWName":"<S43>/ref2","SIDString":"Foc_model_Matlab:2567:1383"},{"RTWName":"<S43>/Action Port","SIDString":"Foc_model_Matlab:2567:1585"},{"RTWName":"<S43>/Constant","SIDString":"Foc_model_Matlab:2567:1664"},{"RTWName":"<S43>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2567:1665"},{"RTWName":"<S43>/Gain","SIDString":"Foc_model_Matlab:2567:1386"},{"RTWName":"<S43>/Sqrt","SIDString":"Foc_model_Matlab:2567:1388"},{"RTWName":"<S43>/Switch","SIDString":"Foc_model_Matlab:2567:1389"},{"RTWName":"<S43>/Switch1","SIDString":"Foc_model_Matlab:2567:1663"},{"RTWName":"<S43>/ref2sat","SIDString":"Foc_model_Matlab:2567:1390"},{"RTWName":"<S44>/ref2","SIDString":"Foc_model_Matlab:2567:1376"},{"RTWName":"<S44>/Action Port","SIDString":"Foc_model_Matlab:2567:1581"},{"RTWName":"<S44>/ref2sat","SIDString":"Foc_model_Matlab:2567:1379"},{"RTWName":"<S41>/dqSat","SIDString":"Foc_model_Matlab:2567:1454"},{"RTWName":"<S32>/satMethod1","SIDString":"Foc_model_Matlab:2567:1490"},{"RTWName":"<S32>/dqSat","SIDString":"Foc_model_Matlab:2567:1411"},{"RTWName":"<S24>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2567:1431"},{"RTWName":"<S24>/Demux","SIDString":"Foc_model_Matlab:2567:1158"},{"RTWName":"<S24>/From","SIDString":"Foc_model_Matlab:2567:1630"},{"RTWName":"<S24>/From2","SIDString":"Foc_model_Matlab:2567:1638"},{"RTWName":"<S24>/From3","SIDString":"Foc_model_Matlab:2567:1362"},{"RTWName":"<S24>/From4","SIDString":"Foc_model_Matlab:2567:1489"},{"RTWName":"<S24>/From6","SIDString":"Foc_model_Matlab:2567:1370"},{"RTWName":"<S24>/Goto","SIDString":"Foc_model_Matlab:2567:1629"},{"RTWName":"<S24>/Goto1","SIDString":"Foc_model_Matlab:2567:1361"},{"RTWName":"<S24>/Goto3","SIDString":"Foc_model_Matlab:2567:1279"},{"RTWName":"<S24>/Goto4","SIDString":"Foc_model_Matlab:2567:1637"},{"RTWName":"<S24>/If","SIDString":"Foc_model_Matlab:2567:1301"},{"RTWName":"<S33>/satLimIn","SIDString":"Foc_model_Matlab:2567:1516"},{"RTWName":"<S33>/satMethodIn","SIDString":"Foc_model_Matlab:2567:1517"},{"RTWName":"<S33>/ChosenMethod","SIDString":"Foc_model_Matlab:2567:1513"},{"RTWName":"<S33>/Constant3","SIDString":"Foc_model_Matlab:2567:1280"},{"RTWName":"<S33>/Data Type\nDuplicate1","SIDString":"Foc_model_Matlab:2567:1432"},{"RTWName":"<S33>/Data Type\nDuplicate2","SIDString":"Foc_model_Matlab:2567:1511"},{"RTWName":"<S33>/Product","SIDString":"Foc_model_Matlab:2567:1636"},{"RTWName":"<S33>/Switch","SIDString":"Foc_model_Matlab:2567:1282"},{"RTWName":"<S33>/Switch1","SIDString":"Foc_model_Matlab:2567:1507"},{"RTWName":"<S33>/enableInportSatLim","SIDString":"Foc_model_Matlab:2567:1281"},{"RTWName":"<S33>/enableInportSatMethod","SIDString":"Foc_model_Matlab:2567:1506"},{"RTWName":"<S33>/satLim","SIDString":"Foc_model_Matlab:2567:1518"},{"RTWName":"<S33>/satLimSq","SIDString":"Foc_model_Matlab:2567:1635"},{"RTWName":"<S33>/satMethod","SIDString":"Foc_model_Matlab:2567:1519"},{"RTWName":"<S34>/dqRef","SIDString":"Foc_model_Matlab:2567:1444"},{"RTWName":"<S34>/Demux1","SIDString":"Foc_model_Matlab:2567:1434"},{"RTWName":"<S34>/Product","SIDString":"Foc_model_Matlab:2567:1557"},{"RTWName":"<S34>/Product1","SIDString":"Foc_model_Matlab:2567:1559"},{"RTWName":"<S34>/Sqrt","SIDString":"Foc_model_Matlab:2567:1204"},{"RTWName":"<S34>/Sum1","SIDString":"Foc_model_Matlab:2567:1207"},{"RTWName":"<S34>/mag","SIDString":"Foc_model_Matlab:2567:1445"},{"RTWName":"<S34>/magSquare","SIDString":"Foc_model_Matlab:2567:1616"},{"RTWName":"<S24>/Merge","SIDString":"Foc_model_Matlab:2567:1367"},{"RTWName":"<S24>/Mux","SIDString":"Foc_model_Matlab:2567:1268"},{"RTWName":"<S24>/ReplaceInport_satLim","SIDString":"Foc_model_Matlab:2567:1660"},{"RTWName":"<S24>/ReplaceInport_satMethod","SIDString":"Foc_model_Matlab:2567:1655"},{"RTWName":"<S24>/dSat","SIDString":"Foc_model_Matlab:2567:886"},{"RTWName":"<S24>/qSat","SIDString":"Foc_model_Matlab:2567:887"},{"RTWName":"<S24>/magUnsat","SIDString":"Foc_model_Matlab:2567:801"},{"RTWName":"<S15>/Id_ref_PU","SIDString":"Foc_model_Matlab:4829"},{"RTWName":"<S15>/Mux","SIDString":"Foc_model_Matlab:2569"},{"RTWName":"<S25>/Iq","SIDString":"Foc_model_Matlab:3627"},{"RTWName":"<S25>/From","SIDString":"Foc_model_Matlab:3617"},{"RTWName":"<S25>/Gain","SIDString":"Foc_model_Matlab:3606"},{"RTWName":"<S25>/Gain1","SIDString":"Foc_model_Matlab:3618"},{"RTWName":"<S25>/Product","SIDString":"Foc_model_Matlab:3607"},{"RTWName":"<S25>/Out1","SIDString":"Foc_model_Matlab:3628"},{"RTWName":"<S26>/Id","SIDString":"Foc_model_Matlab:3623"},{"RTWName":"<S26>/Cast To Single","SIDString":"Foc_model_Matlab:3610"},{"RTWName":"<S26>/Constant4","SIDString":"Foc_model_Matlab:3611"},{"RTWName":"<S26>/From","SIDString":"Foc_model_Matlab:3620"},{"RTWName":"<S26>/Gain","SIDString":"Foc_model_Matlab:3612"},{"RTWName":"<S26>/Gain1","SIDString":"Foc_model_Matlab:3621"},{"RTWName":"<S26>/Product","SIDString":"Foc_model_Matlab:3613"},{"RTWName":"<S26>/Product1","SIDString":"Foc_model_Matlab:3614"},{"RTWName":"<S26>/Out1","SIDString":"Foc_model_Matlab:3624"},{"RTWName":"<S26>/Out2","SIDString":"Foc_model_Matlab:3625"},{"RTWName":"<S15>/Signal Copy","SIDString":"Foc_model_Matlab:3666"},{"RTWName":"<S15>/Signal Copy1","SIDString":"Foc_model_Matlab:3667"},{"RTWName":"<S15>/Sum","SIDString":"Foc_model_Matlab:3662"},{"RTWName":"<S15>/Sum1","SIDString":"Foc_model_Matlab:3629"},{"RTWName":"<S15>/Terminator","SIDString":"Foc_model_Matlab:2592"},{"RTWName":"<S15>/Vd_ref","SIDString":"Foc_model_Matlab:2593"},{"RTWName":"<S15>/Vq_ref","SIDString":"Foc_model_Matlab:2594"},{"RTWName":"<S15>/Idq","SIDString":"Foc_model_Matlab:2595"},{"RTWName":"<S9>/Demux","SIDString":"Foc_model_Matlab:2596"},{"RTWName":"<S9>/From","SIDString":"Foc_model_Matlab:2597"},{"RTWName":"<S9>/From1","SIDString":"Foc_model_Matlab:2598"},{"RTWName":"<S9>/Goto","SIDString":"Foc_model_Matlab:2599"},{"RTWName":"<S9>/Goto1","SIDString":"Foc_model_Matlab:2600"},{"RTWName":"<S16>/Ds","SIDString":"Foc_model_Matlab:2601:252"},{"RTWName":"<S16>/Qs","SIDString":"Foc_model_Matlab:2601:1014"},{"RTWName":"<S16>/Sin","SIDString":"Foc_model_Matlab:2601:430"},{"RTWName":"<S16>/Cos","SIDString":"Foc_model_Matlab:2601:1021"},{"RTWName":"<S4294967295>/Theta","SIDString":"Foc_model_Matlab:2601:850:501"},{"RTWName":"<S51>/Theta","SIDString":"Foc_model_Matlab:2601:850:517"},{"RTWName":"<S51>/SinCos","SIDString":"Foc_model_Matlab:2601:850:518"},{"RTWName":"<S51>/thetaUnit","SIDString":"Foc_model_Matlab:2601:850:524"},{"RTWName":"<S51>/sin","SIDString":"Foc_model_Matlab:2601:850:519"},{"RTWName":"<S51>/cos","SIDString":"Foc_model_Matlab:2601:850:520"},{"RTWName":"<S52>/Theta","SIDString":"Foc_model_Matlab:2601:850:76:458"},{"RTWName":"<S52>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2601:850:76:545"},{"RTWName":"<S52>/Data Type\nPropagation","SIDString":"Foc_model_Matlab:2601:850:76:673"},{"RTWName":"<S52>/Data Type Conversion1","SIDString":"Foc_model_Matlab:2601:850:76:653"},{"RTWName":"<S52>/Get_FractionVal","SIDString":"Foc_model_Matlab:2601:850:76:630"},{"RTWName":"<S52>/Get_Integer","SIDString":"Foc_model_Matlab:2601:850:76:608"},{"RTWName":"<S54>/In1","SIDString":"Foc_model_Matlab:2601:850:76:706"},{"RTWName":"<S54>/In2","SIDString":"Foc_model_Matlab:2601:850:76:707"},{"RTWName":"<S54>/Demux","SIDString":"Foc_model_Matlab:2601:850:76:613"},{"RTWName":"<S54>/Product","SIDString":"Foc_model_Matlab:2601:850:76:616"},{"RTWName":"<S54>/Product1","SIDString":"Foc_model_Matlab:2601:850:76:621"},{"RTWName":"<S54>/Sum3","SIDString":"Foc_model_Matlab:2601:850:76:614"},{"RTWName":"<S54>/Sum4","SIDString":"Foc_model_Matlab:2601:850:76:615"},{"RTWName":"<S54>/Sum5","SIDString":"Foc_model_Matlab:2601:850:76:622"},{"RTWName":"<S54>/Sum6","SIDString":"Foc_model_Matlab:2601:850:76:623"},{"RTWName":"<S54>/Out1","SIDString":"Foc_model_Matlab:2601:850:76:708"},{"RTWName":"<S54>/Out2","SIDString":"Foc_model_Matlab:2601:850:76:709"},{"RTWName":"<S52>/Lookup","SIDString":"Foc_model_Matlab:2601:850:76:557"},{"RTWName":"<S52>/Sum","SIDString":"Foc_model_Matlab:2601:850:76:610"},{"RTWName":"<S52>/Sum2","SIDString":"Foc_model_Matlab:2601:850:76:612"},{"RTWName":"<S55>/In1","SIDString":"Foc_model_Matlab:2601:850:76:668"},{"RTWName":"<S55>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2601:850:76:692"},{"RTWName":"<S55>/Data Type Conversion","SIDString":"Foc_model_Matlab:2601:850:76:702"},{"RTWName":"<S55>/If","SIDString":"Foc_model_Matlab:2601:850:76:683"},{"RTWName":"<S57>/In1","SIDString":"Foc_model_Matlab:2601:850:76:685"},{"RTWName":"<S57>/Action Port","SIDString":"Foc_model_Matlab:2601:850:76:686"},{"RTWName":"<S57>/Convert_back","SIDString":"Foc_model_Matlab:2601:850:76:695"},{"RTWName":"<S57>/Convert_uint16","SIDString":"Foc_model_Matlab:2601:850:76:694"},{"RTWName":"<S57>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2601:850:76:679"},{"RTWName":"<S57>/Sum","SIDString":"Foc_model_Matlab:2601:850:76:693"},{"RTWName":"<S57>/Out1","SIDString":"Foc_model_Matlab:2601:850:76:687"},{"RTWName":"<S58>/In1","SIDString":"Foc_model_Matlab:2601:850:76:689"},{"RTWName":"<S58>/Action Port","SIDString":"Foc_model_Matlab:2601:850:76:690"},{"RTWName":"<S58>/Convert_back","SIDString":"Foc_model_Matlab:2601:850:76:698"},{"RTWName":"<S58>/Convert_uint16","SIDString":"Foc_model_Matlab:2601:850:76:697"},{"RTWName":"<S58>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2601:850:76:699"},{"RTWName":"<S58>/Sum","SIDString":"Foc_model_Matlab:2601:850:76:700"},{"RTWName":"<S58>/Out1","SIDString":"Foc_model_Matlab:2601:850:76:691"},{"RTWName":"<S55>/Merge","SIDString":"Foc_model_Matlab:2601:850:76:696"},{"RTWName":"<S55>/convert_pu","SIDString":"Foc_model_Matlab:2601:850:76:652"},{"RTWName":"<S55>/Out1","SIDString":"Foc_model_Matlab:2601:850:76:669"},{"RTWName":"<S56>/In1","SIDString":"Foc_model_Matlab:2601:850:76:714"},{"RTWName":"<S59>/In1","SIDString":"Foc_model_Matlab:2601:850:76:716"},{"RTWName":"<S59>/Data Type Conversion","SIDString":"Foc_model_Matlab:2601:850:76:723"},{"RTWName":"<S59>/Out1","SIDString":"Foc_model_Matlab:2601:850:76:717"},{"RTWName":"<S60>/In1","SIDString":"Foc_model_Matlab:2601:850:76:719"},{"RTWName":"<S60>/Out1","SIDString":"Foc_model_Matlab:2601:850:76:720"},{"RTWName":"<S56>/Out1","SIDString":"Foc_model_Matlab:2601:850:76:721"},{"RTWName":"<S52>/indexing","SIDString":"Foc_model_Matlab:2601:850:76:605"},{"RTWName":"<S52>/offset","SIDString":"Foc_model_Matlab:2601:850:76:657"},{"RTWName":"<S52>/sine_table_values","SIDString":"Foc_model_Matlab:2601:850:76:549"},{"RTWName":"<S52>/sin","SIDString":"Foc_model_Matlab:2601:850:76:248"},{"RTWName":"<S52>/cos","SIDString":"Foc_model_Matlab:2601:850:76:531"},{"RTWName":"<S53>/Theta","SIDString":"Foc_model_Matlab:2601:850:529"},{"RTWName":"<S53>/Trig Fcn IQN","SIDString":"Foc_model_Matlab:2601:850:530"},{"RTWName":"<S53>/Trig Fcn IQN1","SIDString":"Foc_model_Matlab:2601:850:533"},{"RTWName":"<S53>/sin","SIDString":"Foc_model_Matlab:2601:850:531"},{"RTWName":"<S53>/cos","SIDString":"Foc_model_Matlab:2601:850:532"},{"RTWName":"<S4294967295>/sin","SIDString":"Foc_model_Matlab:2601:850:508"},{"RTWName":"<S4294967295>/cos","SIDString":"Foc_model_Matlab:2601:850:510"},{"RTWName":"<S4294967295>/Ds","SIDString":"Foc_model_Matlab:2601:907"},{"RTWName":"<S4294967295>/sin","SIDString":"Foc_model_Matlab:2601:905"},{"RTWName":"<S4294967295>/cos","SIDString":"Foc_model_Matlab:2601:906"},{"RTWName":"<S4294967295>/Demux","SIDString":"Foc_model_Matlab:2601:933"},{"RTWName":"<S4294967295>/Mux","SIDString":"Foc_model_Matlab:2601:931"},{"RTWName":"<S61>/Ds","SIDString":"Foc_model_Matlab:2601:985"},{"RTWName":"<S61>/Qs","SIDString":"Foc_model_Matlab:2601:986"},{"RTWName":"<S61>/sin","SIDString":"Foc_model_Matlab:2601:987"},{"RTWName":"<S61>/cos","SIDString":"Foc_model_Matlab:2601:988"},{"RTWName":"<S61>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2601:989"},{"RTWName":"<S61>/Data Type\nDuplicate1","SIDString":"Foc_model_Matlab:2601:990"},{"RTWName":"<S62>/A","SIDString":"Foc_model_Matlab:2601:992"},{"RTWName":"<S62>/B","SIDString":"Foc_model_Matlab:2601:993"},{"RTWName":"<S62>/D_axis_aligned","SIDString":"Foc_model_Matlab:2601:994"},{"RTWName":"<S62>/Demux","SIDString":"Foc_model_Matlab:2601:995"},{"RTWName":"<S62>/Offset","SIDString":"Foc_model_Matlab:2601:996"},{"RTWName":"<S62>/Q_axis_aligned","SIDString":"Foc_model_Matlab:2601:997"},{"RTWName":"<S62>/Switch","SIDString":"Foc_model_Matlab:2601:998"},{"RTWName":"<S62>/Unary_Minus","SIDString":"Foc_model_Matlab:2601:999"},{"RTWName":"<S62>/Alpha","SIDString":"Foc_model_Matlab:2601:1000"},{"RTWName":"<S62>/Beta","SIDString":"Foc_model_Matlab:2601:1001"},{"RTWName":"<S61>/a16","SIDString":"Foc_model_Matlab:2601:1002"},{"RTWName":"<S61>/dcos","SIDString":"Foc_model_Matlab:2601:1003"},{"RTWName":"<S61>/dsin","SIDString":"Foc_model_Matlab:2601:1004"},{"RTWName":"<S61>/qcos","SIDString":"Foc_model_Matlab:2601:1005"},{"RTWName":"<S61>/qsin","SIDString":"Foc_model_Matlab:2601:1006"},{"RTWName":"<S61>/sum_alpha","SIDString":"Foc_model_Matlab:2601:1007"},{"RTWName":"<S61>/sum_beta","SIDString":"Foc_model_Matlab:2601:1008"},{"RTWName":"<S61>/Alpha","SIDString":"Foc_model_Matlab:2601:1009"},{"RTWName":"<S61>/Beta","SIDString":"Foc_model_Matlab:2601:1010"},{"RTWName":"<S4294967295>/Alpha","SIDString":"Foc_model_Matlab:2601:929"},{"RTWName":"<S45>/Ds","SIDString":"Foc_model_Matlab:2601:779"},{"RTWName":"<S45>/Qs","SIDString":"Foc_model_Matlab:2601:780"},{"RTWName":"<S45>/sin","SIDString":"Foc_model_Matlab:2601:781"},{"RTWName":"<S45>/cos","SIDString":"Foc_model_Matlab:2601:782"},{"RTWName":"<S45>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2601:760"},{"RTWName":"<S45>/Data Type\nDuplicate1","SIDString":"Foc_model_Matlab:2601:762"},{"RTWName":"<S46>/A","SIDString":"Foc_model_Matlab:2601:749"},{"RTWName":"<S46>/B","SIDString":"Foc_model_Matlab:2601:750"},{"RTWName":"<S46>/D_axis_aligned","SIDString":"Foc_model_Matlab:2601:751"},{"RTWName":"<S46>/Demux","SIDString":"Foc_model_Matlab:2601:752"},{"RTWName":"<S46>/Offset","SIDString":"Foc_model_Matlab:2601:753"},{"RTWName":"<S46>/Q_axis_aligned","SIDString":"Foc_model_Matlab:2601:754"},{"RTWName":"<S46>/Switch","SIDString":"Foc_model_Matlab:2601:755"},{"RTWName":"<S46>/Unary_Minus","SIDString":"Foc_model_Matlab:2601:756"},{"RTWName":"<S46>/Alpha","SIDString":"Foc_model_Matlab:2601:757"},{"RTWName":"<S46>/Beta","SIDString":"Foc_model_Matlab:2601:758"},{"RTWName":"<S45>/a16","SIDString":"Foc_model_Matlab:2601:761"},{"RTWName":"<S45>/dcos","SIDString":"Foc_model_Matlab:2601:431"},{"RTWName":"<S45>/dsin","SIDString":"Foc_model_Matlab:2601:435"},{"RTWName":"<S45>/qcos","SIDString":"Foc_model_Matlab:2601:434"},{"RTWName":"<S45>/qsin","SIDString":"Foc_model_Matlab:2601:433"},{"RTWName":"<S45>/sum_alpha","SIDString":"Foc_model_Matlab:2601:432"},{"RTWName":"<S45>/sum_beta","SIDString":"Foc_model_Matlab:2601:436"},{"RTWName":"<S45>/Alpha","SIDString":"Foc_model_Matlab:2601:783"},{"RTWName":"<S45>/Beta","SIDString":"Foc_model_Matlab:2601:784"},{"RTWName":"<S16>/Alpha","SIDString":"Foc_model_Matlab:2601:268"},{"RTWName":"<S16>/Beta","SIDString":"Foc_model_Matlab:2601:1013"},{"RTWName":"<S9>/Mux1","SIDString":"Foc_model_Matlab:2602"},{"RTWName":"<S17>/Alpha","SIDString":"Foc_model_Matlab:2603:231"},{"RTWName":"<S17>/Beta","SIDString":"Foc_model_Matlab:2603:744"},{"RTWName":"<S17>/Sin","SIDString":"Foc_model_Matlab:2603:429"},{"RTWName":"<S17>/Cos","SIDString":"Foc_model_Matlab:2603:752"},{"RTWName":"<S4294967295>/Theta","SIDString":"Foc_model_Matlab:2603:558"},{"RTWName":"<S67>/Theta","SIDString":"Foc_model_Matlab:2603:559:501"},{"RTWName":"<S68>/Theta","SIDString":"Foc_model_Matlab:2603:559:517"},{"RTWName":"<S68>/SinCos","SIDString":"Foc_model_Matlab:2603:559:518"},{"RTWName":"<S68>/thetaUnit","SIDString":"Foc_model_Matlab:2603:559:524"},{"RTWName":"<S68>/sin","SIDString":"Foc_model_Matlab:2603:559:519"},{"RTWName":"<S68>/cos","SIDString":"Foc_model_Matlab:2603:559:520"},{"RTWName":"<S69>/Theta","SIDString":"Foc_model_Matlab:2603:559:76:458"},{"RTWName":"<S69>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2603:559:76:545"},{"RTWName":"<S69>/Data Type\nPropagation","SIDString":"Foc_model_Matlab:2603:559:76:673"},{"RTWName":"<S69>/Data Type Conversion1","SIDString":"Foc_model_Matlab:2603:559:76:653"},{"RTWName":"<S69>/Get_FractionVal","SIDString":"Foc_model_Matlab:2603:559:76:630"},{"RTWName":"<S69>/Get_Integer","SIDString":"Foc_model_Matlab:2603:559:76:608"},{"RTWName":"<S71>/In1","SIDString":"Foc_model_Matlab:2603:559:76:706"},{"RTWName":"<S71>/In2","SIDString":"Foc_model_Matlab:2603:559:76:707"},{"RTWName":"<S71>/Demux","SIDString":"Foc_model_Matlab:2603:559:76:613"},{"RTWName":"<S71>/Product","SIDString":"Foc_model_Matlab:2603:559:76:616"},{"RTWName":"<S71>/Product1","SIDString":"Foc_model_Matlab:2603:559:76:621"},{"RTWName":"<S71>/Sum3","SIDString":"Foc_model_Matlab:2603:559:76:614"},{"RTWName":"<S71>/Sum4","SIDString":"Foc_model_Matlab:2603:559:76:615"},{"RTWName":"<S71>/Sum5","SIDString":"Foc_model_Matlab:2603:559:76:622"},{"RTWName":"<S71>/Sum6","SIDString":"Foc_model_Matlab:2603:559:76:623"},{"RTWName":"<S71>/Out1","SIDString":"Foc_model_Matlab:2603:559:76:708"},{"RTWName":"<S71>/Out2","SIDString":"Foc_model_Matlab:2603:559:76:709"},{"RTWName":"<S69>/Lookup","SIDString":"Foc_model_Matlab:2603:559:76:557"},{"RTWName":"<S69>/Sum","SIDString":"Foc_model_Matlab:2603:559:76:610"},{"RTWName":"<S69>/Sum2","SIDString":"Foc_model_Matlab:2603:559:76:612"},{"RTWName":"<S72>/In1","SIDString":"Foc_model_Matlab:2603:559:76:668"},{"RTWName":"<S72>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2603:559:76:692"},{"RTWName":"<S72>/Data Type Conversion","SIDString":"Foc_model_Matlab:2603:559:76:702"},{"RTWName":"<S72>/If","SIDString":"Foc_model_Matlab:2603:559:76:683"},{"RTWName":"<S74>/In1","SIDString":"Foc_model_Matlab:2603:559:76:685"},{"RTWName":"<S74>/Action Port","SIDString":"Foc_model_Matlab:2603:559:76:686"},{"RTWName":"<S74>/Convert_back","SIDString":"Foc_model_Matlab:2603:559:76:695"},{"RTWName":"<S74>/Convert_uint16","SIDString":"Foc_model_Matlab:2603:559:76:694"},{"RTWName":"<S74>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2603:559:76:679"},{"RTWName":"<S74>/Sum","SIDString":"Foc_model_Matlab:2603:559:76:693"},{"RTWName":"<S74>/Out1","SIDString":"Foc_model_Matlab:2603:559:76:687"},{"RTWName":"<S75>/In1","SIDString":"Foc_model_Matlab:2603:559:76:689"},{"RTWName":"<S75>/Action Port","SIDString":"Foc_model_Matlab:2603:559:76:690"},{"RTWName":"<S75>/Convert_back","SIDString":"Foc_model_Matlab:2603:559:76:698"},{"RTWName":"<S75>/Convert_uint16","SIDString":"Foc_model_Matlab:2603:559:76:697"},{"RTWName":"<S75>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2603:559:76:699"},{"RTWName":"<S75>/Sum","SIDString":"Foc_model_Matlab:2603:559:76:700"},{"RTWName":"<S75>/Out1","SIDString":"Foc_model_Matlab:2603:559:76:691"},{"RTWName":"<S72>/Merge","SIDString":"Foc_model_Matlab:2603:559:76:696"},{"RTWName":"<S72>/convert_pu","SIDString":"Foc_model_Matlab:2603:559:76:652"},{"RTWName":"<S72>/Out1","SIDString":"Foc_model_Matlab:2603:559:76:669"},{"RTWName":"<S73>/In1","SIDString":"Foc_model_Matlab:2603:559:76:714"},{"RTWName":"<S76>/In1","SIDString":"Foc_model_Matlab:2603:559:76:716"},{"RTWName":"<S76>/Data Type Conversion","SIDString":"Foc_model_Matlab:2603:559:76:723"},{"RTWName":"<S76>/Out1","SIDString":"Foc_model_Matlab:2603:559:76:717"},{"RTWName":"<S77>/In1","SIDString":"Foc_model_Matlab:2603:559:76:719"},{"RTWName":"<S77>/Out1","SIDString":"Foc_model_Matlab:2603:559:76:720"},{"RTWName":"<S73>/Out1","SIDString":"Foc_model_Matlab:2603:559:76:721"},{"RTWName":"<S69>/indexing","SIDString":"Foc_model_Matlab:2603:559:76:605"},{"RTWName":"<S69>/offset","SIDString":"Foc_model_Matlab:2603:559:76:657"},{"RTWName":"<S69>/sine_table_values","SIDString":"Foc_model_Matlab:2603:559:76:549"},{"RTWName":"<S69>/sin","SIDString":"Foc_model_Matlab:2603:559:76:248"},{"RTWName":"<S69>/cos","SIDString":"Foc_model_Matlab:2603:559:76:531"},{"RTWName":"<S70>/Theta","SIDString":"Foc_model_Matlab:2603:559:529"},{"RTWName":"<S70>/Trig Fcn IQN","SIDString":"Foc_model_Matlab:2603:559:530"},{"RTWName":"<S70>/Trig Fcn IQN1","SIDString":"Foc_model_Matlab:2603:559:533"},{"RTWName":"<S70>/sin","SIDString":"Foc_model_Matlab:2603:559:531"},{"RTWName":"<S70>/cos","SIDString":"Foc_model_Matlab:2603:559:532"},{"RTWName":"<S67>/sin","SIDString":"Foc_model_Matlab:2603:559:508"},{"RTWName":"<S67>/cos","SIDString":"Foc_model_Matlab:2603:559:510"},{"RTWName":"<S4294967295>/Sin","SIDString":"Foc_model_Matlab:2603:560"},{"RTWName":"<S4294967295>/Cos","SIDString":"Foc_model_Matlab:2603:561"},{"RTWName":"<S4294967295>/AlphaBetaZero","SIDString":"Foc_model_Matlab:2603:531"},{"RTWName":"<S4294967295>/sine","SIDString":"Foc_model_Matlab:2603:532"},{"RTWName":"<S4294967295>/cos","SIDString":"Foc_model_Matlab:2603:533"},{"RTWName":"<S4294967295>/Demux","SIDString":"Foc_model_Matlab:2603:536"},{"RTWName":"<S4294967295>/Mux","SIDString":"Foc_model_Matlab:2603:539"},{"RTWName":"<S78>/Alpha","SIDString":"Foc_model_Matlab:2603:708"},{"RTWName":"<S78>/Beta","SIDString":"Foc_model_Matlab:2603:709"},{"RTWName":"<S78>/sine","SIDString":"Foc_model_Matlab:2603:710"},{"RTWName":"<S78>/cos","SIDString":"Foc_model_Matlab:2603:711"},{"RTWName":"<S78>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2603:712"},{"RTWName":"<S78>/Data Type\nDuplicate1","SIDString":"Foc_model_Matlab:2603:713"},{"RTWName":"<S79>/d","SIDString":"Foc_model_Matlab:2603:715"},{"RTWName":"<S79>/q","SIDString":"Foc_model_Matlab:2603:716"},{"RTWName":"<S79>/D_axis_aligned","SIDString":"Foc_model_Matlab:2603:717"},{"RTWName":"<S79>/Demux","SIDString":"Foc_model_Matlab:2603:718"},{"RTWName":"<S79>/Offset","SIDString":"Foc_model_Matlab:2603:719"},{"RTWName":"<S79>/Q_axis_aligned","SIDString":"Foc_model_Matlab:2603:720"},{"RTWName":"<S79>/Switch","SIDString":"Foc_model_Matlab:2603:721"},{"RTWName":"<S79>/Unary_Minus","SIDString":"Foc_model_Matlab:2603:722"},{"RTWName":"<S79>/d_axis","SIDString":"Foc_model_Matlab:2603:723"},{"RTWName":"<S79>/q_axis","SIDString":"Foc_model_Matlab:2603:724"},{"RTWName":"<S78>/a16","SIDString":"Foc_model_Matlab:2603:725"},{"RTWName":"<S78>/acos","SIDString":"Foc_model_Matlab:2603:726"},{"RTWName":"<S78>/asin","SIDString":"Foc_model_Matlab:2603:727"},{"RTWName":"<S78>/bcos","SIDString":"Foc_model_Matlab:2603:728"},{"RTWName":"<S78>/bsin","SIDString":"Foc_model_Matlab:2603:729"},{"RTWName":"<S78>/sum_Ds","SIDString":"Foc_model_Matlab:2603:730"},{"RTWName":"<S78>/sum_Qs","SIDString":"Foc_model_Matlab:2603:731"},{"RTWName":"<S78>/Ds","SIDString":"Foc_model_Matlab:2603:732"},{"RTWName":"<S78>/Qs","SIDString":"Foc_model_Matlab:2603:733"},{"RTWName":"<S4294967295>/dq0","SIDString":"Foc_model_Matlab:2603:557"},{"RTWName":"<S47>/Alpha","SIDString":"Foc_model_Matlab:2603:523"},{"RTWName":"<S47>/Beta","SIDString":"Foc_model_Matlab:2603:524"},{"RTWName":"<S47>/sine","SIDString":"Foc_model_Matlab:2603:525"},{"RTWName":"<S47>/cos","SIDString":"Foc_model_Matlab:2603:526"},{"RTWName":"<S47>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2603:518"},{"RTWName":"<S47>/Data Type\nDuplicate1","SIDString":"Foc_model_Matlab:2603:521"},{"RTWName":"<S48>/d","SIDString":"Foc_model_Matlab:2603:508"},{"RTWName":"<S48>/q","SIDString":"Foc_model_Matlab:2603:509"},{"RTWName":"<S48>/D_axis_aligned","SIDString":"Foc_model_Matlab:2603:510"},{"RTWName":"<S48>/Demux","SIDString":"Foc_model_Matlab:2603:511"},{"RTWName":"<S48>/Offset","SIDString":"Foc_model_Matlab:2603:512"},{"RTWName":"<S48>/Q_axis_aligned","SIDString":"Foc_model_Matlab:2603:513"},{"RTWName":"<S48>/Switch","SIDString":"Foc_model_Matlab:2603:514"},{"RTWName":"<S48>/Unary_Minus","SIDString":"Foc_model_Matlab:2603:515"},{"RTWName":"<S48>/d_axis","SIDString":"Foc_model_Matlab:2603:516"},{"RTWName":"<S48>/q_axis","SIDString":"Foc_model_Matlab:2603:517"},{"RTWName":"<S47>/a16","SIDString":"Foc_model_Matlab:2603:520"},{"RTWName":"<S47>/acos","SIDString":"Foc_model_Matlab:2603:239"},{"RTWName":"<S47>/asin","SIDString":"Foc_model_Matlab:2603:240"},{"RTWName":"<S47>/bcos","SIDString":"Foc_model_Matlab:2603:241"},{"RTWName":"<S47>/bsin","SIDString":"Foc_model_Matlab:2603:238"},{"RTWName":"<S47>/sum_Ds","SIDString":"Foc_model_Matlab:2603:242"},{"RTWName":"<S47>/sum_Qs","SIDString":"Foc_model_Matlab:2603:243"},{"RTWName":"<S47>/Ds","SIDString":"Foc_model_Matlab:2603:527"},{"RTWName":"<S47>/Qs","SIDString":"Foc_model_Matlab:2603:528"},{"RTWName":"<S17>/Ds","SIDString":"Foc_model_Matlab:2603:248"},{"RTWName":"<S17>/Qs","SIDString":"Foc_model_Matlab:2603:745"},{"RTWName":"<S18>/Theta","SIDString":"Foc_model_Matlab:2604:501"},{"RTWName":"<S4294967295>/Theta","SIDString":"Foc_model_Matlab:2604:517"},{"RTWName":"<S4294967295>/SinCos","SIDString":"Foc_model_Matlab:2604:518"},{"RTWName":"<S4294967295>/thetaUnit","SIDString":"Foc_model_Matlab:2604:524"},{"RTWName":"<S4294967295>/sin","SIDString":"Foc_model_Matlab:2604:519"},{"RTWName":"<S4294967295>/cos","SIDString":"Foc_model_Matlab:2604:520"},{"RTWName":"<S49>/Theta","SIDString":"Foc_model_Matlab:2604:76:458"},{"RTWName":"<S49>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2604:76:545"},{"RTWName":"<S49>/Data Type\nPropagation","SIDString":"Foc_model_Matlab:2604:76:673"},{"RTWName":"<S49>/Data Type Conversion1","SIDString":"Foc_model_Matlab:2604:76:653"},{"RTWName":"<S49>/Get_FractionVal","SIDString":"Foc_model_Matlab:2604:76:630"},{"RTWName":"<S49>/Get_Integer","SIDString":"Foc_model_Matlab:2604:76:608"},{"RTWName":"<S50>/In1","SIDString":"Foc_model_Matlab:2604:76:706"},{"RTWName":"<S50>/In2","SIDString":"Foc_model_Matlab:2604:76:707"},{"RTWName":"<S50>/Demux","SIDString":"Foc_model_Matlab:2604:76:613"},{"RTWName":"<S50>/Product","SIDString":"Foc_model_Matlab:2604:76:616"},{"RTWName":"<S50>/Product1","SIDString":"Foc_model_Matlab:2604:76:621"},{"RTWName":"<S50>/Sum3","SIDString":"Foc_model_Matlab:2604:76:614"},{"RTWName":"<S50>/Sum4","SIDString":"Foc_model_Matlab:2604:76:615"},{"RTWName":"<S50>/Sum5","SIDString":"Foc_model_Matlab:2604:76:622"},{"RTWName":"<S50>/Sum6","SIDString":"Foc_model_Matlab:2604:76:623"},{"RTWName":"<S50>/Out1","SIDString":"Foc_model_Matlab:2604:76:708"},{"RTWName":"<S50>/Out2","SIDString":"Foc_model_Matlab:2604:76:709"},{"RTWName":"<S49>/Lookup","SIDString":"Foc_model_Matlab:2604:76:557"},{"RTWName":"<S49>/Sum","SIDString":"Foc_model_Matlab:2604:76:610"},{"RTWName":"<S49>/Sum2","SIDString":"Foc_model_Matlab:2604:76:612"},{"RTWName":"<S51>/In1","SIDString":"Foc_model_Matlab:2604:76:668"},{"RTWName":"<S53>/u","SIDString":"Foc_model_Matlab:2604:76:692:1"},{"RTWName":"<S53>/Compare","SIDString":"Foc_model_Matlab:2604:76:692:2"},{"RTWName":"<S53>/Constant","SIDString":"Foc_model_Matlab:2604:76:692:3"},{"RTWName":"<S53>/y","SIDString":"Foc_model_Matlab:2604:76:692:5"},{"RTWName":"<S51>/Data Type Conversion","SIDString":"Foc_model_Matlab:2604:76:702"},{"RTWName":"<S51>/If","SIDString":"Foc_model_Matlab:2604:76:683"},{"RTWName":"<S54>/In1","SIDString":"Foc_model_Matlab:2604:76:685"},{"RTWName":"<S54>/Action Port","SIDString":"Foc_model_Matlab:2604:76:686"},{"RTWName":"<S54>/Convert_back","SIDString":"Foc_model_Matlab:2604:76:695"},{"RTWName":"<S54>/Convert_uint16","SIDString":"Foc_model_Matlab:2604:76:694"},{"RTWName":"<S54>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2604:76:679"},{"RTWName":"<S54>/Sum","SIDString":"Foc_model_Matlab:2604:76:693"},{"RTWName":"<S54>/Out1","SIDString":"Foc_model_Matlab:2604:76:687"},{"RTWName":"<S55>/In1","SIDString":"Foc_model_Matlab:2604:76:689"},{"RTWName":"<S55>/Action Port","SIDString":"Foc_model_Matlab:2604:76:690"},{"RTWName":"<S55>/Convert_back","SIDString":"Foc_model_Matlab:2604:76:698"},{"RTWName":"<S55>/Convert_uint16","SIDString":"Foc_model_Matlab:2604:76:697"},{"RTWName":"<S55>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2604:76:699"},{"RTWName":"<S55>/Sum","SIDString":"Foc_model_Matlab:2604:76:700"},{"RTWName":"<S55>/Out1","SIDString":"Foc_model_Matlab:2604:76:691"},{"RTWName":"<S51>/Merge","SIDString":"Foc_model_Matlab:2604:76:696"},{"RTWName":"<S51>/convert_pu","SIDString":"Foc_model_Matlab:2604:76:652"},{"RTWName":"<S51>/Out1","SIDString":"Foc_model_Matlab:2604:76:669"},{"RTWName":"<S52>/In1","SIDString":"Foc_model_Matlab:2604:76:714"},{"RTWName":"<S4294967295>/In1","SIDString":"Foc_model_Matlab:2604:76:716"},{"RTWName":"<S4294967295>/Data Type Conversion","SIDString":"Foc_model_Matlab:2604:76:723"},{"RTWName":"<S4294967295>/Out1","SIDString":"Foc_model_Matlab:2604:76:717"},{"RTWName":"<S56>/In1","SIDString":"Foc_model_Matlab:2604:76:719"},{"RTWName":"<S56>/Out1","SIDString":"Foc_model_Matlab:2604:76:720"},{"RTWName":"<S52>/Out1","SIDString":"Foc_model_Matlab:2604:76:721"},{"RTWName":"<S49>/indexing","SIDString":"Foc_model_Matlab:2604:76:605"},{"RTWName":"<S49>/offset","SIDString":"Foc_model_Matlab:2604:76:657"},{"RTWName":"<S49>/sine_table_values","SIDString":"Foc_model_Matlab:2604:76:549"},{"RTWName":"<S49>/sin","SIDString":"Foc_model_Matlab:2604:76:248"},{"RTWName":"<S49>/cos","SIDString":"Foc_model_Matlab:2604:76:531"},{"RTWName":"<S4294967295>/Theta","SIDString":"Foc_model_Matlab:2604:529"},{"RTWName":"<S4294967295>/Trig Fcn IQN","SIDString":"Foc_model_Matlab:2604:530"},{"RTWName":"<S4294967295>/Trig Fcn IQN1","SIDString":"Foc_model_Matlab:2604:533"},{"RTWName":"<S4294967295>/sin","SIDString":"Foc_model_Matlab:2604:531"},{"RTWName":"<S4294967295>/cos","SIDString":"Foc_model_Matlab:2604:532"},{"RTWName":"<S18>/sin","SIDString":"Foc_model_Matlab:2604:508"},{"RTWName":"<S18>/cos","SIDString":"Foc_model_Matlab:2604:510"},{"RTWName":"<S19>/Va","SIDString":"Foc_model_Matlab:2605:831"},{"RTWName":"<S19>/Vb","SIDString":"Foc_model_Matlab:2605:832"},{"RTWName":"<S19>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2605:1549"},{"RTWName":"<S19>/Demux","SIDString":"Foc_model_Matlab:2605:834"},{"RTWName":"<S57>/U","SIDString":"Foc_model_Matlab:2605:1210"},{"RTWName":"<S4294967295>/U","SIDString":"Foc_model_Matlab:2605:1212"},{"RTWName":"<S4294967295>/Gain1","SIDString":"Foc_model_Matlab:2605:1631"},{"RTWName":"<S102>/U","SIDString":"Foc_model_Matlab:2605:1612"},{"RTWName":"<S102>/Identify Sector","SIDString":"Foc_model_Matlab:2605:1213"},{"RTWName":"<S102>/Merge","SIDString":"Foc_model_Matlab:2605:1214"},{"RTWName":"<S102>/U_1","SIDString":"Foc_model_Matlab:2605:1613"},{"RTWName":"<S102>/U_2","SIDString":"Foc_model_Matlab:2605:1614"},{"RTWName":"<S102>/U_3","SIDString":"Foc_model_Matlab:2605:1615"},{"RTWName":"<S102>/U_4","SIDString":"Foc_model_Matlab:2605:1616"},{"RTWName":"<S102>/U_5","SIDString":"Foc_model_Matlab:2605:1617"},{"RTWName":"<S102>/U_6","SIDString":"Foc_model_Matlab:2605:1618"},{"RTWName":"<S103>/In1","SIDString":"Foc_model_Matlab:2605:1222"},{"RTWName":"<S103>/Enable","SIDString":"Foc_model_Matlab:2605:1223"},{"RTWName":"<S103>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2605:1224"},{"RTWName":"<S103>/Compare\nTo Zero1","SIDString":"Foc_model_Matlab:2605:1225"},{"RTWName":"<S103>/Demux","SIDString":"Foc_model_Matlab:2605:1226"},{"RTWName":"<S103>/In2","SIDString":"Foc_model_Matlab:2605:1227"},{"RTWName":"<S103>/In3","SIDString":"Foc_model_Matlab:2605:1228"},{"RTWName":"<S103>/Merge","SIDString":"Foc_model_Matlab:2605:1229"},{"RTWName":"<S103>/Terminator","SIDString":"Foc_model_Matlab:2605:1230"},{"RTWName":"<S103>/Terminator1","SIDString":"Foc_model_Matlab:2605:1231"},{"RTWName":"<S103>/a+","SIDString":"Foc_model_Matlab:2605:1232"},{"RTWName":"<S103>/c-","SIDString":"Foc_model_Matlab:2605:1233"},{"RTWName":"<S103>/Out1","SIDString":"Foc_model_Matlab:2605:1234"},{"RTWName":"<S104>/In1","SIDString":"Foc_model_Matlab:2605:1236"},{"RTWName":"<S104>/Enable","SIDString":"Foc_model_Matlab:2605:1237"},{"RTWName":"<S104>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2605:1238"},{"RTWName":"<S104>/Compare\nTo Zero1","SIDString":"Foc_model_Matlab:2605:1239"},{"RTWName":"<S104>/Demux","SIDString":"Foc_model_Matlab:2605:1240"},{"RTWName":"<S104>/In2","SIDString":"Foc_model_Matlab:2605:1241"},{"RTWName":"<S104>/In3","SIDString":"Foc_model_Matlab:2605:1242"},{"RTWName":"<S104>/Merge","SIDString":"Foc_model_Matlab:2605:1243"},{"RTWName":"<S104>/Terminator","SIDString":"Foc_model_Matlab:2605:1244"},{"RTWName":"<S104>/Terminator1","SIDString":"Foc_model_Matlab:2605:1245"},{"RTWName":"<S104>/a-","SIDString":"Foc_model_Matlab:2605:1246"},{"RTWName":"<S104>/c+","SIDString":"Foc_model_Matlab:2605:1247"},{"RTWName":"<S104>/Out1","SIDString":"Foc_model_Matlab:2605:1248"},{"RTWName":"<S105>/In1","SIDString":"Foc_model_Matlab:2605:1250"},{"RTWName":"<S105>/Enable","SIDString":"Foc_model_Matlab:2605:1251"},{"RTWName":"<S105>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2605:1252"},{"RTWName":"<S105>/Compare\nTo Zero1","SIDString":"Foc_model_Matlab:2605:1253"},{"RTWName":"<S105>/Demux","SIDString":"Foc_model_Matlab:2605:1254"},{"RTWName":"<S105>/In2","SIDString":"Foc_model_Matlab:2605:1255"},{"RTWName":"<S105>/In3","SIDString":"Foc_model_Matlab:2605:1256"},{"RTWName":"<S105>/Merge","SIDString":"Foc_model_Matlab:2605:1257"},{"RTWName":"<S105>/Terminator","SIDString":"Foc_model_Matlab:2605:1258"},{"RTWName":"<S105>/Terminator1","SIDString":"Foc_model_Matlab:2605:1259"},{"RTWName":"<S105>/a-","SIDString":"Foc_model_Matlab:2605:1260"},{"RTWName":"<S105>/b+","SIDString":"Foc_model_Matlab:2605:1261"},{"RTWName":"<S105>/Out1","SIDString":"Foc_model_Matlab:2605:1262"},{"RTWName":"<S106>/In1","SIDString":"Foc_model_Matlab:2605:1264"},{"RTWName":"<S106>/Enable","SIDString":"Foc_model_Matlab:2605:1265"},{"RTWName":"<S106>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2605:1266"},{"RTWName":"<S106>/Compare\nTo Zero1","SIDString":"Foc_model_Matlab:2605:1267"},{"RTWName":"<S106>/Demux","SIDString":"Foc_model_Matlab:2605:1268"},{"RTWName":"<S106>/In2","SIDString":"Foc_model_Matlab:2605:1269"},{"RTWName":"<S106>/In3","SIDString":"Foc_model_Matlab:2605:1270"},{"RTWName":"<S106>/Merge","SIDString":"Foc_model_Matlab:2605:1271"},{"RTWName":"<S106>/Terminator","SIDString":"Foc_model_Matlab:2605:1272"},{"RTWName":"<S106>/Terminator1","SIDString":"Foc_model_Matlab:2605:1273"},{"RTWName":"<S106>/b-","SIDString":"Foc_model_Matlab:2605:1274"},{"RTWName":"<S106>/c+","SIDString":"Foc_model_Matlab:2605:1275"},{"RTWName":"<S106>/Out1","SIDString":"Foc_model_Matlab:2605:1276"},{"RTWName":"<S107>/In1","SIDString":"Foc_model_Matlab:2605:1278"},{"RTWName":"<S107>/Enable","SIDString":"Foc_model_Matlab:2605:1279"},{"RTWName":"<S107>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2605:1280"},{"RTWName":"<S107>/Compare\nTo Zero1","SIDString":"Foc_model_Matlab:2605:1281"},{"RTWName":"<S107>/Demux","SIDString":"Foc_model_Matlab:2605:1282"},{"RTWName":"<S107>/In2","SIDString":"Foc_model_Matlab:2605:1283"},{"RTWName":"<S107>/In3","SIDString":"Foc_model_Matlab:2605:1284"},{"RTWName":"<S107>/Merge","SIDString":"Foc_model_Matlab:2605:1285"},{"RTWName":"<S107>/Terminator","SIDString":"Foc_model_Matlab:2605:1286"},{"RTWName":"<S107>/Terminator1","SIDString":"Foc_model_Matlab:2605:1287"},{"RTWName":"<S107>/a+","SIDString":"Foc_model_Matlab:2605:1288"},{"RTWName":"<S107>/b-","SIDString":"Foc_model_Matlab:2605:1289"},{"RTWName":"<S107>/Out1","SIDString":"Foc_model_Matlab:2605:1290"},{"RTWName":"<S108>/In1","SIDString":"Foc_model_Matlab:2605:1292"},{"RTWName":"<S108>/Enable","SIDString":"Foc_model_Matlab:2605:1293"},{"RTWName":"<S108>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2605:1294"},{"RTWName":"<S108>/Compare\nTo Zero1","SIDString":"Foc_model_Matlab:2605:1295"},{"RTWName":"<S108>/Demux","SIDString":"Foc_model_Matlab:2605:1296"},{"RTWName":"<S108>/In2","SIDString":"Foc_model_Matlab:2605:1297"},{"RTWName":"<S108>/In3","SIDString":"Foc_model_Matlab:2605:1298"},{"RTWName":"<S108>/Merge","SIDString":"Foc_model_Matlab:2605:1299"},{"RTWName":"<S108>/Terminator","SIDString":"Foc_model_Matlab:2605:1300"},{"RTWName":"<S108>/Terminator1","SIDString":"Foc_model_Matlab:2605:1301"},{"RTWName":"<S108>/b+","SIDString":"Foc_model_Matlab:2605:1302"},{"RTWName":"<S108>/c-","SIDString":"Foc_model_Matlab:2605:1303"},{"RTWName":"<S108>/Out1","SIDString":"Foc_model_Matlab:2605:1304"},{"RTWName":"<S102>/modWave","SIDString":"Foc_model_Matlab:2605:1619"},{"RTWName":"<S4294967295>/modWave","SIDString":"Foc_model_Matlab:2605:1305"},{"RTWName":"<S4294967295>/U","SIDString":"Foc_model_Matlab:2605:1307"},{"RTWName":"<S109>/U","SIDString":"Foc_model_Matlab:2605:1592"},{"RTWName":"<S109>/Identify Sector","SIDString":"Foc_model_Matlab:2605:1308"},{"RTWName":"<S109>/Merge","SIDString":"Foc_model_Matlab:2605:1309"},{"RTWName":"<S109>/U_1","SIDString":"Foc_model_Matlab:2605:1593"},{"RTWName":"<S109>/U_2","SIDString":"Foc_model_Matlab:2605:1594"},{"RTWName":"<S109>/U_3","SIDString":"Foc_model_Matlab:2605:1595"},{"RTWName":"<S109>/U_4","SIDString":"Foc_model_Matlab:2605:1596"},{"RTWName":"<S109>/U_5","SIDString":"Foc_model_Matlab:2605:1597"},{"RTWName":"<S109>/U_6","SIDString":"Foc_model_Matlab:2605:1598"},{"RTWName":"<S110>/1","SIDString":"Foc_model_Matlab:2605:1443"},{"RTWName":"<S110>/Enable","SIDString":"Foc_model_Matlab:2605:1447"},{"RTWName":"<S110>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2605:1437"},{"RTWName":"<S110>/Compare\nTo Zero1","SIDString":"Foc_model_Matlab:2605:1438"},{"RTWName":"<S110>/Demux","SIDString":"Foc_model_Matlab:2605:1434"},{"RTWName":"<S110>/Merge1","SIDString":"Foc_model_Matlab:2605:1432"},{"RTWName":"<S110>/Terminator","SIDString":"Foc_model_Matlab:2605:1435"},{"RTWName":"<S110>/Terminator1","SIDString":"Foc_model_Matlab:2605:1436"},{"RTWName":"<S110>/U_1","SIDString":"Foc_model_Matlab:2605:1444"},{"RTWName":"<S110>/U_2","SIDString":"Foc_model_Matlab:2605:1445"},{"RTWName":"<S110>/a+ ","SIDString":"Foc_model_Matlab:2605:1316"},{"RTWName":"<S110>/c- ","SIDString":"Foc_model_Matlab:2605:1430"},{"RTWName":"<S110>/Out1","SIDString":"Foc_model_Matlab:2605:1446"},{"RTWName":"<S111>/1","SIDString":"Foc_model_Matlab:2605:1495"},{"RTWName":"<S111>/Enable","SIDString":"Foc_model_Matlab:2605:1493"},{"RTWName":"<S111>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2605:1496"},{"RTWName":"<S111>/Compare\nTo Zero1","SIDString":"Foc_model_Matlab:2605:1497"},{"RTWName":"<S111>/Demux","SIDString":"Foc_model_Matlab:2605:1498"},{"RTWName":"<S111>/Merge1","SIDString":"Foc_model_Matlab:2605:1499"},{"RTWName":"<S111>/Terminator","SIDString":"Foc_model_Matlab:2605:1500"},{"RTWName":"<S111>/Terminator1","SIDString":"Foc_model_Matlab:2605:1501"},{"RTWName":"<S111>/U_1","SIDString":"Foc_model_Matlab:2605:1502"},{"RTWName":"<S111>/U_2","SIDString":"Foc_model_Matlab:2605:1503"},{"RTWName":"<S111>/a-","SIDString":"Foc_model_Matlab:2605:1507"},{"RTWName":"<S111>/c+","SIDString":"Foc_model_Matlab:2605:1508"},{"RTWName":"<S111>/Out2","SIDString":"Foc_model_Matlab:2605:1506"},{"RTWName":"<S112>/1","SIDString":"Foc_model_Matlab:2605:1476"},{"RTWName":"<S112>/Enable","SIDString":"Foc_model_Matlab:2605:1477"},{"RTWName":"<S112>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2605:1478"},{"RTWName":"<S112>/Compare\nTo Zero1","SIDString":"Foc_model_Matlab:2605:1479"},{"RTWName":"<S112>/Demux","SIDString":"Foc_model_Matlab:2605:1480"},{"RTWName":"<S112>/Merge1","SIDString":"Foc_model_Matlab:2605:1481"},{"RTWName":"<S112>/Terminator","SIDString":"Foc_model_Matlab:2605:1482"},{"RTWName":"<S112>/Terminator1","SIDString":"Foc_model_Matlab:2605:1483"},{"RTWName":"<S112>/U_1","SIDString":"Foc_model_Matlab:2605:1484"},{"RTWName":"<S112>/U_2","SIDString":"Foc_model_Matlab:2605:1485"},{"RTWName":"<S112>/a-","SIDString":"Foc_model_Matlab:2605:1490"},{"RTWName":"<S112>/b+","SIDString":"Foc_model_Matlab:2605:1489"},{"RTWName":"<S112>/Out2","SIDString":"Foc_model_Matlab:2605:1488"},{"RTWName":"<S113>/1","SIDString":"Foc_model_Matlab:2605:1533"},{"RTWName":"<S113>/Enable","SIDString":"Foc_model_Matlab:2605:1534"},{"RTWName":"<S113>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2605:1535"},{"RTWName":"<S113>/Compare\nTo Zero1","SIDString":"Foc_model_Matlab:2605:1536"},{"RTWName":"<S113>/Demux","SIDString":"Foc_model_Matlab:2605:1537"},{"RTWName":"<S113>/Merge1","SIDString":"Foc_model_Matlab:2605:1538"},{"RTWName":"<S113>/Terminator","SIDString":"Foc_model_Matlab:2605:1539"},{"RTWName":"<S113>/Terminator1","SIDString":"Foc_model_Matlab:2605:1540"},{"RTWName":"<S113>/U_1","SIDString":"Foc_model_Matlab:2605:1541"},{"RTWName":"<S113>/U_2","SIDString":"Foc_model_Matlab:2605:1542"},{"RTWName":"<S113>/a+","SIDString":"Foc_model_Matlab:2605:1547"},{"RTWName":"<S113>/b-","SIDString":"Foc_model_Matlab:2605:1546"},{"RTWName":"<S113>/Out2","SIDString":"Foc_model_Matlab:2605:1545"},{"RTWName":"<S114>/1","SIDString":"Foc_model_Matlab:2605:1514"},{"RTWName":"<S114>/Enable","SIDString":"Foc_model_Matlab:2605:1515"},{"RTWName":"<S114>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2605:1516"},{"RTWName":"<S114>/Compare\nTo Zero1","SIDString":"Foc_model_Matlab:2605:1517"},{"RTWName":"<S114>/Demux","SIDString":"Foc_model_Matlab:2605:1518"},{"RTWName":"<S114>/Merge1","SIDString":"Foc_model_Matlab:2605:1519"},{"RTWName":"<S114>/Terminator","SIDString":"Foc_model_Matlab:2605:1520"},{"RTWName":"<S114>/Terminator1","SIDString":"Foc_model_Matlab:2605:1521"},{"RTWName":"<S114>/U_1","SIDString":"Foc_model_Matlab:2605:1522"},{"RTWName":"<S114>/U_2","SIDString":"Foc_model_Matlab:2605:1523"},{"RTWName":"<S114>/b-","SIDString":"Foc_model_Matlab:2605:1528"},{"RTWName":"<S114>/c+","SIDString":"Foc_model_Matlab:2605:1527"},{"RTWName":"<S114>/Out2","SIDString":"Foc_model_Matlab:2605:1526"},{"RTWName":"<S115>/1","SIDString":"Foc_model_Matlab:2605:1458"},{"RTWName":"<S115>/Enable","SIDString":"Foc_model_Matlab:2605:1452"},{"RTWName":"<S115>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2605:1459"},{"RTWName":"<S115>/Compare\nTo Zero1","SIDString":"Foc_model_Matlab:2605:1460"},{"RTWName":"<S115>/Demux","SIDString":"Foc_model_Matlab:2605:1461"},{"RTWName":"<S115>/Merge1","SIDString":"Foc_model_Matlab:2605:1462"},{"RTWName":"<S115>/Terminator","SIDString":"Foc_model_Matlab:2605:1463"},{"RTWName":"<S115>/Terminator1","SIDString":"Foc_model_Matlab:2605:1464"},{"RTWName":"<S115>/U_1","SIDString":"Foc_model_Matlab:2605:1465"},{"RTWName":"<S115>/U_2","SIDString":"Foc_model_Matlab:2605:1466"},{"RTWName":"<S115>/b+","SIDString":"Foc_model_Matlab:2605:1471"},{"RTWName":"<S115>/c-","SIDString":"Foc_model_Matlab:2605:1470"},{"RTWName":"<S115>/Out2","SIDString":"Foc_model_Matlab:2605:1469"},{"RTWName":"<S109>/modWave","SIDString":"Foc_model_Matlab:2605:1599"},{"RTWName":"<S4294967295>/Gain","SIDString":"Foc_model_Matlab:2605:1629"},{"RTWName":"<S4294967295>/modWave","SIDString":"Foc_model_Matlab:2605:1322"},{"RTWName":"<S4294967295>/U","SIDString":"Foc_model_Matlab:2605:1325"},{"RTWName":"<S116>/U","SIDString":"Foc_model_Matlab:2605:1561"},{"RTWName":"<S116>/Identify Sector","SIDString":"Foc_model_Matlab:2605:1326"},{"RTWName":"<S116>/Merge","SIDString":"Foc_model_Matlab:2605:1327"},{"RTWName":"<S116>/U_1","SIDString":"Foc_model_Matlab:2605:1562"},{"RTWName":"<S116>/U_2","SIDString":"Foc_model_Matlab:2605:1563"},{"RTWName":"<S116>/U_3","SIDString":"Foc_model_Matlab:2605:1564"},{"RTWName":"<S116>/U_4","SIDString":"Foc_model_Matlab:2605:1565"},{"RTWName":"<S116>/U_5","SIDString":"Foc_model_Matlab:2605:1566"},{"RTWName":"<S116>/U_6","SIDString":"Foc_model_Matlab:2605:1567"},{"RTWName":"<S116>/a+","SIDString":"Foc_model_Matlab:2605:1334"},{"RTWName":"<S116>/a-","SIDString":"Foc_model_Matlab:2605:1335"},{"RTWName":"<S116>/b+","SIDString":"Foc_model_Matlab:2605:1336"},{"RTWName":"<S116>/b-","SIDString":"Foc_model_Matlab:2605:1337"},{"RTWName":"<S116>/c+","SIDString":"Foc_model_Matlab:2605:1338"},{"RTWName":"<S116>/c-","SIDString":"Foc_model_Matlab:2605:1339"},{"RTWName":"<S116>/modWave","SIDString":"Foc_model_Matlab:2605:1568"},{"RTWName":"<S4294967295>/Gain","SIDString":"Foc_model_Matlab:2605:1569"},{"RTWName":"<S4294967295>/modWave","SIDString":"Foc_model_Matlab:2605:1340"},{"RTWName":"<S4294967295>/U","SIDString":"Foc_model_Matlab:2605:1343"},{"RTWName":"<S117>/U","SIDString":"Foc_model_Matlab:2605:1572"},{"RTWName":"<S117>/Identify Sector","SIDString":"Foc_model_Matlab:2605:1344"},{"RTWName":"<S117>/Merge","SIDString":"Foc_model_Matlab:2605:1345"},{"RTWName":"<S117>/U_1","SIDString":"Foc_model_Matlab:2605:1573"},{"RTWName":"<S117>/U_2","SIDString":"Foc_model_Matlab:2605:1574"},{"RTWName":"<S117>/U_3","SIDString":"Foc_model_Matlab:2605:1575"},{"RTWName":"<S117>/U_4","SIDString":"Foc_model_Matlab:2605:1576"},{"RTWName":"<S117>/U_5","SIDString":"Foc_model_Matlab:2605:1577"},{"RTWName":"<S117>/U_6","SIDString":"Foc_model_Matlab:2605:1578"},{"RTWName":"<S117>/a+","SIDString":"Foc_model_Matlab:2605:1352"},{"RTWName":"<S117>/a-","SIDString":"Foc_model_Matlab:2605:1353"},{"RTWName":"<S117>/b+","SIDString":"Foc_model_Matlab:2605:1354"},{"RTWName":"<S117>/b-","SIDString":"Foc_model_Matlab:2605:1355"},{"RTWName":"<S117>/c+","SIDString":"Foc_model_Matlab:2605:1356"},{"RTWName":"<S117>/c-","SIDString":"Foc_model_Matlab:2605:1357"},{"RTWName":"<S117>/modWave","SIDString":"Foc_model_Matlab:2605:1579"},{"RTWName":"<S4294967295>/Gain1","SIDString":"Foc_model_Matlab:2605:1627"},{"RTWName":"<S4294967295>/modWave","SIDString":"Foc_model_Matlab:2605:1358"},{"RTWName":"<S4294967295>/U","SIDString":"Foc_model_Matlab:2605:1361"},{"RTWName":"<S118>/U","SIDString":"Foc_model_Matlab:2605:1582"},{"RTWName":"<S118>/Identify Sector","SIDString":"Foc_model_Matlab:2605:1362"},{"RTWName":"<S118>/Merge","SIDString":"Foc_model_Matlab:2605:1363"},{"RTWName":"<S118>/U_1","SIDString":"Foc_model_Matlab:2605:1583"},{"RTWName":"<S118>/U_2","SIDString":"Foc_model_Matlab:2605:1584"},{"RTWName":"<S118>/U_3","SIDString":"Foc_model_Matlab:2605:1585"},{"RTWName":"<S118>/U_4","SIDString":"Foc_model_Matlab:2605:1586"},{"RTWName":"<S118>/U_5","SIDString":"Foc_model_Matlab:2605:1587"},{"RTWName":"<S118>/U_6","SIDString":"Foc_model_Matlab:2605:1588"},{"RTWName":"<S118>/a+","SIDString":"Foc_model_Matlab:2605:1370"},{"RTWName":"<S118>/a+ ","SIDString":"Foc_model_Matlab:2605:1371"},{"RTWName":"<S118>/b+","SIDString":"Foc_model_Matlab:2605:1372"},{"RTWName":"<S118>/b+ ","SIDString":"Foc_model_Matlab:2605:1373"},{"RTWName":"<S118>/c+","SIDString":"Foc_model_Matlab:2605:1374"},{"RTWName":"<S118>/c+ ","SIDString":"Foc_model_Matlab:2605:1375"},{"RTWName":"<S118>/modWave","SIDString":"Foc_model_Matlab:2605:1589"},{"RTWName":"<S4294967295>/Gain","SIDString":"Foc_model_Matlab:2605:1628"},{"RTWName":"<S4294967295>/modWave","SIDString":"Foc_model_Matlab:2605:1376"},{"RTWName":"<S4294967295>/U","SIDString":"Foc_model_Matlab:2605:1379"},{"RTWName":"<S119>/U","SIDString":"Foc_model_Matlab:2605:1602"},{"RTWName":"<S119>/Identify Sector","SIDString":"Foc_model_Matlab:2605:1380"},{"RTWName":"<S119>/Merge","SIDString":"Foc_model_Matlab:2605:1381"},{"RTWName":"<S119>/U_1","SIDString":"Foc_model_Matlab:2605:1603"},{"RTWName":"<S119>/U_2","SIDString":"Foc_model_Matlab:2605:1604"},{"RTWName":"<S119>/U_3","SIDString":"Foc_model_Matlab:2605:1605"},{"RTWName":"<S119>/U_4","SIDString":"Foc_model_Matlab:2605:1606"},{"RTWName":"<S119>/U_5","SIDString":"Foc_model_Matlab:2605:1607"},{"RTWName":"<S119>/U_6","SIDString":"Foc_model_Matlab:2605:1608"},{"RTWName":"<S119>/a-","SIDString":"Foc_model_Matlab:2605:1388"},{"RTWName":"<S119>/a- ","SIDString":"Foc_model_Matlab:2605:1389"},{"RTWName":"<S119>/b-","SIDString":"Foc_model_Matlab:2605:1390"},{"RTWName":"<S119>/b- ","SIDString":"Foc_model_Matlab:2605:1391"},{"RTWName":"<S119>/c-","SIDString":"Foc_model_Matlab:2605:1392"},{"RTWName":"<S119>/c- ","SIDString":"Foc_model_Matlab:2605:1393"},{"RTWName":"<S119>/modWave","SIDString":"Foc_model_Matlab:2605:1609"},{"RTWName":"<S4294967295>/Gain","SIDString":"Foc_model_Matlab:2605:1630"},{"RTWName":"<S4294967295>/modWave","SIDString":"Foc_model_Matlab:2605:1394"},{"RTWName":"<S59>/U","SIDString":"Foc_model_Matlab:2605:1397"},{"RTWName":"<S59>/Add1","SIDString":"Foc_model_Matlab:2605:1407"},{"RTWName":"<S59>/Add2","SIDString":"Foc_model_Matlab:2605:1408"},{"RTWName":"<S59>/Add3","SIDString":"Foc_model_Matlab:2605:1409"},{"RTWName":"<S59>/Demux1","SIDString":"Foc_model_Matlab:2605:1410"},{"RTWName":"<S59>/Gain","SIDString":"Foc_model_Matlab:2605:1551"},{"RTWName":"<S60>/In1","SIDString":"Foc_model_Matlab:2605:1399"},{"RTWName":"<S60>/Add","SIDString":"Foc_model_Matlab:2605:1400"},{"RTWName":"<S60>/Demux","SIDString":"Foc_model_Matlab:2605:1401"},{"RTWName":"<S60>/Demux2","SIDString":"Foc_model_Matlab:2605:1402"},{"RTWName":"<S60>/Max","SIDString":"Foc_model_Matlab:2605:1403"},{"RTWName":"<S60>/Min","SIDString":"Foc_model_Matlab:2605:1404"},{"RTWName":"<S60>/one_by_two","SIDString":"Foc_model_Matlab:2605:1405"},{"RTWName":"<S60>/Out1","SIDString":"Foc_model_Matlab:2605:1406"},{"RTWName":"<S59>/Mux2","SIDString":"Foc_model_Matlab:2605:1411"},{"RTWName":"<S59>/modWave","SIDString":"Foc_model_Matlab:2605:1412"},{"RTWName":"<S4294967295>/U","SIDString":"Foc_model_Matlab:2605:1414"},{"RTWName":"<S4294967295>/modWave","SIDString":"Foc_model_Matlab:2605:1415"},{"RTWName":"<S57>/modWave","SIDString":"Foc_model_Matlab:2605:1416"},{"RTWName":"<S19>/Vc","SIDString":"Foc_model_Matlab:2605:1644"},{"RTWName":"<S58>/In1","SIDString":"Foc_model_Matlab:2605:1194"},{"RTWName":"<S58>/In2","SIDString":"Foc_model_Matlab:2605:1195"},{"RTWName":"<S58>/In3","SIDString":"Foc_model_Matlab:2605:1196"},{"RTWName":"<S4294967295>/In1","SIDString":"Foc_model_Matlab:2605:1198"},{"RTWName":"<S4294967295>/In2","SIDString":"Foc_model_Matlab:2605:1199"},{"RTWName":"<S4294967295>/In3","SIDString":"Foc_model_Matlab:2605:1200"},{"RTWName":"<S4294967295>/Mux","SIDString":"Foc_model_Matlab:2605:1201"},{"RTWName":"<S4294967295>/Out1","SIDString":"Foc_model_Matlab:2605:1202"},{"RTWName":"<S61>/In1","SIDString":"Foc_model_Matlab:2605:1204"},{"RTWName":"<S61>/In2","SIDString":"Foc_model_Matlab:2605:1205"},{"RTWName":"<S61>/In3","SIDString":"Foc_model_Matlab:2605:1558"},{"RTWName":"<S62>/alpha","SIDString":"Foc_model_Matlab:2605:1632:272"},{"RTWName":"<S62>/beta","SIDString":"Foc_model_Matlab:2605:1632:585"},{"RTWName":"<S4294967295>/alpha","SIDString":"Foc_model_Matlab:2605:1632:534"},{"RTWName":"<S4294967295>/Demux","SIDString":"Foc_model_Matlab:2605:1632:540"},{"RTWName":"<S4294967295>/Gain","SIDString":"Foc_model_Matlab:2605:1632:543"},{"RTWName":"<S4294967295>/Gain1","SIDString":"Foc_model_Matlab:2605:1632:544"},{"RTWName":"<S4294967295>/Kabc","SIDString":"Foc_model_Matlab:2605:1632:581"},{"RTWName":"<S4294967295>/Kc","SIDString":"Foc_model_Matlab:2605:1632:571"},{"RTWName":"<S4294967295>/Mux","SIDString":"Foc_model_Matlab:2605:1632:541"},{"RTWName":"<S4294967295>/Sum","SIDString":"Foc_model_Matlab:2605:1632:542"},{"RTWName":"<S4294967295>/Sum1","SIDString":"Foc_model_Matlab:2605:1632:545"},{"RTWName":"<S4294967295>/Sum2","SIDString":"Foc_model_Matlab:2605:1632:546"},{"RTWName":"<S4294967295>/a","SIDString":"Foc_model_Matlab:2605:1632:536"},{"RTWName":"<S63>/alpha","SIDString":"Foc_model_Matlab:2605:1632:507"},{"RTWName":"<S63>/beta","SIDString":"Foc_model_Matlab:2605:1632:508"},{"RTWName":"<S63>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2605:1632:500"},{"RTWName":"<S63>/Ka","SIDString":"Foc_model_Matlab:2605:1632:565"},{"RTWName":"<S63>/Kb","SIDString":"Foc_model_Matlab:2605:1632:566"},{"RTWName":"<S63>/Kc","SIDString":"Foc_model_Matlab:2605:1632:567"},{"RTWName":"<S63>/add_b","SIDString":"Foc_model_Matlab:2605:1632:490"},{"RTWName":"<S63>/add_c","SIDString":"Foc_model_Matlab:2605:1632:499"},{"RTWName":"<S63>/one_by_two","SIDString":"Foc_model_Matlab:2605:1632:493"},{"RTWName":"<S63>/sqrt3_by_two","SIDString":"Foc_model_Matlab:2605:1632:492"},{"RTWName":"<S63>/a","SIDString":"Foc_model_Matlab:2605:1632:509"},{"RTWName":"<S63>/b","SIDString":"Foc_model_Matlab:2605:1632:510"},{"RTWName":"<S63>/c","SIDString":"Foc_model_Matlab:2605:1632:511"},{"RTWName":"<S62>/a","SIDString":"Foc_model_Matlab:2605:1632:288"},{"RTWName":"<S62>/b","SIDString":"Foc_model_Matlab:2605:1632:586"},{"RTWName":"<S62>/c","SIDString":"Foc_model_Matlab:2605:1632:587"},{"RTWName":"<S61>/Mux","SIDString":"Foc_model_Matlab:2605:1207"},{"RTWName":"<S61>/Terminator","SIDString":"Foc_model_Matlab:2605:1559"},{"RTWName":"<S61>/Out1","SIDString":"Foc_model_Matlab:2605:1208"},{"RTWName":"<S58>/Out1","SIDString":"Foc_model_Matlab:2605:1209"},{"RTWName":"<S19>/Va0","SIDString":"Foc_model_Matlab:2605:835"},{"RTWName":"<S19>/Vb0","SIDString":"Foc_model_Matlab:2605:836"},{"RTWName":"<S19>/Vc0","SIDString":"Foc_model_Matlab:2605:837"},{"RTWName":"<S9>/Vabc in PU","SIDString":"Foc_model_Matlab:2606"},{"RTWName":"<S9>/Idq_debug","SIDString":"Foc_model_Matlab:2607"},{"RTWName":"<S1>/FOCProfiler","SIDString":"Foc_model_Matlab:3581"},{"RTWName":"<S1>/Goto","SIDString":"Foc_model_Matlab:3616"},{"RTWName":"<S10>/Iab_meas_ADC","SIDString":"Foc_model_Matlab:2655"},{"RTWName":"<S10>/Iab_Sim","SIDString":"Foc_model_Matlab:2656"},{"RTWName":"<S10>/Pos_Sim","SIDString":"Foc_model_Matlab:2657"},{"RTWName":"<S64>/Iab_meas_ADC","SIDString":"Foc_model_Matlab:2659"},{"RTWName":"<S64>/Iab_Sim","SIDString":"Foc_model_Matlab:2660"},{"RTWName":"<S64>/Pos_Sim","SIDString":"Foc_model_Matlab:2661"},{"RTWName":"<S67>/Data Store\nRead2","SIDString":"Foc_model_Matlab:2664"},{"RTWName":"<S67>/Data Store\nRead3","SIDString":"Foc_model_Matlab:2665"},{"RTWName":"<S67>/Data Store\nRead4","SIDString":"Foc_model_Matlab:2666"},{"RTWName":"<S67>/Data Store\nRead5","SIDString":"Foc_model_Matlab:2667"},{"RTWName":"<S70>/Add1","SIDString":"Foc_model_Matlab:3023"},{"RTWName":"<S71>/u","SIDString":"Foc_model_Matlab:3024:480"},{"RTWName":"<S73>:1","SIDString":"Foc_model_Matlab:3024:481:1"},{"RTWName":"<S71>/y","SIDString":"Foc_model_Matlab:3024:482"},{"RTWName":"<S72>/u","SIDString":"Foc_model_Matlab:3025:480"},{"RTWName":"<S74>:1","SIDString":"Foc_model_Matlab:3025:481:1"},{"RTWName":"<S72>/y","SIDString":"Foc_model_Matlab:3025:482"},{"RTWName":"<S70>/Data Type Conversion2","SIDString":"Foc_model_Matlab:3026"},{"RTWName":"<S70>/Data Type Conversion3","SIDString":"Foc_model_Matlab:3027"},{"RTWName":"<S70>/Data Type Conversion6","SIDString":"Foc_model_Matlab:3028"},{"RTWName":"<S70>/Digital_Input_HALL_A","SIDString":"Foc_model_Matlab:3031"},{"RTWName":"<S70>/Digital_Input_HALL_B","SIDString":"Foc_model_Matlab:3030"},{"RTWName":"<S70>/Digital_Input_HALL_C","SIDString":"Foc_model_Matlab:3029"},{"RTWName":"<S70>/Out1","SIDString":"Foc_model_Matlab:3032"},{"RTWName":"<S67>/Read_Register","SIDString":"Foc_model_Matlab:2679"},{"RTWName":"<S67>/HallState","SIDString":"Foc_model_Matlab:2680"},{"RTWName":"<S67>/Count","SIDString":"Foc_model_Matlab:2681"},{"RTWName":"<S67>/SpeedCount","SIDString":"Foc_model_Matlab:2682"},{"RTWName":"<S67>/Dir","SIDString":"Foc_model_Matlab:2683"},{"RTWName":"<S67>/SpeedValidity","SIDString":"Foc_model_Matlab:2684"},{"RTWName":"<S67>/Hallchange","SIDString":"Foc_model_Matlab:2685"},{"RTWName":"<S65>/Data Store\nWrite2","SIDString":"Foc_model_Matlab:2686"},{"RTWName":"<S68>/HallState","SIDString":"Foc_model_Matlab:2687:537"},{"RTWName":"<S68>/counterValue","SIDString":"Foc_model_Matlab:2687:538"},{"RTWName":"<S68>/speedCount","SIDString":"Foc_model_Matlab:2687:143"},{"RTWName":"<S68>/Direction","SIDString":"Foc_model_Matlab:2687:145"},{"RTWName":"<S68>/speedValidity","SIDString":"Foc_model_Matlab:2687:146"},{"RTWName":"<S68>/watchResetFlagIn_HallAck","SIDString":"Foc_model_Matlab:2687:147"},{"RTWName":"<S68>/Data Type Conversion1","SIDString":"Foc_model_Matlab:2687:401"},{"RTWName":"<S68>/Data Type Conversion2","SIDString":"Foc_model_Matlab:2687:402"},{"RTWName":"<S68>/Data Type Conversion3","SIDString":"Foc_model_Matlab:2687:497"},{"RTWName":"<S68>/Data Type Conversion4","SIDString":"Foc_model_Matlab:2687:539"},{"RTWName":"<S75>/HallAck","SIDString":"Foc_model_Matlab:2687:369"},{"RTWName":"<S75>/Validity","SIDString":"Foc_model_Matlab:2687:370"},{"RTWName":"<S75>/speedCount","SIDString":"Foc_model_Matlab:2687:371"},{"RTWName":"<S75>/Data Type Conversion","SIDString":"Foc_model_Matlab:2687:540"},{"RTWName":"<S75>/Logical\nOperator","SIDString":"Foc_model_Matlab:2687:156"},{"RTWName":"<S75>/Order","SIDString":"Foc_model_Matlab:2687:390"},{"RTWName":"<S75>/Switch","SIDString":"Foc_model_Matlab:2687:389"},{"RTWName":"<S75>/speedCountDelay","SIDString":"Foc_model_Matlab:2687:153"},{"RTWName":"<S75>/validityDelay","SIDString":"Foc_model_Matlab:2687:154"},{"RTWName":"<S75>/orderValidity","SIDString":"Foc_model_Matlab:2687:372"},{"RTWName":"<S75>/validSpeedCount","SIDString":"Foc_model_Matlab:2687:373"},{"RTWName":"<S68>/If","SIDString":"Foc_model_Matlab:2687:155"},{"RTWName":"<S68>/Merge","SIDString":"Foc_model_Matlab:2687:158"},{"RTWName":"<S68>/Merge1","SIDString":"Foc_model_Matlab:2687:159"},{"RTWName":"<S68>/PositionUnit","SIDString":"Foc_model_Matlab:2687:160"},{"RTWName":"<S76>/Reset","SIDString":"Foc_model_Matlab:2687:431:339"},{"RTWName":"<S80>/u","SIDString":"Foc_model_Matlab:2687:431:340:1"},{"RTWName":"<S80>/Compare","SIDString":"Foc_model_Matlab:2687:431:340:2"},{"RTWName":"<S80>/Constant","SIDString":"Foc_model_Matlab:2687:431:340:3"},{"RTWName":"<S80>/y","SIDString":"Foc_model_Matlab:2687:431:340:5"},{"RTWName":"<S76>/Constant2","SIDString":"Foc_model_Matlab:2687:431:341"},{"RTWName":"<S76>/Delay One Step","SIDString":"Foc_model_Matlab:2687:431:342"},{"RTWName":"<S76>/Delay One Step1","SIDString":"Foc_model_Matlab:2687:431:343"},{"RTWName":"<S76>/OR","SIDString":"Foc_model_Matlab:2687:431:344"},{"RTWName":"<S76>/Sum","SIDString":"Foc_model_Matlab:2687:431:345"},{"RTWName":"<S76>/Status","SIDString":"Foc_model_Matlab:2687:431:346"},{"RTWName":"<S77>/hallReading","SIDString":"Foc_model_Matlab:2687:169"},{"RTWName":"<S77>/Action Port","SIDString":"Foc_model_Matlab:2687:171"},{"RTWName":"<S77>/Constant","SIDString":"Foc_model_Matlab:2687:172"},{"RTWName":"<S81>/Halls_reading","SIDString":"Foc_model_Matlab:2687:175"},{"RTWName":"<S82>/Action Port","SIDString":"Foc_model_Matlab:2687:177"},{"RTWName":"<S82>/Constant","SIDString":"Foc_model_Matlab:2687:178"},{"RTWName":"<S82>/position","SIDString":"Foc_model_Matlab:2687:179"},{"RTWName":"<S83>/Action Port","SIDString":"Foc_model_Matlab:2687:181"},{"RTWName":"<S83>/Constant","SIDString":"Foc_model_Matlab:2687:182"},{"RTWName":"<S83>/position","SIDString":"Foc_model_Matlab:2687:183"},{"RTWName":"<S84>/Action Port","SIDString":"Foc_model_Matlab:2687:185"},{"RTWName":"<S84>/Constant","SIDString":"Foc_model_Matlab:2687:186"},{"RTWName":"<S84>/position","SIDString":"Foc_model_Matlab:2687:187"},{"RTWName":"<S85>/Action Port","SIDString":"Foc_model_Matlab:2687:189"},{"RTWName":"<S85>/Constant","SIDString":"Foc_model_Matlab:2687:190"},{"RTWName":"<S85>/position","SIDString":"Foc_model_Matlab:2687:191"},{"RTWName":"<S86>/Action Port","SIDString":"Foc_model_Matlab:2687:193"},{"RTWName":"<S86>/Constant","SIDString":"Foc_model_Matlab:2687:194"},{"RTWName":"<S86>/position","SIDString":"Foc_model_Matlab:2687:195"},{"RTWName":"<S87>/Action Port","SIDString":"Foc_model_Matlab:2687:197"},{"RTWName":"<S87>/Constant","SIDString":"Foc_model_Matlab:2687:198"},{"RTWName":"<S87>/position","SIDString":"Foc_model_Matlab:2687:199"},{"RTWName":"<S88>/Action Port","SIDString":"Foc_model_Matlab:2687:441"},{"RTWName":"<S88>/Constant","SIDString":"Foc_model_Matlab:2687:442"},{"RTWName":"<S88>/position","SIDString":"Foc_model_Matlab:2687:443"},{"RTWName":"<S81>/Merge1","SIDString":"Foc_model_Matlab:2687:200"},{"RTWName":"<S81>/Switch Case","SIDString":"Foc_model_Matlab:2687:201"},{"RTWName":"<S81>/Base_Position","SIDString":"Foc_model_Matlab:2687:202"},{"RTWName":"<S77>/rawPosition","SIDString":"Foc_model_Matlab:2687:203"},{"RTWName":"<S77>/Speed(r.p.m)","SIDString":"Foc_model_Matlab:2687:204"},{"RTWName":"<S78>/currentSpeed","SIDString":"Foc_model_Matlab:2687:207"},{"RTWName":"<S78>/Counts","SIDString":"Foc_model_Matlab:2687:206"},{"RTWName":"<S78>/previousSpeed","SIDString":"Foc_model_Matlab:2687:208"},{"RTWName":"<S78>/Direction","SIDString":"Foc_model_Matlab:2687:209"},{"RTWName":"<S78>/hallReading","SIDString":"Foc_model_Matlab:2687:210"},{"RTWName":"<S78>/Action Port","SIDString":"Foc_model_Matlab:2687:212"},{"RTWName":"<S78>/Divide","SIDString":"Foc_model_Matlab:2687:214"},{"RTWName":"<S78>/If","SIDString":"Foc_model_Matlab:2687:527"},{"RTWName":"<S89>/In1","SIDString":"Foc_model_Matlab:2687:519"},{"RTWName":"<S89>/Action Port","SIDString":"Foc_model_Matlab:2687:520"},{"RTWName":"<S89>/Out1","SIDString":"Foc_model_Matlab:2687:521"},{"RTWName":"<S90>/In1","SIDString":"Foc_model_Matlab:2687:529"},{"RTWName":"<S90>/Action Port","SIDString":"Foc_model_Matlab:2687:530"},{"RTWName":"<S90>/Unary Minus","SIDString":"Foc_model_Matlab:2687:532"},{"RTWName":"<S90>/Out1","SIDString":"Foc_model_Matlab:2687:531"},{"RTWName":"<S78>/Merge","SIDString":"Foc_model_Matlab:2687:528"},{"RTWName":"<S78>/PositionEnable","SIDString":"Foc_model_Matlab:2687:514"},{"RTWName":"<S78>/SpeedConst","SIDString":"Foc_model_Matlab:2687:213"},{"RTWName":"<S78>/SpeedConstData","SIDString":"Foc_model_Matlab:2687:516"},{"RTWName":"<S78>/SpeedGain","SIDString":"Foc_model_Matlab:2687:517"},{"RTWName":"<S91>/dir","SIDString":"Foc_model_Matlab:2687:217"},{"RTWName":"<S91>/Hall_reading","SIDString":"Foc_model_Matlab:2687:218"},{"RTWName":"<S91>/currentSpeed","SIDString":"Foc_model_Matlab:2687:219"},{"RTWName":"<S91>/previousSpeed","SIDString":"Foc_model_Matlab:2687:220"},{"RTWName":"<S91>/count","SIDString":"Foc_model_Matlab:2687:221"},{"RTWName":"<S91>/Enable","SIDString":"Foc_model_Matlab:2687:513"},{"RTWName":"<S92>/Halls_reading","SIDString":"Foc_model_Matlab:2687:223"},{"RTWName":"<S92>/extrapolation","SIDString":"Foc_model_Matlab:2687:224"},{"RTWName":"<S92>/Action Port","SIDString":"Foc_model_Matlab:2687:225"},{"RTWName":"<S96>/Action Port","SIDString":"Foc_model_Matlab:2687:227"},{"RTWName":"<S96>/Constant","SIDString":"Foc_model_Matlab:2687:228"},{"RTWName":"<S96>/position","SIDString":"Foc_model_Matlab:2687:229"},{"RTWName":"<S97>/Action Port","SIDString":"Foc_model_Matlab:2687:231"},{"RTWName":"<S97>/Constant","SIDString":"Foc_model_Matlab:2687:232"},{"RTWName":"<S97>/position","SIDString":"Foc_model_Matlab:2687:233"},{"RTWName":"<S98>/Action Port","SIDString":"Foc_model_Matlab:2687:235"},{"RTWName":"<S98>/Constant","SIDString":"Foc_model_Matlab:2687:236"},{"RTWName":"<S98>/position","SIDString":"Foc_model_Matlab:2687:237"},{"RTWName":"<S99>/Action Port","SIDString":"Foc_model_Matlab:2687:239"},{"RTWName":"<S99>/Constant","SIDString":"Foc_model_Matlab:2687:240"},{"RTWName":"<S99>/position","SIDString":"Foc_model_Matlab:2687:241"},{"RTWName":"<S100>/Action Port","SIDString":"Foc_model_Matlab:2687:243"},{"RTWName":"<S100>/Constant","SIDString":"Foc_model_Matlab:2687:244"},{"RTWName":"<S100>/position","SIDString":"Foc_model_Matlab:2687:245"},{"RTWName":"<S101>/Action Port","SIDString":"Foc_model_Matlab:2687:247"},{"RTWName":"<S101>/Constant","SIDString":"Foc_model_Matlab:2687:248"},{"RTWName":"<S101>/position","SIDString":"Foc_model_Matlab:2687:249"},{"RTWName":"<S102>/Action Port","SIDString":"Foc_model_Matlab:2687:437"},{"RTWName":"<S102>/Constant","SIDString":"Foc_model_Matlab:2687:438"},{"RTWName":"<S102>/position","SIDString":"Foc_model_Matlab:2687:439"},{"RTWName":"<S92>/Merge1","SIDString":"Foc_model_Matlab:2687:250"},{"RTWName":"<S92>/Sum","SIDString":"Foc_model_Matlab:2687:251"},{"RTWName":"<S92>/Switch Case","SIDString":"Foc_model_Matlab:2687:252"},{"RTWName":"<S92>/Position","SIDString":"Foc_model_Matlab:2687:253"},{"RTWName":"<S93>/Halls_reading","SIDString":"Foc_model_Matlab:2687:255"},{"RTWName":"<S93>/extrapolation","SIDString":"Foc_model_Matlab:2687:256"},{"RTWName":"<S93>/Action Port","SIDString":"Foc_model_Matlab:2687:257"},{"RTWName":"<S103>/Action Port","SIDString":"Foc_model_Matlab:2687:259"},{"RTWName":"<S103>/Constant","SIDString":"Foc_model_Matlab:2687:260"},{"RTWName":"<S103>/position","SIDString":"Foc_model_Matlab:2687:261"},{"RTWName":"<S104>/Action Port","SIDString":"Foc_model_Matlab:2687:263"},{"RTWName":"<S104>/Constant","SIDString":"Foc_model_Matlab:2687:264"},{"RTWName":"<S104>/position","SIDString":"Foc_model_Matlab:2687:265"},{"RTWName":"<S105>/Action Port","SIDString":"Foc_model_Matlab:2687:267"},{"RTWName":"<S105>/Constant","SIDString":"Foc_model_Matlab:2687:268"},{"RTWName":"<S105>/position","SIDString":"Foc_model_Matlab:2687:269"},{"RTWName":"<S106>/Action Port","SIDString":"Foc_model_Matlab:2687:271"},{"RTWName":"<S106>/Constant","SIDString":"Foc_model_Matlab:2687:272"},{"RTWName":"<S106>/position","SIDString":"Foc_model_Matlab:2687:273"},{"RTWName":"<S107>/Action Port","SIDString":"Foc_model_Matlab:2687:275"},{"RTWName":"<S107>/Constant","SIDString":"Foc_model_Matlab:2687:276"},{"RTWName":"<S107>/position","SIDString":"Foc_model_Matlab:2687:277"},{"RTWName":"<S108>/Action Port","SIDString":"Foc_model_Matlab:2687:279"},{"RTWName":"<S108>/Constant","SIDString":"Foc_model_Matlab:2687:280"},{"RTWName":"<S108>/position","SIDString":"Foc_model_Matlab:2687:281"},{"RTWName":"<S109>/Action Port","SIDString":"Foc_model_Matlab:2687:433"},{"RTWName":"<S109>/Constant","SIDString":"Foc_model_Matlab:2687:434"},{"RTWName":"<S109>/position","SIDString":"Foc_model_Matlab:2687:435"},{"RTWName":"<S93>/Merge1","SIDString":"Foc_model_Matlab:2687:282"},{"RTWName":"<S93>/Sum","SIDString":"Foc_model_Matlab:2687:283"},{"RTWName":"<S93>/Switch Case","SIDString":"Foc_model_Matlab:2687:284"},{"RTWName":"<S93>/Base_Position","SIDString":"Foc_model_Matlab:2687:285"},{"RTWName":"<S91>/Constant","SIDString":"Foc_model_Matlab:2687:286"},{"RTWName":"<S91>/If","SIDString":"Foc_model_Matlab:2687:287"},{"RTWName":"<S91>/If1","SIDString":"Foc_model_Matlab:2687:444"},{"RTWName":"<S91>/Merge","SIDString":"Foc_model_Matlab:2687:288"},{"RTWName":"<S91>/Merge1","SIDString":"Foc_model_Matlab:2687:451"},{"RTWName":"<S91>/Saturation","SIDString":"Foc_model_Matlab:2687:289"},{"RTWName":"<S94>/Count","SIDString":"Foc_model_Matlab:2687:292"},{"RTWName":"<S94>/currentSpeed","SIDString":"Foc_model_Matlab:2687:293"},{"RTWName":"<S94>/Action Port","SIDString":"Foc_model_Matlab:2687:450"},{"RTWName":"<S94>/Divide","SIDString":"Foc_model_Matlab:2687:294"},{"RTWName":"<S94>/Gain","SIDString":"Foc_model_Matlab:2687:295"},{"RTWName":"<S94>/countData","SIDString":"Foc_model_Matlab:2687:485"},{"RTWName":"<S94>/currentSpeedData","SIDString":"Foc_model_Matlab:2687:484"},{"RTWName":"<S94>/1st_order_component","SIDString":"Foc_model_Matlab:2687:296"},{"RTWName":"<S95>/Count","SIDString":"Foc_model_Matlab:2687:298"},{"RTWName":"<S95>/currentSpeed","SIDString":"Foc_model_Matlab:2687:299"},{"RTWName":"<S95>/previousSpeed","SIDString":"Foc_model_Matlab:2687:300"},{"RTWName":"<S95>/Action Port","SIDString":"Foc_model_Matlab:2687:448"},{"RTWName":"<S95>/Constant","SIDString":"Foc_model_Matlab:2687:507"},{"RTWName":"<S95>/Divide","SIDString":"Foc_model_Matlab:2687:502"},{"RTWName":"<S95>/Divide1","SIDString":"Foc_model_Matlab:2687:503"},{"RTWName":"<S95>/Gain","SIDString":"Foc_model_Matlab:2687:303"},{"RTWName":"<S95>/Gain1","SIDString":"Foc_model_Matlab:2687:505"},{"RTWName":"<S95>/Product","SIDString":"Foc_model_Matlab:2687:509"},{"RTWName":"<S95>/Sum","SIDString":"Foc_model_Matlab:2687:504"},{"RTWName":"<S95>/Sum1","SIDString":"Foc_model_Matlab:2687:506"},{"RTWName":"<S95>/countData","SIDString":"Foc_model_Matlab:2687:487"},{"RTWName":"<S95>/currentSpeedData","SIDString":"Foc_model_Matlab:2687:488"},{"RTWName":"<S95>/previousSpeedData","SIDString":"Foc_model_Matlab:2687:489"},{"RTWName":"<S95>/2nd_order_componenet","SIDString":"Foc_model_Matlab:2687:309"},{"RTWName":"<S91>/Out1","SIDString":"Foc_model_Matlab:2687:310"},{"RTWName":"<S78>/currentSpeedData","SIDString":"Foc_model_Matlab:2687:515"},{"RTWName":"<S78>/Speed(r.p.m)","SIDString":"Foc_model_Matlab:2687:312"},{"RTWName":"<S78>/rawPosition","SIDString":"Foc_model_Matlab:2687:313"},{"RTWName":"<S68>/Switch","SIDString":"Foc_model_Matlab:2687:512"},{"RTWName":"<S79>/WatchDogFlag","SIDString":"Foc_model_Matlab:2687:363"},{"RTWName":"<S79>/OrderValidity","SIDString":"Foc_model_Matlab:2687:364"},{"RTWName":"<S79>/counterValue","SIDString":"Foc_model_Matlab:2687:365"},{"RTWName":"<S79>/speedCount","SIDString":"Foc_model_Matlab:2687:366"},{"RTWName":"<S79>/Constant","SIDString":"Foc_model_Matlab:2687:148"},{"RTWName":"<S79>/Max","SIDString":"Foc_model_Matlab:2687:157"},{"RTWName":"<S79>/speed check","SIDString":"Foc_model_Matlab:2687:314"},{"RTWName":"<S79>/watchdog check","SIDString":"Foc_model_Matlab:2687:315"},{"RTWName":"<S79>/Flag","SIDString":"Foc_model_Matlab:2687:367"},{"RTWName":"<S68>/WatchDog","SIDString":"Foc_model_Matlab:2687:152"},{"RTWName":"<S68>/counterSize1","SIDString":"Foc_model_Matlab:2687:496"},{"RTWName":"<S68>/counterSize2","SIDString":"Foc_model_Matlab:2687:403"},{"RTWName":"<S68>/Position","SIDString":"Foc_model_Matlab:2687:536"},{"RTWName":"<S68>/Speed","SIDString":"Foc_model_Matlab:2687:469"},{"RTWName":"<S68>/watchResetFlagOut_HallAck","SIDString":"Foc_model_Matlab:2687:318"},{"RTWName":"<S69>/ϴm","SIDString":"Foc_model_Matlab:2688:873"},{"RTWName":"<S110>/ϴm","SIDString":"Foc_model_Matlab:2688:876"},{"RTWName":"<S110>/Offset","SIDString":"Foc_model_Matlab:2688:994"},{"RTWName":"<S110>/Npp","SIDString":"Foc_model_Matlab:2688:997"},{"RTWName":"<S4294967295>/ϴm","SIDString":"Foc_model_Matlab:2688:879"},{"RTWName":"<S4294967295>/Offset","SIDString":"Foc_model_Matlab:2688:992"},{"RTWName":"<S4294967295>/Npp","SIDString":"Foc_model_Matlab:2688:999"},{"RTWName":"<S4294967295>/Constant","SIDString":"Foc_model_Matlab:2688:881"},{"RTWName":"<S4294967295>/Constant1","SIDString":"Foc_model_Matlab:2688:882"},{"RTWName":"<S4294967295>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2688:883"},{"RTWName":"<S4294967295>/Data Type Conversion","SIDString":"Foc_model_Matlab:2688:1040"},{"RTWName":"<S4294967295>/Data Type Conversion1","SIDString":"Foc_model_Matlab:2688:884"},{"RTWName":"<S4294967295>/Data Type Conversion2","SIDString":"Foc_model_Matlab:2688:885"},{"RTWName":"<S4294967295>/Data Type Conversion4","SIDString":"Foc_model_Matlab:2688:886"},{"RTWName":"<S4294967295>/Sum1","SIDString":"Foc_model_Matlab:2688:888"},{"RTWName":"<S4294967295>/Switch","SIDString":"Foc_model_Matlab:2688:889"},{"RTWName":"<Root>/ϴm","SIDString":"Foc_model_Matlab:2688:1027:1028"},{"RTWName":"<Root>/Npp","SIDString":"Foc_model_Matlab:2688:1027:1029"},{"RTWName":"<Root>/ϴm","SIDString":"Foc_model_Matlab:2688:1027:1031"},{"RTWName":"<Root>/Number of pole pairs","SIDString":"Foc_model_Matlab:2688:1027:887"},{"RTWName":"<Root>/Npp*ϴm","SIDString":"Foc_model_Matlab:2688:1027:1033"},{"RTWName":"<Root>/ϴm","SIDString":"Foc_model_Matlab:2688:1027:1035"},{"RTWName":"<Root>/Npp","SIDString":"Foc_model_Matlab:2688:1027:1036"},{"RTWName":"<Root>/Product","SIDString":"Foc_model_Matlab:2688:1027:1037"},{"RTWName":"<Root>/Npp*ϴm","SIDString":"Foc_model_Matlab:2688:1027:1038"},{"RTWName":"<Root>/Npp*ϴm","SIDString":"Foc_model_Matlab:2688:1027:1039"},{"RTWName":"<S4294967295>/ϴe","SIDString":"Foc_model_Matlab:2688:890"},{"RTWName":"<S111>/ϴm","SIDString":"Foc_model_Matlab:2688:892"},{"RTWName":"<S111>/Offset","SIDString":"Foc_model_Matlab:2688:993"},{"RTWName":"<S111>/Npp","SIDString":"Foc_model_Matlab:2688:998"},{"RTWName":"<S112>/ϴm","SIDString":"Foc_model_Matlab:2688:895"},{"RTWName":"<S112>/Offset","SIDString":"Foc_model_Matlab:2688:896"},{"RTWName":"<S112>/If","SIDString":"Foc_model_Matlab:2688:897"},{"RTWName":"<S114>/ϴm","SIDString":"Foc_model_Matlab:2688:899"},{"RTWName":"<S114>/Offset","SIDString":"Foc_model_Matlab:2688:900"},{"RTWName":"<S114>/Action Port","SIDString":"Foc_model_Matlab:2688:901"},{"RTWName":"<S114>/Add","SIDString":"Foc_model_Matlab:2688:902"},{"RTWName":"<S114>/Constant","SIDString":"Foc_model_Matlab:2688:903"},{"RTWName":"<S114>/ϴm_out","SIDString":"Foc_model_Matlab:2688:904"},{"RTWName":"<S115>/ϴm","SIDString":"Foc_model_Matlab:2688:906"},{"RTWName":"<S115>/Offset","SIDString":"Foc_model_Matlab:2688:907"},{"RTWName":"<S115>/Action Port","SIDString":"Foc_model_Matlab:2688:908"},{"RTWName":"<S115>/Add","SIDString":"Foc_model_Matlab:2688:909"},{"RTWName":"<S115>/ϴm_out","SIDString":"Foc_model_Matlab:2688:910"},{"RTWName":"<S112>/Merge","SIDString":"Foc_model_Matlab:2688:911"},{"RTWName":"<S112>/ϴm_out","SIDString":"Foc_model_Matlab:2688:912"},{"RTWName":"<S111>/Constant","SIDString":"Foc_model_Matlab:2688:913"},{"RTWName":"<S111>/Constant1","SIDString":"Foc_model_Matlab:2688:914"},{"RTWName":"<S111>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2688:915"},{"RTWName":"<S113>/ϴm","SIDString":"Foc_model_Matlab:2688:917"},{"RTWName":"<S113>/Npp","SIDString":"Foc_model_Matlab:2688:1013"},{"RTWName":"<S113>/Add","SIDString":"Foc_model_Matlab:2688:918"},{"RTWName":"<S113>/Floor","SIDString":"Foc_model_Matlab:2688:919"},{"RTWName":"<S113>/Multiply","SIDString":"Foc_model_Matlab:2688:920"},{"RTWName":"<S113>/Multiply1","SIDString":"Foc_model_Matlab:2688:921"},{"RTWName":"<S116>/ϴm","SIDString":"Foc_model_Matlab:2688:1014:1015"},{"RTWName":"<S116>/Npp","SIDString":"Foc_model_Matlab:2688:1014:1024"},{"RTWName":"<S117>/ϴm","SIDString":"Foc_model_Matlab:2688:1014:1017"},{"RTWName":"<S117>/Number of pole pairs","SIDString":"Foc_model_Matlab:2688:1014:922"},{"RTWName":"<S117>/Npp*ϴm","SIDString":"Foc_model_Matlab:2688:1014:1018"},{"RTWName":"<S4294967295>/ϴm","SIDString":"Foc_model_Matlab:2688:1014:1020"},{"RTWName":"<S4294967295>/Npp","SIDString":"Foc_model_Matlab:2688:1014:1025"},{"RTWName":"<S4294967295>/Product","SIDString":"Foc_model_Matlab:2688:1014:1026"},{"RTWName":"<S4294967295>/Npp*ϴm","SIDString":"Foc_model_Matlab:2688:1014:1021"},{"RTWName":"<S116>/Npp*ϴm","SIDString":"Foc_model_Matlab:2688:1014:1022"},{"RTWName":"<S113>/ϴe","SIDString":"Foc_model_Matlab:2688:924"},{"RTWName":"<S111>/Switch","SIDString":"Foc_model_Matlab:2688:925"},{"RTWName":"<S111>/ϴe","SIDString":"Foc_model_Matlab:2688:926"},{"RTWName":"<S110>/ϴe","SIDString":"Foc_model_Matlab:2688:927"},{"RTWName":"<S69>/ReplaceInport_Npp","SIDString":"Foc_model_Matlab:2688:1064"},{"RTWName":"<S69>/ReplaceInport_Offset","SIDString":"Foc_model_Matlab:2688:1065"},{"RTWName":"<S69>/ϴe","SIDString":"Foc_model_Matlab:2688:875"},{"RTWName":"<S65>/Pos_PU","SIDString":"Foc_model_Matlab:2689"},{"RTWName":"<S65>/Speed_PU","SIDString":"Foc_model_Matlab:2690"},{"RTWName":"<S66>/Iab_meas_ADC","SIDString":"Foc_model_Matlab:2692"},{"RTWName":"<S66>/Add","SIDString":"Foc_model_Matlab:2693"},{"RTWName":"<S66>/Data Store\nRead","SIDString":"Foc_model_Matlab:2694"},{"RTWName":"<S66>/Data Store\nRead1","SIDString":"Foc_model_Matlab:2695"},{"RTWName":"<S66>/Data Type Conversion2","SIDString":"Foc_model_Matlab:3071"},{"RTWName":"<S66>/Multiply","SIDString":"Foc_model_Matlab:2698"},{"RTWName":"<S66>/Mux","SIDString":"Foc_model_Matlab:2699"},{"RTWName":"<S66>/Iab_meas_PU","SIDString":"Foc_model_Matlab:2700"},{"RTWName":"<S64>/Terminator","SIDString":"Foc_model_Matlab:2726"},{"RTWName":"<S64>/Terminator1","SIDString":"Foc_model_Matlab:2727"},{"RTWName":"<S64>/Iab_Meas_PU","SIDString":"Foc_model_Matlab:2728"},{"RTWName":"<S64>/Pos_PU","SIDString":"Foc_model_Matlab:2729"},{"RTWName":"<S64>/Speed_PU","SIDString":"Foc_model_Matlab:2730"},{"RTWName":"<S4294967295>/Iab_meas_ADC","SIDString":"Foc_model_Matlab:2732"},{"RTWName":"<S4294967295>/Iab_Sim","SIDString":"Foc_model_Matlab:2733"},{"RTWName":"<S4294967295>/Pos_Sim","SIDString":"Foc_model_Matlab:2734"},{"RTWName":"<S65>/Iab_meas_ADC","SIDString":"Foc_model_Matlab:2757"},{"RTWName":"<S65>/Add","SIDString":"Foc_model_Matlab:2758"},{"RTWName":"<S65>/Data Store\nRead","SIDString":"Foc_model_Matlab:2759"},{"RTWName":"<S65>/Data Store\nRead1","SIDString":"Foc_model_Matlab:2760"},{"RTWName":"<S65>/Data Type Conversion1","SIDString":"Foc_model_Matlab:3454"},{"RTWName":"<S65>/Multiply","SIDString":"Foc_model_Matlab:2763"},{"RTWName":"<S65>/Mux","SIDString":"Foc_model_Matlab:2765"},{"RTWName":"<S65>/Iab_meas_PU","SIDString":"Foc_model_Matlab:2766"},{"RTWName":"<S66>/Pos_Sim","SIDString":"Foc_model_Matlab:2768"},{"RTWName":"<S4294967295>/In1","SIDString":"Foc_model_Matlab:2769:370"},{"RTWName":"<S4294967295>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2769:485"},{"RTWName":"<S4294967295>/Demux","SIDString":"Foc_model_Matlab:2769:496"},{"RTWName":"<S4294967295>/FilterConstant","SIDString":"Foc_model_Matlab:2769:478"},{"RTWName":"<S137>/x","SIDString":"Foc_model_Matlab:2769:348"},{"RTWName":"<S137>/A","SIDString":"Foc_model_Matlab:2769:392"},{"RTWName":"<S137>/OneMinusA","SIDString":"Foc_model_Matlab:2769:486"},{"RTWName":"<S138>/x","SIDString":"Foc_model_Matlab:2769:350"},{"RTWName":"<S138>/A","SIDString":"Foc_model_Matlab:2769:394"},{"RTWName":"<S138>/OneMinusA","SIDString":"Foc_model_Matlab:2769:489"},{"RTWName":"<S138>/IIR Low Pass Filter","SIDString":"Foc_model_Matlab:2769:395"},{"RTWName":"<S138>/Sum","SIDString":"Foc_model_Matlab:2769:352"},{"RTWName":"<S138>/y","SIDString":"Foc_model_Matlab:2769:353"},{"RTWName":"<S139>/x","SIDString":"Foc_model_Matlab:2769:355"},{"RTWName":"<S139>/A","SIDString":"Foc_model_Matlab:2769:393"},{"RTWName":"<S139>/OneMinusA","SIDString":"Foc_model_Matlab:2769:487"},{"RTWName":"<S140>/Input","SIDString":"Foc_model_Matlab:2769:359"},{"RTWName":"<S140>/A","SIDString":"Foc_model_Matlab:2769:396"},{"RTWName":"<S140>/OneMinusA","SIDString":"Foc_model_Matlab:2769:488"},{"RTWName":"<S140>/Add1","SIDString":"Foc_model_Matlab:2769:360"},{"RTWName":"<S140>/Product","SIDString":"Foc_model_Matlab:2769:364"},{"RTWName":"<S140>/Product1","SIDString":"Foc_model_Matlab:2769:365"},{"RTWName":"<S140>/Unit Delay","SIDString":"Foc_model_Matlab:2769:366"},{"RTWName":"<S140>/Output","SIDString":"Foc_model_Matlab:2769:367"},{"RTWName":"<S139>/y","SIDString":"Foc_model_Matlab:2769:357"},{"RTWName":"<S137>/y","SIDString":"Foc_model_Matlab:2769:358"},{"RTWName":"<S4294967295>/Mux","SIDString":"Foc_model_Matlab:2769:494"},{"RTWName":"<S4294967295>/Mux1","SIDString":"Foc_model_Matlab:2769:495"},{"RTWName":"<S4294967295>/One","SIDString":"Foc_model_Matlab:2769:479"},{"RTWName":"<S4294967295>/OneMinusFilterConstant","SIDString":"Foc_model_Matlab:2769:480"},{"RTWName":"<S4294967295>/Sum","SIDString":"Foc_model_Matlab:2769:481"},{"RTWName":"<S4294967295>/Switch1","SIDString":"Foc_model_Matlab:2769:483"},{"RTWName":"<S4294967295>/UseInputPort","SIDString":"Foc_model_Matlab:2769:484"},{"RTWName":"<S4294967295>/a","SIDString":"Foc_model_Matlab:2769:844"},{"RTWName":"<S4294967295>/Out1","SIDString":"Foc_model_Matlab:2769:381"},{"RTWName":"<S67>/ϴm","SIDString":"Foc_model_Matlab:2770:873"},{"RTWName":"<S69>/ϴm","SIDString":"Foc_model_Matlab:2770:876"},{"RTWName":"<S69>/Offset","SIDString":"Foc_model_Matlab:2770:994"},{"RTWName":"<S69>/Npp","SIDString":"Foc_model_Matlab:2770:997"},{"RTWName":"<S4294967295>/ϴm","SIDString":"Foc_model_Matlab:2770:879"},{"RTWName":"<S4294967295>/Offset","SIDString":"Foc_model_Matlab:2770:992"},{"RTWName":"<S4294967295>/Npp","SIDString":"Foc_model_Matlab:2770:999"},{"RTWName":"<S4294967295>/Constant","SIDString":"Foc_model_Matlab:2770:881"},{"RTWName":"<S4294967295>/Constant1","SIDString":"Foc_model_Matlab:2770:882"},{"RTWName":"<S4294967295>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2770:883"},{"RTWName":"<S4294967295>/Data Type Conversion","SIDString":"Foc_model_Matlab:2770:1040"},{"RTWName":"<S4294967295>/Data Type Conversion1","SIDString":"Foc_model_Matlab:2770:884"},{"RTWName":"<S4294967295>/Data Type Conversion2","SIDString":"Foc_model_Matlab:2770:885"},{"RTWName":"<S4294967295>/Data Type Conversion4","SIDString":"Foc_model_Matlab:2770:886"},{"RTWName":"<S4294967295>/Sum1","SIDString":"Foc_model_Matlab:2770:888"},{"RTWName":"<S4294967295>/Switch","SIDString":"Foc_model_Matlab:2770:889"},{"RTWName":"<S144>/ϴm","SIDString":"Foc_model_Matlab:2770:1027:1028"},{"RTWName":"<S144>/Npp","SIDString":"Foc_model_Matlab:2770:1027:1029"},{"RTWName":"<S145>/ϴm","SIDString":"Foc_model_Matlab:2770:1027:1031"},{"RTWName":"<S145>/Number of pole pairs","SIDString":"Foc_model_Matlab:2770:1027:887"},{"RTWName":"<S145>/Npp*ϴm","SIDString":"Foc_model_Matlab:2770:1027:1033"},{"RTWName":"<S146>/ϴm","SIDString":"Foc_model_Matlab:2770:1027:1035"},{"RTWName":"<S146>/Npp","SIDString":"Foc_model_Matlab:2770:1027:1036"},{"RTWName":"<S146>/Product","SIDString":"Foc_model_Matlab:2770:1027:1037"},{"RTWName":"<S146>/Npp*ϴm","SIDString":"Foc_model_Matlab:2770:1027:1038"},{"RTWName":"<S144>/Npp*ϴm","SIDString":"Foc_model_Matlab:2770:1027:1039"},{"RTWName":"<S4294967295>/ϴe","SIDString":"Foc_model_Matlab:2770:890"},{"RTWName":"<S70>/ϴm","SIDString":"Foc_model_Matlab:2770:892"},{"RTWName":"<S70>/Offset","SIDString":"Foc_model_Matlab:2770:993"},{"RTWName":"<S70>/Npp","SIDString":"Foc_model_Matlab:2770:998"},{"RTWName":"<S71>/ϴm","SIDString":"Foc_model_Matlab:2770:895"},{"RTWName":"<S71>/Offset","SIDString":"Foc_model_Matlab:2770:896"},{"RTWName":"<S71>/If","SIDString":"Foc_model_Matlab:2770:897"},{"RTWName":"<S73>/ϴm","SIDString":"Foc_model_Matlab:2770:899"},{"RTWName":"<S73>/Offset","SIDString":"Foc_model_Matlab:2770:900"},{"RTWName":"<S73>/Action Port","SIDString":"Foc_model_Matlab:2770:901"},{"RTWName":"<S73>/Add","SIDString":"Foc_model_Matlab:2770:902"},{"RTWName":"<S73>/Constant","SIDString":"Foc_model_Matlab:2770:903"},{"RTWName":"<S73>/ϴm_out","SIDString":"Foc_model_Matlab:2770:904"},{"RTWName":"<S74>/ϴm","SIDString":"Foc_model_Matlab:2770:906"},{"RTWName":"<S74>/Offset","SIDString":"Foc_model_Matlab:2770:907"},{"RTWName":"<S74>/Action Port","SIDString":"Foc_model_Matlab:2770:908"},{"RTWName":"<S74>/Add","SIDString":"Foc_model_Matlab:2770:909"},{"RTWName":"<S74>/ϴm_out","SIDString":"Foc_model_Matlab:2770:910"},{"RTWName":"<S71>/Merge","SIDString":"Foc_model_Matlab:2770:911"},{"RTWName":"<S71>/ϴm_out","SIDString":"Foc_model_Matlab:2770:912"},{"RTWName":"<S70>/Constant","SIDString":"Foc_model_Matlab:2770:913"},{"RTWName":"<S70>/Constant1","SIDString":"Foc_model_Matlab:2770:914"},{"RTWName":"<S70>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2770:915"},{"RTWName":"<S72>/ϴm","SIDString":"Foc_model_Matlab:2770:917"},{"RTWName":"<S72>/Npp","SIDString":"Foc_model_Matlab:2770:1013"},{"RTWName":"<S72>/Add","SIDString":"Foc_model_Matlab:2770:918"},{"RTWName":"<S72>/Floor","SIDString":"Foc_model_Matlab:2770:919"},{"RTWName":"<S72>/Multiply","SIDString":"Foc_model_Matlab:2770:920"},{"RTWName":"<S72>/Multiply1","SIDString":"Foc_model_Matlab:2770:921"},{"RTWName":"<S75>/ϴm","SIDString":"Foc_model_Matlab:2770:1014:1015"},{"RTWName":"<S75>/Npp","SIDString":"Foc_model_Matlab:2770:1014:1024"},{"RTWName":"<S76>/ϴm","SIDString":"Foc_model_Matlab:2770:1014:1017"},{"RTWName":"<S76>/Number of pole pairs","SIDString":"Foc_model_Matlab:2770:1014:922"},{"RTWName":"<S76>/Npp*ϴm","SIDString":"Foc_model_Matlab:2770:1014:1018"},{"RTWName":"<S4294967295>/ϴm","SIDString":"Foc_model_Matlab:2770:1014:1020"},{"RTWName":"<S4294967295>/Npp","SIDString":"Foc_model_Matlab:2770:1014:1025"},{"RTWName":"<S4294967295>/Product","SIDString":"Foc_model_Matlab:2770:1014:1026"},{"RTWName":"<S4294967295>/Npp*ϴm","SIDString":"Foc_model_Matlab:2770:1014:1021"},{"RTWName":"<S75>/Npp*ϴm","SIDString":"Foc_model_Matlab:2770:1014:1022"},{"RTWName":"<S72>/ϴe","SIDString":"Foc_model_Matlab:2770:924"},{"RTWName":"<S70>/Switch","SIDString":"Foc_model_Matlab:2770:925"},{"RTWName":"<S70>/ϴe","SIDString":"Foc_model_Matlab:2770:926"},{"RTWName":"<S69>/ϴe","SIDString":"Foc_model_Matlab:2770:927"},{"RTWName":"<S67>/ReplaceInport_Npp","SIDString":"Foc_model_Matlab:2770:1064"},{"RTWName":"<S67>/ReplaceInport_Offset","SIDString":"Foc_model_Matlab:2770:1065"},{"RTWName":"<S67>/ϴe","SIDString":"Foc_model_Matlab:2770:875"},{"RTWName":"<S68>/Position","SIDString":"Foc_model_Matlab:2771:142"},{"RTWName":"<S77>/In1","SIDString":"Foc_model_Matlab:2771:151"},{"RTWName":"<S4294967295>/In1","SIDString":"Foc_model_Matlab:2771:153"},{"RTWName":"<S4294967295>/Out1","SIDString":"Foc_model_Matlab:2771:154"},{"RTWName":"<S78>/In1","SIDString":"Foc_model_Matlab:2771:156"},{"RTWName":"<S78>/DTC","SIDString":"Foc_model_Matlab:2771:157"},{"RTWName":"<S78>/Out1","SIDString":"Foc_model_Matlab:2771:158"},{"RTWName":"<S77>/Out1","SIDString":"Foc_model_Matlab:2771:159"},{"RTWName":"<S68>/Delay","SIDString":"Foc_model_Matlab:2771:143"},{"RTWName":"<S68>/PositionToCount","SIDString":"Foc_model_Matlab:2771:146"},{"RTWName":"<S68>/SpeedCount","SIDString":"Foc_model_Matlab:2771:144"},{"RTWName":"<S68>/SpeedGain","SIDString":"Foc_model_Matlab:2771:145"},{"RTWName":"<S68>/Speed","SIDString":"Foc_model_Matlab:2771:147"},{"RTWName":"<S66>/Theta","SIDString":"Foc_model_Matlab:2772"},{"RTWName":"<S66>/Speed","SIDString":"Foc_model_Matlab:2773"},{"RTWName":"<S4294967295>/Terminator","SIDString":"Foc_model_Matlab:2774"},{"RTWName":"<S4294967295>/Iab_Meas_PU","SIDString":"Foc_model_Matlab:2775"},{"RTWName":"<S4294967295>/Pos_PU","SIDString":"Foc_model_Matlab:2776"},{"RTWName":"<S4294967295>/Speed_PU","SIDString":"Foc_model_Matlab:2777"},{"RTWName":"<S10>/Speed_PU","SIDString":"Foc_model_Matlab:2778"},{"RTWName":"<S10>/Iab_Meas_PU","SIDString":"Foc_model_Matlab:2779"},{"RTWName":"<S10>/Pos_PU","SIDString":"Foc_model_Matlab:2780"},{"RTWName":"<S11>/Inverter Signals","SIDString":"Foc_model_Matlab:2783"},{"RTWName":"<S11>/Demux","SIDString":"Foc_model_Matlab:2784"},{"RTWName":"<S11>/Demux1","SIDString":"Foc_model_Matlab:3073"},{"RTWName":"<S11>/FTM_PWM_Config","SIDString":"Foc_model_Matlab:3074"},{"RTWName":"<S11>/FreeMaster_Recorder_Call","SIDString":"Foc_model_Matlab:2787"},{"RTWName":"<S11>/Ground","SIDString":"Foc_model_Matlab:3196"},{"RTWName":"<S11>/Ground1","SIDString":"Foc_model_Matlab:3197"},{"RTWName":"<S11>/Ground2","SIDString":"Foc_model_Matlab:3198"},{"RTWName":"<S11>/Mux","SIDString":"Foc_model_Matlab:2788"},{"RTWName":"<S11>/Mux1","SIDString":"Foc_model_Matlab:3199"},{"RTWName":"<S11>/Mux2","SIDString":"Foc_model_Matlab:2789"},{"RTWName":"<S11>/Switch1","SIDString":"Foc_model_Matlab:2791"},{"RTWName":"<S11>/stop","SIDString":"Foc_model_Matlab:2792"},{"RTWName":"<S11>/Sim","SIDString":"Foc_model_Matlab:3200"},{"RTWName":"<S4294967295>/Inverter Signals","SIDString":"Foc_model_Matlab:3316"},{"RTWName":"<S4294967295>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:3317"},{"RTWName":"<S4294967295>/Demux","SIDString":"Foc_model_Matlab:3318"},{"RTWName":"<S4294967295>/Mux","SIDString":"Foc_model_Matlab:3319"},{"RTWName":"<S4294967295>/Mux2","SIDString":"Foc_model_Matlab:3320"},{"RTWName":"<S4294967295>/Switch1","SIDString":"Foc_model_Matlab:3321"},{"RTWName":"<S4294967295>/stop","SIDString":"Foc_model_Matlab:3322"},{"RTWName":"<S4294967295>/Sim","SIDString":"Foc_model_Matlab:3323"},{"RTWName":"<S1>/Mux","SIDString":"Foc_model_Matlab:2796"},{"RTWName":"<S12>/PWM_Duty","SIDString":"Foc_model_Matlab:2828"},{"RTWName":"<S12>/Constant1","SIDString":"Foc_model_Matlab:3089"},{"RTWName":"<S12>/Data Type Conversion","SIDString":"Foc_model_Matlab:2830"},{"RTWName":"<S12>/Enable","SIDString":"Foc_model_Matlab:2831"},{"RTWName":"<S12>/Gain","SIDString":"Foc_model_Matlab:3090"},{"RTWName":"<S12>/Sum1","SIDString":"Foc_model_Matlab:3091"},{"RTWName":"<S12>/PWM_Duty_Cycles","SIDString":"Foc_model_Matlab:2834"},{"RTWName":"<S12>/PWM_Enable","SIDString":"Foc_model_Matlab:2835"},{"RTWName":"<S118>/Data Store\nRead","SIDString":"Foc_model_Matlab:3307"},{"RTWName":"<S118>/Data Store\nRead1","SIDString":"Foc_model_Matlab:3308"},{"RTWName":"<S118>/Mux1","SIDString":"Foc_model_Matlab:3309"},{"RTWName":"<S118>/Iab_Meas_ADC","SIDString":"Foc_model_Matlab:3302"},{"RTWName":"<S4294967295>/Ground","SIDString":"Foc_model_Matlab:3304"},{"RTWName":"<S4294967295>/Iab_Meas_ADC","SIDString":"Foc_model_Matlab:3305"},{"RTWName":"<S13>/Iab_Meas_ADC","SIDString":"Foc_model_Matlab:3306"},{"RTWName":"<S1>/Variant Sink","SIDString":"Foc_model_Matlab:3324"},{"RTWName":"<S1>/Variant Source","SIDString":"Foc_model_Matlab:3325"},{"RTWName":"<S1>/debug_terminator","SIDString":"Foc_model_Matlab:2917"},{"RTWName":"<S1>/Duty Cycles","SIDString":"Foc_model_Matlab:2918"},{"RTWName":"<S1>/Speed_fb","SIDString":"Foc_model_Matlab:2919"},{"RTWName":"<Root>/Data Store\nMemory","SIDString":"Foc_model_Matlab:259"},{"RTWName":"<Root>/Data Store\nMemory1","SIDString":"Foc_model_Matlab:260"},{"RTWName":"<Root>/Data Store\nMemory10","SIDString":"Foc_model_Matlab:3814"},{"RTWName":"<Root>/Data Store\nMemory11","SIDString":"Foc_model_Matlab:3004"},{"RTWName":"<Root>/Data Store\nMemory12","SIDString":"Foc_model_Matlab:3007"},{"RTWName":"<Root>/Data Store\nMemory13","SIDString":"Foc_model_Matlab:3815"},{"RTWName":"<Root>/Data Store\nMemory14","SIDString":"Foc_model_Matlab:4233"},{"RTWName":"<Root>/Data Store\nMemory15","SIDString":"Foc_model_Matlab:4234"},{"RTWName":"<Root>/Data Store\nMemory16","SIDString":"Foc_model_Matlab:4235"},{"RTWName":"<Root>/Data Store\nMemory17","SIDString":"Foc_model_Matlab:4236"},{"RTWName":"<Root>/Data Store\nMemory18","SIDString":"Foc_model_Matlab:4237"},{"RTWName":"<Root>/Data Store\nMemory2","SIDString":"Foc_model_Matlab:261"},{"RTWName":"<Root>/Data Store\nMemory24","SIDString":"Foc_model_Matlab:3272"},{"RTWName":"<Root>/Data Store\nMemory25","SIDString":"Foc_model_Matlab:3284"},{"RTWName":"<Root>/Data Store\nMemory29","SIDString":"Foc_model_Matlab:262"},{"RTWName":"<Root>/Data Store\nMemory3","SIDString":"Foc_model_Matlab:263"},{"RTWName":"<Root>/Data Store\nMemory4","SIDString":"Foc_model_Matlab:264"},{"RTWName":"<Root>/Data Store\nMemory5","SIDString":"Foc_model_Matlab:265"},{"RTWName":"<Root>/Data Store\nMemory6","SIDString":"Foc_model_Matlab:266"},{"RTWName":"<Root>/Data Store\nMemory7","SIDString":"Foc_model_Matlab:1214"},{"RTWName":"<Root>/Data Store\nMemory8","SIDString":"Foc_model_Matlab:4232"},{"RTWName":"<Root>/Data Store\nMemory9","SIDString":"Foc_model_Matlab:3813"},{"RTWName":"<Root>/Demux","SIDString":"Foc_model_Matlab:3293"},{"RTWName":"<Root>/From2","SIDString":"Foc_model_Matlab:2377"},{"RTWName":"<Root>/From3","SIDString":"Foc_model_Matlab:2378"},{"RTWName":"<Root>/Goto2","SIDString":"Foc_model_Matlab:2920"},{"RTWName":"<Root>/Goto3","SIDString":"Foc_model_Matlab:2921"},{"RTWName":"<S2>/function","SIDString":"Foc_model_Matlab:1053"},{"RTWName":"<S119>/Add1","SIDString":"Foc_model_Matlab:1054"},{"RTWName":"<S121>/u","SIDString":"Foc_model_Matlab:1055:480"},{"RTWName":"<S123>:1","SIDString":"Foc_model_Matlab:1055:481:1"},{"RTWName":"<S121>/y","SIDString":"Foc_model_Matlab:1055:482"},{"RTWName":"<S122>/u","SIDString":"Foc_model_Matlab:1056:480"},{"RTWName":"<S124>:1","SIDString":"Foc_model_Matlab:1056:481:1"},{"RTWName":"<S122>/y","SIDString":"Foc_model_Matlab:1056:482"},{"RTWName":"<S119>/Data Type Conversion2","SIDString":"Foc_model_Matlab:1064"},{"RTWName":"<S119>/Data Type Conversion3","SIDString":"Foc_model_Matlab:1065"},{"RTWName":"<S119>/Data Type Conversion6","SIDString":"Foc_model_Matlab:1067"},{"RTWName":"<S119>/Digital_Input_HALL_A","SIDString":"Foc_model_Matlab:1068"},{"RTWName":"<S119>/Digital_Input_HALL_B","SIDString":"Foc_model_Matlab:1069"},{"RTWName":"<S119>/Digital_Input_HALL_C","SIDString":"Foc_model_Matlab:1070"},{"RTWName":"<S119>/Out1","SIDString":"Foc_model_Matlab:1926"},{"RTWName":"<S2>/Data Store\nRead","SIDString":"Foc_model_Matlab:1057"},{"RTWName":"<S2>/Data Store\nRead1","SIDString":"Foc_model_Matlab:1058"},{"RTWName":"<S2>/Data Store\nRead2","SIDString":"Foc_model_Matlab:3279"},{"RTWName":"<S2>/Data Store\nRead3","SIDString":"Foc_model_Matlab:3286"},{"RTWName":"<S2>/Data Store\nWrite","SIDString":"Foc_model_Matlab:1059"},{"RTWName":"<S2>/Data Store\nWrite1","SIDString":"Foc_model_Matlab:1060"},{"RTWName":"<S2>/Data Store\nWrite2","SIDString":"Foc_model_Matlab:1061"},{"RTWName":"<S2>/Data Store\nWrite3","SIDString":"Foc_model_Matlab:1062"},{"RTWName":"<S2>/Data Store\nWrite4","SIDString":"Foc_model_Matlab:3278"},{"RTWName":"<S2>/Data Store\nWrite7","SIDString":"Foc_model_Matlab:1063"},{"RTWName":"<S2>/Ground1","SIDString":"Foc_model_Matlab:1183"},{"RTWName":"<S120>/currentHallState","SIDString":"Foc_model_Matlab:1071:2"},{"RTWName":"<S120>/previousHallState","SIDString":"Foc_model_Matlab:1071:3"},{"RTWName":"<S120>/counterValue","SIDString":"Foc_model_Matlab:1071:4"},{"RTWName":"<S120>/previousDirection","SIDString":"Foc_model_Matlab:1071:5"},{"RTWName":"<S120>/Constant","SIDString":"Foc_model_Matlab:1071:57"},{"RTWName":"<S120>/Data Type Conversion","SIDString":"Foc_model_Matlab:1071:58"},{"RTWName":"<S120>/Data Type Conversion1","SIDString":"Foc_model_Matlab:1071:59"},{"RTWName":"<S120>/Data Type Conversion2","SIDString":"Foc_model_Matlab:1071:348"},{"RTWName":"<S120>/Detects if the halls\nreading is valid","SIDString":"Foc_model_Matlab:1071:60"},{"RTWName":"<S125>/Case","SIDString":"Foc_model_Matlab:1071:351"},{"RTWName":"<S125>/Default","SIDString":"Foc_model_Matlab:1071:352"},{"RTWName":"<S125>/currentHallState","SIDString":"Foc_model_Matlab:1071:353"},{"RTWName":"<S125>/previousHallState","SIDString":"Foc_model_Matlab:1071:354"},{"RTWName":"<S125>/previousDirection","SIDString":"Foc_model_Matlab:1071:355"},{"RTWName":"<S126>/previous_direction","SIDString":"Foc_model_Matlab:1071:7"},{"RTWName":"<S126>/Action Port","SIDString":"Foc_model_Matlab:1071:9"},{"RTWName":"<S126>/Constant","SIDString":"Foc_model_Matlab:1071:359"},{"RTWName":"<S126>/Constant1","SIDString":"Foc_model_Matlab:1071:11"},{"RTWName":"<S126>/Signal\nConversion","SIDString":"Foc_model_Matlab:1071:50"},{"RTWName":"<S126>/inValidHall","SIDString":"Foc_model_Matlab:1071:53"},{"RTWName":"<S126>/direction","SIDString":"Foc_model_Matlab:1071:54"},{"RTWName":"<S126>/directional_speed_valid_flag","SIDString":"Foc_model_Matlab:1071:55"},{"RTWName":"<S125>/Data Type Conversion","SIDString":"Foc_model_Matlab:1071:365"},{"RTWName":"<S125>/Merge","SIDString":"Foc_model_Matlab:1071:61"},{"RTWName":"<S125>/Merge1","SIDString":"Foc_model_Matlab:1071:62"},{"RTWName":"<S125>/Merge3","SIDString":"Foc_model_Matlab:1071:63"},{"RTWName":"<S127>/hallReading","SIDString":"Foc_model_Matlab:1071:65"},{"RTWName":"<S127>/previousState","SIDString":"Foc_model_Matlab:1071:66"},{"RTWName":"<S127>/previous_direction","SIDString":"Foc_model_Matlab:1071:67"},{"RTWName":"<S127>/Action Port","SIDString":"Foc_model_Matlab:1071:68"},{"RTWName":"<S127>/Constant","SIDString":"Foc_model_Matlab:1071:69"},{"RTWName":"<S127>/If","SIDString":"Foc_model_Matlab:1071:70"},{"RTWName":"<S128>/Action Port","SIDString":"Foc_model_Matlab:1071:72"},{"RTWName":"<S128>/next","SIDString":"Foc_model_Matlab:1071:73"},{"RTWName":"<S128>/previous","SIDString":"Foc_model_Matlab:1071:74"},{"RTWName":"<S128>/Out1","SIDString":"Foc_model_Matlab:1071:75"},{"RTWName":"<S128>/Out2","SIDString":"Foc_model_Matlab:1071:76"},{"RTWName":"<S129>/Action Port","SIDString":"Foc_model_Matlab:1071:78"},{"RTWName":"<S129>/next","SIDString":"Foc_model_Matlab:1071:79"},{"RTWName":"<S129>/previous","SIDString":"Foc_model_Matlab:1071:80"},{"RTWName":"<S129>/Out1","SIDString":"Foc_model_Matlab:1071:81"},{"RTWName":"<S129>/Out2","SIDString":"Foc_model_Matlab:1071:82"},{"RTWName":"<S130>/Action Port","SIDString":"Foc_model_Matlab:1071:84"},{"RTWName":"<S130>/next","SIDString":"Foc_model_Matlab:1071:85"},{"RTWName":"<S130>/previous","SIDString":"Foc_model_Matlab:1071:86"},{"RTWName":"<S130>/Out1","SIDString":"Foc_model_Matlab:1071:87"},{"RTWName":"<S130>/Out2","SIDString":"Foc_model_Matlab:1071:88"},{"RTWName":"<S131>/Action Port","SIDString":"Foc_model_Matlab:1071:90"},{"RTWName":"<S131>/next","SIDString":"Foc_model_Matlab:1071:91"},{"RTWName":"<S131>/previous","SIDString":"Foc_model_Matlab:1071:92"},{"RTWName":"<S131>/Out1","SIDString":"Foc_model_Matlab:1071:93"},{"RTWName":"<S131>/Out2","SIDString":"Foc_model_Matlab:1071:94"},{"RTWName":"<S132>/Action Port","SIDString":"Foc_model_Matlab:1071:96"},{"RTWName":"<S132>/next","SIDString":"Foc_model_Matlab:1071:97"},{"RTWName":"<S132>/previous","SIDString":"Foc_model_Matlab:1071:98"},{"RTWName":"<S132>/Out1","SIDString":"Foc_model_Matlab:1071:99"},{"RTWName":"<S132>/Out2","SIDString":"Foc_model_Matlab:1071:100"},{"RTWName":"<S133>/Action Port","SIDString":"Foc_model_Matlab:1071:102"},{"RTWName":"<S133>/next","SIDString":"Foc_model_Matlab:1071:103"},{"RTWName":"<S133>/previous","SIDString":"Foc_model_Matlab:1071:104"},{"RTWName":"<S133>/Out1","SIDString":"Foc_model_Matlab:1071:105"},{"RTWName":"<S133>/Out2","SIDString":"Foc_model_Matlab:1071:106"},{"RTWName":"<S134>/Action Port","SIDString":"Foc_model_Matlab:1071:108"},{"RTWName":"<S134>/Constant","SIDString":"Foc_model_Matlab:1071:109"},{"RTWName":"<S134>/Constant1","SIDString":"Foc_model_Matlab:1071:110"},{"RTWName":"<S134>/direction","SIDString":"Foc_model_Matlab:1071:111"},{"RTWName":"<S134>/sequence_check","SIDString":"Foc_model_Matlab:1071:112"},{"RTWName":"<S135>/Action Port","SIDString":"Foc_model_Matlab:1071:114"},{"RTWName":"<S135>/Constant","SIDString":"Foc_model_Matlab:1071:115"},{"RTWName":"<S135>/Constant1","SIDString":"Foc_model_Matlab:1071:116"},{"RTWName":"<S135>/direction","SIDString":"Foc_model_Matlab:1071:117"},{"RTWName":"<S135>/sequence_check","SIDString":"Foc_model_Matlab:1071:118"},{"RTWName":"<S136>/Action Port","SIDString":"Foc_model_Matlab:1071:120"},{"RTWName":"<S136>/Constant","SIDString":"Foc_model_Matlab:1071:121"},{"RTWName":"<S136>/sequence_check","SIDString":"Foc_model_Matlab:1071:122"},{"RTWName":"<S127>/Merge","SIDString":"Foc_model_Matlab:1071:123"},{"RTWName":"<S127>/Merge1","SIDString":"Foc_model_Matlab:1071:124"},{"RTWName":"<S127>/Merge2","SIDString":"Foc_model_Matlab:1071:125"},{"RTWName":"<S127>/Merge3","SIDString":"Foc_model_Matlab:1071:126"},{"RTWName":"<S127>/Relational\nOperator","SIDString":"Foc_model_Matlab:1071:127"},{"RTWName":"<S127>/Signal\nConversion","SIDString":"Foc_model_Matlab:1071:128"},{"RTWName":"<S127>/Signal\nConversion1","SIDString":"Foc_model_Matlab:1071:129"},{"RTWName":"<S127>/Switch","SIDString":"Foc_model_Matlab:1071:130"},{"RTWName":"<S127>/Switch Case","SIDString":"Foc_model_Matlab:1071:131"},{"RTWName":"<S137>/Action Port","SIDString":"Foc_model_Matlab:1071:363"},{"RTWName":"<S127>/directional_speed_valid_flag","SIDString":"Foc_model_Matlab:1071:132"},{"RTWName":"<S127>/direction","SIDString":"Foc_model_Matlab:1071:133"},{"RTWName":"<S127>/inValidHall","SIDString":"Foc_model_Matlab:1071:134"},{"RTWName":"<S125>/inValidHall","SIDString":"Foc_model_Matlab:1071:356"},{"RTWName":"<S125>/speedValidity","SIDString":"Foc_model_Matlab:1071:357"},{"RTWName":"<S125>/Direction","SIDString":"Foc_model_Matlab:1071:358"},{"RTWName":"<S120>/counterSize","SIDString":"Foc_model_Matlab:1071:349"},{"RTWName":"<S120>/inValidHall","SIDString":"Foc_model_Matlab:1071:136"},{"RTWName":"<S120>/SpeedCount","SIDString":"Foc_model_Matlab:1071:137"},{"RTWName":"<S120>/Direction","SIDString":"Foc_model_Matlab:1071:138"},{"RTWName":"<S120>/speedValidity","SIDString":"Foc_model_Matlab:1071:139"},{"RTWName":"<S120>/watchDogTimerReset_HallAck","SIDString":"Foc_model_Matlab:1071:140"},{"RTWName":"<S4294967295>/Data Type Conversion1","SIDString":"Foc_model_Matlab:1100"},{"RTWName":"<S4294967295>/Ground","SIDString":"Foc_model_Matlab:1099"},{"RTWName":"<S4294967295>/Out1","SIDString":"Foc_model_Matlab:1924"},{"RTWName":"<S2>/Switch","SIDString":"Foc_model_Matlab:3283"},{"RTWName":"<S2>/Terminator","SIDString":"Foc_model_Matlab:1072"},{"RTWName":"<S2>/Variant Source1","SIDString":"Foc_model_Matlab:1097"},{"RTWName":"<S2>/Variant Source2","SIDString":"Foc_model_Matlab:1182"},{"RTWName":"<S3>/Data Store\nWrite1","SIDString":"Foc_model_Matlab:3285"},{"RTWName":"<S3>/FTM_Hall_Sensor","SIDString":"Foc_model_Matlab:1050"},{"RTWName":"<S3>/Mux","SIDString":"Foc_model_Matlab:3294"},{"RTWName":"<S3>/SCI_Rx_INT","SIDString":"Foc_model_Matlab:3297"},{"RTWName":"<S139>/ADC_IB","SIDString":"Foc_model_Matlab:3524"},{"RTWName":"<S139>/function","SIDString":"Foc_model_Matlab:3525"},{"RTWName":"<S139>/ADC_AD4_IA","SIDString":"Foc_model_Matlab:3526"},{"RTWName":"<S139>/ADC_AD6_IDC","SIDString":"Foc_model_Matlab:3527"},{"RTWName":"<S139>/ADC_AD7_VDC","SIDString":"Foc_model_Matlab:3528"},{"RTWName":"<S139>/ADC_IRQHandlerProfiler","SIDString":"Foc_model_Matlab:3529"},{"RTWName":"<S139>/FTM_Init_Trigger_Disable","SIDString":"Foc_model_Matlab:3530"},{"RTWName":"<S141>/Vdc","SIDString":"Foc_model_Matlab:3532"},{"RTWName":"<S141>/Idc","SIDString":"Foc_model_Matlab:3533"},{"RTWName":"<S141>/ADC1_AD7_Offset","SIDString":"Foc_model_Matlab:3534"},{"RTWName":"<S141>/ADC_AD6 offset \nand \nLogic power supply compensation","SIDString":"Foc_model_Matlab:3535"},{"RTWName":"<S141>/Abs","SIDString":"Foc_model_Matlab:3536"},{"RTWName":"<S141>/Add","SIDString":"Foc_model_Matlab:3537"},{"RTWName":"<S141>/Check_Voltage_Current_Limits","SIDString":"Foc_model_Matlab:3538"},{"RTWName":"<S141>/Data Type Conversion","SIDString":"Foc_model_Matlab:3539"},{"RTWName":"<S141>/Data Type Conversion1","SIDString":"Foc_model_Matlab:3540"},{"RTWName":"<S142>/Action Port","SIDString":"Foc_model_Matlab:3542"},{"RTWName":"<S142>/FAULT_read","SIDString":"Foc_model_Matlab:3543"},{"RTWName":"<S143>/Action Port","SIDString":"Foc_model_Matlab:3545"},{"RTWName":"<S143>/FAULT_write","SIDString":"Foc_model_Matlab:3546"},{"RTWName":"<S143>/FTM_PWM_Disable_Enable","SIDString":"Foc_model_Matlab:3547"},{"RTWName":"<S143>/NOK","SIDString":"Foc_model_Matlab:3548"},{"RTWName":"<S143>/TPP_Functional_Mode","SIDString":"Foc_model_Matlab:3549"},{"RTWName":"<S142>/If","SIDString":"Foc_model_Matlab:3550"},{"RTWName":"<S141>/Product","SIDString":"Foc_model_Matlab:3551"},{"RTWName":"<S141>/Product1","SIDString":"Foc_model_Matlab:3552"},{"RTWName":"<S141>/Sum","SIDString":"Foc_model_Matlab:3553"},{"RTWName":"<S141>/bits2amps","SIDString":"Foc_model_Matlab:3554"},{"RTWName":"<S141>/bits2volts","SIDString":"Foc_model_Matlab:3555"},{"RTWName":"<S139>/Function-Call\nGenerator","SIDString":"Foc_model_Matlab:3556"},{"RTWName":"<S139>/Mux1","SIDString":"Foc_model_Matlab:3557"},{"RTWName":"<S139>/ADC_Event","SIDString":"Foc_model_Matlab:3558"},{"RTWName":"<S139>/ADC_res","SIDString":"Foc_model_Matlab:3559"},{"RTWName":"<S138>/ADC1_ISR","SIDString":"Foc_model_Matlab:3560"},{"RTWName":"<S138>/Data Store\nWrite","SIDString":"Foc_model_Matlab:3561"},{"RTWName":"<S138>/Data Store\nWrite1","SIDString":"Foc_model_Matlab:3562"},{"RTWName":"<S138>/Data Type Conversion","SIDString":"Foc_model_Matlab:3563"},{"RTWName":"<S138>/Demux","SIDString":"Foc_model_Matlab:3564"},{"RTWName":"<S140>/function","SIDString":"Foc_model_Matlab:3566"},{"RTWName":"<S140>/FTM_Init_Trigger_Enable","SIDString":"Foc_model_Matlab:3567"},{"RTWName":"<S138>/PDB1_ISR","SIDString":"Foc_model_Matlab:3568"},{"RTWName":"<S138>/Terminator","SIDString":"Foc_model_Matlab:3569"},{"RTWName":"<S138>/Terminator1","SIDString":"Foc_model_Matlab:3570"},{"RTWName":"<S138>/Terminator2","SIDString":"Foc_model_Matlab:3571"},{"RTWName":"<S138>/Terminator6","SIDString":"Foc_model_Matlab:3572"},{"RTWName":"<S138>/FcnCall","SIDString":"Foc_model_Matlab:3573"},{"RTWName":"<S3>/HW_INT","SIDString":"Foc_model_Matlab:1087"},{"RTWName":"<S4>/ADC0_Init","SIDString":"Foc_model_Matlab:3477"},{"RTWName":"<S4>/ADC1_IRQ","SIDString":"Foc_model_Matlab:3478"},{"RTWName":"<S4>/ADC1_Init","SIDString":"Foc_model_Matlab:3479"},{"RTWName":"<S4>/ADC_Interleave","SIDString":"Foc_model_Matlab:3480"},{"RTWName":"<S4>/Data Store\nRead","SIDString":"Foc_model_Matlab:3481"},{"RTWName":"<S144>:5","SIDString":"Foc_model_Matlab:3482:5"},{"RTWName":"<S144>:39","SIDString":"Foc_model_Matlab:3482:39"},{"RTWName":"<S144>:10","SIDString":"Foc_model_Matlab:3482:10"},{"RTWName":"<S144>:103","SIDString":"Foc_model_Matlab:3482:103"},{"RTWName":"<S144>:41","SIDString":"Foc_model_Matlab:3482:41"},{"RTWName":"<S144>:104","SIDString":"Foc_model_Matlab:3482:104"},{"RTWName":"<S144>:36","SIDString":"Foc_model_Matlab:3482:36"},{"RTWName":"<S145>/Action Port","SIDString":"Foc_model_Matlab:3484"},{"RTWName":"<S145>/LED_GREEN","SIDString":"Foc_model_Matlab:3485"},{"RTWName":"<S145>/LED_RED","SIDString":"Foc_model_Matlab:3486"},{"RTWName":"<S145>/OFF","SIDString":"Foc_model_Matlab:3487"},{"RTWName":"<S145>/ON","SIDString":"Foc_model_Matlab:3488"},{"RTWName":"<S4>/FreeMaster_Config","SIDString":"Foc_model_Matlab:3489"},{"RTWName":"<S4>/GD3000_Config","SIDString":"Foc_model_Matlab:3490"},{"RTWName":"<S146>/function","SIDString":"Foc_model_Matlab:3492"},{"RTWName":"<S146>/FAULT_write","SIDString":"Foc_model_Matlab:3493"},{"RTWName":"<S146>/FTM_PWM_Disable_Enable","SIDString":"Foc_model_Matlab:3494"},{"RTWName":"<S146>/NOK","SIDString":"Foc_model_Matlab:3495"},{"RTWName":"<S146>/TPP_Functional_Mode","SIDString":"Foc_model_Matlab:3496"},{"RTWName":"<S4>/GD300_ISR_Callback\n","SIDString":"Foc_model_Matlab:3497"},{"RTWName":"<S4>/If","SIDString":"Foc_model_Matlab:3498"},{"RTWName":"<S147>/Action Port","SIDString":"Foc_model_Matlab:3500"},{"RTWName":"<S147>/LED_GREEN","SIDString":"Foc_model_Matlab:3501"},{"RTWName":"<S147>/LED_GREEN_ON","SIDString":"Foc_model_Matlab:3502"},{"RTWName":"<S147>/LED_RED","SIDString":"Foc_model_Matlab:3503"},{"RTWName":"<S147>/LED_RED_OFF","SIDString":"Foc_model_Matlab:3504"},{"RTWName":"<S4>/LPSPI_Config\n","SIDString":"Foc_model_Matlab:3505"},{"RTWName":"<S4>/PDB0_Init","SIDString":"Foc_model_Matlab:3506"},{"RTWName":"<S4>/PDB1_Init","SIDString":"Foc_model_Matlab:3507"},{"RTWName":"<S4>/Terminator","SIDString":"Foc_model_Matlab:3508"},{"RTWName":"<S148>/function","SIDString":"Foc_model_Matlab:3510"},{"RTWName":"<S148>/FTM_Init_Trigger_Disable_Enable","SIDString":"Foc_model_Matlab:3512"},{"RTWName":"<S148>/FTM_PWM_Disable_Enable","SIDString":"Foc_model_Matlab:3513"},{"RTWName":"<S148>/PDB0_Enable","SIDString":"Foc_model_Matlab:3514"},{"RTWName":"<S148>/PDB1_Enable","SIDString":"Foc_model_Matlab:3515"},{"RTWName":"<S148>/TPP_ISR_Enable_Disable","SIDString":"Foc_model_Matlab:3516"},{"RTWName":"<Root>/I_MAX Scalling3","SIDString":"Foc_model_Matlab:1180"},{"RTWName":"<S5>/Duty_Cycles","SIDString":"Foc_model_Matlab:2923"},{"RTWName":"<S149>/Duty_Cycles","SIDString":"Foc_model_Matlab:2925"},{"RTWName":"<S149>/Ground","SIDString":"Foc_model_Matlab:2926"},{"RTWName":"<S149>/Ground1","SIDString":"Foc_model_Matlab:2927"},{"RTWName":"<S149>/Terminator","SIDString":"Foc_model_Matlab:2928"},{"RTWName":"<S149>/Iab_fb_Sim","SIDString":"Foc_model_Matlab:2929"},{"RTWName":"<S149>/Pos_fb_Sim","SIDString":"Foc_model_Matlab:2930"},{"RTWName":"<S4294967295>/Duty_Cycles","SIDString":"Foc_model_Matlab:2932"},{"RTWName":"<S101>/Duty_abc","SIDString":"Foc_model_Matlab:2934"},{"RTWName":"<S105>/Vabc_mod","SIDString":"Foc_model_Matlab:2935:27"},{"RTWName":"<S105>/Vdc","SIDString":"Foc_model_Matlab:2935:38"},{"RTWName":"<S105>/Constant","SIDString":"Foc_model_Matlab:2935:46"},{"RTWName":"<S105>/Demux","SIDString":"Foc_model_Matlab:2935:29"},{"RTWName":"<S105>/Gain","SIDString":"Foc_model_Matlab:2935:34"},{"RTWName":"<S105>/Mux","SIDString":"Foc_model_Matlab:2935:35"},{"RTWName":"<S105>/Product","SIDString":"Foc_model_Matlab:2935:37"},{"RTWName":"<S105>/Saturation2","SIDString":"Foc_model_Matlab:2935:41"},{"RTWName":"<S105>/Sum","SIDString":"Foc_model_Matlab:2935:30"},{"RTWName":"<S105>/Sum1","SIDString":"Foc_model_Matlab:2935:31"},{"RTWName":"<S105>/Sum2","SIDString":"Foc_model_Matlab:2935:32"},{"RTWName":"<S105>/Sum3","SIDString":"Foc_model_Matlab:2935:33"},{"RTWName":"<S105>/Switch","SIDString":"Foc_model_Matlab:2935:45"},{"RTWName":"<S105>/Vabc","SIDString":"Foc_model_Matlab:2935:28"},{"RTWName":"<S101>/Constant2","SIDString":"Foc_model_Matlab:2936"},{"RTWName":"<S101>/Data Type Conversion1","SIDString":"Foc_model_Matlab:2937"},{"RTWName":"<S101>/Rate Transition3","SIDString":"Foc_model_Matlab:2938"},{"RTWName":"<S101>/Vabc","SIDString":"Foc_model_Matlab:2939"},{"RTWName":"<S102>/Constant","SIDString":"Foc_model_Matlab:3603"},{"RTWName":"<S102>/Data Type Conversion","SIDString":"Foc_model_Matlab:2941"},{"RTWName":"<S4294967295>/In1","SIDString":"Foc_model_Matlab:2942:370"},{"RTWName":"<S4294967295>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2942:485"},{"RTWName":"<S4294967295>/Demux","SIDString":"Foc_model_Matlab:2942:496"},{"RTWName":"<S4294967295>/FilterConstant","SIDString":"Foc_model_Matlab:2942:478"},{"RTWName":"<S198>/x","SIDString":"Foc_model_Matlab:2942:348"},{"RTWName":"<S198>/A","SIDString":"Foc_model_Matlab:2942:392"},{"RTWName":"<S198>/OneMinusA","SIDString":"Foc_model_Matlab:2942:486"},{"RTWName":"<S199>/x","SIDString":"Foc_model_Matlab:2942:350"},{"RTWName":"<S199>/A","SIDString":"Foc_model_Matlab:2942:394"},{"RTWName":"<S199>/OneMinusA","SIDString":"Foc_model_Matlab:2942:489"},{"RTWName":"<S199>/IIR Low Pass Filter","SIDString":"Foc_model_Matlab:2942:395"},{"RTWName":"<S199>/Sum","SIDString":"Foc_model_Matlab:2942:352"},{"RTWName":"<S199>/y","SIDString":"Foc_model_Matlab:2942:353"},{"RTWName":"<S200>/x","SIDString":"Foc_model_Matlab:2942:355"},{"RTWName":"<S200>/A","SIDString":"Foc_model_Matlab:2942:393"},{"RTWName":"<S200>/OneMinusA","SIDString":"Foc_model_Matlab:2942:487"},{"RTWName":"<S201>/Input","SIDString":"Foc_model_Matlab:2942:359"},{"RTWName":"<S201>/A","SIDString":"Foc_model_Matlab:2942:396"},{"RTWName":"<S201>/OneMinusA","SIDString":"Foc_model_Matlab:2942:488"},{"RTWName":"<S201>/Add1","SIDString":"Foc_model_Matlab:2942:360"},{"RTWName":"<S201>/Product","SIDString":"Foc_model_Matlab:2942:364"},{"RTWName":"<S201>/Product1","SIDString":"Foc_model_Matlab:2942:365"},{"RTWName":"<S201>/Unit Delay","SIDString":"Foc_model_Matlab:2942:366"},{"RTWName":"<S201>/Output","SIDString":"Foc_model_Matlab:2942:367"},{"RTWName":"<S200>/y","SIDString":"Foc_model_Matlab:2942:357"},{"RTWName":"<S198>/y","SIDString":"Foc_model_Matlab:2942:358"},{"RTWName":"<S4294967295>/Mux","SIDString":"Foc_model_Matlab:2942:494"},{"RTWName":"<S4294967295>/Mux1","SIDString":"Foc_model_Matlab:2942:495"},{"RTWName":"<S4294967295>/One","SIDString":"Foc_model_Matlab:2942:479"},{"RTWName":"<S4294967295>/OneMinusFilterConstant","SIDString":"Foc_model_Matlab:2942:480"},{"RTWName":"<S4294967295>/Sum","SIDString":"Foc_model_Matlab:2942:481"},{"RTWName":"<S4294967295>/Switch1","SIDString":"Foc_model_Matlab:2942:483"},{"RTWName":"<S4294967295>/UseInputPort","SIDString":"Foc_model_Matlab:2942:484"},{"RTWName":"<S4294967295>/a","SIDString":"Foc_model_Matlab:2942:844"},{"RTWName":"<S4294967295>/Out1","SIDString":"Foc_model_Matlab:2942:381"},{"RTWName":"<S102>/T_load","SIDString":"Foc_model_Matlab:2943"},{"RTWName":"<S102>/Load_Trq","SIDString":"Foc_model_Matlab:2944"},{"RTWName":"<S4294967295>/RT1","SIDString":"Foc_model_Matlab:2945"},{"RTWName":"<S4294967295>/RT3","SIDString":"Foc_model_Matlab:2946"},{"RTWName":"<S4294967295>/Rate Transition","SIDString":"Foc_model_Matlab:2947"},{"RTWName":"<S4294967295>/Rate Transition1","SIDString":"Foc_model_Matlab:2948"},{"RTWName":"<S103>/Info","SIDString":"Foc_model_Matlab:2950"},{"RTWName":"<S103>/PhaseCurr","SIDString":"Foc_model_Matlab:2951"},{"RTWName":"<S103>/.","SIDString":"Foc_model_Matlab:3455"},{"RTWName":"<S103>/Add4","SIDString":"Foc_model_Matlab:2952"},{"RTWName":"<S103>/Bus\nSelector","SIDString":"Foc_model_Matlab:2953"},{"RTWName":"<S103>/Constant2","SIDString":"Foc_model_Matlab:2954"},{"RTWName":"<S103>/Data Type Conversion1","SIDString":"Foc_model_Matlab:2955"},{"RTWName":"<S103>/Data Type Conversion2","SIDString":"Foc_model_Matlab:2956"},{"RTWName":"<S103>/Data Type Conversion4","SIDString":"Foc_model_Matlab:2957"},{"RTWName":"<S103>/Delay1","SIDString":"Foc_model_Matlab:2958"},{"RTWName":"<S103>/Delay2","SIDString":"Foc_model_Matlab:2959"},{"RTWName":"<S103>/Get_ADC_Counts","SIDString":"Foc_model_Matlab:2960"},{"RTWName":"<S103>/Get_PU","SIDString":"Foc_model_Matlab:2961"},{"RTWName":"<S103>/Get_PU1","SIDString":"Foc_model_Matlab:2962"},{"RTWName":"<S103>/Mod","SIDString":"Foc_model_Matlab:2963"},{"RTWName":"<S103>/Saturation","SIDString":"Foc_model_Matlab:2964"},{"RTWName":"<S103>/Saturation1","SIDString":"Foc_model_Matlab:2965"},{"RTWName":"<S103>/Selector1","SIDString":"Foc_model_Matlab:3456"},{"RTWName":"<S103>/~2.5V in ADC counts","SIDString":"Foc_model_Matlab:2967"},{"RTWName":"<S103>/Iab_fb","SIDString":"Foc_model_Matlab:2968"},{"RTWName":"<S103>/Pos_fb","SIDString":"Foc_model_Matlab:2969"},{"RTWName":"<S104>/LdTrq","SIDString":"Foc_model_Matlab:2972:1565"},{"RTWName":"<S104>/PhaseVolt","SIDString":"Foc_model_Matlab:2972:1535"},{"RTWName":"<S106>/LdTrq","SIDString":"Foc_model_Matlab:2972:1571:6320"},{"RTWName":"<S106>/PhaseVolt","SIDString":"Foc_model_Matlab:2972:1571:6321"},{"RTWName":"<S107>/LdTrq","SIDString":"Foc_model_Matlab:2972:1571:6333:5837"},{"RTWName":"<S107>/PhaseVolt","SIDString":"Foc_model_Matlab:2972:1571:6333:5838"},{"RTWName":"<S107>/From","SIDString":"Foc_model_Matlab:2972:1571:6333:5839"},{"RTWName":"<S107>/From1","SIDString":"Foc_model_Matlab:2972:1571:6333:5840"},{"RTWName":"<S107>/From10","SIDString":"Foc_model_Matlab:2972:1571:6333:5841"},{"RTWName":"<S107>/From11","SIDString":"Foc_model_Matlab:2972:1571:6333:5842"},{"RTWName":"<S107>/From12","SIDString":"Foc_model_Matlab:2972:1571:6333:6366"},{"RTWName":"<S107>/From18","SIDString":"Foc_model_Matlab:2972:1571:6333:6367"},{"RTWName":"<S107>/From19","SIDString":"Foc_model_Matlab:2972:1571:6333:6368"},{"RTWName":"<S107>/From2","SIDString":"Foc_model_Matlab:2972:1571:6333:5843"},{"RTWName":"<S107>/From20","SIDString":"Foc_model_Matlab:2972:1571:6333:6369"},{"RTWName":"<S107>/From3","SIDString":"Foc_model_Matlab:2972:1571:6333:5844"},{"RTWName":"<S107>/From4","SIDString":"Foc_model_Matlab:2972:1571:6333:5845"},{"RTWName":"<S107>/From5","SIDString":"Foc_model_Matlab:2972:1571:6333:5846"},{"RTWName":"<S107>/From6","SIDString":"Foc_model_Matlab:2972:1571:6333:5847"},{"RTWName":"<S107>/From7","SIDString":"Foc_model_Matlab:2972:1571:6333:5848"},{"RTWName":"<S107>/From8","SIDString":"Foc_model_Matlab:2972:1571:6333:5849"},{"RTWName":"<S107>/From9","SIDString":"Foc_model_Matlab:2972:1571:6333:5850"},{"RTWName":"<S107>/Goto1","SIDString":"Foc_model_Matlab:2972:1571:6333:5851"},{"RTWName":"<S107>/Goto10","SIDString":"Foc_model_Matlab:2972:1571:6333:5852"},{"RTWName":"<S107>/Goto11","SIDString":"Foc_model_Matlab:2972:1571:6333:5853"},{"RTWName":"<S107>/Goto12","SIDString":"Foc_model_Matlab:2972:1571:6333:5854"},{"RTWName":"<S107>/Goto2","SIDString":"Foc_model_Matlab:2972:1571:6333:5855"},{"RTWName":"<S107>/Goto3","SIDString":"Foc_model_Matlab:2972:1571:6333:5856"},{"RTWName":"<S107>/Goto4","SIDString":"Foc_model_Matlab:2972:1571:6333:5857"},{"RTWName":"<S107>/Goto5","SIDString":"Foc_model_Matlab:2972:1571:6333:5858"},{"RTWName":"<S107>/Goto6","SIDString":"Foc_model_Matlab:2972:1571:6333:5859"},{"RTWName":"<S107>/Goto7","SIDString":"Foc_model_Matlab:2972:1571:6333:5860"},{"RTWName":"<S107>/Goto8","SIDString":"Foc_model_Matlab:2972:1571:6333:5861"},{"RTWName":"<S107>/Goto9","SIDString":"Foc_model_Matlab:2972:1571:6333:5862"},{"RTWName":"<S108>/MachineTrq","SIDString":"Foc_model_Matlab:2972:1571:6333:5864"},{"RTWName":"<S108>/Tload","SIDString":"Foc_model_Matlab:2972:1571:6333:5865"},{"RTWName":"<S108>/Abs","SIDString":"Foc_model_Matlab:2972:1571:6333:5866"},{"RTWName":"<S108>/Add","SIDString":"Foc_model_Matlab:2972:1571:6333:5867"},{"RTWName":"<S108>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:5868"},{"RTWName":"<S108>/Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:5869"},{"RTWName":"<S108>/Constant2","SIDString":"Foc_model_Matlab:2972:1571:6333:5870"},{"RTWName":"<S108>/Constant3","SIDString":"Foc_model_Matlab:2972:1571:6333:5871"},{"RTWName":"<S108>/Constant4","SIDString":"Foc_model_Matlab:2972:1571:6333:5872"},{"RTWName":"<S108>/Constant5","SIDString":"Foc_model_Matlab:2972:1571:6333:5873"},{"RTWName":"<S108>/Discrete-Time\nIntegrator","SIDString":"Foc_model_Matlab:2972:1571:6333:6310"},{"RTWName":"<S108>/Divide","SIDString":"Foc_model_Matlab:2972:1571:6333:5874"},{"RTWName":"<S108>/Divide1","SIDString":"Foc_model_Matlab:2972:1571:6333:5875"},{"RTWName":"<S108>/Divide2","SIDString":"Foc_model_Matlab:2972:1571:6333:5876"},{"RTWName":"<S108>/From","SIDString":"Foc_model_Matlab:2972:1571:6333:5877"},{"RTWName":"<S108>/From1","SIDString":"Foc_model_Matlab:2972:1571:6333:5878"},{"RTWName":"<S108>/From2","SIDString":"Foc_model_Matlab:2972:1571:6333:5879"},{"RTWName":"<S108>/Gain","SIDString":"Foc_model_Matlab:2972:1571:6333:5880"},{"RTWName":"<S108>/Gain4","SIDString":"Foc_model_Matlab:2972:1571:6333:5881"},{"RTWName":"<S108>/Goto1","SIDString":"Foc_model_Matlab:2972:1571:6333:5883"},{"RTWName":"<S108>/Goto2","SIDString":"Foc_model_Matlab:2972:1571:6333:5884"},{"RTWName":"<S108>/Goto3","SIDString":"Foc_model_Matlab:2972:1571:6333:5885"},{"RTWName":"<S108>/Index\nVector","SIDString":"Foc_model_Matlab:2972:1571:6333:5886"},{"RTWName":"<S108>/Index\nVector1","SIDString":"Foc_model_Matlab:2972:1571:6333:5887"},{"RTWName":"<S108>/Index\nVector2","SIDString":"Foc_model_Matlab:2972:1571:6333:5888"},{"RTWName":"<S111>/In1","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:103"},{"RTWName":"<S111>/Add","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:104"},{"RTWName":"<S111>/Add1","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:105"},{"RTWName":"<S112>/u","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:106:1"},{"RTWName":"<S112>/Compare","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:106:2"},{"RTWName":"<S112>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:106:3"},{"RTWName":"<S112>/y","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:106:4"},{"RTWName":"<S113>/u","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:107:1"},{"RTWName":"<S113>/Compare","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:107:2"},{"RTWName":"<S113>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:107:3"},{"RTWName":"<S113>/y","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:107:4"},{"RTWName":"<S111>/Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:108"},{"RTWName":"<S111>/Constant3","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:109"},{"RTWName":"<S111>/Gain1","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:110"},{"RTWName":"<S111>/Subtract","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:111"},{"RTWName":"<S111>/Switch","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:112"},{"RTWName":"<S111>/Switch1","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:113"},{"RTWName":"<S111>/Unit Delay","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:114"},{"RTWName":"<S111>/Out1","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:115"},{"RTWName":"<S108>/Product3","SIDString":"Foc_model_Matlab:2972:1571:6333:5891"},{"RTWName":"<S108>/Product4","SIDString":"Foc_model_Matlab:2972:1571:6333:5892"},{"RTWName":"<S108>/Sign","SIDString":"Foc_model_Matlab:2972:1571:6333:6311"},{"RTWName":"<S108>/Sum1","SIDString":"Foc_model_Matlab:2972:1571:6333:5893"},{"RTWName":"<S108>/PwrMech","SIDString":"Foc_model_Matlab:2972:1571:6333:5895"},{"RTWName":"<S108>/RotorAngle","SIDString":"Foc_model_Matlab:2972:1571:6333:5896"},{"RTWName":"<S108>/RotorSpd","SIDString":"Foc_model_Matlab:2972:1571:6333:5897"},{"RTWName":"<S108>/RotorElecAngle","SIDString":"Foc_model_Matlab:2972:1571:6333:5898"},{"RTWName":"<S108>/RotorElecSpd","SIDString":"Foc_model_Matlab:2972:1571:6333:5899"},{"RTWName":"<S109>/IaStator","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5252"},{"RTWName":"<S109>/IbStator","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5253"},{"RTWName":"<S109>/IcStator","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5254"},{"RTWName":"<S109>/IdSync","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5255"},{"RTWName":"<S109>/IqSync","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5256"},{"RTWName":"<S109>/VdSync","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5257"},{"RTWName":"<S109>/VqSync","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5258"},{"RTWName":"<S109>/MtrSpd","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5259"},{"RTWName":"<S109>/MtrPos","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5260"},{"RTWName":"<S109>/MtrTrq","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5261"},{"RTWName":"<S109>/PhaseVolt","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5262"},{"RTWName":"<S109>/PwrMech","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5345"},{"RTWName":"<S109>/Add","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5263"},{"RTWName":"<S109>/Add2","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5346"},{"RTWName":"<S109>/Add4","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5362"},{"RTWName":"<S109>/Bus\nCreator","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5264"},{"RTWName":"<S109>/Bus\nCreator1","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5265"},{"RTWName":"<S109>/Bus\nCreator2","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5266"},{"RTWName":"<S109>/Bus\nCreator3","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5363"},{"RTWName":"<S109>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5347"},{"RTWName":"<S109>/Demux","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5267"},{"RTWName":"<S109>/From1","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5268"},{"RTWName":"<S109>/From10","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5269"},{"RTWName":"<S109>/From2","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5270"},{"RTWName":"<S109>/From3","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5271"},{"RTWName":"<S109>/From31","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5348"},{"RTWName":"<S109>/From33","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5349"},{"RTWName":"<S109>/From4","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5272"},{"RTWName":"<S109>/Gain","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5273"},{"RTWName":"<S109>/Gain1","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5350"},{"RTWName":"<S109>/Gain2","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5351"},{"RTWName":"<S109>/Goto1","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5274"},{"RTWName":"<S109>/Goto11","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5275"},{"RTWName":"<S109>/Goto2","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5276"},{"RTWName":"<S109>/Goto3","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5277"},{"RTWName":"<S109>/Goto4","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5278"},{"RTWName":"<S109>/Goto5","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5360"},{"RTWName":"<S109>/Goto7","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5359"},{"RTWName":"<S114>/MtrPos","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:6388"},{"RTWName":"<S114>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:6390"},{"RTWName":"<S114>/Mod","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:6391"},{"RTWName":"<S114>/polepair","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:6386"},{"RTWName":"<S114>/MtrElcPos","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:6389"},{"RTWName":"<S115>/PwrTrnsfrd","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:101"},{"RTWName":"<S115>/PwrNotTrnsfrd","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:118"},{"RTWName":"<S115>/PwrStored","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:120"},{"RTWName":"<S115>/Bus\nCreator","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:121"},{"RTWName":"<S116>/PwrIn","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:117:8"},{"RTWName":"<S116>/PwrOut","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:117:9"},{"RTWName":"<S117>/PwrIn","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:119:8"},{"RTWName":"<S117>/PwrOut","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:119:9"},{"RTWName":"<S118>/PwrIn","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:100:8"},{"RTWName":"<S118>/PwrOut","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:100:9"},{"RTWName":"<S115>/Signal Specification","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:123"},{"RTWName":"<S115>/PwrInfo","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:16"},{"RTWName":"<S109>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5280"},{"RTWName":"<S109>/Product1","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5281"},{"RTWName":"<S109>/Product11","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5352"},{"RTWName":"<S109>/Product12","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5353"},{"RTWName":"<S109>/Product2","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5282"},{"RTWName":"<S109>/Product3","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5283"},{"RTWName":"<S109>/Product4","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5354"},{"RTWName":"<S109>/Signal Specification","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5284"},{"RTWName":"<S109>/Signal Specification1","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5285"},{"RTWName":"<S109>/Signal Specification10","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5286"},{"RTWName":"<S109>/Signal Specification11","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5355"},{"RTWName":"<S109>/Signal Specification12","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5288"},{"RTWName":"<S109>/Signal Specification13","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5356"},{"RTWName":"<S109>/Signal Specification14","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5361"},{"RTWName":"<S109>/Signal Specification15","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:6392"},{"RTWName":"<S109>/Signal Specification2","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5289"},{"RTWName":"<S109>/Signal Specification3","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5290"},{"RTWName":"<S109>/Signal Specification4","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5291"},{"RTWName":"<S109>/Signal Specification5","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5292"},{"RTWName":"<S109>/Signal Specification6","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5293"},{"RTWName":"<S109>/Signal Specification7","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5294"},{"RTWName":"<S109>/Signal Specification8","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5295"},{"RTWName":"<S109>/Signal Specification9","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5296"},{"RTWName":"<S109>/Info","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5298"},{"RTWName":"<S110>/PhaseVolt","SIDString":"Foc_model_Matlab:2972:1571:6333:5902"},{"RTWName":"<S110>/RotorElecAngle","SIDString":"Foc_model_Matlab:2972:1571:6333:5903"},{"RTWName":"<S110>/RotorElecSpd","SIDString":"Foc_model_Matlab:2972:1571:6333:5904"},{"RTWName":"<S119>/Abc","SIDString":"Foc_model_Matlab:2972:1571:6333:5906"},{"RTWName":"<S119>/Add","SIDString":"Foc_model_Matlab:2972:1571:6333:5907"},{"RTWName":"<S119>/Add1","SIDString":"Foc_model_Matlab:2972:1571:6333:5908"},{"RTWName":"<S119>/Demux","SIDString":"Foc_model_Matlab:2972:1571:6333:5909"},{"RTWName":"<S119>/Gain","SIDString":"Foc_model_Matlab:2972:1571:6333:5910"},{"RTWName":"<S119>/Gain1","SIDString":"Foc_model_Matlab:2972:1571:6333:5911"},{"RTWName":"<S119>/Gain2","SIDString":"Foc_model_Matlab:2972:1571:6333:5912"},{"RTWName":"<S119>/Gain3","SIDString":"Foc_model_Matlab:2972:1571:6333:5913"},{"RTWName":"<S119>/Gain4","SIDString":"Foc_model_Matlab:2972:1571:6333:5914"},{"RTWName":"<S119>/Alpha","SIDString":"Foc_model_Matlab:2972:1571:6333:5915"},{"RTWName":"<S119>/Beta","SIDString":"Foc_model_Matlab:2972:1571:6333:5916"},{"RTWName":"<S120>/Alpha","SIDString":"Foc_model_Matlab:2972:1571:6333:5918"},{"RTWName":"<S120>/Beta","SIDString":"Foc_model_Matlab:2972:1571:6333:5919"},{"RTWName":"<S120>/Gain1","SIDString":"Foc_model_Matlab:2972:1571:6333:5920"},{"RTWName":"<S120>/Gain2","SIDString":"Foc_model_Matlab:2972:1571:6333:5921"},{"RTWName":"<S120>/Gain3","SIDString":"Foc_model_Matlab:2972:1571:6333:5922"},{"RTWName":"<S120>/Gain4","SIDString":"Foc_model_Matlab:2972:1571:6333:5923"},{"RTWName":"<S120>/Subtract1","SIDString":"Foc_model_Matlab:2972:1571:6333:5924"},{"RTWName":"<S120>/Subtract2","SIDString":"Foc_model_Matlab:2972:1571:6333:5925"},{"RTWName":"<S120>/A","SIDString":"Foc_model_Matlab:2972:1571:6333:5926"},{"RTWName":"<S120>/B","SIDString":"Foc_model_Matlab:2972:1571:6333:5927"},{"RTWName":"<S120>/C","SIDString":"Foc_model_Matlab:2972:1571:6333:5928"},{"RTWName":"<S121>/DSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:5930"},{"RTWName":"<S121>/QSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:5931"},{"RTWName":"<S121>/SinTheta","SIDString":"Foc_model_Matlab:2972:1571:6333:5932"},{"RTWName":"<S121>/CosTheta","SIDString":"Foc_model_Matlab:2972:1571:6333:5933"},{"RTWName":"<S121>/Add","SIDString":"Foc_model_Matlab:2972:1571:6333:5934"},{"RTWName":"<S121>/Add1","SIDString":"Foc_model_Matlab:2972:1571:6333:5935"},{"RTWName":"<S121>/CosTheta1","SIDString":"Foc_model_Matlab:2972:1571:6333:5936"},{"RTWName":"<S121>/DSyn1","SIDString":"Foc_model_Matlab:2972:1571:6333:5937"},{"RTWName":"<S121>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:5938"},{"RTWName":"<S121>/Product1","SIDString":"Foc_model_Matlab:2972:1571:6333:5939"},{"RTWName":"<S121>/Product2","SIDString":"Foc_model_Matlab:2972:1571:6333:5940"},{"RTWName":"<S121>/Product3","SIDString":"Foc_model_Matlab:2972:1571:6333:5941"},{"RTWName":"<S121>/QSyn1","SIDString":"Foc_model_Matlab:2972:1571:6333:5942"},{"RTWName":"<S121>/SinTheta1","SIDString":"Foc_model_Matlab:2972:1571:6333:5943"},{"RTWName":"<S121>/Alpha","SIDString":"Foc_model_Matlab:2972:1571:6333:5944"},{"RTWName":"<S121>/Beta","SIDString":"Foc_model_Matlab:2972:1571:6333:5945"},{"RTWName":"<S122>/IdSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:5947"},{"RTWName":"<S122>/IqSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:5948"},{"RTWName":"<S122>/Add","SIDString":"Foc_model_Matlab:2972:1571:6333:5949"},{"RTWName":"<S122>/Gain1","SIDString":"Foc_model_Matlab:2972:1571:6333:5950"},{"RTWName":"<S122>/Gain2","SIDString":"Foc_model_Matlab:2972:1571:6333:5951"},{"RTWName":"<S122>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:5952"},{"RTWName":"<S125>/In1","SIDString":"Foc_model_Matlab:2972:1571:6333:5954"},{"RTWName":"<S125>/Add","SIDString":"Foc_model_Matlab:2972:1571:6333:5955"},{"RTWName":"<S125>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:5956"},{"RTWName":"<S125>/Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:5957"},{"RTWName":"<S125>/Constant2","SIDString":"Foc_model_Matlab:2972:1571:6333:5958"},{"RTWName":"<S125>/Index\nVector","SIDString":"Foc_model_Matlab:2972:1571:6333:5959"},{"RTWName":"<S125>/Index\nVector1","SIDString":"Foc_model_Matlab:2972:1571:6333:5960"},{"RTWName":"<S125>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:5961"},{"RTWName":"<S125>/Out1","SIDString":"Foc_model_Matlab:2972:1571:6333:5962"},{"RTWName":"<S122>/MotorTrq","SIDString":"Foc_model_Matlab:2972:1571:6333:5964"},{"RTWName":"<S123>/VdSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:5966"},{"RTWName":"<S123>/VqSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:5967"},{"RTWName":"<S123>/RotorElecSpd","SIDString":"Foc_model_Matlab:2972:1571:6333:5968"},{"RTWName":"<S126>/VdSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:5970"},{"RTWName":"<S126>/RotorElecSpd","SIDString":"Foc_model_Matlab:2972:1571:6333:5971"},{"RTWName":"<S126>/IqSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:5972"},{"RTWName":"<S126>/Add","SIDString":"Foc_model_Matlab:2972:1571:6333:5973"},{"RTWName":"<S126>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:5974"},{"RTWName":"<S126>/Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:5975"},{"RTWName":"<S126>/Discrete-Time\nIntegrator3","SIDString":"Foc_model_Matlab:2972:1571:6333:6307"},{"RTWName":"<S126>/Index\nVector","SIDString":"Foc_model_Matlab:2972:1571:6333:5976"},{"RTWName":"<S126>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:5978"},{"RTWName":"<S128>/In1","SIDString":"Foc_model_Matlab:2972:1571:6333:5980"},{"RTWName":"<S128>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:5981"},{"RTWName":"<S128>/Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:5982"},{"RTWName":"<S128>/Index\nVector","SIDString":"Foc_model_Matlab:2972:1571:6333:5983"},{"RTWName":"<S128>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:5984"},{"RTWName":"<S128>/Out1","SIDString":"Foc_model_Matlab:2972:1571:6333:5985"},{"RTWName":"<S129>/In1","SIDString":"Foc_model_Matlab:2972:1571:6333:5988"},{"RTWName":"<S129>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:5989"},{"RTWName":"<S129>/Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:5990"},{"RTWName":"<S129>/Constant2","SIDString":"Foc_model_Matlab:2972:1571:6333:5991"},{"RTWName":"<S129>/Index\nVector","SIDString":"Foc_model_Matlab:2972:1571:6333:5992"},{"RTWName":"<S129>/Index\nVector2","SIDString":"Foc_model_Matlab:2972:1571:6333:5993"},{"RTWName":"<S129>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:5994"},{"RTWName":"<S129>/Out1","SIDString":"Foc_model_Matlab:2972:1571:6333:5995"},{"RTWName":"<S130>/In1","SIDString":"Foc_model_Matlab:2972:1571:6333:5998"},{"RTWName":"<S130>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:5999"},{"RTWName":"<S130>/Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:6000"},{"RTWName":"<S130>/Constant2","SIDString":"Foc_model_Matlab:2972:1571:6333:6001"},{"RTWName":"<S130>/Index\nVector","SIDString":"Foc_model_Matlab:2972:1571:6333:6002"},{"RTWName":"<S130>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:6003"},{"RTWName":"<S130>/Out1","SIDString":"Foc_model_Matlab:2972:1571:6333:6004"},{"RTWName":"<S126>/IdSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:6006"},{"RTWName":"<S127>/RotorElecSpd","SIDString":"Foc_model_Matlab:2972:1571:6333:6008"},{"RTWName":"<S127>/VqSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:6009"},{"RTWName":"<S127>/IdSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:6010"},{"RTWName":"<S127>/Add","SIDString":"Foc_model_Matlab:2972:1571:6333:6011"},{"RTWName":"<S127>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:6012"},{"RTWName":"<S127>/Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:6013"},{"RTWName":"<S127>/Discrete-Time\nIntegrator3","SIDString":"Foc_model_Matlab:2972:1571:6333:6308"},{"RTWName":"<S127>/Index\nVector","SIDString":"Foc_model_Matlab:2972:1571:6333:6014"},{"RTWName":"<S127>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:6016"},{"RTWName":"<S131>/In1","SIDString":"Foc_model_Matlab:2972:1571:6333:6018"},{"RTWName":"<S131>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:6019"},{"RTWName":"<S131>/Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:6020"},{"RTWName":"<S131>/Index\nVector","SIDString":"Foc_model_Matlab:2972:1571:6333:6021"},{"RTWName":"<S131>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:6022"},{"RTWName":"<S131>/Out1","SIDString":"Foc_model_Matlab:2972:1571:6333:6023"},{"RTWName":"<S132>/In1","SIDString":"Foc_model_Matlab:2972:1571:6333:6026"},{"RTWName":"<S132>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:6027"},{"RTWName":"<S132>/Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:6028"},{"RTWName":"<S132>/Constant2","SIDString":"Foc_model_Matlab:2972:1571:6333:6029"},{"RTWName":"<S132>/Index\nVector","SIDString":"Foc_model_Matlab:2972:1571:6333:6030"},{"RTWName":"<S132>/Index\nVector1","SIDString":"Foc_model_Matlab:2972:1571:6333:6031"},{"RTWName":"<S132>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:6032"},{"RTWName":"<S132>/Out1","SIDString":"Foc_model_Matlab:2972:1571:6333:6033"},{"RTWName":"<S133>/In1","SIDString":"Foc_model_Matlab:2972:1571:6333:6036"},{"RTWName":"<S133>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:6037"},{"RTWName":"<S133>/Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:6038"},{"RTWName":"<S133>/Constant2","SIDString":"Foc_model_Matlab:2972:1571:6333:6039"},{"RTWName":"<S133>/Index\nVector","SIDString":"Foc_model_Matlab:2972:1571:6333:6040"},{"RTWName":"<S133>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:6041"},{"RTWName":"<S133>/Out1","SIDString":"Foc_model_Matlab:2972:1571:6333:6042"},{"RTWName":"<S134>/In1","SIDString":"Foc_model_Matlab:2972:1571:6333:6045"},{"RTWName":"<S134>/Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:6046"},{"RTWName":"<S134>/Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:6047"},{"RTWName":"<S134>/Constant2","SIDString":"Foc_model_Matlab:2972:1571:6333:6048"},{"RTWName":"<S134>/Index\nVector","SIDString":"Foc_model_Matlab:2972:1571:6333:6049"},{"RTWName":"<S134>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:6050"},{"RTWName":"<S134>/Out1","SIDString":"Foc_model_Matlab:2972:1571:6333:6051"},{"RTWName":"<S127>/IqSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:6053"},{"RTWName":"<S123>/IdSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:6054"},{"RTWName":"<S123>/IqSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:6055"},{"RTWName":"<S124>/Alpha","SIDString":"Foc_model_Matlab:2972:1571:6333:6057"},{"RTWName":"<S124>/Beta","SIDString":"Foc_model_Matlab:2972:1571:6333:6058"},{"RTWName":"<S124>/SinTheta","SIDString":"Foc_model_Matlab:2972:1571:6333:6059"},{"RTWName":"<S124>/CosTheta","SIDString":"Foc_model_Matlab:2972:1571:6333:6060"},{"RTWName":"<S124>/Add","SIDString":"Foc_model_Matlab:2972:1571:6333:6061"},{"RTWName":"<S124>/Add1","SIDString":"Foc_model_Matlab:2972:1571:6333:6062"},{"RTWName":"<S124>/Alpha1","SIDString":"Foc_model_Matlab:2972:1571:6333:6063"},{"RTWName":"<S124>/Beta1","SIDString":"Foc_model_Matlab:2972:1571:6333:6064"},{"RTWName":"<S124>/CosTheta1","SIDString":"Foc_model_Matlab:2972:1571:6333:6065"},{"RTWName":"<S124>/Product","SIDString":"Foc_model_Matlab:2972:1571:6333:6066"},{"RTWName":"<S124>/Product1","SIDString":"Foc_model_Matlab:2972:1571:6333:6067"},{"RTWName":"<S124>/Product2","SIDString":"Foc_model_Matlab:2972:1571:6333:6068"},{"RTWName":"<S124>/Product3","SIDString":"Foc_model_Matlab:2972:1571:6333:6069"},{"RTWName":"<S124>/SineTheta1","SIDString":"Foc_model_Matlab:2972:1571:6333:6070"},{"RTWName":"<S124>/DSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:6071"},{"RTWName":"<S124>/QSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:6072"},{"RTWName":"<S110>/sine_cosine","SIDString":"Foc_model_Matlab:2972:1571:6333:6073"},{"RTWName":"<S110>/VdSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:6074"},{"RTWName":"<S110>/VqSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:6075"},{"RTWName":"<S110>/IaSta","SIDString":"Foc_model_Matlab:2972:1571:6333:6076"},{"RTWName":"<S110>/IbSta","SIDString":"Foc_model_Matlab:2972:1571:6333:6077"},{"RTWName":"<S110>/IcSta","SIDString":"Foc_model_Matlab:2972:1571:6333:6078"},{"RTWName":"<S110>/IdSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:6079"},{"RTWName":"<S110>/IqSyn","SIDString":"Foc_model_Matlab:2972:1571:6333:6080"},{"RTWName":"<S110>/MotorTrq","SIDString":"Foc_model_Matlab:2972:1571:6333:6081"},{"RTWName":"<S107>/Vector\nConcatenate","SIDString":"Foc_model_Matlab:2972:1571:6333:6370"},{"RTWName":"<S107>/Info","SIDString":"Foc_model_Matlab:2972:1571:6333:6082"},{"RTWName":"<S107>/PhaseCurr","SIDString":"Foc_model_Matlab:2972:1571:6333:6371"},{"RTWName":"<S107>/MtrSpd","SIDString":"Foc_model_Matlab:2972:1571:6333:6372"},{"RTWName":"<S106>/Info","SIDString":"Foc_model_Matlab:2972:1571:6323"},{"RTWName":"<S106>/PhaseCurr","SIDString":"Foc_model_Matlab:2972:1571:6379"},{"RTWName":"<S106>/MtrSpd","SIDString":"Foc_model_Matlab:2972:1571:6380"},{"RTWName":"<S104>/Info","SIDString":"Foc_model_Matlab:2972:1438"},{"RTWName":"<S104>/PhaseCurr","SIDString":"Foc_model_Matlab:2972:1557"},{"RTWName":"<S104>/MtrSpd","SIDString":"Foc_model_Matlab:2972:1566"},{"RTWName":"<S4294967295>/Terminator","SIDString":"Foc_model_Matlab:2973"},{"RTWName":"<S4294967295>/Iab_fb_Sim","SIDString":"Foc_model_Matlab:2974"},{"RTWName":"<S4294967295>/Pos_fb_Sim","SIDString":"Foc_model_Matlab:2975"},{"RTWName":"<S5>/Variant Sink","SIDString":"Foc_model_Matlab:2976"},{"RTWName":"<S5>/Variant Source","SIDString":"Foc_model_Matlab:2977"},{"RTWName":"<S5>/Variant Source1","SIDString":"Foc_model_Matlab:2978"},{"RTWName":"<S5>/Iab_Sim","SIDString":"Foc_model_Matlab:2979"},{"RTWName":"<S5>/Pos_Sim","SIDString":"Foc_model_Matlab:2980"},{"RTWName":"<Root>/MBD_S32K1xx_Config_Information","SIDString":"Foc_model_Matlab:621"},{"RTWName":"<Root>/RT1","SIDString":"Foc_model_Matlab:3177"},{"RTWName":"<Root>/RT10","SIDString":"Foc_model_Matlab:2442"},{"RTWName":"<Root>/RT11","SIDString":"Foc_model_Matlab:2443"},{"RTWName":"<Root>/RT2","SIDString":"Foc_model_Matlab:2444"},{"RTWName":"<Root>/RT8","SIDString":"Foc_model_Matlab:2981"},{"RTWName":"<Root>/RT9","SIDString":"Foc_model_Matlab:2447"},{"RTWName":"<S7>/function","SIDString":"Foc_model_Matlab:3298"},{"RTWName":"<S150>/Data Store\nRead2","SIDString":"Foc_model_Matlab:2997"},{"RTWName":"<S150>/Data Store\nRead3","SIDString":"Foc_model_Matlab:2998"},{"RTWName":"<S150>/Data Type Conversion5","SIDString":"Foc_model_Matlab:2462"},{"RTWName":"<S150>/Mux1","SIDString":"Foc_model_Matlab:2465"},{"RTWName":"<S150>/rpm2PU","SIDString":"Foc_model_Matlab:2468"},{"RTWName":"<S150>/Data","SIDString":"Foc_model_Matlab:2469"},{"RTWName":"<S7>/Data Store\nWrite","SIDString":"Foc_model_Matlab:2470"},{"RTWName":"<S7>/Data Type Conversion3","SIDString":"Foc_model_Matlab:2472"},{"RTWName":"<S7>/Demux","SIDString":"Foc_model_Matlab:2478"},{"RTWName":"<S4294967295>/Cast To Single1","SIDString":"Foc_model_Matlab:3723"},{"RTWName":"<S4294967295>/Manual Switch","SIDString":"Foc_model_Matlab:4860"},{"RTWName":"<S4294967295>/Mux2","SIDString":"Foc_model_Matlab:2489"},{"RTWName":"<S136>/Demux","SIDString":"Foc_model_Matlab:3724:1"},{"RTWName":"<S136>/FromWs","SIDString":"Foc_model_Matlab:3724:2"},{"RTWName":"<S136>/Signal 1","SIDString":"Foc_model_Matlab:3724:3"},{"RTWName":"<S4294967295>/Speed_Ref_Final\n(rpm)1","SIDString":"Foc_model_Matlab:2492"},{"RTWName":"<S4294967295>/Speed_Ref_Init\n(rpm)1","SIDString":"Foc_model_Matlab:3033"},{"RTWName":"<S4294967295>/Data","SIDString":"Foc_model_Matlab:2497"},{"RTWName":"<S7>/Variant Source","SIDString":"Foc_model_Matlab:2498"},{"RTWName":"<S7>/Desired\nSpeed","SIDString":"Foc_model_Matlab:2499"},{"RTWName":"<S8>/Speed_Ref_PU","SIDString":"Foc_model_Matlab:2501"},{"RTWName":"<S8>/Speed_Meas_PU","SIDString":"Foc_model_Matlab:2502"},{"RTWName":"<S151>/N_ref","SIDString":"Foc_model_Matlab:2506"},{"RTWName":"<S151>/N_fb","SIDString":"Foc_model_Matlab:2507"},{"RTWName":"<S151>/Cast To Single","SIDString":"Foc_model_Matlab:4887"},{"RTWName":"<S151>/Cast To Single1","SIDString":"Foc_model_Matlab:4888"},{"RTWName":"<S151>/Cast To Single2","SIDString":"Foc_model_Matlab:4889"},{"RTWName":"<S151>/Cast To Single3","SIDString":"Foc_model_Matlab:4890"},{"RTWName":"<S151>/Constant","SIDString":"Foc_model_Matlab:3586"},{"RTWName":"<S151>/Constant10","SIDString":"Foc_model_Matlab:3742"},{"RTWName":"<S151>/Constant8","SIDString":"Foc_model_Matlab:3740"},{"RTWName":"<S151>/Constant9","SIDString":"Foc_model_Matlab:3741"},{"RTWName":"<S151>/Gain","SIDString":"Foc_model_Matlab:4861"},{"RTWName":"<S151>/Gain1","SIDString":"Foc_model_Matlab:4863"},{"RTWName":"<S151>/Gain2","SIDString":"Foc_model_Matlab:4864"},{"RTWName":"<S151>/Gain3","SIDString":"Foc_model_Matlab:4878"},{"RTWName":"<S151>/Gain4","SIDString":"Foc_model_Matlab:4879"},{"RTWName":"<S151>/Gain6","SIDString":"Foc_model_Matlab:4877"},{"RTWName":"<S153>:1","SIDString":"Foc_model_Matlab:3730:1"},{"RTWName":"<S154>/reset","SIDString":"Foc_model_Matlab:4886"},{"RTWName":"<S154>/ref","SIDString":"Foc_model_Matlab:4843"},{"RTWName":"<S154>/fb","SIDString":"Foc_model_Matlab:4844"},{"RTWName":"<S156>/U","SIDString":"Foc_model_Matlab:4201:1"},{"RTWName":"<S156>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:4201:2"},{"RTWName":"<S156>/Diff","SIDString":"Foc_model_Matlab:4201:3"},{"RTWName":"<S156>/TSamp","SIDString":"Foc_model_Matlab:4201:4"},{"RTWName":"<S156>/UD","SIDString":"Foc_model_Matlab:4201:5"},{"RTWName":"<S156>/Y","SIDString":"Foc_model_Matlab:4201:6"},{"RTWName":"<S154>/Discrete-Time\nIntegrator","SIDString":"Foc_model_Matlab:4194"},{"RTWName":"<S154>/Gain","SIDString":"Foc_model_Matlab:4857"},{"RTWName":"<S154>/Gain1","SIDString":"Foc_model_Matlab:4858"},{"RTWName":"<S154>/Sum","SIDString":"Foc_model_Matlab:2514"},{"RTWName":"<S154>/To Workspace","SIDString":"Foc_model_Matlab:3639"},{"RTWName":"<S154>/e_we","SIDString":"Foc_model_Matlab:4845"},{"RTWName":"<S154>/int_e_we","SIDString":"Foc_model_Matlab:4846"},{"RTWName":"<S154>/der_we_ref","SIDString":"Foc_model_Matlab:4847"},{"RTWName":"<S154>/we_fb","SIDString":"Foc_model_Matlab:4859"},{"RTWName":"<S155>/Constant1","SIDString":"Foc_model_Matlab:3779"},{"RTWName":"<S155>/Constant12","SIDString":"Foc_model_Matlab:3744"},{"RTWName":"<S155>/Constant13","SIDString":"Foc_model_Matlab:3745"},{"RTWName":"<S155>/Data Store\nRead2","SIDString":"Foc_model_Matlab:3816"},{"RTWName":"<S155>/Data Store\nRead3","SIDString":"Foc_model_Matlab:3818"},{"RTWName":"<S155>/Data Store\nRead4","SIDString":"Foc_model_Matlab:3819"},{"RTWName":"<S155>/Mux","SIDString":"Foc_model_Matlab:3825"},{"RTWName":"<S155>/Mux1","SIDString":"Foc_model_Matlab:3827"},{"RTWName":"<S155>/Variant Source3","SIDString":"Foc_model_Matlab:3823"},{"RTWName":"<S155>/Out1","SIDString":"Foc_model_Matlab:4850"},{"RTWName":"<S151>/Scope","SIDString":"Foc_model_Matlab:4832"},{"RTWName":"<S151>/Unit Delay","SIDString":"Foc_model_Matlab:4893"},{"RTWName":"<S151>/Iq_ref","SIDString":"Foc_model_Matlab:2515"},{"RTWName":"<S8>/FOCProfiler","SIDString":"Foc_model_Matlab:3579"},{"RTWName":"<S152>/Speed_Ref_In","SIDString":"Foc_model_Matlab:2517"},{"RTWName":"<S152>/Speed_Ref_Open","SIDString":"Foc_model_Matlab:2518"},{"RTWName":"<S152>/Data Store Read1","SIDString":"Foc_model_Matlab:2519"},{"RTWName":"<S152>/Data Type Conversion","SIDString":"Foc_model_Matlab:3086"},{"RTWName":"<S4294967295>/In1","SIDString":"Foc_model_Matlab:2520:370"},{"RTWName":"<S4294967295>/Data Type\nDuplicate","SIDString":"Foc_model_Matlab:2520:485"},{"RTWName":"<S4294967295>/Demux","SIDString":"Foc_model_Matlab:2520:496"},{"RTWName":"<S4294967295>/FilterConstant","SIDString":"Foc_model_Matlab:2520:478"},{"RTWName":"<S241>/x","SIDString":"Foc_model_Matlab:2520:348"},{"RTWName":"<S241>/A","SIDString":"Foc_model_Matlab:2520:392"},{"RTWName":"<S241>/OneMinusA","SIDString":"Foc_model_Matlab:2520:486"},{"RTWName":"<S242>/x","SIDString":"Foc_model_Matlab:2520:350"},{"RTWName":"<S242>/A","SIDString":"Foc_model_Matlab:2520:394"},{"RTWName":"<S242>/OneMinusA","SIDString":"Foc_model_Matlab:2520:489"},{"RTWName":"<S242>/IIR Low Pass Filter","SIDString":"Foc_model_Matlab:2520:395"},{"RTWName":"<S242>/Sum","SIDString":"Foc_model_Matlab:2520:352"},{"RTWName":"<S242>/y","SIDString":"Foc_model_Matlab:2520:353"},{"RTWName":"<S243>/x","SIDString":"Foc_model_Matlab:2520:355"},{"RTWName":"<S243>/A","SIDString":"Foc_model_Matlab:2520:393"},{"RTWName":"<S243>/OneMinusA","SIDString":"Foc_model_Matlab:2520:487"},{"RTWName":"<S244>/Input","SIDString":"Foc_model_Matlab:2520:359"},{"RTWName":"<S244>/A","SIDString":"Foc_model_Matlab:2520:396"},{"RTWName":"<S244>/OneMinusA","SIDString":"Foc_model_Matlab:2520:488"},{"RTWName":"<S244>/Add1","SIDString":"Foc_model_Matlab:2520:360"},{"RTWName":"<S244>/Product","SIDString":"Foc_model_Matlab:2520:364"},{"RTWName":"<S244>/Product1","SIDString":"Foc_model_Matlab:2520:365"},{"RTWName":"<S244>/Unit Delay","SIDString":"Foc_model_Matlab:2520:366"},{"RTWName":"<S244>/Output","SIDString":"Foc_model_Matlab:2520:367"},{"RTWName":"<S243>/y","SIDString":"Foc_model_Matlab:2520:357"},{"RTWName":"<S241>/y","SIDString":"Foc_model_Matlab:2520:358"},{"RTWName":"<S4294967295>/Mux","SIDString":"Foc_model_Matlab:2520:494"},{"RTWName":"<S4294967295>/Mux1","SIDString":"Foc_model_Matlab:2520:495"},{"RTWName":"<S4294967295>/One","SIDString":"Foc_model_Matlab:2520:479"},{"RTWName":"<S4294967295>/OneMinusFilterConstant","SIDString":"Foc_model_Matlab:2520:480"},{"RTWName":"<S4294967295>/Sum","SIDString":"Foc_model_Matlab:2520:481"},{"RTWName":"<S4294967295>/Switch1","SIDString":"Foc_model_Matlab:2520:483"},{"RTWName":"<S4294967295>/UseInputPort","SIDString":"Foc_model_Matlab:2520:484"},{"RTWName":"<S4294967295>/a","SIDString":"Foc_model_Matlab:2520:844"},{"RTWName":"<S4294967295>/Out1","SIDString":"Foc_model_Matlab:2520:381"},{"RTWName":"<S152>/Switch","SIDString":"Foc_model_Matlab:2521"},{"RTWName":"<S152>/Speed_Ref_PU","SIDString":"Foc_model_Matlab:2522"},{"RTWName":"<S8>/IqRef_PU","SIDString":"Foc_model_Matlab:2523"},{"RTWName":"<Root>/Variant Source1","SIDString":"Foc_model_Matlab:1084"},{"RTWName":"<Root>/ ","SIDString":"Foc_model_Matlab:1091"},{"RTWName":"<Root>/CurrentControl","SIDString":"Foc_model_Matlab:2552"},{"RTWName":"<S1>/Control_System","SIDString":"Foc_model_Matlab:2558"},{"RTWName":"<S9>/Clarke Transform","SIDString":"Foc_model_Matlab:2562"},{"RTWName":"<S14>/Three phase input","SIDString":"Foc_model_Matlab:2562:628"},{"RTWName":"<S14>/Two phase input","SIDString":"Foc_model_Matlab:2562:655"},{"RTWName":"<S20>/Two phase CRL wrap","SIDString":"Foc_model_Matlab:2562:627"},{"RTWName":"<S9>/Current_Controllers","SIDString":"Foc_model_Matlab:2563"},{"RTWName":"<S15>/Controller_Id","SIDString":"Foc_model_Matlab:2570"},{"RTWName":"<S22>/MATLAB Function2","SIDString":"Foc_model_Matlab:4203"},{"RTWName":"<S22>/Parametri_design","SIDString":"Foc_model_Matlab:4853"},{"RTWName":"<S15>/Controller_Iq","SIDString":"Foc_model_Matlab:2581"},{"RTWName":"<S23>/MATLAB Function2","SIDString":"Foc_model_Matlab:4229"},{"RTWName":"<S23>/Parametri_design","SIDString":"Foc_model_Matlab:4851"},{"RTWName":"<S15>/DQ Limiter","SIDString":"Foc_model_Matlab:2567"},{"RTWName":"<S24>/D-Q Equivalence","SIDString":"Foc_model_Matlab:2567:1302"},{"RTWName":"<S31>/Limiter","SIDString":"Foc_model_Matlab:2567:1547"},{"RTWName":"<S31>/Passthrough","SIDString":"Foc_model_Matlab:2567:1553"},{"RTWName":"<S24>/D/Q Axis Priority","SIDString":"Foc_model_Matlab:2567:1363"},{"RTWName":"<S32>/Compare\nTo Constant","SIDString":"Foc_model_Matlab:2567:1422"},{"RTWName":"<S32>/Compare\nTo Constant1","SIDString":"Foc_model_Matlab:2567:1423"},{"RTWName":"<S32>/flipInputs","SIDString":"Foc_model_Matlab:2567:1414"},{"RTWName":"<S32>/flipInputs1","SIDString":"Foc_model_Matlab:2567:1426"},{"RTWName":"<S32>/limiter","SIDString":"Foc_model_Matlab:2567:1451"},{"RTWName":"<S41>/limitRef1","SIDString":"Foc_model_Matlab:2567:1406"},{"RTWName":"<S41>/limitRef2","SIDString":"Foc_model_Matlab:2567:1583"},{"RTWName":"<S41>/passThrough","SIDString":"Foc_model_Matlab:2567:1579"},{"RTWName":"<S24>/Inport/Dialog Selection","SIDString":"Foc_model_Matlab:2567:1515"},{"RTWName":"<S24>/Magnitude_calc","SIDString":"Foc_model_Matlab:2567:1443"},{"RTWName":"<S15>/Nonlinear feedforwar compensation","SIDString":"Foc_model_Matlab:3626"},{"RTWName":"<S15>/Nonlinear feedforwar compensation1","SIDString":"Foc_model_Matlab:3622"},{"RTWName":"<S9>/Inverse Park Transform","SIDString":"Foc_model_Matlab:2601"},{"RTWName":"<S16>/Sine Cosine","SIDString":"Foc_model_Matlab:2601:850"},{"RTWName":"<S4294967295>/SinCos_Subsystem","SIDString":"Foc_model_Matlab:2601:850:516"},{"RTWName":"<S4294967295>/Sine-Cosine Lookup","SIDString":"Foc_model_Matlab:2601:850:76"},{"RTWName":"<S52>/Interpolation","SIDString":"Foc_model_Matlab:2601:850:76:705"},{"RTWName":"<S52>/WrapUp","SIDString":"Foc_model_Matlab:2601:850:76:667"},{"RTWName":"<S55>/If Action\nSubsystem","SIDString":"Foc_model_Matlab:2601:850:76:684"},{"RTWName":"<S55>/If Action\nSubsystem1","SIDString":"Foc_model_Matlab:2601:850:76:688"},{"RTWName":"<S52>/datatype","SIDString":"Foc_model_Matlab:2601:850:76:713"},{"RTWName":"<S56>/datatype backpropogation","SIDString":"Foc_model_Matlab:2601:850:76:715"},{"RTWName":"<S56>/datatype no change","SIDString":"Foc_model_Matlab:2601:850:76:718"},{"RTWName":"<S4294967295>/Trig Fcn IQN","SIDString":"Foc_model_Matlab:2601:850:528"},{"RTWName":"<S16>/Three inputs","SIDString":"Foc_model_Matlab:2601:904"},{"RTWName":"<S4294967295>/Two inputs CRL","SIDString":"Foc_model_Matlab:2601:984"},{"RTWName":"<S61>/Switch_Axis","SIDString":"Foc_model_Matlab:2601:991"},{"RTWName":"<S16>/Two inputs CRL","SIDString":"Foc_model_Matlab:2601:778"},{"RTWName":"<S45>/Switch_Axis","SIDString":"Foc_model_Matlab:2601:748"},{"RTWName":"<S9>/Park Transform","SIDString":"Foc_model_Matlab:2603"},{"RTWName":"<S17>/Sine Cosine","SIDString":"Foc_model_Matlab:2603:529"},{"RTWName":"<S4294967295>/Sine-Cosine Lookup","SIDString":"Foc_model_Matlab:2603:559"},{"RTWName":"<S67>/SinCos_Subsystem","SIDString":"Foc_model_Matlab:2603:559:516"},{"RTWName":"<S67>/Sine-Cosine Lookup","SIDString":"Foc_model_Matlab:2603:559:76"},{"RTWName":"<S69>/Interpolation","SIDString":"Foc_model_Matlab:2603:559:76:705"},{"RTWName":"<S69>/WrapUp","SIDString":"Foc_model_Matlab:2603:559:76:667"},{"RTWName":"<S72>/If Action\nSubsystem","SIDString":"Foc_model_Matlab:2603:559:76:684"},{"RTWName":"<S72>/If Action\nSubsystem1","SIDString":"Foc_model_Matlab:2603:559:76:688"},{"RTWName":"<S69>/datatype","SIDString":"Foc_model_Matlab:2603:559:76:713"},{"RTWName":"<S73>/datatype backpropogation","SIDString":"Foc_model_Matlab:2603:559:76:715"},{"RTWName":"<S73>/datatype no change","SIDString":"Foc_model_Matlab:2603:559:76:718"},{"RTWName":"<S67>/Trig Fcn IQN","SIDString":"Foc_model_Matlab:2603:559:528"},{"RTWName":"<S17>/Three inputs","SIDString":"Foc_model_Matlab:2603:530"},{"RTWName":"<S4294967295>/Two inputs CRL","SIDString":"Foc_model_Matlab:2603:707"},{"RTWName":"<S78>/Switch_Axis","SIDString":"Foc_model_Matlab:2603:714"},{"RTWName":"<S17>/Two inputs CRL","SIDString":"Foc_model_Matlab:2603:522"},{"RTWName":"<S47>/Switch_Axis","SIDString":"Foc_model_Matlab:2603:507"},{"RTWName":"<S9>/Sine-Cosine Lookup","SIDString":"Foc_model_Matlab:2604"},{"RTWName":"<S18>/SinCos_Subsystem","SIDString":"Foc_model_Matlab:2604:516"},{"RTWName":"<S18>/Sine-Cosine Lookup","SIDString":"Foc_model_Matlab:2604:76"},{"RTWName":"<S49>/Interpolation","SIDString":"Foc_model_Matlab:2604:76:705"},{"RTWName":"<S49>/WrapUp","SIDString":"Foc_model_Matlab:2604:76:667"},{"RTWName":"<S51>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2604:76:692"},{"RTWName":"<S51>/If Action\nSubsystem","SIDString":"Foc_model_Matlab:2604:76:684"},{"RTWName":"<S51>/If Action\nSubsystem1","SIDString":"Foc_model_Matlab:2604:76:688"},{"RTWName":"<S49>/datatype","SIDString":"Foc_model_Matlab:2604:76:713"},{"RTWName":"<S52>/datatype backpropogation","SIDString":"Foc_model_Matlab:2604:76:715"},{"RTWName":"<S52>/datatype no change","SIDString":"Foc_model_Matlab:2604:76:718"},{"RTWName":"<S18>/Trig Fcn IQN","SIDString":"Foc_model_Matlab:2604:528"},{"RTWName":"<S9>/Space Vector Generator","SIDString":"Foc_model_Matlab:2605"},{"RTWName":"<S19>/Modulation method","SIDString":"Foc_model_Matlab:2605:869"},{"RTWName":"<S57>/30 DPWM","SIDString":"Foc_model_Matlab:2605:1211"},{"RTWName":"<S4294967295>/Subsystem","SIDString":"Foc_model_Matlab:2605:1611"},{"RTWName":"<S102>/a+ c-","SIDString":"Foc_model_Matlab:2605:1221"},{"RTWName":"<S102>/a- c+","SIDString":"Foc_model_Matlab:2605:1235"},{"RTWName":"<S102>/b+ a-","SIDString":"Foc_model_Matlab:2605:1249"},{"RTWName":"<S102>/c+ b-","SIDString":"Foc_model_Matlab:2605:1263"},{"RTWName":"<S102>/c- a+","SIDString":"Foc_model_Matlab:2605:1277"},{"RTWName":"<S102>/c- b+","SIDString":"Foc_model_Matlab:2605:1291"},{"RTWName":"<S57>/60 DPWM","SIDString":"Foc_model_Matlab:2605:1306"},{"RTWName":"<S4294967295>/60 DPWM","SIDString":"Foc_model_Matlab:2605:1591"},{"RTWName":"<S109>/a+ c-","SIDString":"Foc_model_Matlab:2605:1442"},{"RTWName":"<S109>/a- c+","SIDString":"Foc_model_Matlab:2605:1491"},{"RTWName":"<S109>/b+ a-","SIDString":"Foc_model_Matlab:2605:1472"},{"RTWName":"<S109>/b- a+","SIDString":"Foc_model_Matlab:2605:1529"},{"RTWName":"<S109>/c+ b-","SIDString":"Foc_model_Matlab:2605:1510"},{"RTWName":"<S109>/c- b+","SIDString":"Foc_model_Matlab:2605:1450"},{"RTWName":"<S57>/60 DPWM (+30 degree shift)","SIDString":"Foc_model_Matlab:2605:1324"},{"RTWName":"<S4294967295>/60 DPWM (+30 degree shift)","SIDString":"Foc_model_Matlab:2605:1560"},{"RTWName":"<S57>/60 DPWM (-30 degree shift)","SIDString":"Foc_model_Matlab:2605:1342"},{"RTWName":"<S4294967295>/60 DPWM (-30 degree shift)\n","SIDString":"Foc_model_Matlab:2605:1571"},{"RTWName":"<S57>/Flat high 120 deg DD","SIDString":"Foc_model_Matlab:2605:1360"},{"RTWName":"<S4294967295>/Flat high 120 deg DD","SIDString":"Foc_model_Matlab:2605:1581"},{"RTWName":"<S57>/Flat low 120 deg DD","SIDString":"Foc_model_Matlab:2605:1378"},{"RTWName":"<S4294967295>/Flat low 120 deg DD","SIDString":"Foc_model_Matlab:2605:1601"},{"RTWName":"<S57>/SVPWM","SIDString":"Foc_model_Matlab:2605:1396"},{"RTWName":"<S59>/Half(Vmin+Vmax)","SIDString":"Foc_model_Matlab:2605:1398"},{"RTWName":"<S57>/Sine PWM","SIDString":"Foc_model_Matlab:2605:1413"},{"RTWName":"<S19>/Voltage Input","SIDString":"Foc_model_Matlab:2605:844"},{"RTWName":"<S58>/Vabc","SIDString":"Foc_model_Matlab:2605:1197"},{"RTWName":"<S58>/Valphabeta","SIDString":"Foc_model_Matlab:2605:1203"},{"RTWName":"<S61>/Inverse Clarke Transform","SIDString":"Foc_model_Matlab:2605:1632"},{"RTWName":"<S62>/Three phase input","SIDString":"Foc_model_Matlab:2605:1632:533"},{"RTWName":"<S62>/Two phase input","SIDString":"Foc_model_Matlab:2605:1632:506"},{"RTWName":"<S1>/Input Scaling","SIDString":"Foc_model_Matlab:2654"},{"RTWName":"<S10>/Read_Sensor (codegen)","SIDString":"Foc_model_Matlab:2658"},{"RTWName":"<S64>/Calculate Position from Hall","SIDString":"Foc_model_Matlab:2662"},{"RTWName":"<S65>/Atomic Hall Reading","SIDString":"Foc_model_Matlab:2663"},{"RTWName":"<S67>/Hall Read","SIDString":"Foc_model_Matlab:3022"},{"RTWName":"<S70>/Bit Shift","SIDString":"Foc_model_Matlab:3024"},{"RTWName":"<S71>/bit_shift","SIDString":"Foc_model_Matlab:3024:481"},{"RTWName":"<S70>/Bit Shift1","SIDString":"Foc_model_Matlab:3025"},{"RTWName":"<S72>/bit_shift","SIDString":"Foc_model_Matlab:3025:481"},{"RTWName":"<S65>/Hall Speed and Position","SIDString":"Foc_model_Matlab:2687"},{"RTWName":"<S68>/ExtrapolationOrder","SIDString":"Foc_model_Matlab:2687:368"},{"RTWName":"<S68>/Software Watchdog Timer","SIDString":"Foc_model_Matlab:2687:431"},{"RTWName":"<S76>/Compare\nTo Zero","SIDString":"Foc_model_Matlab:2687:431:340"},{"RTWName":"<S68>/Speed and direction are not valid\nPosition will be set to the middle of the Hall quadrant","SIDString":"Foc_model_Matlab:2687:168"},{"RTWName":"<S77>/independent Direction","SIDString":"Foc_model_Matlab:2687:174"},{"RTWName":"<S81>/Hall Value of 1","SIDString":"Foc_model_Matlab:2687:176"},{"RTWName":"<S81>/Hall Value of 2","SIDString":"Foc_model_Matlab:2687:180"},{"RTWName":"<S81>/Hall Value of 3","SIDString":"Foc_model_Matlab:2687:184"},{"RTWName":"<S81>/Hall Value of 4","SIDString":"Foc_model_Matlab:2687:188"},{"RTWName":"<S81>/Hall Value of 5","SIDString":"Foc_model_Matlab:2687:192"},{"RTWName":"<S81>/Hall Value of 6","SIDString":"Foc_model_Matlab:2687:196"},{"RTWName":"<S81>/Hall Value of 7","SIDString":"Foc_model_Matlab:2687:440"},{"RTWName":"<S68>/Speed and direction are valid\nUse speed to extrapolate position","SIDString":"Foc_model_Matlab:2687:205"},{"RTWName":"<S78>/If Action\nSubsystem","SIDString":"Foc_model_Matlab:2687:518"},{"RTWName":"<S78>/If Action\nSubsystem1","SIDString":"Foc_model_Matlab:2687:522"},{"RTWName":"<S78>/Subsystem1","SIDString":"Foc_model_Matlab:2687:216"},{"RTWName":"<S91>/+ve Direction","SIDString":"Foc_model_Matlab:2687:222"},{"RTWName":"<S92>/Hall Value of 1","SIDString":"Foc_model_Matlab:2687:226"},{"RTWName":"<S92>/Hall Value of 2","SIDString":"Foc_model_Matlab:2687:230"},{"RTWName":"<S92>/Hall Value of 3","SIDString":"Foc_model_Matlab:2687:234"},{"RTWName":"<S92>/Hall Value of 4","SIDString":"Foc_model_Matlab:2687:238"},{"RTWName":"<S92>/Hall Value of 5","SIDString":"Foc_model_Matlab:2687:242"},{"RTWName":"<S92>/Hall Value of 6","SIDString":"Foc_model_Matlab:2687:246"},{"RTWName":"<S92>/Hall Value of 7","SIDString":"Foc_model_Matlab:2687:436"},{"RTWName":"<S91>/-ve Direction","SIDString":"Foc_model_Matlab:2687:254"},{"RTWName":"<S93>/Hall Value of 1","SIDString":"Foc_model_Matlab:2687:258"},{"RTWName":"<S93>/Hall Value of 2","SIDString":"Foc_model_Matlab:2687:262"},{"RTWName":"<S93>/Hall Value of 3","SIDString":"Foc_model_Matlab:2687:266"},{"RTWName":"<S93>/Hall Value of 4","SIDString":"Foc_model_Matlab:2687:270"},{"RTWName":"<S93>/Hall Value of 5","SIDString":"Foc_model_Matlab:2687:274"},{"RTWName":"<S93>/Hall Value of 6","SIDString":"Foc_model_Matlab:2687:278"},{"RTWName":"<S93>/Hall Value of 7","SIDString":"Foc_model_Matlab:2687:432"},{"RTWName":"<S91>/first_order","SIDString":"Foc_model_Matlab:2687:291"},{"RTWName":"<S91>/second_order","SIDString":"Foc_model_Matlab:2687:297"},{"RTWName":"<S68>/VaidityCheck","SIDString":"Foc_model_Matlab:2687:362"},{"RTWName":"<S65>/Mechanical to Electrical Position","SIDString":"Foc_model_Matlab:2688"},{"RTWName":"<S69>/MechToElec","SIDString":"Foc_model_Matlab:2688:871"},{"RTWName":"<S110>/fixed-point","SIDString":"Foc_model_Matlab:2688:878"},{"RTWName":"<S4294967295>/Variant Subsystem","SIDString":"Foc_model_Matlab:2688:1027"},{"RTWName":"<Root>/Dialog","SIDString":"Foc_model_Matlab:2688:1027:1030"},{"RTWName":"<Root>/Input Port","SIDString":"Foc_model_Matlab:2688:1027:1034"},{"RTWName":"<S110>/floating-point","SIDString":"Foc_model_Matlab:2688:891"},{"RTWName":"<S111>/Compensate Offset","SIDString":"Foc_model_Matlab:2688:894"},{"RTWName":"<S112>/If Action\nSubsystem","SIDString":"Foc_model_Matlab:2688:898"},{"RTWName":"<S112>/If Action\nSubsystem1","SIDString":"Foc_model_Matlab:2688:905"},{"RTWName":"<S111>/Mech To Elec","SIDString":"Foc_model_Matlab:2688:916"},{"RTWName":"<S113>/Variant Subsystem","SIDString":"Foc_model_Matlab:2688:1014"},{"RTWName":"<S116>/Dialog","SIDString":"Foc_model_Matlab:2688:1014:1016"},{"RTWName":"<S116>/Input Port","SIDString":"Foc_model_Matlab:2688:1014:1019"},{"RTWName":"<S64>/Convert ADC value to PU","SIDString":"Foc_model_Matlab:2691"},{"RTWName":"<S10>/Read_Sensor (sim)","SIDString":"Foc_model_Matlab:2731"},{"RTWName":"<S4294967295>/Convert ADC value to PU","SIDString":"Foc_model_Matlab:2756"},{"RTWName":"<S4294967295>/Subsystem","SIDString":"Foc_model_Matlab:2767"},{"RTWName":"<S66>/IIR Filter","SIDString":"Foc_model_Matlab:2769"},{"RTWName":"<S4294967295>/IIR Filter","SIDString":"Foc_model_Matlab:2769:346"},{"RTWName":"<S137>/High-pass","SIDString":"Foc_model_Matlab:2769:349"},{"RTWName":"<S137>/Low-pass","SIDString":"Foc_model_Matlab:2769:354"},{"RTWName":"<S139>/IIR Low Pass Filter","SIDString":"Foc_model_Matlab:2769:356"},{"RTWName":"<S66>/Mechanical to Electrical Position","SIDString":"Foc_model_Matlab:2770"},{"RTWName":"<S67>/MechToElec","SIDString":"Foc_model_Matlab:2770:871"},{"RTWName":"<S69>/fixed-point","SIDString":"Foc_model_Matlab:2770:878"},{"RTWName":"<S4294967295>/Variant Subsystem","SIDString":"Foc_model_Matlab:2770:1027"},{"RTWName":"<S144>/Dialog","SIDString":"Foc_model_Matlab:2770:1027:1030"},{"RTWName":"<S144>/Input Port","SIDString":"Foc_model_Matlab:2770:1027:1034"},{"RTWName":"<S69>/floating-point","SIDString":"Foc_model_Matlab:2770:891"},{"RTWName":"<S70>/Compensate Offset","SIDString":"Foc_model_Matlab:2770:894"},{"RTWName":"<S71>/If Action\nSubsystem","SIDString":"Foc_model_Matlab:2770:898"},{"RTWName":"<S71>/If Action\nSubsystem1","SIDString":"Foc_model_Matlab:2770:905"},{"RTWName":"<S70>/Mech To Elec","SIDString":"Foc_model_Matlab:2770:916"},{"RTWName":"<S72>/Variant Subsystem","SIDString":"Foc_model_Matlab:2770:1014"},{"RTWName":"<S75>/Dialog","SIDString":"Foc_model_Matlab:2770:1014:1016"},{"RTWName":"<S75>/Input Port","SIDString":"Foc_model_Matlab:2770:1014:1019"},{"RTWName":"<S66>/Speed Measurement","SIDString":"Foc_model_Matlab:2771"},{"RTWName":"<S68>/DT_Handle","SIDString":"Foc_model_Matlab:2771:150"},{"RTWName":"<S77>/fixed-point","SIDString":"Foc_model_Matlab:2771:152"},{"RTWName":"<S77>/floating-point","SIDString":"Foc_model_Matlab:2771:155"},{"RTWName":"<S1>/Inverter (Code Generation)","SIDString":"Foc_model_Matlab:2782"},{"RTWName":"<S1>/Inverter (Simulation)","SIDString":"Foc_model_Matlab:3315"},{"RTWName":"<S1>/Output Scaling","SIDString":"Foc_model_Matlab:2827"},{"RTWName":"<S1>/Sensor Driver Blocks","SIDString":"Foc_model_Matlab:3299"},{"RTWName":"<S13>/Sensor Driver Blocks (codegen)","SIDString":"Foc_model_Matlab:3300"},{"RTWName":"<S13>/Sensor Driver Blocks (sim)","SIDString":"Foc_model_Matlab:3303"},{"RTWName":"<Root>/Hall Sensor","SIDString":"Foc_model_Matlab:1051"},{"RTWName":"<S2>/CodeGen","SIDString":"Foc_model_Matlab:1925"},{"RTWName":"<S119>/Bit Shift","SIDString":"Foc_model_Matlab:1055"},{"RTWName":"<S121>/bit_shift","SIDString":"Foc_model_Matlab:1055:481"},{"RTWName":"<S119>/Bit Shift1","SIDString":"Foc_model_Matlab:1056"},{"RTWName":"<S122>/bit_shift","SIDString":"Foc_model_Matlab:1056:481"},{"RTWName":"<S2>/Hall Validity","SIDString":"Foc_model_Matlab:1071"},{"RTWName":"<S120>/Subsystem","SIDString":"Foc_model_Matlab:1071:350"},{"RTWName":"<S125>/Bad hall\n(glitch or wrong connection)","SIDString":"Foc_model_Matlab:1071:6"},{"RTWName":"<S125>/Valid Halls","SIDString":"Foc_model_Matlab:1071:64"},{"RTWName":"<S127>/If Action\nSubsystem","SIDString":"Foc_model_Matlab:1071:71"},{"RTWName":"<S127>/If Action\nSubsystem1","SIDString":"Foc_model_Matlab:1071:77"},{"RTWName":"<S127>/If Action\nSubsystem2","SIDString":"Foc_model_Matlab:1071:83"},{"RTWName":"<S127>/If Action\nSubsystem3","SIDString":"Foc_model_Matlab:1071:89"},{"RTWName":"<S127>/If Action\nSubsystem4","SIDString":"Foc_model_Matlab:1071:95"},{"RTWName":"<S127>/If Action\nSubsystem5","SIDString":"Foc_model_Matlab:1071:101"},{"RTWName":"<S127>/If Action\nSubsystem6","SIDString":"Foc_model_Matlab:1071:107"},{"RTWName":"<S127>/If Action\nSubsystem7","SIDString":"Foc_model_Matlab:1071:113"},{"RTWName":"<S127>/If Action\nSubsystem8","SIDString":"Foc_model_Matlab:1071:119"},{"RTWName":"<S127>/Switch Case Action\nSubsystem","SIDString":"Foc_model_Matlab:1071:361"},{"RTWName":"<S2>/Sim","SIDString":"Foc_model_Matlab:1923"},{"RTWName":"<Root>/HallCodeGen","SIDString":"Foc_model_Matlab:1085"},{"RTWName":"<S3>/Subsystem2","SIDString":"Foc_model_Matlab:3522"},{"RTWName":"<S138>/ADC1_IRQHandler","SIDString":"Foc_model_Matlab:3523"},{"RTWName":"<S139>/FaultDetection","SIDString":"Foc_model_Matlab:3531"},{"RTWName":"<S141>/FAILURE","SIDString":"Foc_model_Matlab:3541"},{"RTWName":"<S142>/Failed Subsystem","SIDString":"Foc_model_Matlab:3544"},{"RTWName":"<S138>/PDB1_IRQHandler","SIDString":"Foc_model_Matlab:3565"},{"RTWName":"<Root>/Hardware Initialization","SIDString":"Foc_model_Matlab:3476"},{"RTWName":"<S4>/Enable PDB and start FTM","SIDString":"Foc_model_Matlab:3482"},{"RTWName":"<S4>/FAULT","SIDString":"Foc_model_Matlab:3483"},{"RTWName":"<S4>/GD3000_interrupt","SIDString":"Foc_model_Matlab:3491"},{"RTWName":"<S4>/If Action\nSubsystem","SIDString":"Foc_model_Matlab:3499"},{"RTWName":"<S4>/enable_FTM_PDB_ADC_triggering","SIDString":"Foc_model_Matlab:3509"},{"RTWName":"<S148>/Custom code to reload the PDB value","SIDString":"Foc_model_Matlab:3511"},{"RTWName":"<Root>/Inverter and Motor - Plant Model","SIDString":"Foc_model_Matlab:2922"},{"RTWName":"<S5>/Codegeneration","SIDString":"Foc_model_Matlab:2924"},{"RTWName":"<S5>/Simulation","SIDString":"Foc_model_Matlab:2931"},{"RTWName":"<S4294967295>/Average Inverter","SIDString":"Foc_model_Matlab:2933"},{"RTWName":"<S101>/Average-Value Inverter","SIDString":"Foc_model_Matlab:2935"},{"RTWName":"<S4294967295>/Load_Profile (Torque)","SIDString":"Foc_model_Matlab:2940"},{"RTWName":"<S102>/IIR Filter","SIDString":"Foc_model_Matlab:2942"},{"RTWName":"<S4294967295>/IIR Filter","SIDString":"Foc_model_Matlab:2942:346"},{"RTWName":"<S198>/High-pass","SIDString":"Foc_model_Matlab:2942:349"},{"RTWName":"<S198>/Low-pass","SIDString":"Foc_model_Matlab:2942:354"},{"RTWName":"<S200>/IIR Low Pass Filter","SIDString":"Foc_model_Matlab:2942:356"},{"RTWName":"<S4294967295>/Sensor_Measurements","SIDString":"Foc_model_Matlab:2949"},{"RTWName":"<S4294967295>/Surface Mount PMSM","SIDString":"Foc_model_Matlab:2972"},{"RTWName":"<S104>/PMSM Torque Input Exterior Discrete","SIDString":"Foc_model_Matlab:2972:1571"},{"RTWName":"<S106>/PMSM Torque Input Core Discrete","SIDString":"Foc_model_Matlab:2972:1571:6333"},{"RTWName":"<S107>/Mechanical and Angle","SIDString":"Foc_model_Matlab:2972:1571:6333:5863"},{"RTWName":"<S108>/Int1","SIDString":"Foc_model_Matlab:2972:1571:6333:6309"},{"RTWName":"<S111>/Compare\nTo Constant","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:106"},{"RTWName":"<S111>/Compare\nTo Constant1","SIDString":"Foc_model_Matlab:2972:1571:6333:6309:107"},{"RTWName":"<S107>/Motor Units1","SIDString":"Foc_model_Matlab:2972:1571:6333:5900"},{"RTWName":"<S109>/MechToElect","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:6387"},{"RTWName":"<S109>/Power Accounting Bus Creator","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279"},{"RTWName":"<S115>/PwrNotTrnsfrd Input","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:117"},{"RTWName":"<S115>/PwrStored Input","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:119"},{"RTWName":"<S115>/PwrTrnsfrd Input","SIDString":"Foc_model_Matlab:2972:1571:6333:5900:5279:100"},{"RTWName":"<S107>/PMSM Electromagnetic","SIDString":"Foc_model_Matlab:2972:1571:6333:5901"},{"RTWName":"<S110>/Clarke Transform","SIDString":"Foc_model_Matlab:2972:1571:6333:5905"},{"RTWName":"<S110>/Inverse Clarke Transform","SIDString":"Foc_model_Matlab:2972:1571:6333:5917"},{"RTWName":"<S110>/Inverse Park Transform","SIDString":"Foc_model_Matlab:2972:1571:6333:5929"},{"RTWName":"<S110>/Machine Torque","SIDString":"Foc_model_Matlab:2972:1571:6333:5946"},{"RTWName":"<S122>/Subsystem","SIDString":"Foc_model_Matlab:2972:1571:6333:5953"},{"RTWName":"<S110>/PMSM Equivalent Circuit","SIDString":"Foc_model_Matlab:2972:1571:6333:5965"},{"RTWName":"<S123>/D Axis Stator Voltage","SIDString":"Foc_model_Matlab:2972:1571:6333:5969"},{"RTWName":"<S126>/Subsystem","SIDString":"Foc_model_Matlab:2972:1571:6333:5979"},{"RTWName":"<S126>/Subsystem1","SIDString":"Foc_model_Matlab:2972:1571:6333:5987"},{"RTWName":"<S126>/Subsystem2","SIDString":"Foc_model_Matlab:2972:1571:6333:5997"},{"RTWName":"<S123>/Q Axis Stator Voltage","SIDString":"Foc_model_Matlab:2972:1571:6333:6007"},{"RTWName":"<S127>/Subsystem","SIDString":"Foc_model_Matlab:2972:1571:6333:6017"},{"RTWName":"<S127>/Subsystem1","SIDString":"Foc_model_Matlab:2972:1571:6333:6025"},{"RTWName":"<S127>/Subsystem2","SIDString":"Foc_model_Matlab:2972:1571:6333:6035"},{"RTWName":"<S127>/Subsystem3","SIDString":"Foc_model_Matlab:2972:1571:6333:6044"},{"RTWName":"<S110>/Park Transform","SIDString":"Foc_model_Matlab:2972:1571:6333:6056"},{"RTWName":"<Root>/Model Info","SIDString":"Foc_model_Matlab:3577"},{"RTWName":"<S6>/EmptySubsystem","SIDString":"Foc_model_Matlab:3577:1"},{"RTWName":"<Root>/Serial Receive","SIDString":"Foc_model_Matlab:2452"},{"RTWName":"<S7>/Code Generation","SIDString":"Foc_model_Matlab:2454"},{"RTWName":"<S7>/Simulation","SIDString":"Foc_model_Matlab:2479"},{"RTWName":"<S4294967295>/Signal Builder","SIDString":"Foc_model_Matlab:3724"},{"RTWName":"<Root>/SpeedControl","SIDString":"Foc_model_Matlab:2500"},{"RTWName":"<S8>/Contrloller_wr","SIDString":"Foc_model_Matlab:2505"},{"RTWName":"<S151>/MATLAB Function","SIDString":"Foc_model_Matlab:3730"},{"RTWName":"<S151>/Operazioni matematiche","SIDString":"Foc_model_Matlab:4842"},{"RTWName":"<S154>/Discrete Derivative","SIDString":"Foc_model_Matlab:4201"},{"RTWName":"<S151>/Parametri_design","SIDString":"Foc_model_Matlab:4849"},{"RTWName":"<S8>/Speed_Ref_Selector","SIDString":"Foc_model_Matlab:2516"},{"RTWName":"<S152>/IIR Filter","SIDString":"Foc_model_Matlab:2520"},{"RTWName":"<S4294967295>/IIR Filter","SIDString":"Foc_model_Matlab:2520:346"},{"RTWName":"<S241>/High-pass","SIDString":"Foc_model_Matlab:2520:349"},{"RTWName":"<S241>/Low-pass","SIDString":"Foc_model_Matlab:2520:354"},{"RTWName":"<S243>/IIR Low Pass Filter","SIDString":"Foc_model_Matlab:2520:356"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};